تصميم تطبيقات كثيفة البيانات 
Translating...
      صفحة 1


      الصفحة 2


      الصفحة 3
978-1-491-90309-4[أملأ]تصميم تطبيقات كثيفة البياناتبواسطة مارتن كليبمانحقوق 
النشر © 2016 Martin Kleppmann. كل الحقوق محفوظة.طُبع في الولايات المتحدة 
الأمريكية.تم النشر بواسطة O'Reilly Media، Inc.، 1005 Gravenstein Highway North، 
Sebastopol، CA 95472.يمكن شراء كتب O'Reilly لأغراض تعليمية أو تجارية أو لأغراض 
ترويجية للمبيعات. الإصدارات عبر الإنترنتمتاح أيضًا لمعظم العناوين ( 
http://safaribooksonline.com ). لمزيد من المعلومات ، اتصل بشركتنامعدل / قسم 
المبيعات المؤسسية: 800-998-9938 أو enterprise@oreilly.com.المحررون: مايك لوكيديس 
وآن سبنسرمحرر الإنتاج: FILL IN PRODUCTION EDI‐TORالمدقق : املأ الناسخمصحح 
التجارب: املأ جهاز التبريدالمفهرس: املأ الفهرسالمصمم الداخلي: ديفيد فوتاتومصمم 
الغلاف: كارين مونتغمريالرسام: ريبيكا ديمارستكانون الثاني (يناير) -4712:الطبعة 
الأولىتاريخ المراجعة للطبعة الأولى2015/03/06: أول إصدار مبكر2015-04-01: الإصدار 
الثاني المبكر2015/06/18: الإصدار الثالث المبكر2016-01-26: الإصدار الرابع 
المبكر2016-05-05: الإصدار الخامس المبكر2016-11: الإصدار المبكر السادسراجع 
http://oreilly.com/catalog/errata.csp؟isbn=9781491903094 للحصول على تفاصيل 
الإصدار.شعار O'Reilly هو علامة تجارية مسجلة لشركة O'Reilly Media، Inc. Designing 
Data-Intensive Applica‐تُعد العلامات وصورة الغلاف والمظهر التجاري ذي الصلة 
علامات تجارية مملوكة لشركة O'Reilly Media، Inc.في حين أن الناشر والمؤلف 
(المؤلفون) قد بذلوا جهودًا حسنة النية لضمان أن المعلومات والإرشادات الواردة في 
هذا العمل دقيقة ، والناشر والمؤلف (المؤلفون) يتنصلون من جميع المسؤولياتity عن 
الأخطاء أو السهو ، بما في ذلك على سبيل المثال لا الحصر المسؤولية عن الأضرار 
الناتجة عن الاستخداممن أو الاعتماد على هذا العمل. استخدام المعلومات والتعليمات 
الواردة في هذا العمل هو بنفسكمخاطرة. إذا كانت أي عينات من التعليمات البرمجية أو 
أي تقنية أخرى يحتوي عليها هذا العمل أو يصفها ، فإنها تخضع لمصدر مفتوحالتراخيص أو 
حقوق الملكية الفكرية للآخرين ، تقع على عاتقك مسؤولية ضمان استخدامك لهامنها 
يتوافق مع هذه التراخيص و / أو الحقوق.

      صفحة 4


      الصفحة 5
مارتن كليبمانبوسطنتصميم كثيف البياناتالتطبيقات

      الصفحة 6


      الصفحة 7
جدول المحتوياتحول هذا الكتاب. . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . الثالث 
عشرالجزء الأول. أسس نظم البيانات1. تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة. 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1التفكير في نظم 
البيانات 2مصداقية 4أعطال الأجهزة 5أخطاء البرامج 6أخطاء بشرية 7ما هي أهمية 
الموثوقية؟ 8قابلية التوسع 8وصف الحمل 9وصف الأداء 11نهج للتعامل مع الحمل 15قابلية 
الصيانة 16قابلية التشغيل: تسهيل الحياة للعمليات 17البساطة: إدارة التعقيد 
18قابلية التطور: جعل التغيير سهلاً 19ملخص 202. نماذج البيانات ولغات الاستعلام. . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . 25النموذج العلائقي مقابل نموذج المستند 26ولادة NoSQL 27عدم تطابق الكائن في 
العلائقية 28علاقات كثير برأس وأطراف بأطراف 31هل قواعد بيانات الوثيقة تعيد 
التاريخ؟ 35الخامس

      الصفحة 8
قواعد البيانات العلائقية مقابل قواعد البيانات الوثيقة اليوم 38لغات الاستعلام عن 
البيانات 42استفسارات توضيحية على الويب 43الاستعلام عن MapReduce 45نماذج البيانات 
الشبيهة بالرسم البياني 48الرسوم البيانية للممتلكات 49لغة الاستعلام Cypher 
51استعلامات الرسم البياني في SQL 52ثلاث مخازن وسباركل 55المؤسسة: Datalog 59ملخص 
623. التخزين والاسترجاع. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . 67هياكل البيانات التي تدعم 
قاعدة البيانات الخاصة بك 68فهارس التجزئة 70SSTables و LSM- الأشجار 74ب- الأشجار 
77هياكل الفهرسة الأخرى 82حفظ كل شيء في الذاكرة 85معالجة المعاملات أو التحليلات؟ 
87تخزين البيانات 88النجوم والثلج: مخططات للتحليلات 90تخزين عمودي 93ضغط العمود 
94ترتيب الفرز في تخزين العمود 96الكتابة إلى التخزين الموجه إلى الأعمدة 
98التجميع: مكعبات البيانات والآراء المحققة 98ملخص 1004. التشفير والتطور. . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . 107تنسيقات تشفير البيانات 108تنسيقات خاصة باللغة 109المتغيرات 
الثنائية و JSON و XML 110التوفير والمخازن المؤقتة للبروتوكول 113أفرو 118مزايا 
المخططات 123طرق تدفق البيانات 124تدفق البيانات من خلال قواعد البيانات 125تدفق 
البيانات من خلال الخدمات: REST و RPC 127تمرير رسالة تدفق البيانات 132ملخص 
135سادسا | جدول المحتويات

      الصفحة 9
الجزء الثاني. البيانات الموزعة5. النسخ المتماثل. . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . 145القادة والأتباع 146متزامن مقابل النسخ المتماثل غير المتزامن 
147إنشاء متابعين جدد 149معالجة انقطاع العقدة 150تنفيذ سجلات النسخ المتماثل 
152مشاكل مع تأخر النسخ المتماثل 155قراءة كتاباتك 156يقرأ رتيبة 158يقرأ بادئة 
متسقة 159حلول تأخير النسخ المتماثل 160النسخ المتماثل متعدد القادة 161حالات 
الاستخدام للنسخ المتماثل متعدد القادة 161التعامل مع تعارضات الكتابة 164طبولوجيا 
النسخ المتماثل متعدد القادة 168النسخ المتماثل بلا زعيم 171الكتابة إلى قاعدة 
البيانات عندما تكون العقدة معطلة 171حدود اتساق النصاب 175نصاب قذر وتسليم ملمح 
177الكشف عن عمليات الكتابة المتزامنة 178ملخص 1866. التقسيم. . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . 191التقسيم والتكرار 192تقسيم البيانات ذات القيمة الأساسية 
193التقسيم حسب النطاق الرئيسي 194التقسيم عن طريق تجزئة المفتاح 195أعباء العمل 
المنحرفة وتخفيف النقاط الساخنة 196الفهارس التقسيمية والثانوية 197تقسيم الفهارس 
الثانوية حسب المستند 198تقسيم الفهارس الثانوية حسب المصطلح 200إعادة موازنة 
الأقسام 201استراتيجيات إعادة التوازن 201العمليات: إعادة التوازن التلقائي أو 
اليدوي 204طلب التوجيه 205تنفيذ الاستعلام الموازي 207ملخص 208جدول المحتويات | 
السابع

      الصفحة 10
7. المعاملات. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 213المفهوم الزلق للصفقة 
214معنى حمض 215عمليات الكائن الواحد والمتعددة 219مستويات العزلة الضعيفة 224قراءة 
ملتزمة 225عزل لقطة وقراءة قابلة للتكرار 228منع التحديثات المفقودة 233منع 
الانحراف والكتابة الخيالية 237تسلسل 242تنفيذ تسلسلي فعلي 243قفل مرحلتين (2PL) 
248عزل اللقطة التسلسلية (SSI) 252ملخص 2578. مشكلة الأنظمة الموزعة. . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265العيوب والفشل 
الجزئي 266الحوسبة السحابية والحوسبة الفائقة 267شبكات غير موثوقة 269أخطاء الشبكة 
في الممارسة 271كشف الأعطال 272المهلات والتأخيرات غير المحدودة 273الشبكات 
المتزامنة مقابل الشبكات غير المتزامنة 276ساعات غير موثوقة 278الساعات الرتيبة 
مقابل الساعات الزمنية 279تزامن الساعة ودقتها 281الاعتماد على الساعات المتزامنة 
282توقف العملية 287المعرفة والحقيقة والأكاذيب 291الحقيقة تحددها الأغلبية 
292العيوب البيزنطية 295نموذج النظام والواقع 298ملخص 3029. الاتساق والتوافق. . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . 311ضمانات الاتساق 312الخطية 314ما الذي يجعل النظام قابلاً للتقسيم 
الخطي؟ 315الاعتماد على الخطية 320تنفيذ أنظمة خطية 323تكلفة الخطية 326طلب ضمانات 
329ثامنا | جدول المحتويات

      الصفحة 11
الترتيب والسببية 330ترتيب رقم التسلسل 334إجمالي بث النظام 338المعاملات الموزعة 
والتوافق 343الالتزام الذري والالتزام على مرحلتين (2PC) 344توزيع المعاملات في 
الممارسة العملية 350إجماع متسامح مع الخطأ 355خدمات العضوية والتنسيق 360ملخص 
363الجزء الثالث. البيانات المشتقة10. معالجة الدُفعات . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . 377معالجة الدُفعات باستخدام أدوات Unix 379تحليل بسيط للسجل 379فلسفة 
يونكس 382MapReduce وأنظمة الملفات الموزعة 385MapReduce تنفيذ المهمة 387تقليل 
الصلات الجانبية والتجميع 391ينضم جانب الخريطة 396مخرجات سير عمل الدُفعات 
398مقارنة MapReduce بقواعد البيانات الموزعة 402ما وراء MapReduce 406تجسيد الحالة 
الوسيطة 407الرسوم البيانية والمعالجة التكرارية 411واجهات برمجة التطبيقات واللغات 
عالية المستوى 414ملخص 41611. تيار تجهيز. . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425بث 
الحدث تيارات 426أنظمة المراسلة 427سجلات مقسمة 432قواعد البيانات والجداول 
436مزامنة الأنظمة 437تغيير التقاط البيانات 439مصادر الحدث 442الدولة والجداول 
والثبات 444تيارات المعالجة 448استخدامات معالجة الدفق 449التفكير في الوقت 452دفق 
ينضم 457جدول المحتويات | التاسع

      الصفحة 12
التسامح مع الخطأ 460ملخص 462x | جدول المحتويات

      الصفحة 13
التكنولوجيا قوة جبارة في مجتمعنا. يمكن للبيانات والبرمجيات والاتصالاتأن تستخدم 
لسوء الحظ: لترسيخ هياكل السلطة غير العادلة ، وتقويض حقوق الإنسان ، ولحماية 
المصالح المكتسبة. ولكن يمكن استخدامها أيضًا من أجل الخير: لجعل التمثيل 
ناقصًاأصوات الناس مسموعة لخلق الفرص للجميع ولتجنب الكوارث. هذهالكتاب مخصص لكل من 
يعمل من أجل الخير.الحوسبة ثقافة شعبية. [...] ثقافة البوب ​​تحمل ازدراء للتاريخ. 
ثقافة البوب ​​هي كل شيءعن الهوية والشعور وكأنك تشارك. لا علاقة لها بـ 
Coopera‐الماضي أو المستقبل - إنه يعيش في الحاضر. أعتقد أن الشيء نفسه ينطبق على 
معظمالأشخاص الذين يكتبون رمزًا للمال. ليس لديهم أي فكرة عن مصدر [ثقافتهم] ...- 
آلان كاي ، مجلة دكتور دوب (2012)

      الصفحة 14


      الصفحة 15
حول هذا الكتابإذا كنت قد عملت في هندسة البرمجيات في السنوات الأخيرة ، خاصة في 
جانب الخادموأنظمة الواجهة الخلفية ، فمن المحتمل أنك تعرضت للقصف بعدد كبير من 
buzz‐الكلمات المتعلقة بتخزين ومعالجة البيانات. NoSQL! البيانات الكبيرة! على نطاق 
الويب!تجزئة! الاتساق في نهاية المطاف! حامض! نظرية CAP! خدمات سحابية! 
MapReduce!في الوقت الحالى!في العقد الماضي ، شهدنا العديد من التطورات المثيرة 
للاهتمام في قواعد البيانات ،نظم التقدير والطرق التي نبني بها التطبيقات فوقها. 
هناك فاروالقوى الدافعة الجادة لهذه التطورات ، بما في ذلك:• شركات الإنترنت مثل 
Google و Yahoo! و Amazon و Facebook و LinkedIn ويتعامل موقع Twitter مع كميات 
هائلة من البيانات وحركة المرور ، مما يجبرهم على إنشاء بيانات جديدةالأدوات التي 
تمكنهم من التعامل بكفاءة مع هذا النطاق.• يتعين على الشركات أن تكون سريعة الحركة 
، وأن تختبر الفرضيات بتكلفة زهيدة ، وأن تستجيب بسرعة للجديدرؤى السوق ، من خلال 
الحفاظ على دورات التطوير قصيرة ومرونة نماذج البيانات.• أصبحت البرمجيات الحرة 
ومفتوحة المصدر ناجحة للغاية ، وهي الآن مفضلةللبرامج التجارية أو الداخلية في 
العديد من البيئات.• سرعات ساعة وحدة المعالجة المركزية لا تكاد تتزايد ، ولكن 
المعالجات متعددة النواة قياسية ،والشبكات تزداد سرعة. هذا يعني أن التوازي سيزداد 
فقط.• حتى إذا كنت تعمل ضمن فريق صغير ، يمكنك الآن إنشاء أنظمة يتم توزيعهاعبر 
العديد من الأجهزة وحتى في مناطق جغرافية متعددة ، وذلك بفضل البنية التحتيةالهيكل 
كخدمة (IaaS) مثل Amazon Web Services.• من المتوقع الآن أن تكون العديد من الخدمات 
متاحة بشكل كبير. وقت التوقف الممتد المستحقأصبح الانقطاع أو الصيانة غير مقبول 
بشكل متزايد.تعمل التطبيقات كثيفة البيانات على دفع حدود ما هو ممكن من خلال 
صنعهااستخدام هذه التطورات التكنولوجية. نحن نطلق على التطبيق بيانات كثيفة إذا 
كانت البياناتهو التحدي الأساسي: كمية البيانات ، أو تعقيد البيانات ، أو السرعة 
عندالثالث عشر

      الصفحة 16
الذي يتغير (على عكس الحساب المكثف ، حيث دورات وحدة المعالجة المركزية هيعنق 
الزجاجة).الأدوات والتقنيات التي تساعد في تخزين ومعالجة التطبيقات كثيفة 
البياناتتتكيف البيانات بسرعة مع هذه التغييرات. أنواع جديدة من أنظمة قواعد 
البيانات("NoSQL") يحظى باهتمام كبير ، لكن قوائم انتظار الرسائل وذاكرة التخزين 
المؤقت والبحثالفهارس ، وأطر معالجة الدُفعات والتدفقات ، والتقنيات ذات الصلةمهم 
جدا أيضا. تستخدم العديد من التطبيقات مزيجًا من هذه.الكلمات الطنانة التي تملأ هذا 
الفراغ هي علامة على الحماس للإمكانيات الجديدة ،وهو شيء عظيم. ومع ذلك ، كمهندسين 
برمجيات ومعماريين ، نحتاج أيضًا إلى ذلكلديهم فهم تقني دقيق ودقيق للتقنيات 
المختلفة وإذا أردنا إنشاء تطبيقات جيدة. من أجل هذا الفهم ، نحنيجب أن تحفر أعمق 
من الكلمات الطنانة.لحسن الحظ ، وراء التغييرات السريعة في التكنولوجيا ، هناك 
مبادئ ثابتةتظل صحيحة ، بغض النظر عن إصدار أداة معينة تستخدمها. اذا أنتفهم هذه 
المبادئ ، فأنت في وضع يسمح لك بمعرفة مكان كل أداة وكيفية ذلكالاستفادة منها ، 
وكيفية تفادي مزالقها. هذا هو المكان الذي يأتي فيه هذا الكتاب.الهدف من هذا الكتاب 
هو مساعدتك على التنقل في المشهد المتنوع وسريع التغيرتقنيات معالجة وتخزين 
البيانات. هذا الكتاب ليس تعليمي لأحدأداة معينة ، كما أنها ليست كتابًا دراسيًا 
مليئًا بالنظرية الجافة. بدلا من ذلك ، سوف ننظر إلى الأمثلةمن أنظمة البيانات 
الناجحة: التقنيات التي تشكل الأساس للعديد من الشعبيةالتطبيقات ، والتي يجب أن 
تلبي قابلية التوسع والأداء والموثوقية تتطلبإشارات في الإنتاج كل يوم.سوف نتعمق في 
الأجزاء الداخلية لتلك الأنظمة ، ونفصل الخوارزميات الرئيسية الخاصة بهم ،عنف 
مبادئهم والمقايضات التي يتعين عليهم القيام بها. في هذه الرحلة ، سنحاولللعثور على 
طرق مفيدة للتفكير في أنظمة البيانات - ليس فقط في كيفية عملها ، ولكن أيضًالماذا 
يعملون بهذه الطريقة ، وما هي الأسئلة التي نحتاج إلى طرحها.بعد قراءة هذا الكتاب ، 
ستكون في وضع رائع لتحديد نوع التكنولوجيا‐علم اللغة مناسب لأي غرض ، ويفهم كيف 
يمكن الجمع بين الأدواتلتشكيل الأساس لبنية تطبيق جيدة. لن تكون مستعدًا لذلكقم 
ببناء محرك تخزين قاعدة البيانات الخاص بك من البداية ، ولكن لحسن الحظ نادرًا ما 
يحدث ذلكمن الضروري. ومع ذلك ، ستطور حدسًا جيدًا لماهية أنظمتكتفعل تحت غطاء محرك 
السيارة ، حتى تتمكن من التفكير في سلوكهم ، وتصميم جيدالقرارات ، وتعقب أي مشاكل 
قد تنشأ.الذين ينبغي أن يقرأ هذا الكتاب؟إذا قمت بتطوير تطبيقات بها نوع من الخادم 
/ الواجهة الخلفية للتخزين أو الإنتاجتوقف البيانات ، وتستخدم تطبيقاتك الإنترنت 
(مثل تطبيقات الويب والجوالالتطبيقات ، أو أجهزة الاستشعار المتصلة بالإنترنت) ، 
فهذا الكتاب مناسب لك.الرابع عشر | حول هذا الكتاب

      الصفحة 17
هذا الكتاب مخصص لمهندسي البرمجيات ومهندسي البرمجيات والمديرين الفنيين الذينأحب 
البرمجة. إنه مهم بشكل خاص إذا كنت بحاجة إلى اتخاذ قرارات بشأن الهندسة 
المعمارية.تلحظ الأنظمة التي تعمل عليها - على سبيل المثال ، إذا كنت بحاجة إلى 
اختيار أدوات للحل‐مشكلة معينة ، ومعرفة أفضل السبل لتطبيقها. ولكن حتى لو لم يكن 
لديكمن خلال اختيار أدواتك ، سيساعدك هذا الكتاب على فهم نقاط قوتها بشكل أفضل 
ونقاط الضعف.يجب أن يكون لديك بعض الخبرة في إنشاء التطبيقات المستندة إلى الويب أو 
خدمات الشبكة‐ices ، ويجب أن تكون على دراية بقواعد البيانات العلائقية و SQL. أي 
غير-قواعد البيانات العلائقية والأدوات الأخرى المتعلقة بالبيانات التي تعرف أنها 
مكافأة ، ولكن ليس كذلكمطلوب. فهم عام لبروتوكولات الشبكة الشائعة مثل TCP وHTTP 
مفيد. لا يشكل اختيارك للغة البرمجة أو إطار العمل أي فرق.سياج لهذا الكتاب.إذا كان 
أي مما يلي ينطبق عليك ، فستجد هذا الكتاب ذا قيمة:• تريد معرفة كيفية جعل أنظمة 
البيانات قابلة للتطوير ، لدعمها على سبيل المثالتطبيقات الويب أو الأجهزة المحمولة 
مع ملايين المستخدمين.• تحتاج إلى جعل التطبيقات متاحة بشكل كبير (تقليل وقت التوقف 
عن العمل) وقوية من الناحية التشغيلية.• تبحث عن طرق لجعل صيانة الأنظمة أسهل على 
المدى الطويل ،حتى مع نموها ، ومع تغير المتطلبات والتقنيات.• لديك فضول طبيعي 
للطريقة التي تعمل بها الأشياء ، وتريد أن تعرف ماذايستمر داخل مواقع الويب 
الرئيسية والخدمات عبر الإنترنت. هذا الكتاب يكسرالمكونات الداخلية لقواعد البيانات 
المختلفة وأنظمة معالجة البيانات ، وهي متعة كبيرةاستكشاف التفكير الساطع الذي دخل 
في تصميمهم.في بعض الأحيان ، عند مناقشة أنظمة البيانات القابلة للتطوير ، يُدلي 
الأشخاص بتعليقات على امتدادسطور "أنت لست Google أو Amazon ، توقف عن القلق بشأن 
النطاق واستخدم rela‐قاعدة بيانات tional " . هناك حقيقة في هذا البيان: البناء من 
أجل الحجم الذي لا تفعلهالحاجة تضيع جهدًا ، وقد تحبسك في تصميم غير مرن. في الواقع 
، إنه شكلمن التحسين المبكر. ومع ذلك ، من المهم أيضًا اختيار الأداة المناسبة 
لـالوظيفة ، والتقنيات المختلفة لكل منها نقاط قوتها وضعفها. كماسنرى ، قواعد 
البيانات العلائقية مهمة ، لكنها ليست الكلمة الأخيرة في التعاملمع البيانات.نطاق 
هذا الكتابلا يحاول هذا الكتاب إعطاء تعليمات مفصلة حول كيفية تثبيت أو استخدام 
spe‐حزم البرامج أو واجهات برمجة التطبيقات المحددة ، نظرًا لوجود الكثير من 
التوثيق لـهذه الأشياء. بدلاً من ذلك ، نناقش المبادئ والمفاضلات المختلفة التي 
تعتبر أساسيةالعقلية لأنظمة البيانات ، ونستكشف قرارات التصميم المختلفة التي 
تتخذها مختلفمنتجات الأنف والحنجرة.حول هذا الكتاب | الخامس عشر

      صفحة 18
معظم ما نناقشه في هذا الكتاب قد قيل بالفعل في مكان آخر بشكل أو بآخرآخر - في عروض 
المؤتمرات ، الأوراق البحثية ، منشورات المدونة ، الكود ، تتبع الأخطاء‐والفولكلور 
الهندسي. يلخص هذا الكتاب أهم الأفكار منالعديد من المصادر المختلفة ، ويتضمن 
مؤشرات إلى الأدب الأصلي في جميع أنحاءالنص. تعتبر المراجع في نهاية كل فصل مصدرًا 
رائعًا إذا كنت ترغب في ذلكاستكشاف منطقة بمزيد من العمق.نحن ننظر في المقام الأول 
إلى بنية أنظمة البيانات والطرق التي يتم بها تكاملها.مبشور في تطبيقات كثيفة 
البيانات. هذا الكتاب ليس لديه مساحة لتغطية النشر‐منة والعمليات والأمن والأخلاق 
والإدارة ومجالات أخرى - هذه معقدةومواضيع مهمة ، ولن ننصفها بجعلها سطحيةالملاحظات 
الجانبية في هذا الكتاب. إنهم يستحقون كتبًا خاصة بهم.العديد من التقنيات الموصوفة 
في هذا الكتاب تقع ضمن نطاق البيانات الضخمةكلمة طنانة. ومع ذلك ، فإن مصطلح 
البيانات الضخمة مُبالَغ في الاستخدام وغير مُعرَّف بشكل كافٍليس مفيدًا في مناقشة 
هندسية جادة. يستخدم هذا الكتاب مصطلحات أقل غموضًا ،مثل الأنظمة أحادية العقدة 
مقابل الأنظمة الموزعة ، أو عبر الإنترنت / التفاعلية مقابل عدم الاتصال / 
الدُفعةأنظمة المعالجة.هذا الكتاب يميل إلى البرمجيات الحرة ومفتوحة المصدر (FOSS) 
، لأن القراءة ،يعد تعديل التعليمات البرمجية المصدر وتنفيذها طريقة رائعة لفهم 
كيفية عمل شيء مايعمل بالتفصيل. تقلل الأنظمة الأساسية المفتوحة أيضًا من مخاطر قفل 
البائع. ومع ذلك،عند الاقتضاء ، نناقش أيضًا البرامج الاحتكارية (البرامج المغلقة 
المصدر ، soft‐وير كخدمة ، أو برامج داخلية للشركات موصوفة فقط في الأدبياتولكن لم 
يتم إصدارها علنًا).الخطوط العريضة لهذا الكتابهذا الكتاب مقسم إلى ثلاثة أجزاء:1. 
في الجزء الأول ، سنناقش الأفكار الأساسية التي نحتاجها من أجل التصميمتطبيقات 
كثيفة البيانات. سنبدأ في الفصل الأول بمناقشة ما نحن عليهفي الواقع نحاول تحقيق: 
الموثوقية وقابلية التوسع وقابلية الصيانة - كيف نقوم بذلكبحاجة إلى التفكير فيها ، 
وكيف يمكننا تحقيقها. سنقوم في الفصل 2قارن بين العديد من نماذج البيانات المختلفة 
ولغات الاستعلام ، وانظر كيف هيمناسبة لمواقف مختلفة. في الفصل 3 سنتحدث عن 
التخزينالمحركات: كيف تقوم قواعد البيانات بترتيب البيانات على القرص بحيث يمكنك 
العثور عليها مرة أخرى بكفاءة.بصحة. ينتقل الفصل 4 إلى تنسيقات تشفير البيانات 
(التسلسل) والتطور.نشوئها من المخططات بمرور الوقت.2. في الجزء الثاني، سننتقل من 
البيانات المخزنة على جهاز واحد إلى البيانات الموجودةعبر آلات متعددة. غالبًا ما 
يكون هذا ضروريًا لقابلية التوسع ، ولكنيجلب معه مجموعة متنوعة من التحديات 
الفريدة. سنناقش أولاً النسخ المتماثل ( تشابوثالثًا 5) ، التقسيم / التجزئة ( 
الفصل 6) والمعاملات ( الفصل السابع ). سنقومثم انتقل إلى مزيد من التفاصيل حول 
مشاكل الأنظمة الموزعة (الفصل 8)السادس عشر | حول هذا الكتاب

      الصفحة 19
وماذا يعني تحقيق الاتساق والتوافق في نظام موزع(الفصل 9).3. في الجزء الثالث ، 
نتقدم خطوة أخرى ونناقش بناء أنظمة غير متجانسةالتي تتكون من عدة مكونات مختلفة. 
حيث لا توجد قاعدة بيانات واحدة للجميعحالات الاستخدام ، غالبًا ما تحتاج التطبيقات 
إلى دمج العديد من قواعد البيانات المختلفة ، وذاكرة التخزين المؤقت ،فهارس وهلم 
جرا. في الفصل 10 سنبدأ بنهج المعالجة على دفعات ،والبناء على هذا في الفصل 11 لوصف 
معالجة التدفق. أخيرًا في ؟؟؟سنجمع كل شيء معًا ونناقش كيف يمكننا دمج البيانات 
المختلفةأنظمة في تطبيقات موثوقة وقابلة للتطوير ويمكن صيانتها.حالة الإصدار المبكر 
والتعليقاتهذه نسخة مبكرة من تصميم التطبيقات كثيفة البيانات . النص التينما زالت 
الأمثلة والأمثلة قيد التنفيذ ، وهناك عدة فصول لم تتم كتابتها بعد.نصدر الكتاب قبل 
انتهائه لأننا نأمل أن يكون مستخدمًا بالفعل‐ful في شكله الحالي ، ولأننا نحب 
ملاحظاتك من أجل إنشاءأفضل منتج نهائي ممكن.إذا وجدت أي أخطاء أو إغفالات صارخة ، 
أو وجدت أي شيء محيرًا ، أو إذا وجدت أي شيء محيرًالديك أي أفكار لتحسين الكتاب ، 
يرجى إرسال بريد إلكتروني إلى المؤلف والمحررين على الخلاصة‐back@dataintensive.net 
.حول هذا الكتاب | السابع عشر

      الصفحة 20


      الصفحة 21
الجزء الأولأسس نظم البياناتتتناول الفصول الأربعة الأولى الأفكار الأساسية التي 
تنطبق على جميع أنظمة البيانات.tems ، سواء كانت تعمل على جهاز واحد أو موزعة عبر 
مجموعة منالآلات:1. يقدم الفصل الأول المصطلحات والنهج الذي سنستخدمهفي هذا الكتاب. 
إنه يفحص ما نعنيه بالفعل بكلمات مثل relia‐بيليتي ، والتدرجية ، و الصيانة ، وكيف 
يمكننا محاولة تحقيقها.2. الفصل 2 يقارن بين العديد من نماذج البيانات المختلفة 
ولغات الاستعلام - الالفرق الأكثر وضوحًا بين قواعد البيانات المختلفة من وجهة نظر 
المطورعرض. سنرى كيف النماذج المختلفة مناسبة لمواقف مختلفة.3. الفصل 3 ينتقل إلى 
الأجزاء الداخلية لمحركات التخزين ، وينظر في كيفية قواعد البياناتوضع البيانات على 
القرص. تم تحسين محركات التخزين المختلفة للعمل المختلف‐يمكن أن يكون لاختيار النوع 
المناسب تأثير كبير على الأداء.4. الفصل 4 يقارن مختلف التنسيقات لتشفير البيانات 
(التسلسل) ، و espe‐يفحص cially كيف يتصرفون في بيئة حيث متطلبات التطبيقالتغيير 
والمخططات بحاجة إلى التكيف مع مرور الوقت.لاحقًا ، سيتحول الجزء الثاني إلى 
المشكلات الخاصة بأنظمة البيانات الموزعة.

      الصفحة 22


      الصفحة 23
الفصل 1موثوقة وقابلة للتطوير ويمكن الحفاظ عليهاالتطبيقاتتم عمل الإنترنت بشكل جيد 
لدرجة أن معظم الناس يعتقدون أنه مورد طبيعي مثلالمحيط الهادئ ، وليس شيئًا من صنع 
الإنسان. متى كانت آخر مرة أالتكنولوجيا بمقياس كهذا كانت خالية من الأخطاء؟-آلان 
كاي ، مجلة دكتور دوب (2012)العديد من التطبيقات اليوم كثيفة الاستخدام للبيانات ، 
على عكس التطبيقات كثيفة الاستخدام للحوسبة . الخامنادرًا ما تكون طاقة وحدة 
المعالجة المركزية عاملاً مقيدًا لهذه التطبيقات - فالمشكلات الأكبر هي كذلكعادة 
مقدار البيانات ، وتعقيد البيانات ، والسرعة التي تكون بهاالمتغيرة.عادةً ما يتم 
إنشاء تطبيق كثيف البيانات من لبنات بناء قياسيةتوفير الوظائف المطلوبة بشكل شائع. 
على سبيل المثال ، تحتاج العديد من التطبيقات إلى:• تخزين البيانات حتى يتمكنوا أو 
لتطبيق آخر من العثور عليها مرة أخرى لاحقًا ( قواعد البيانات ) ،• تذكر نتيجة 
عملية مكلفة لتسريع القراءة ( ذاكرات التخزين المؤقت ) ،• السماح للمستخدمين بالبحث 
عن البيانات عن طريق الكلمات الرئيسية أو تصفيتها بطرق مختلفة ( بحثفهارس ) ،• 
إرسال رسالة إلى عملية أخرى ، ليتم التعامل معها بشكل غير متزامن ( دفق برووقف ) ،• 
سحق كمية كبيرة من البيانات المتراكمة بشكل دوري ( معالجة الدُفعات ).إذا كان هذا 
يبدو واضحًا بشكل مؤلم ، فذلك لأن أنظمة البيانات هذه ناجحة جدًا‐التجريد المستمر: 
نستخدمها طوال الوقت دون التفكير كثيرًا. عند البناء1

      صفحة 24
في أحد التطبيقات ، لن يحلم معظم المهندسين بكتابة مخزن بيانات جديدالمحرك من 
البداية ، لأن قواعد البيانات هي أداة جيدة تمامًا للوظيفة.لكن الواقع ليس بهذه 
البساطة. هناك العديد من أنظمة قواعد البيانات بشارات مختلفةالتضاريس ، لأن 
التطبيقات المختلفة لها متطلبات مختلفة. هناك متنوعطرق Oous للتخزين المؤقت ، وعدة 
طرق لبناء فهارس البحث ، وما إلى ذلك. متيبناء تطبيق ، ما زلنا بحاجة إلى معرفة 
الأدوات والأساليبهي الأنسب للمهمة المطروحة. في بعض الأحيان قد يكون من الصعب 
الجمععدة أدوات عندما تحتاج إلى القيام بشيء لا تستطيع أداة واحدة القيام به 
بمفردها.هذا الكتاب عبارة عن رحلة عبر كل من المبادئ والتطبيقات العملية لنظام 
البيانات‐tems ، وكيف يمكنك استخدامها لبناء تطبيقات كثيفة البيانات. سوف نستكشفما 
هو الشيء المشترك بين الأدوات المختلفة ، وما الذي يميزها ، وكيف يتم 
تحقيقهاخصائصهم.في هذا الفصل الأول ، سنبدأ باستكشاف أساسيات ما نحاول القيام 
بهتحقيق: أنظمة بيانات موثوقة وقابلة للتطوير ويمكن صيانتها. سنقوم بتوضيح ما 
هؤلاءتعني الأشياء ، حدد الخطوط العريضة لبعض طرق التفكير فيها ، واطلع على 
الأساسياتسنحتاج لفصول لاحقة. في الفصول التالية سوف نستمر في طبقة تلو الأخرىطبقة 
، تبحث في قرارات التصميم المختلفة التي يجب أخذها في الاعتبار عند العمل‐جي على 
تطبيق كثيف البيانات.التفكير في نظم البياناتعادة ما نفكر في قواعد البيانات وقوائم 
الانتظار والمخابئ وما إلى ذلك على أنها فئات مختلفة جدًامن الأدوات. على الرغم من 
وجود بعض التشابه السطحي بين قاعدة البيانات وقائمة انتظار الرسائل -كلاهما يخزن 
البيانات لبعض الوقت - لهما أنماط وصول مختلفة جدًا ، والتييعني خصائص أداء مختلفة 
، وبالتالي تطبيق مختلف تمامًانشوئها.فلماذا نجمعها جميعًا معًا تحت مصطلح شامل مثل 
أنظمة البيانات ؟ظهرت العديد من الأدوات الجديدة لتخزين البيانات ومعالجتها في 
السنوات الأخيرة. همتم تحسينها لمجموعة متنوعة من حالات الاستخدام المختلفة ، ولم 
تعد تناسبها بدقةالفئات التقليدية [ 1 ]. على سبيل المثال ، هناك مخازن بيانات 
تُستخدم أيضًا كمخازنطوابير sage (Redis) ، وهناك قوائم انتظار للرسائل مع متانة 
تشبه قاعدة البيانات guar‐أنتيز (كافكا). أصبحت الحدود بين الفئات غير واضحة.ثانيًا 
، أصبح للعديد من التطبيقات الآن مثل هذا الطلب أو النطاق الواسعالمتطلبات التي لم 
يعد بإمكان أداة واحدة الوفاء بها جميع عمليات معالجة البيانات وتخزينها‐احتياجات 
العمر. بدلاً من ذلك ، يتم تقسيم العمل إلى مهام يمكن أداؤها بفعالية.بجدارة على 
أداة واحدة ، ويتم دمج تلك الأدوات المختلفة معًا باستخدامكود التطبيق.على سبيل 
المثال ، إذا كان لديك طبقة تخزين مؤقت يديرها تطبيق (باستخدام memcached أومماثل) 
، أو خادم بحث عن نص كامل منفصل عن قاعدة البيانات الرئيسية (مثل Elas‐2 | الفصل 1: 
تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      الصفحة 25
ticsearch أو Solr) ، فعادة ما تقع على عاتق كود التطبيق مسؤولية الاحتفاظ بهاذاكرة 
التخزين المؤقت والفهارس متزامنة مع قاعدة البيانات الرئيسية. الشكل 1-1 يعطي لمحة 
عن ماذاقد يبدو هذا مثل (سنتطرق إلى التفاصيل في فصول لاحقة).عندما تجمع بين عدة 
أدوات من أجل تقديم خدمة ، فإن واجهة الخدمةأو API عادةً ما تخفي تفاصيل التنفيذ 
هذه عن العملاء. الان لديك اسينإنشاء نظام بيانات جديد ذي غرض خاص من مجموعة أصغر 
ذات أغراض عامةمؤلفات. قد يوفر نظام البيانات المركبة الخاص بك ضمانات معينة ، على 
سبيل المثال أن ملفسيتم إبطال ذاكرة التخزين المؤقت بشكل صحيح أو تحديثها على 
عمليات الكتابة ، بحيث يرى العملاء الخارجيوننتائج متسقة. أنت الآن لست مطور 
تطبيقات فحسب ، بل أنت أيضًا نظام بيانات‐مصمم تيم.إذا كنت تصمم نظامًا أو خدمة 
بيانات ، فستظهر الكثير من الأسئلة الصعبة. كيفأنت تضمن بقاء البيانات صحيحة وكاملة 
، حتى عندما تسوء الأمورداخليا؟ كيف يمكنك تقديم أداء جيد باستمرار للعملاء ، حتى 
عندماتدهورت أجزاء من نظامك؟ كيف يمكنك القياس للتعامل مع زيادة الحمل؟كيف تبدو 
واجهة برمجة التطبيقات الجيدة للخدمة؟كود التطبيقكود التطبيقكود التطبيقأولا تحقق 
إذايتم تخزين البيانات مؤقتًاقراءة الطلباتالمهام غير المتزامنةفي 
الذاكرةمخبأخبراتقاعدة البياناتنص كاملفهرسرسالةطابوريخطئ ذاكرة التخزين 
المؤقتويكتبيأسرالتغييراتإلى البياناتبحثالطلباتعميلالطلباتباطلأو التحديثمخبأتطبيق 
التحديثاتللبحث في الفهرسعلى سبيل المثال إرسال بريد إلكتروني"العالم 
الخارجي"APIالشكل 1-1. بنية واحدة ممكنة لنظام بيانات يجمع بين عدة 
تركيباتnents.هناك العديد من العوامل التي قد تؤثر على تصميم نظام البيانات ، بما 
في ذلكمهارات وخبرات الأشخاص المعنيين ، تبعيات النظام القديم ، الوقت‐التفكير في 
نظم البيانات | 3

      الصفحة 26
نطاق التسليم ، وتحمل مؤسستك لأنواع مختلفة من المخاطر ، والتنظيميةالقيود ، إلخ. 
هذه العوامل تعتمد إلى حد كبير على الوضع.في هذا الكتاب ، نركز على ثلاثة مخاوف 
مهمة في معظم أنظمة البرمجيات:مصداقيةيجب أن يستمر النظام في العمل بشكل صحيح (أداء 
الوظيفة الصحيحة فيالأداء المطلوب) حتى في مواجهة الشدائد (الأجهزة أو البرامج، 
وحتى خطأ بشري). يرىالموثوقية في الصفحة 4.قابلية التوسعمع نمو النظام (في حجم 
البيانات أو حجم حركة المرور أو التعقيد) ، يجب أن يكون هناكأن تكون طرقًا معقولة 
للتعامل مع هذا النمو. راجع "قابلية التوسع" في الصفحة 8.قابلية الصيانةبمرور الوقت 
، سيعمل العديد من الأشخاص المختلفين على النظام (الهندسة والتشغيل)ations ، سواء 
الحفاظ على السلوك الحالي أو تكييف النظام للاستخدام الجديدالحالات) ، ويجب أن 
يكونوا جميعًا قادرين على العمل عليها بشكل منتج . انظر "Maintainabil‐ity "في 
الصفحة 16 .غالبًا ما يتم طرح هذه الكلمات دون فهم واضح لما تعنيه.في مصلحة الهندسة 
المدروسة ، سنقضي بقية هذا الفصلاستكشاف طرق التفكير في الموثوقية وقابلية التوسع 
وقابلية الصيانة. ثم فيفي الفصول التالية ، سوف نلقي نظرة على مختلف التقنيات 
والبنى والخواصالإيقاعات المستخدمة لتحقيق تلك الأهداف.مصداقيةكل شخص لديه فكرة 
بديهية عما يعنيه أن تكون البرامج موثوقة أو غير موثوقة‐قادر. بالنسبة للبرامج ، 
تتضمن التوقعات النموذجية ما يلي:• يقوم التطبيق بالوظيفة التي توقعها المستخدم.• 
يمكن أن يتسامح مع ارتكاب المستخدم للأخطاء ، أو استخدام البرنامج بشكل غير 
متوقعطرق.• أداءه جيد بما يكفي لحالة الاستخدام المطلوبة ، تحت الحمل المتوقعوحجم 
البيانات.• يمنع النظام أي وصول غير مصرح به وإساءة استخدام.إذا كانت كل هذه 
الأشياء معًا تعني "العمل بشكل صحيح" ، فيمكننا حينئذٍ فهم relia‐كلمة bility تعني 
، تقريبًا ، "الاستمرار في العمل بشكل صحيح ، حتى عندما تسير الأمورخاطئ".تسمى 
الأشياء التي يمكن أن تسوء بالأخطاء ، والأنظمة التي تتنبأ بالأخطاء ويمكن التعامل 
معها تسمى متسامحة أو مرنة . المصطلح مضلل قليلا‐ing: إنه يشير إلى أننا يمكن أن 
نجعل نظامًا متسامحًا مع كل نوع ممكن من الأخطاء ،4 | الفصل 1: تطبيقات موثوقة 
وقابلة للتطوير وقابلة للصيانة

      الصفحة 27
وهو في الواقع غير ممكن. إذا كان كوكب الأرض بأكمله (وجميع الخوادم الموجودة عليه) 
كذلكإذا ابتلعها ثقب أسود ، فإن التسامح مع هذا الخطأ يتطلب استضافة ويب في الفضاء- 
نتمنى لك التوفيق في الموافقة على بند الميزانية هذا. لذلك من المنطقي التحدث عنها 
فقطالتسامح مع أنواع معينة من الخطأ .لاحظ أن الخطأ ليس هو نفسه الفشل [2]. عادة ما 
يتم تعريف الخطأ على أنه خطأ واحدجزء أساسي من النظام ينحرف عن مواصفاته ، في حين 
أن الفشل هو عندما يكون النظام كملفتوقف بالكامل عن توفير الخدمة المطلوبة 
للمستخدم. من المستحيل تقليلاحتمال خطأ إلى الصفر ؛ لذلك من الأفضل عادة تصميم 
التسامح مع الخطأالآليات التي تمنع الأخطاء من التسبب في الفشل. في هذا الكتاب نغطي 
عدةتقنيات بناء أنظمة موثوقة من أجزاء غير موثوقة.مكافحة حدسي، في مثل هذه الأنظمة 
المتسامحة، يمكن أن تجعل معنى ل زيادة لمعدل الأخطاء من خلال إطلاقها عمداً - على 
سبيل المثال ، عن طريق القتل العشوائي للإنديزعمليات vidual دون سابق إنذار. العديد 
من الأخطاء الحرجة ترجع في الواقع إلى خطأ سيئمعالجة [3] ؛ من خلال التسبب في 
الأخطاء عمدا ، فإنك تضمن أن التسامح مع الخطأيتم ممارسة الآلات واختبارها باستمرار 
، مما يزيد من ثقتك بنفسكسيتم التعامل مع هذه الأخطاء بشكل صحيح عندما تحدث بشكل 
طبيعي. فوضى Netflixالقرد [ 4 ] مثال على هذا النهج.على الرغم من أننا نفضل عمومًا 
تحمل الأخطاء على منع الأخطاء ، إلا أن هناك حالاتحيث الوقاية خير من العلاج (على 
سبيل المثال لعدم وجود علاج). هذا هو الحالبأمور أمنية ، على سبيل المثال: إذا قام 
أحد المهاجمين باختراق نظام وحصل على حق الوصول إلى البيانات الحساسة ، فلا يمكن 
التراجع عن هذا الحدث. ومع ذلك ، هذا الكتابيتعامل في الغالب مع أنواع الخطأ التي 
يمكن معالجتها ، كما هو موضح في ما يليأقسام.أعطال الأجهزةعندما نفكر في أسباب فشل 
النظام ، سرعان ما تتبادر إلى الذهن أخطاء في الأجهزة.تتعطل الأقراص الصلبة ، 
وذاكرة الوصول العشوائي معطلة ، وشبكة الكهرباء لديها تعتيم ، شخص ماافصل كابل 
الشبكة الخطأ. أي شخص عمل مع مراكز البيانات الكبيرةيمكن أن يخبرك أن هذه الأشياء 
تحدث طوال الوقت عندما يكون لديك الكثير من الآلات.تم الإبلاغ عن أن الأقراص الصلبة 
لديها متوسط ​​الوقت للفشل (MTTF) من حوالي 10 إلى 50سنوات [ 5 ، 6 ]. وبالتالي ، 
في مجموعة تخزين بها 10000 قرص ، يجب أن نتوقع في المتوسطقرص واحد يموت يوميا.عادة 
ما تكون استجابتنا الأولى هي إضافة التكرار إلى تركيبة الأجهزة الفرديةnents من أجل 
تقليل معدل فشل النظام. يمكن إعداد الأقراص في RAIDالتكوين ، قد تحتوي الخوادم على 
مصادر طاقة مزدوجة ووحدات معالجة مركزية قابلة للتبديل السريع ، وقد تحتوي مراكز 
البيانات على بطاريات ومولدات ديزل للطاقة الاحتياطية. عند واحدالمكون يموت ، يمكن 
للمكوِّن الفائض أن يحل محله بينما المكون المكسوريتم استبدال بونينت. لا يمكن لهذا 
الأسلوب منع مشاكل الأجهزة بشكل كاملالموثوقية | 5

      الصفحة 28
أنا. محدد في "طرق التعامل مع الحمل" في الصفحة 15 أدناه.من التسبب في الفشل ، ولكن 
هذا مفهوم جيدًا ، ويمكن في كثير من الأحيان الحفاظ على تشغيل الجهاز‐نينغ دون 
انقطاع لسنوات.حتى وقت قريب ، كان التكرار في مكونات الأجهزة كافياً لمعظم 
التطبيقاتنظرًا لأنه يجعل الفشل التام لآلة واحدة أمرًا نادرًا إلى حد ما. مادمت 
قادرااستعادة نسخة احتياطية على جهاز جديد بسرعة إلى حد ما ، ووقت التوقف في حالة 
الفشل هوليست كارثية في معظم التطبيقات. وبالتالي ، كان التكرار متعدد الآلات 
فقطمطلوب من قبل عدد صغير من التطبيقات التي كان التوافر العالي لها 
مطلقًاأساسيا.ومع ذلك ، مع زيادة أحجام البيانات ومتطلبات حوسبة التطبيقات ، 
أكثرتستخدم التطبيقات عددًا أكبر من الآلات ، والتي تزداد نسبيًامعدل أعطال 
الأجهزة. علاوة على ذلك ، في بعض المنصات "السحابية" مثل Amazonخدمات الويب من 
الشائع إلى حد ما أن تصبح مثيلات الآلة الافتراضية غير متوفرةبدون تحذير [7 ] ، حيث 
تم تصميم النظام الأساسي لإعطاء الأولوية للمرونة والمرونة iعلى موثوقية آلة 
واحدة.ومن ثم هناك توجه نحو أنظمة يمكنها تحمل خسارة آلات كاملة ،باستخدام تقنيات 
التسامح مع الأخطاء البرمجية بدلاً من التكرار في الأجهزة.تتمتع هذه الأنظمة أيضًا 
بمزايا تشغيلية: يتطلب نظام الخادم الفردي خطة‐وقت التوقف عن العمل إذا كنت بحاجة 
إلى إعادة تشغيل الجهاز (لتطبيق أمان نظام التشغيل، على سبيل المثال) ، في حين أن 
النظام الذي يمكنه تحمل فشل الجهاز يمكن أن يكون كذلكمصححة عقدة واحدة في كل مرة ، 
دون توقف النظام بأكمله.أخطاء البرامجعادة ما نفكر في أخطاء الأجهزة على أنها 
عشوائية ومستقلة عن كل منهاأخرى: لا يعني فشل قرص جهاز ما أن قرص جهاز آخر قيد 
التشغيلللفشل. قد يكون هناك ارتباط ضعيف (على سبيل المثال بسبب سبب شائع ، مثلدرجة 
الحرارة في رف الخادم) ، ولكن خلاف ذلك فمن غير المرجح أن يكون عدد كبير منستفشل 
مكونات الأجهزة في نفس الوقت.فئة أخرى من الأخطاء هي الخطأ المنهجي داخل النظام 
[8]. هذه العيوبيصعب توقعها ، ولأنها مترابطة عبر العقد ، فإنها تميل إلى 
التسببالعديد من حالات فشل النظام أكثر من أخطاء الأجهزة غير المرتبطة [ 5 ]. 
الامثله تشمل:• خطأ برمجي يتسبب في تعطل كل مثيل لخادم التطبيق عند حدوث ذلكنظرا 
لمدخلات سيئة معينة. على سبيل المثال ، ضع في الاعتبار الثانية الكبيسة في 30 يونيو 
،2012 الذي تسبب في توقف العديد من التطبيقات في وقت واحد ، بسبب خطأ فينواة لينكس 
[9].• تستخدم عملية سريعة بعض الموارد المشتركة - وقت وحدة المعالجة المركزية ، 
والذاكرة ، والقرصمساحة أو عرض النطاق الترددي للشبكة.6 | الفصل 1: تطبيقات موثوقة 
وقابلة للتطوير وقابلة للصيانة

      الصفحة 29
• تتباطأ الخدمة التي يعتمد عليها النظام أو تصبح غير مستجيبة أويبدأ في إرجاع 
الردود التالفة.• حالات الفشل المتتالية ، حيث يؤدي خطأ صغير في أحد المكونات إلى 
حدوث خطأمكون آخر ، والذي بدوره يؤدي إلى مزيد من الأخطاء [ 10].غالبًا ما تظل 
الأخطاء التي تسبب هذه الأنواع من أخطاء البرامج خامدة لفترة طويلةحتى يتم تشغيلها 
بواسطة مجموعة غير عادية من الظروف. في تلك الظروف ، فإنهتم الكشف عن أن البرنامج 
يقوم بنوع من الافتراضات حول بيئتهمنة - وبينما يكون هذا الافتراض صحيحًا عادةً ، 
فإنه يتوقف في النهاية عن كونه صحيحًاسبب ما [ 11].لا يوجد حل سريع لمشكلة الأخطاء 
المنهجية في البرامج. الكثير منيمكن أن تساعد الأشياء الصغيرة: التفكير بعناية في 
الافتراضات والتفاعلات فيالنظام ، والاختبار الشامل ، وعزل العملية ، والسماح 
للعمليات بالتعطل وإعادة التشغيل ،قياس ومراقبة وتحليل سلوك النظام في الإنتاج. إذا 
كان النظاممن المتوقع أن تقدم بعض الضمانات (على سبيل المثال ، في قائمة انتظار 
الرسائل ، أن الرقمber من الرسائل الواردة يساوي عدد الرسائل الصادرة) ، يمكنه ذلك 
باستمرارتحقق من نفسه أثناء تشغيله ، وأطلق تنبيهًا إذا تم العثور على تناقض [ 
12].أخطاء بشريةيقوم البشر بتصميم وبناء أنظمة البرمجيات والمشغلين الذين يحافظون 
على النظامالجري هم أيضا من البشر. حتى عندما يكون لديهم أفضل النوايا ، يكون البشر 
كذلكمعروف بأنه غير جدير بالثقة. على سبيل المثال ، وجدت دراسة واحدة لخدمات 
الإنترنت الكبيرة ذلككانت أخطاء التكوين من قبل المشغلين هي السبب الرئيسي لانقطاع 
التيار ، في حين أن الثابتلعبت أخطاء الأجهزة (الخوادم أو الشبكة) دورًا في 10-25٪ 
فقط من حالات الانقطاع [13].كيف نجعل نظامنا موثوقًا به ، على الرغم من البشر غير 
الموثوق بهم؟ أفضل الأنظمةاجمع بين عدة طرق:• تصميم الأنظمة بطريقة تقلل من فرص 
الخطأ. فمثلا،تسهل عمليات التجريد وواجهات برمجة التطبيقات وواجهات المسؤول المصممة 
جيدًا تنفيذ "الشيء الصحيح "، وتثبيط" الشيء الخطأ ". ومع ذلك ، إذا كانت الواجهات 
أيضًاتقييدية ، سيعمل الناس من حولهم ، وينفي مصلحتهم ، لذلك هذا هوالتوازن الصعب 
للحصول على الحق.• افصل بين الأماكن التي يرتكب فيها الناس معظم الأخطاء عن الأماكن 
التي يرتكب فيها الناسيمكن أن تسبب الفشل. على وجه الخصوص ، تقديم غير إنتاج كامل 
الميزاتبيئات رمل حيث يمكن للناس الاستكشاف والتجربة بأمان ، باستخدامبيانات حقيقية 
، دون التأثير على المستخدمين الحقيقيين.• اختبار شامل على جميع المستويات ، من 
اختبارات الوحدة إلى اختبارات تكامل النظام بأكمله والاختبارات اليدوية [ 3 ]. 
يستخدم الاختبار الآلي على نطاق واسع ، ومفهوم جيدًا ، ولا سيماقيمة على الصعيد 
المحلي لتغطية حالات الزاوية التي نادرًا ما تظهر في التشغيل العادي.الموثوقية | 7

      الصفحة 30
• السماح بالتعافي السريع والسهل من الأخطاء البشرية ، لتقليل التأثير فيحالة 
الفشل. على سبيل المثال ، اجعله سريعًا للتراجع عن تغييرات التكوين ، قم 
بالتدويرتدريجيًا (بحيث لا تؤثر أي أخطاء غير متوقعة إلا على مجموعة فرعية صغيرة 
منالمستخدمين) ، وتوفير أدوات لإعادة حساب البيانات (في حال اتضح أن com القديمكان 
العرض غير صحيح).• إعداد مراقبة مفصلة وواضحة ، مثل مقاييس الأداء والخطأمعدلات. 
يشار إلى هذا في التخصصات الهندسية الأخرى باسم القياس عن بعد . (مرةغادر الصاروخ 
الأرض ، والقياس عن بعد ضروري لتتبع ما يحدث ،ولفهم الإخفاقات [14 ].) يمكن أن تظهر 
لنا المراقبة علامات الإنذار المبكرnals ، وتسمح لنا بالتحقق مما إذا كانت هناك أية 
افتراضات أو قيودانتهكت. عند حدوث مشكلة ، يمكن أن تكون المقاييس لا تقدر بثمن في 
تشخيصالقضية.• ممارسات الإدارة الجيدة والتدريب - جانب معقد ومهم ،وخارج نطاق هذا 
الكتاب.ما هي أهمية الموثوقية؟الموثوقية ليست فقط لمحطات الطاقة النووية وبرامج 
التحكم في الحركة الجوية -من المتوقع أيضًا أن تعمل التطبيقات العادية بشكل موثوق. 
البق في العملالتطبيقات تتسبب في فقد الإنتاجية (والمخاطر القانونية إذا تم الإبلاغ 
عن الأرقام غير صحيحة‐بشكل صحيح) ، ويمكن أن يكون لانقطاع مواقع التجارة 
الإلكترونية تكاليف ضخمة من حيث خسارة الإيراداتوالسمعة.حتى في التطبيقات "غير 
الحرجة" نتحمل مسؤولية تجاه مستخدمينا. النظر في أالوالد الذي يخزن جميع الصور 
ومقاطع الفيديو لأطفالهم في تطبيق الصور الخاص بك[15]. كيف سيكون شعورهم إذا تعرضت 
قاعدة البيانات هذه للتلف فجأة؟ هل يعرفونكيفية استعادته من نسخة احتياطية؟هناك 
مواقف قد نختار فيها التضحية بالموثوقية من أجل تقليلهاتكلفة التطوير (على سبيل 
المثال عند تطوير نموذج أولي لمنتج لم يتم إثباتهket) أو التكلفة التشغيلية (على 
سبيل المثال لخدمة بهامش ربح ضيق للغاية) - لكننايجب أن تكون مدركًا تمامًا عندما 
نقطع الزوايا.قابلية التوسعحتى لو كان النظام يعمل بشكل موثوق به اليوم ، فإن هذا 
لا يعني أنه سيعمل بالضرورةبشكل موثوق في المستقبل. أحد الأسباب الشائعة للتدهور هو 
زيادة الحمل: ربمانما من 10000 مستخدم متزامن إلى 100000 مستخدم متزامن ، أو من 1 
مليونالأسد إلى 10 مليون. ربما تقوم بمعالجة كميات أكبر من البيانات مما كانت 
عليهقبل.قابلية التوسع هو المصطلح الذي نستخدمه لوصف قدرة النظام على التعامل مع 
الزيادةحمل. لاحظ ، مع ذلك ، أنه ليس تسمية أحادية البعد يمكننا إرفاقها بنظام 
sys‐8 | الفصل 1: تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      الصفحة 31
ثانيا. مصطلح مستعار من الهندسة الإلكترونية ، حيث يصف عدد مدخلات البوابة 
المنطقيةمتصل بمخرج بوابة أخرى. يحتاج الإخراج إلى توفير تيار كافٍ لدفع جميع 
المدخلات المرفقة.في أنظمة معالجة المعاملات ، نستخدمها لوصف عدد الطلبات إلى 
الخدمات الأخرى التي نحتاجهالتقديمه من أجل تلبية طلب وارد واحد.tem: لا معنى للقول 
"X قابل للقياس" أو "Y غير مقياس". بدلا من المناقشةقابلية التوسع تعني مناقشة 
السؤال: إذا كان النظام ينمو بطريقة معينة ،ما هي خياراتنا لمواكبة النمو؟ كيف نضيف 
الحوسبةالموارد للتعامل مع الحمل الإضافي؟وصف الحملأولاً ، نحتاج إلى وصف موجز 
للحمل الحالي على النظام ؛ عندها فقط يمكنناناقش أسئلة النمو (ماذا يحدث إذا تضاعف 
الحمل لدينا؟). يمكن وصف الحملمع عدد قليل من الأرقام التي نسميها معلمات التحميل . 
أفضل اختيار للمعلماتيعتمد على بنية نظامك: ربما تكون الطلبات في الثانية لـ aخادم 
الويب ، نسبة عمليات القراءة إلى عمليات الكتابة في قاعدة البيانات ، وعدد الأنشطة 
النشطة في نفس الوقتمستخدمين في غرفة محادثة أو معدل الوصول إلى ذاكرة تخزين مؤقت 
أو أي شيء آخر. ربما المتوسطالقضية هي ما يهمك ، أو ربما تهيمن صغيرة على عنق 
الزجاجةعدد الحالات القصوى.لجعل هذه الفكرة أكثر واقعية ، دعنا نعتبر Twitter كمثال 
، باستخدام البياناتنشرت في نوفمبر 2012 [ 16 ]. اثنتان من عمليات Twitter الرئيسية 
هما:مشاركة تغريدةيمكن للمستخدم نشر رسالة جديدة لمتابعيه (4.6 كيلو طلبات / ثانية 
في المتوسطالعمر ، أكثر من 12 ألف طلب / ثانية في الذروة).الجدول الزمني للمنزليمكن 
للمستخدم عرض التغريدات التي تم نشرها مؤخرًا من قبل الأشخاص الذين يتابعونهم (300 
كطلبات / ثانية).مجرد التعامل مع 12000 كتابة في الثانية (أعلى معدل لنشر 
التغريدات) سيكونسهل إلى حد ما. ومع ذلك ، فإن تحدي توسيع تويتر لا يرجع أساسًا إلى 
حجم التغريدات ،ولكن بسبب الانتشار الثاني - يتبع كل مستخدم العديد من الأشخاص ، 
ويتبع كل مستخدمكثير من الناس. هناك طريقتان على نطاق واسع لتنفيذ هاتين 
الأوبرانشوئها:1. يؤدي نشر تغريدة ببساطة إلى إدراج التغريدة الجديدة في مجموعة 
تغريدات عالمية.عندما يطلب المستخدم مخططًا زمنيًا للمنزل ، ابحث عن كل الأشخاص 
الذين يتابعونهم ، واعثر على الكلالتغريدات الأخيرة لكل من هؤلاء المستخدمين ، 
ودمجها (مرتبة حسب الوقت). في ريلا‐قاعدة بيانات tional مثل تلك الموجودة في الشكل 
1-2 ، سيكون هذا استعلامًا على غرار:حدد التغريدات . * ، المستخدمين . * من 
التغريداتمستخدمي JOINعلى التغريدات . هوية المرسل= المستخدمين . بطاقة تعريفJOIN 
يلي ON التالي . Followee_id = المستخدمين . بطاقة تعريفأين يتبع . follower_id = 
CURRENT_USERالتوسع | 9

      صفحة 32
2. احتفظ بذاكرة تخزين مؤقت للخط الزمني الرئيسي لكل مستخدم - مثل صندوق بريد 
التغريدات لـكل مستخدم مستلم (انظر الشكل 1-3 ). عندما ينشر مستخدم تغريدة ، ابحث 
عن جميع ملفاتالأشخاص الذين يتابعون هذا المستخدم ، ويقومون بإدراج التغريدة 
الجديدة في كل منزل من منازلهممخابئ الخط الزمني. عندئذٍ يكون طلب قراءة الجدول 
الزمني للمنزل رخيصًا ، لأنهتم حساب النتيجة 
مسبقًا.Follower_id17055506Followee_id12بطاقة تعريفهوية المرسلنص20مجرد 
الإعدادtwttr الخاص بي121142974214الطابع الزمنيبطاقة تعريف12الاسم الذي 
سيظهرجاكprofile_image1234567.jpgمسجّل الدخول حاليًاالمستخدم: 17055506يتبع 
الجدولجدول المستخدمينجدول التغريداتالشكل 1-2. مخطط علائقي بسيط لتنفيذ مخطط زمني 
للمنزل على Twitter.4.6 ك يكتب / ثانيةمشاركات المستخدم سقسقةكل التغريداتتغريدات 
للمستلم 1تغريدات للمستلم 2تغريدات للمستلم 3Fan-out: إرسال تغريدة إلىكل متابع 
(حتى 31 مالمتابعين لكل مستخدم)345 ك يكتب / ثانيةاحصل على الجدول الزمني 
للمنزل(موقع الويب ، API)300 ك قراءة / ثانيةتي 1تي 2تي 3تي 4تي 5تي 6تي 7تي 8تي 
3تي 4تي 5تي 7تي 8تي 5تي 6تي 8تي 1تي 3تي 5تي 7الشكل 1-3. خط أنابيب بيانات Twitter 
لتقديم التغريدات للمتابعين ، مع تحميل parame‐ters اعتبارًا من نوفمبر 2012 [16 
].استخدم الإصدار الأول من Twitter الأسلوب 1 ، لكن الأنظمة كافحت لمواكبة ذلكمع 
تحميل استفسارات الجدول الزمني للمنزل ، لذلك تحولت الشركة إلى النهج 2. هذايعمل 
بشكل أفضل لأن متوسط ​​معدل التغريدات المنشورة يقارب أمرين منحجم أقل من معدل 
قراءة الجدول الزمني للمنزل ، وبالتالي في هذه الحالة يكون Prefera‐بلي للقيام 
بمزيد من العمل في وقت الكتابة وأقل في وقت القراءة.ومع ذلك ، فإن الجانب السلبي 
للنهج 2 هو أن نشر تغريدة يتطلب الآن الكثيرعمل اضافي. في المتوسط ​​، يتم تسليم 
تغريدة إلى حوالي 75 متابعًا ، أي 4.6 ألف تغريدة لكل فردالثانية تصبح 345 ك يكتب 
في الثانية إلى ذاكرة التخزين المؤقت للجدول الزمني للمنزل. لكن هذا المتوسطيخفي 
حقيقة أن عدد المتابعين لكل مستخدم يختلف اختلافًا كبيرًا ، وبعض المستخدمين10 | 
الفصل 1: تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      الصفحة 33
ثالثا. في عالم مثالي ، يكون وقت تشغيل وظيفة المجموعة هو حجم مجموعة البيانات 
مقسومًا على الإنتاجية. في براكوtice ، غالبًا ما يكون وقت التشغيل أطول بسبب 
الانحراف (البيانات لا تنتشر بالتساوي عبر عمليات العمال) أوفي انتظار إتمام أبطأ 
مهمة.لديها أكثر من 30 مليون متابع. هذا يعني أن تغريدة واحدة قد ينتج عنها أكثر من 
30مليون يكتب إلى الجداول الزمنية للمنزل! القيام بذلك في الوقت المناسب - يحاول 
Twitter القيام بذلكتسليم التغريدات للمتابعين في غضون 5 ثوانٍ - يعد تحديًا 
كبيرًا.في مثال Twitter ، توزيع المتابعين لكل مستخدم (ربما مرجح بـكم مرة يغرد 
هؤلاء المستخدمون) ، هي معلمة تحميل رئيسية لمناقشة قابلية التوسع ، منذ ذلك 
الحينيحدد حمولة المروحة. قد يكون للتطبيق الخاص بك خصائص مختلفة جدًا‐التشنجات 
اللاإرادية ، ولكن يمكنك تطبيق مبادئ مماثلة على التفكير في حملها.آخر تطور في 
حكاية تويتر: الآن تم تنفيذ هذا النهج 2 بقوة ،ينتقل Twitter إلى مزيج من كلا 
النهجين. تستمر تغريدات معظم المستخدمينتم توزيعها على المخططات الزمنية للصفحة 
الرئيسية في وقت نشرها ، ولكن بعدد قليلمن المستخدمين الذين لديهم عدد كبير جدًا من 
المتابعين مستثناة من هذه التوزيعات. في حين أن،عند قراءة الخط الزمني للبيت ، تكون 
تغريدات المشاهير متبوعة بالمستخدميتم جلبها بشكل منفصل ودمجها مع المخطط الزمني 
الرئيسي عند قراءة المخطط الزمني ، مثلفي النهج 1. هذا النهج الهجين قادر على تقديم 
أداء جيد باستمرار.وصف الأداءبمجرد وصف الحمل على نظامنا ، يمكنك التحقق مما 
يحدثعندما يزيد الحمل. يمكنك النظر إليه بطريقتين:• عند زيادة معلمة التحميل ، 
والاحتفاظ بموارد النظام (وحدة المعالجة المركزية ،الذاكرة ، وعرض النطاق الترددي 
للشبكة ، وما إلى ذلك) دون تغيير ، كيف هو أداء نظامك؟تيم تتأثر؟• عند زيادة معامل 
التحميل ، ما مقدار ما تحتاجه لزيادةالموارد إذا كنت تريد الحفاظ على الأداء دون 
تغيير؟يتطلب كلا السؤالين أرقام أداء ، لذلك دعونا ننظر بإيجاز في وصفأداء 
النظام.في نظام معالجة الدُفعات مثل Hadoop ، نهتم عادةً بالإنتاجية -عدد السجلات 
التي يمكننا معالجتها في الثانية ، أو إجمالي الوقت المستغرق لتشغيل ملفمهمة على 
مجموعة بيانات بحجم معين. iii في الأنظمة عبر الإنترنت ، يكون وقت استجابة 
الخدمةعادةً ما تكون أكثر أهمية - أي الوقت بين إرسال العميل للطلب وتلقي 
الرد.التوسع | 11

      الصفحة 34
الكمون ووقت الاستجابةالكمون و زمن الاستجابة وغالبا ما تستخدم بشكل مترادف، 
لكنهاليسوا متشابهين. وقت الاستجابة هو ما يراه العميل: إلى جانب ذلكالوقت الفعلي 
لمعالجة الطلب ( وقت الخدمة ) ، بما في ذلكتأخيرات الشبكة والتأخيرات في الطابور. 
الكمون هو المدة التي أالطلب ينتظر معالجته - يكون خلالها كامنًا ، في انتظار‐خدمة 
جي [ 17 ].حتى إذا قمت بتقديم نفس الطلب مرارًا وتكرارًا ، فستجد صعوبة طفيفة.وقت 
استجابة قوي في كل محاولة. في الممارسة العملية ، في نظام يتعامل مع مجموعة متنوعة 
منالطلبات ، يمكن أن يختلف وقت الاستجابة كثيرًا. لذلك نحن بحاجة إلى التفكير في 
الردالوقت ليس كرقم واحد ، ولكن كتوزيع للقيم التي يمكنك قياسها.في الشكل 1-4 ، 
يمثل كل شريط رمادي طلب خدمة ، ويظهر ارتفاعهاكم من الوقت استغرق هذا الطلب. معظم 
الطلبات سريعة بشكل معقول ، ولكن هناك بعض الحالاتsional القيم المتطرفة أن يستغرق 
وقتا أطول من ذلك بكثير. ربما تكون الطلبات البطيئة في جوهرها أكثرباهظة الثمن ، 
على سبيل المثال لأنها تعالج المزيد من البيانات. ولكن حتى في السيناريو الذي 
تريدهأعتقد أن جميع الطلبات يجب أن تستغرق نفس الوقت ، فستحصل على تباين: إضافي 
عشوائييمكن تقديم زمن الوصول من خلال تبديل السياق إلى عملية الخلفية ، وفقدان 
ملفحزمة الشبكة وإعادة إرسال TCP ، توقف مؤقت لجمع البيانات المهملة ، خطأ في 
الصفحةإجبار قراءة من القرص ، اهتزازات ميكانيكية في رف الخادم [18] ، أو غيرها 
الكثيرأشياء.الطلباتوقت الاستجابةمتوسط ​​(ص 50)يعني المتوسط)99 بالمائة95 
بالمائةالشكل 1-4. توضيح المتوسطات والنسب المئوية: أوقات الاستجابة لعينة من 
100طلبات الخدمةمن الشائع رؤية متوسط وقت الاستجابة لإحدى الخدمات المبلغ عنها. 
(بالمعنى الدقيق للكلمة،لا يشير مصطلح المتوسط إلى أي معادلة معينة ، ولكنه عادة ما 
يكون كذلك من الناحية العمليةيُفهم على أنه الوسط الحسابي : بالنظر إلى مجموعة من 
القيم n ، اجمع كل القيم ، والقسمة على ن .) ومع ذلك ، فإن المتوسط ​​ليس مقياسًا 
جيدًا جدًا إذا كنت تريد معرفةوقت الاستجابة "المعتاد" ، لأنه لا يخبرك بعدد 
المستخدمين الذين يختبرون بالفعل‐enced هذا التأخير.عادة من الأفضل استخدام النسب 
المئوية . إذا أخذت قائمة أوقات الاستجابة الخاصة بك وقمت بفرزها ،من الأسرع إلى 
الأبطأ ، فالوسيط هو نقطة المنتصف: على سبيل المثال ، إذا كان لديك12 | الفصل 1: 
تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      صفحة 35
متوسط ​​وقت الاستجابة هو 200 مللي ثانية ، وهذا يعني أن نصف طلباتك تعود في أقل 
من200 مللي ثانية ونصف طلباتك تستغرق وقتًا أطول من ذلك.هذا يجعل الوسيط مقياسًا 
جيدًا إذا كنت تريد معرفة المدة التي يستغرقها المستخدمون عادةًيجب الانتظار: يتم 
تقديم نصف طلبات المستخدمين في أقل من متوسط ​​وقت الاستجابة ،والنصف الآخر يستغرق 
وقتًا أطول من المتوسط. يُعرف الوسيط أيضًا باسم 50النسبة المئوية ، وأحيانًا يتم 
اختصارها كـ p50 . لاحظ أن الوسيط هو في منتصف الطريقنقطة لطلب واحد ؛ إذا قام 
المستخدم بتقديم عدة طلبات (على مدار جلسة ses‐سيون ، أو بسبب تضمين العديد من 
الموارد في صفحة واحدة) ، فإن الاحتمالواحد منهم على الأقل أبطأ من الوسيط أكبر 
بكثير من 50٪.لمعرفة مدى سوء القيم المتطرفة ، يمكنك النظر إلى النسب المئوية 
الأعلى:في 95 ، 99 و 99.9th المئوية هم مشترك (مختصر P95 ، P99 و P999 ).وهي حدود 
وقت الاستجابة التي تكون عندها 95٪ أو 99٪ أو 99.9٪ من الطلباتأسرع من تلك العتبة 
المعينة. على سبيل المثال ، إذا كان زمن الاستجابة 95 بالمائةهي 1.5 ثانية ، وهذا 
يعني أن 95 طلبًا من أصل 100 تستغرق أقل من 1.5 ثانية ، و 5 من أصلمن 100 طلب 
يستغرق 1.5 ثانية أو أكثر. هذا موضح في الشكل 1-4.تعتبر النسب المئوية العالية مهمة 
لأنها تؤثر بشكل مباشر على تجربة المستخدمين معالخدمات. على سبيل المثال ، تصف 
Amazon متطلبات وقت الاستجابة الداخليةالخدمات من حيث النسبة المئوية 99.9 ، على 
الرغم من أنها تؤثر فقط على 1 من كل 1000الطلبات. هذا لأن العملاء الذين لديهم 
طلبات أبطأ هم في الغالب منأجروا العديد من عمليات الشراء - أي العملاء الأكثر قيمة 
[19 ]. من المهم أناجعل هؤلاء العملاء سعداء من خلال ضمان أن يكون موقع الويب 
سريعًا بالنسبة لهم: أمازونلاحظ أيضًا أن زيادة وقت الاستجابة بمقدار 100 مللي 
ثانية تقلل المبيعات بنسبة 1٪ [ 20] وأفاد آخرون أن التباطؤ لمدة ثانية واحدة يقلل 
من مقياس رضا العملاء16٪ [21 ،22 ].من ناحية أخرى ، تحسين النسبة المئوية 99.99 
(أبطأ 1 في 10000الطلبات) باهظة الثمن ولا تحقق فائدة كافية لمشتريات أمازونيطرح. 
من الصعب تقليل أوقات الاستجابة عند النسب المئوية العالية جدًا لأنها كذلكتتأثر 
بسهولة بالأحداث العشوائية الخارجة عن سيطرتك ، وتقل الفوائد.إيشينج.غالبًا ما 
تُستخدم النسب المئوية في أهداف مستوى الخدمة (SLO) وتوافق مستوى الخدمةإشارات 
(اتفاقيات مستوى الخدمة) ، العقود التي تحدد الأداء المتوقع وتوافر منالخدمات. على 
سبيل المثال ، قد تنص اتفاقية مستوى الخدمة على أن الخدمة تعتبر معطلة إذا كان 
لديهامتوسط ​​زمن الاستجابة أقل من 200 مللي ثانية و 99 بالمائة أقل من ثانية واحدة 
(إذا كانوقت الاستجابة أطول ، وقد يكون معطلاً أيضًا) ، وقد تكون الخدمة مطلوبةتصل 
إلى 99.9٪ على الأقل من الوقت. هذا يضع التوقعات لعملاء الخدمة ، ويسمح للعملاء 
بطلب استرداد إذا لم يتم الوفاء باتفاقية مستوى الخدمة.غالبًا ما تكون التأخيرات في 
قائمة الانتظار جزءًا كبيرًا من وقت الاستجابة عند النسب المئوية العالية. كيمكن 
للخادم معالجة عدد صغير فقط من الأشياء بالتوازي (مقيد على سبيل المثال بـعدد نوى 
وحدة المعالجة المركزية (CPU)) ، لا يتطلب الأمر سوى عدد قليل من الطلبات البطيئة 
للصمودالتوسع | 13

      الصفحة 36
معالجة الطلبات اللاحقة - تأثير يُعرف أحيانًا باسم رأس الخطالحجب . حتى إذا كانت 
هذه الطلبات اللاحقة سريعة للمعالجة على الخادم ، العميلستشهد وقت استجابة بطيئًا 
بشكل عام نظرًا لوقت انتظار الطلب المسبق لـاكتمال. بسبب هذا التأثير ، من المهم 
قياس أوقات الاستجابة للعميلالجانب.عند توليد الحمل بشكل مصطنع من أجل اختبار 
قابلية تطوير النظام ، فإن الحمل-يحتاج العميل إلى الاستمرار في إرسال الطلبات بشكل 
مستقل عن وقت الاستجابة.إذا انتظر العميل إكمال الطلب السابق قبل إرسال الطلب 
التالي ،هذا السلوك له تأثير مصطنع في إبقاء قوائم الانتظار أقصر في الاختبار 
منسيكونون في الواقع ، مما يؤدي إلى انحراف القياسات [23 ].النسب المئوية في 
الممارسةتصبح النسب المئوية المرتفعة ذات أهمية خاصة في خدمات الواجهة الخلفية التي 
تسمى mul‐عدة مرات كجزء من خدمة طلب مستخدم نهائي واحد. حتى لو قمت بإجراء 
المكالماتبالتوازي مع ذلك ، لا يزال طلب المستخدم النهائي بحاجة إلى انتظار أبطأ 
المكالمات الموازية لـاكتمال. لا يتطلب الأمر سوى مكالمة بطيئة واحدة لجعل طلب 
المستخدم النهائي بأكمله بطيئًا ، مثل الوهمtrated في الشكل 1-5. حتى لو كانت نسبة 
صغيرة فقط من المكالمات الخلفية بطيئة ، فإنتزداد فرصة الحصول على مكالمة بطيئة إذا 
كان طلب المستخدم النهائي يتطلب ردًا متعددًا‐إنهاء المكالمات ، وبالتالي فإن نسبة 
أعلى من طلبات المستخدم النهائي تنتهي بالبطء [ 24 ].إذا كنت ترغب في إضافة النسب 
المئوية لوقت الاستجابة إلى لوحات معلومات المراقبة الخاصة بكالخدمات ، تحتاج إلى 
حسابها بكفاءة على أساس مستمر. علي سبيل المثال انتقد ترغب في الاحتفاظ بنافذة 
متجددة لأوقات الاستجابة للطلبات في العشر سنوات الأخيرةدقائق. كل دقيقة تقوم بحساب 
الوسيط والنسب المئوية المختلفة على القيمة‐في تلك النافذة ، ورسم تلك المقاييس على 
رسم بياني.التنفيذ الساذج هو الاحتفاظ بقائمة أوقات الاستجابة لجميع الطلبات 
داخلنافذة الوقت ، وترتيب تلك القائمة كل دقيقة. إذا كان هذا غير فعال بالنسبة لك ، 
فهناكهي خوارزميات يمكنها حساب تقدير تقريبي جيد للنسب المئوية كحد أدنىتكلفة وحدة 
المعالجة المركزية والذاكرة ، مثل الاضمحلال الأمامي [25] أو t- Digg [ 26 ] أو 
HdrHistogram[ 27]. احذر من أن متوسط ​​النسب المئوية ، على سبيل المثال لتقليل دقة 
الوقت أو لتكوينالبيانات الصغيرة من العديد من الأجهزة ، لا معنى لها رياضيًا - 
الطريقة الصحيحة لـتجميع بيانات وقت الاستجابة هو إضافة الرسوم البيانية [28 ].14 | 
الفصل 1: تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      الصفحة 37
تطبيق الويبالواجهة الخلفية 1الخلفية 2الخلفية 3الخلفية 4الخلفية 5الخلفية 6الخلفية 
792 مللي ثانية76 مللي ثانية103 مللي ثانية143 مللي ثانية86 مللي ثانية487 مللي 
ثانية133 مللي ثانية92 مللي ثانية76 مللي ثانية103 مللي ثانية143 مللي ثانية86 مللي 
ثانية133 مللي ثانية487 مللي ثانيةطلب المستخدم النهائيالشكل 1-5. عندما تكون هناك 
حاجة إلى عدة مكالمات خلفية لخدمة طلب ما ، فإن الأمر لا يتطلب سوى خطأطلب الخلفية 
البطيئة gle لإبطاء طلب المستخدم النهائي بأكمله.نهج للتعامل مع الحملالآن وقد 
ناقشنا المعلمات لوصف الحمل والمقاييس لـقياس الأداء ، يمكننا البدء في مناقشة 
قابلية التوسع بجدية: كيف نفعل ذلكالحفاظ على الأداء الجيد ، حتى عندما تزيد معلمات 
الحمل لدينا من قبل البعضمقدار؟من غير المحتمل أن تتكيف البنية المناسبة لمستوى 
واحد من الحمل مع عشرةمرات هذا الحمل. إذا كنت تعمل في خدمة سريعة النمو ، فمن 
المحتمل أن تكون كذلكستحتاج إلى إعادة التفكير في الهندسة المعمارية الخاصة بك عند 
كل زيادة في الحمل- ربما في كثير من الأحيان أكثر من ذلك.غالبًا ما يتحدث الناس عن 
انقسام بين التوسع ( القياس الرأسي ، والانتقال إلىآلة أكثر قوة) والتحجيم ( 
التحجيم الأفقي ، وتوزيع الحملعبر العديد من الأجهزة الأصغر). توزيع الحمل عبر آلات 
متعددة هو أيضاالمعروفة باسم بنية لا شيء مشترك . النظام الذي يمكن تشغيله على جهاز 
واحد هوغالبًا ما تكون أبسط ، لكن الآلات المتطورة يمكن أن تصبح باهظة الثمن ومكثفة 
للغايةلا يمكن لأحمال العمل في كثير من الأحيان تجنب التوسع. في الواقع ، عادة ما 
تتضمن البنى الجيدةمزيج عملي من الأساليب: على سبيل المثال ، يمكن للعديد من الآلات 
القوية إلى حد مالا يزال أبسط وأرخص من عدد كبير من الأجهزة الافتراضية الصغيرة.بعض 
الأنظمة مرنة ، مما يعني أنها يمكن أن تضيف تلقائيًا موارد الحوسبة‐ces عندما 
يكتشفون زيادة في الحمل ، في حين يتم قياس الأنظمة الأخرى يدويًا (أيحلل الإنسان 
السعة ويقرر إضافة المزيد من الآلات إلى النظام). انيمكن أن يكون النظام المرن 
مفيدًا إذا كان الحمل غير متوقع بدرجة كبيرة ، ولكن تم قياسه يدويًا.تعتبر العناصر 
المؤقتة أبسط وقد يكون لها مفاجآت تشغيلية أقل (راجع "إعادة التوازن"في الصفحة 201 
).التوسع | 15

      الصفحة 38
في حين أن توزيع الخدمات عديمة الحالة عبر أجهزة متعددة أمر مباشر إلى حد ماوارد ، 
فإن أخذ أنظمة البيانات ذات الحالة من عقدة واحدة إلى الإعداد الموزع يمكن أن يؤدي 
إلىقلل من الكثير من التعقيد الإضافي. لهذا السبب كانت الحكمة الشائعة حتى وقت 
قريبهو الاحتفاظ بقاعدة البيانات الخاصة بك على عقدة واحدة (توسيع نطاقها) حتى 
زيادة التكلفة أوأجبرتك متطلبات التوفر على توزيعها.مع تحسن الأدوات والأفكار 
المجردة للأنظمة الموزعة ، هذه الحكمة الشائعةقد يتغير ، على الأقل بالنسبة لبعض 
أنواع التطبيقات. ومن المعقول أن يتم توزيعهاستصبح أنظمة البيانات الافتراضية في 
المستقبل ، حتى بالنسبة لحالات الاستخدام التي لا تتعامل معهاكميات كبيرة من 
البيانات أو حركة المرور. على مدار بقية هذا الكتاب سنقوم بتغطيتهالعديد من أنواع 
أنظمة البيانات الموزعة ، ومناقشة كيفية أدائها ليس فقط من حيثقابلية التوسع ، ولكن 
أيضًا سهولة الاستخدام وقابلية الصيانة.عادةً ما تكون بنية الأنظمة التي تعمل على 
نطاق واسع خاصة جدًا بـالتطبيق - لا يوجد شيء مثل تصميم عام ، مقاس واحد يناسب 
الجميع ، قابل للتطويرتلح (المعروفة بشكل غير رسمي باسم صلصة التحجيم السحرية ). قد 
تكون المشكلة في حجميقرأ ، حجم الكتابات ، حجم البيانات المراد تخزينها ، تعقيد 
البيانات ،متطلبات وقت الاستجابة ، أنماط الوصول ، أو (عادة) خليط من الكلمن هذه 
بالإضافة إلى العديد من القضايا.على سبيل المثال ، نظام مصمم للتعامل مع 100000 طلب 
في الثانية لكل منهماحجم 1 كيلوبايت ، يبدو مختلفًا تمامًا عن النظام المصمم لثلاثة 
طلبات لكلدقيقة ، كل 2 غيغابايت في الحجم - على الرغم من أن النظامين لهما نفس 
البياناتالإنتاجية.الهندسة المعمارية التي تتناسب بشكل جيد مع تطبيق معين مبنية على 
assump‐العمليات التي ستكون شائعة وأيها ستكون نادرة - معلمة الحملإتيرس. إذا تبين 
أن هذه الافتراضات خاطئة ، فإن الجهد الهندسي للتوسع يكون كذلكضائعة في أحسن 
الأحوال ، وفي أسوأ الأحوال تؤدي إلى نتائج عكسية. في مرحلة مبكرة من بدء التشغيل 
أومنتج غير مثبت ، من المهم عادةً أن تكون قادرًا على تكرار المنتج بسرعةالميزات ، 
بدلاً من توسيع نطاقها وفقًا لبعض الأحمال المستقبلية الافتراضية.على الرغم من أنها 
خاصة بتطبيق معين ، إلا أن البنى القابلة للتطوير تكون كذلكومع ذلك ، عادة ما يتم 
بناؤها من كتل بناء للأغراض العامة ، ومرتبة بشكل مألوفأنماط - رسم. في هذا الكتاب 
نناقش تلك اللبنات والأنماط.قابلية الصيانةمن المعروف أن غالبية تكلفة البرنامج لم 
يتم تطويره في البدايةمنة ، ولكن في صيانتها المستمرة - إصلاح الأخطاء ، والحفاظ 
على أنظمتها تعمل ،التحقيق في الإخفاقات وتكييفها مع الأنظمة الأساسية الجديدة 
وتعديلها لحالات الاستخدام الجديدة ،سداد الديون الفنية ، وإضافة ميزات جديدة.ومع 
ذلك ، لسوء الحظ ، فإن العديد من الأشخاص الذين يعملون على أنظمة البرامج يكرهون 
صيانةما يسمى بالأنظمة القديمة - ربما يتضمن إصلاح أخطاء الآخرين ، أو16 | الفصل 1: 
تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      الصفحة 39
العمل مع الأنظمة الأساسية التي عفا عليها الزمن الآن ، أو الأنظمة التي تم إجبارها 
على ذلكالأشياء التي لم يقصدوا بها أبدًا. كل نظام موروث غير سار في حد 
ذاتهوبالتالي يصعب إعطاء توصيات عامة للتعامل معها.ومع ذلك ، يمكننا ويجب علينا 
تصميم البرامج بطريقة نأمل أن تؤدي إلى تقليلتقليد الألم أثناء الصيانة ، وبالتالي 
تجنب إنشاء برامج قديمة بأنفسنا. للهذه الغاية ، سوف نولي اهتمامًا خاصًا لثلاثة 
مبادئ تصميم لأنظمة البرامج‐تيمس:قابلية التشغيلاجعل من السهل على فرق العمليات 
الحفاظ على تشغيل النظام بسلاسة.بساطةاجعل من السهل على المهندسين الجدد فهم النظام 
، عن طريق إزالة الكثيرقدر الإمكان من النظام. (لاحظ أن هذا يختلف عن البساطةمن 
واجهة المستخدم.)قابلية التطوراجعل من السهل على المهندسين في المستقبل إجراء 
تغييرات على النظام وتكييفهلحالات الاستخدام غير المتوقعة مع تغير المتطلبات. يُعرف 
أيضًا باسم القابلية للتوسعة ،قابلية التعديل أو اللدونة .كما في السابق مع 
الموثوقية وقابلية التوسع ، لا توجد إجابات سريعة لتحقيقهاهذه الأهداف. بدلاً من 
ذلك ، سنحاول التفكير في أنظمة ذات قابلية تشغيل وبساطة وقابلية التطور في 
الاعتبار.قابلية التشغيل: تسهيل الحياة للعملياتلقد تم اقتراح أن "العمليات الجيدة 
يمكنها في كثير من الأحيان التغلب على قيودبرنامج سيء (أو غير مكتمل) ، ولكن لا 
يمكن تشغيل البرامج الجيدة بشكل يعتمد عليه مع التشغيل السيئ‐" [12 ]. في حين أن 
بعض جوانب العمليات يمكن ويجب أن تكون آلية ، إلا أنها لا تزال كذلكيصل إلى البشر 
لإعداد هذه الأتمتة في المقام الأول ، وللتأكد من أنها تعملجي بشكل صحيح.تعد فرق 
العمليات أمرًا حيويًا للحفاظ على تشغيل نظام البرنامج بسلاسة. جيديقوم فريق 
العمليات عادةً بما يلي ، والمزيد [29 ]:• مراقبة صحة النظام ، واستعادة الخدمة 
بسرعة إذا دخلت في أحالة سيئة؛• تعقب سبب المشاكل ، مثل فشل النظام أو الأداء 
المتدهورمانس.• تحديث البرامج والأنظمة الأساسية ، بما في ذلك تصحيحات الأمان ؛• 
حفظ علامات التبويب حول كيفية تأثير الأنظمة المختلفة على بعضها البعض ، بحيث تكون 
إشكاليةيمكن تجنب التغيير قبل أن يسبب الضرر ؛قابلية الصيانة | 17

      صفحة 40
• توقع المشاكل المستقبلية وحلها قبل حدوثها ، مثل القدراتتخطيط؛• إنشاء ممارسات 
وأدوات جيدة للنشر وإدارة التكوينو اكثر؛• أداء مهام الصيانة المعقدة ، مثل نقل 
تطبيق من واحدمنصة لآخر ؛• الحفاظ على أمن النظام عند إجراء تغييرات على التكوين ؛• 
تحديد العمليات التي تجعل العمليات قابلة للتنبؤ بها وتساعد في الحفاظ على 
المنتجبيئة نشوئها مستقرة ؛• الحفاظ على معرفة المنظمة حول النظام ، حتى كفرديأتي 
الناس ويذهبون.تعني قابلية التشغيل الجيدة تسهيل المهام الروتينية ، مما يسمح لفريق 
العمليات بذلكتركيز جهودهم على الأنشطة عالية القيمة. يمكن لأنظمة البيانات القيام 
بأشياء مختلفةمهام روتينية سهلة ومنها:• توفير رؤية لسلوك وقت التشغيل والأجزاء 
الداخلية للنظام ، معمراقبة جيدة• دعم جيد للأتمتة والتكامل مع الأدوات القياسية.• 
تجنب الاعتماد على الآلات الفردية (السماح بإزالة الآلاتللصيانة بينما يستمر النظام 
ككل في العمل دون انقطاع) ؛• توثيق جيد ونموذج تشغيلي سهل الفهم ("إذا فعلت كذا ، 
صسوف يحدث")؛• حسن السلوك الافتراضي ، ولكن أيضا إعطاء المسؤولين حرية تجاوزالتخلف 
عن السداد عند الحاجة ؛• الشفاء الذاتي عند الاقتضاء ، مع منح المسؤولين التحكم 
اليدوي أيضًاعلى حالة النظام عند الحاجة ؛• سلوك يمكن التنبؤ به ، وتقليل 
المفاجآت.البساطة: إدارة التعقيديمكن أن تحتوي مشاريع البرامج الصغيرة على كود بسيط 
ومعبّر بشكل مبهج ، ولكن مثلتصبح المشاريع أكبر ، وغالبًا ما تصبح معقدة جدًا ويصعب 
فهمها. هذهيؤدي التعقيد إلى إبطاء كل من يحتاج إلى العمل على النظام ، مما يزيد 
منجي تكلفة الصيانة. مشروع برمجيات غارق في التعقيد في بعض الأحيانوصفت بأنها كرة 
طينية كبيرة [ 30 ].هناك العديد من الأعراض المحتملة للتعقيد: انفجار مساحة الدولة 
، ضيقاقتران الوحدات ، التبعيات المتشابكة ، التسمية والمصطلحات غير المتسقة ،18 | 
الفصل 1: تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      صفحة 41
تهدف الاختراقات إلى حل مشكلات الأداء ، وهي غلاف خاص للتغلب على المشكلاتفي مكان 
آخر ، وغير ذلك الكثير. لقد قيل الكثير حول هذا الموضوع بالفعل [ 31، 32 ،33 
].عندما يؤدي التعقيد إلى صعوبة الصيانة ، غالبًا ما تنتهي الميزانيات والجداول 
الزمنية‐يركض. في البرامج المعقدة ، هناك أيضًا خطر أكبر يتمثل في إدخال الأخطاء 
عند حدوث أخطاءتغيير: عندما يصعب على المطورين فهم النظام والعقلحول الافتراضات 
الخفية والعواقب غير المقصودة والتفاعلات غير المتوقعةيتم التغاضي عنها بسهولة 
أكبر. على العكس من ذلك ، فإن تقليل التعقيد يحسن بشكل كبيرإمكانية صيانة البرنامج 
، وبالتالي يجب أن تكون البساطة هدفًا رئيسيًا للأنظمةنحن نبني.إن تبسيط النظام لا 
يعني بالضرورة تقليل وظائفه ؛ يمكنيعني أيضًا إزالة التعقيد العرضي . موزلي وماركس 
[ 32] تعريف المركبإنها عرضية إذا لم تكن متأصلة في المشكلة التي يحلها البرنامج 
(كما يراهاالمستخدمين) ، ولكنها تنشأ فقط من التنفيذ.يعد التجريد من أفضل الأدوات 
التي لدينا لإزالة التعقيد العرضي . أيمكن أن يخفي التجريد الجيد قدرًا كبيرًا من 
تفاصيل التنفيذ خلف تنظيف ،واجهة سهلة الفهم. يمكن أيضًا استخدام تجريد جيد لمجموعة 
واسعة منتطبيقات مختلفة. ليس فقط إعادة الاستخدام هذه أكثر كفاءة من إعادة تنفيذ 
أشيء مشابه عدة مرات ، ولكنه يؤدي أيضًا إلى برامج عالية الجودة مثل الجودةتستفيد 
التحسينات في المكون المستخلص من جميع التطبيقات التي تستخدمه.على سبيل المثال ، 
لغات البرمجة عالية المستوى عبارة عن أفكار تجريدية تخفي الآلةالكود ، وسجلات وحدة 
المعالجة المركزية و syscalls. SQL هو تجريد يخفي معقد على القرصوهياكل البيانات في 
الذاكرة ، والطلبات المتزامنة من العملاء الآخرين ، وعدم الاتساق‐حالات الطوارئ بعد 
الحوادث. بالطبع ، عند البرمجة بلغة عالية المستوى ، نحن كذلكلا يزال يستخدم رمز 
الجهاز ؛ نحن فقط لا نستخدمها مباشرة ، لأن البرمجةيحفظنا تجريد اللغة من الاضطرار 
إلى التفكير في الأمر.ومع ذلك ، فإن العثور على أفكار تجريدية جيدة أمر صعب للغاية. 
في مجال الأنظمة الموزعة ،على الرغم من وجود العديد من الخوارزميات الجيدة ، إلا 
أنه من غير الواضح كيف يجب أن نكونتجميعها في أشكال مجردة تساعدنا في الحفاظ على 
تعقيد النظام عند مستوىمستوى يمكن التحكم فيه.خلال هذا الكتاب ، سوف نبقي أعيننا 
مفتوحة لأفكار جيدة تسمح لنا بذلكلاستخراج أجزاء من نظام كبير إلى مكونات محددة 
جيدًا وقابلة لإعادة الاستخدام.قابلية التطور: جعل التغيير سهلاًمن المستبعد جدًا 
أن تظل متطلبات نظامك دون تغيير بسببأي وقت مضى. على الأرجح ، هو في تغير مستمر: 
أنت تتعلم حقائق جديدة ، لم تكن في السابقتظهر حالات استخدام cipated ، وتغير 
أولويات العمل ، ويطلب المستخدمون ميزات جديدة ، وجديدةالمنصات تحل محل المنصات 
القديمة ، تتغير المتطلبات القانونية أو التنظيمية ، ونمويفرض النظام تغييرات 
معمارية ، إلخ.قابلية الصيانة | 19

      الصفحة 42
من حيث العمليات التنظيمية ، توفر أنماط العمل الرشيقة إطارًا لـالتكيف مع التغيير. 
طور المجتمع الرشيق أيضًا أدوات تقنية واتباعالخرشنة المفيدة عند تطوير البرامج في 
بيئة متغيرة باستمرارمنة ، مثل التطوير القائم على الاختبار (TDD) وإعادة 
البناء.تركز معظم المناقشات حول هذه التقنيات الرشيقة على نطاق محلي صغير إلى حد ما 
(زوجانمن ملفات التعليمات البرمجية المصدر داخل نفس التطبيق). في هذا الكتاب ، نبحث 
عن طرقسرعة متزايدة على مستوى نظام بيانات أكبر ، ربما يتكون من عدة أنظمةتطبيقات 
أو خدمات مختلفة ذات خصائص مختلفة. على سبيل المثال ، كيفهل يمكنك "إعادة تشكيل" 
بنية Twitter لتجميع الجداول الزمنية للمنزل ("وصف‐تحميل "في الصفحة 9) من النهج 1 
إلى النهج 2؟السهولة التي يمكنك من خلالها تعديل نظام البيانات ، وتكييفه مع 
المتغيرات تتطلبments ، ترتبط ارتباطًا وثيقًا ببساطتها وتجريدها: بسيطة وسهلة-عادة 
ما تكون أنظمة الفهم أسهل في التعديل من الأنظمة المعقدة. ولكن بما أن هذاهذه فكرة 
مهمة ، سنستخدم كلمة مختلفة للإشارة إلى سرعة الحركة في نظام البيانات‐مستوى tem: 
قابلية التطور [34 ].ملخصفي هذا الفصل ، اكتشفنا بعض الطرق الأساسية للتفكير في 
البيانات-تطبيقات مكثفة. ستوجهنا هذه المبادئ خلال بقية الكتاب ،عندما نتعمق في 
التفاصيل الفنية العميقة.يجب أن يفي التطبيق بالمتطلبات المختلفة حتى يكون مفيدًا. 
هناكالمتطلبات الوظيفية (ما يجب القيام به ، على سبيل المثال السماح بتخزين 
البيانات واسترجاعها ،تم البحث عنها ومعالجتها بطرق مختلفة) ، وبعض المتطلبات غير 
الوظيفية(الخصائص العامة مثل الأمان والموثوقية والامتثال وقابلية التوسع والتوافق 
وقابلية الصيانة). ناقشنا في هذا الفصل الموثوقية وقابلية التوسع والصيانة‐إيتي 
بالتفصيل.الموثوقية تعني جعل الأنظمة تعمل بشكل صحيح ، حتى عند حدوث الأعطال. يمكن 
للعيوبتكون في الأجهزة (عادةً ما تكون عشوائية وغير مرتبطة) ، والبرمجيات (الأخطاء 
عادةً ما تكون sys‐متطرف ويصعب التعامل معه) ، والبشر (الذين يرتكبون أخطاء لا 
محالة منمن وقت إلى آخر). يمكن لتقنيات تحمل الخطأ إخفاء أنواع معينة من الأخطاء من 
النهايةالمستخدم.تعني قابلية التوسع وجود استراتيجيات للحفاظ على الأداء جيدًا ، 
حتى عند التحميليزيد. لمناقشة قابلية التوسع ، نحتاج أولاً إلى طرق لوصف الحمل 
وأداء كميا. نظرنا بإيجاز إلى الجداول الزمنية الرئيسية لموقع Twitter على أنها 
ملفمثال لوصف الحمل ووقت الاستجابة المئوية كوسيلة للقياس لكلشكل. في نظام قابل 
للتطوير ، يمكنك إضافة سعة معالجة من أجل البقاءموثوقة تحت حمولة عالية.20 | الفصل 
1: تطبيقات موثوقة وقابلة للتطوير وقابلة للصيانة

      صفحة 43
تتمتع قابلية الصيانة بالعديد من الجوانب ، ولكنها في جوهرها تتعلق بجعل الحياة 
أفضل لـفرق الهندسة والعمليات التي تحتاج إلى العمل مع النظام. جيد جدايمكن أن 
تساعد في تقليل التعقيد وتسهيل تعديل النظام والتكيف معهحالات استخدام جديدة. تعني 
قابلية التشغيل الجيدة وجود رؤية جيدة لصحة النظام ،وامتلاك طرق فعالة 
لإدارتها.للأسف ، لا توجد إجابة سريعة لجعل التطبيقات موثوقة أو قابلة للتطوير 
أوقابل للصيانة. ومع ذلك ، هناك أنماط وتقنيات معينة تحافظ على إعادةتظهر في أنواع 
مختلفة من التطبيقات. سنفعل في الفصول القليلة القادمةألق نظرة على بعض الأمثلة 
لأنظمة البيانات ، وحلل كيفية عملهاتلك الأهداف.لاحقًا في الكتاب ، في الجزء الثالث 
، سنلقي نظرة على أنماط الأنظمة التي تتكون من سبعةتعمل المكونات المختلفة معًا ، 
مثل الموجود في الشكل 1-1 .مراجع[1 ] مايكل ستونبراكر وأوغور جيتينتميل: "مقاس واحد 
يناسب الجميع: فكرة لمنلقد حان الوقت وذهب "، في المؤتمر الدولي الحادي والعشرين 
لهندسة البيانات(ICDE) ، أبريل 2005.[2 ] والتر إل هايمردينجر وتشارلز بي واينستوك: 
"إطار مفاهيمي لالتسامح مع أعطال النظام، "Technical Report CMU / SEI-92-TR-033، 
Software Engineer‐معهد إنج ، جامعة كارنيجي ميلون ، أكتوبر 1992.[3 ] Ding Yuan و 
Yu Luo و Xin Zhuang وآخرون: "اختبار بسيط يمكن أن يمنع معظم Critiفشل cal: تحليل 
فشل الإنتاج في نظام كثيف البيانات الموزعة‐tems ، "في ندوة USENIX الحادية عشرة 
حول تصميم أنظمة التشغيل وتنفيذها(OSDI) ، أكتوبر 2014.[4] Yury Izrailevsky و 
Ariel Tseitlin: " The Netflix Simian Army " techblog.net‐flix.com ، 19 يوليو 
2011.[5] دانيال فورد وفرانسوا لابيل وفلورنتينا الأول بوبوفيتشي وآخرون: " التوفر 
في Glob‐Ally Distributed Storage Systems "، في مؤتمر USENIX التاسع حول أنظمة 
التشغيلالتصميم والتنفيذ (OSDI) ، أكتوبر 2010.[6 ] شاطئ بريان: "تحديث موثوقية 
محرك الأقراص الثابتة - سبتمبر 2014 ، "backblaze.com ، 23 سبتمبر‐تشرين الثاني 
2014.[7] Laurie Voss: “ AWS: The Good، the Bad and the Ugly ،” blog.awe.sm ، 18 
ديسمبر2012.[8] Haryadi S Gunawi و Mingzhe Hao و Tanakorn Leesatapornwongsa 
وآخرون: " Whatالبق تعيش في السحابة؟، في ندوة ACM الخامسة حول الحوسبة السحابية 
(SoCC) ،تشرين الثاني (نوفمبر) 2014. دوى: 10.1145 / 2670979.2670986ملخص | 21

      صفحة 44
[9 ] نيلسون مينار:الثانية الكبيسة تعطل نصف الإنترنت، "somebits.com ، 3 تموز 
(يوليو) 2012.[10 ] خدمات أمازون ويب: "ملخص لـ Amazon EC2 و Amazon RDS Ser‐نائب 
الاضطراب في منطقة شرق الولايات المتحدة، ”aws.amazon.com ، 29 أبريل 2011.[11 ] 
ريتشارد آي كوك: "كيف تفشل الأنظمة المعقدة، "Cognitive Technologies Labora‐توري ، 
أبريل 2000.[12] جاي كريبس: " التعرف على حقيقة موثوقية النظام الموزع، 
blog.empathy‐box.com ، 19 مارس 2012.[13] ديفيد أوبنهايمر ، أرشانا جاناباثي ، 
وديفيد أ باترسون: " لماذا تفعلخدمات الإنترنت تفشل ، وماذا يمكن فعله حيال ذلك؟ ، 
"في ندوة USENIX الرابعة بتاريختقنيات وأنظمة الإنترنت (USITS) ، مارس 2003.[14 ] 
ناثان مارز: "مبادئ هندسة البرمجيات ، الجزء 1 ، nathanmarz.com ، 2ابريل 2013.[15 
] مايكل جوريويتز: "التأثير البشري للبق "، jury.me ، 15 مارس 2013.[16] رافي 
كريكوريان: " Timelines at Scale " في QCon San Francisco ، نوفمبر 2012.[17] مارتن 
فاولر: أنماط معمارية تطبيقات المؤسسة . أديسون ويسلي ،تشرين الثاني (نوفمبر) 2002. 
ISBN: 978-0321127426[18] كيلي سومرز: " بعد كل ذلك ، ما تسبب في حدوث زمن انتقال 
500 مللي ثانية على القرصعندما استبدلنا الخادم الفعلي؟ عدم اتزان طفيف في الرف 
يسبب الاهتزاز." عبيط-ter.com ، 13 نوفمبر 2014.[19] جوزيبي ديكانديا ، ودينيز 
هاستورون ، ومادان جامباني ، وآخرون: " دينامو: أماشمتجر القيمة الرئيسية المتوفر 
للغاية من zon "، في ندوة ACM الحادية والعشرين حول أنظمة التشغيل‐مبادئ tems 
(SOSP) ، أكتوبر 2007.[20] جريج ليندن: " اجعل البيانات مفيدة " ، في فصل تعدين 
البيانات بجامعة ستانفورد(CS345) ، ديسمبر 2006.[21 ] تامي إيفرتس: "التكلفة 
الحقيقية للوقت البطيء مقابل وقت التعطل "webperformanceto‐day.com ، 12 نوفمبر 
2014.[22 ] جيك بروتلاغ: "السرعة مهمة لبحث الويب من Google، 
"googleresearch.blog‐spot.co.uk ، 22 يونيو 2009.[23] علاج تايلر: " كل ما تعرفه 
عن الكمون خاطئ، "bravenew‐geek.com ، 12 ديسمبر 2015.[24 ] جيفري دين ولويز أندريه 
باروسو: "The Tail at Scale ، ” Communications of theACM ، المجلد 56 ، العدد 2 ، 
الصفحات 74-80 ، فبراير 2013. doi:10.1145 / 2408776.2408794[25] غراهام كورمود 
وفلاديسلاف شكابينيوك وديفيش سريفاستافا وبوجيان شو:"إلى الأمام الاضمحلال: نموذج 
عملي لتضاؤل ​​الوقت لأنظمة التدفق ، "في 2522 | الفصل 1: تطبيقات موثوقة وقابلة 
للتطوير وقابلة للصيانة

      صفحة 45
مؤتمر IEEE الدولي حول هندسة البيانات (ICDE) ، الصفحات 138-149 ، مارس2009.[26] 
تيد دانينغ وأتمار إرتل: " حساب الكميات الدقيقة للغاية باستخدام t-يهضم، 
”github.com ، آذار (مارس) 2014.[27] جيل تيني: " HdrHistogram، 
"hdrhistogram.org.[28 ] بارون شوارتز: "لماذا لا تعمل النسب المئوية بالطريقة التي 
تفكر بها، "vividcor‐tex.com ، 7 ديسمبر 2015.[29] جيمس هاميلتون: " حول تصميم ونشر 
خدمات مقياس الإنترنت x، "في الحادي والعشرينمؤتمر إدارة نظام التثبيت الكبير 
(LISA) ، نوفمبر 2007.[30 ] بريان فوت وجوزيف يودر: "كرة كبيرة من الطين، "في 
المؤتمر الرابع للنمطلغات البرامج (PLoP) ، سبتمبر 1997.[31] فريدريك بي بروكس: "لا 
توجد رصاصة فضية - جوهر وحادث في Software Engineering "، في The Mythical 
Man-Month ، Anniversary Edition ، Addison-Wesley ، 1995.رقم ال ISBN: 
9780201835953[32 ] بن موسلي وبيتر ماركس: "Out of the Tar Pit "، في BCS Software 
Practiceتقدم (واس) ، 2006.[33 ] ريتش هيكي: "بسيط أصبح سهلاً، "في Strange Loop ، 
أيلول (سبتمبر) 2011.[34 ] Hongyu Pei Breivold و Ivica Crnkovic و Peter J 
Eriksson: "تحليل البرمجياتقابلية التطور، في الدورة السنوية الثانية والثلاثين من 
IEEE International Computer Software and Applica‐مؤتمر (COMPSAC) ، الصفحات 
327-330 ، يوليو 2008. doi: 10.1109 / COMPSAC.2008.50ملخص | 23

      الصفحة 46


      صفحة 47
الفصل 2نماذج البيانات ولغات الاستعلامحدود لغتي تعني حدود عالمي.-Ludwig 
فيتجنشتاين، TractatusLogico-Philosophicus (1922)ربما تكون نماذج البيانات أهم جزء 
في تطوير البرمجيات ، لأنلديهم مثل هذا التأثير العميق: ليس فقط على كيفية كتابة 
البرنامج ، ولكن أيضًاكيف نفكر في المشكلة التي نقوم بحلها.يتم إنشاء معظم 
التطبيقات من خلال وضع نموذج بيانات فوق نموذج آخر. لكلالطبقة ، السؤال الرئيسي هو: 
كيف يتم تمثيلها من حيث الطبقة التالية - الأدنى؟ إلى عن علىمثال:1. بصفتك مطورًا 
للتطبيق ، فإنك تنظر إلى العالم الحقيقي (الذي يوجد فيه أشخاصple ، والمنظمات ، 
والسلع ، والإجراءات ، وتدفقات الأموال ، وأجهزة الاستشعار ، وما إلى ذلك) ووضع 
نموذج لهاشروط الكائنات أو هياكل البيانات ، وواجهات برمجة التطبيقات التي تتعامل 
مع هيكل البيانات تلك‐توريس. غالبًا ما تكون هذه الهياكل خاصة بتطبيقك.2. عندما 
تريد تخزين هياكل البيانات هذه ، فإنك تعبر عنها من حيث أنموذج بيانات للأغراض 
العامة ، مثل مستندات JSON أو XML ، والجداول في rela‐قاعدة بيانات tional ، أو 
نموذج رسم بياني.3. قرر المهندسون الذين قاموا ببناء برنامج قاعدة البيانات طريقة 
التمثيلأن بيانات JSON / XML / العلائقية / الرسم البياني من حيث وحدات البايت في 
الذاكرة ، أو على القرص ، أوعلى الشبكة. قد يسمح التمثيل بالاستعلام عن البيانات 
والبحث فيهاتم التلاعب بها ومعالجتها بطرق مختلفة.4. على المستويات الأقل حتى الآن 
، اكتشف مهندسو الأجهزة كيفية تمثيل وحدات البايتمن حيث التيارات الكهربائية ونبضات 
الضوء والمجالات المغناطيسية وغير ذلك.25

      صفحة 48
في تطبيق معقد ، قد يكون هناك المزيد من المستويات الوسيطة ، مثل واجهات برمجة 
التطبيقات المبنيةبناءً على واجهات برمجة التطبيقات ، لكن الفكرة الأساسية لا تزال 
كما هي: تخفي كل طبقة تعقيد ملفطبقات تحتها من خلال توفير نموذج بيانات نظيف. تسمح 
هذه التجريدات باختلافمجموعات من الأشخاص - على سبيل المثال ، المهندسين في بائع 
قاعدة البيانات والتطبيقيستخدم مطورو الكاتيون قاعدة بياناتهم - للعمل معًا بشكل 
فعال.هناك العديد من الأنواع المختلفة لنماذج البيانات ، وكل نموذج بيانات 
يجسدهاافتراضات حول كيفية استخدامه. بعض أنواع الاستخدام سهلة والبعض الآخرغير 
مدعومة ؛ بعض العمليات سريعة والبعض الآخر أداء سيئ ؛ بعض البياناتتبدو التحولات 
طبيعية وبعضها محرج.يمكن أن يستغرق الأمر الكثير من الجهد لإتقان نموذج بيانات واحد 
فقط (فكر في عدد الكتب الموجودة هناكعلى نمذجة البيانات العلائقية). بناء البرامج 
صعب بما فيه الكفاية ، حتى أثناء العمل‐باستخدام نموذج بيانات واحد فقط ، ودون 
الحاجة إلى القلق بشأن أعماله الداخلية. ولكننظرًا لأن نموذج البيانات له تأثير 
عميق على ما يمكن للبرنامج أعلاهولا يمكنك فعل ذلك ، فمن المهم اختيار ما يناسب 
التطبيق.في هذا الفصل ، سوف نلقي نظرة على مجموعة من نماذج البيانات ذات الأغراض 
العامة لتخزين البيانات‐العمر والاستعلام (النقطة 2 في قائمة الطبقات أعلاه). على 
وجه الخصوص ، سوف نقارنالنموذج العلائقي ونموذج المستند وعدد قليل من نماذج 
البيانات القائمة على الرسم البياني. نحنسيبحث أيضًا في لغات الاستعلام المختلفة 
ويقارن حالات استخدامها. في الفصل 3سنناقش كيفية عمل محركات التخزين ، أي كيف تعمل 
نماذج البيانات هذه في الواقعنفذت (النقطة 3 في قائمة الطبقات أعلاه).النموذج 
العلائقي مقابل نموذج المستندمن المحتمل أن يكون نموذج البيانات الأكثر شهرة اليوم 
هو نموذج SQL ، بناءً على العلائقيةالنموذج الذي اقترحه إدغار كود عام 1970 [1]: 
يتم تنظيم البيانات في علاقات (في SQL:الجداول) ، حيث تكون كل علاقة عبارة عن 
مجموعة غير مرتبة من المجموعات (الصفوف).كان النموذج العلائقي اقتراحًا نظريًا ، 
وكان كثير من الناس في ذلك الوقتشكك في إمكانية تنفيذه بكفاءة. ومع ذلك ، بحلول 
منتصف الثمانينيات ،أصبحت أنظمة إدارة قواعد البيانات العلائقية (RDBMS) و SQL 
أداةخيارًا لمعظم الأشخاص الذين يحتاجون إلى تخزين البيانات والاستعلام عنها بنوع 
من المعتادهيكل. استمرت هيمنة قواعد البيانات العلائقية حوالي 25-30 عامًا - 
أالخلود في تاريخ الحوسبة.تكمن جذور قواعد البيانات العلائقية في معالجة بيانات 
الأعمال ، والتي تم إجراؤهاعلى أجهزة الكمبيوتر المركزية في الستينيات والسبعينيات. 
تظهر حالات الاستخدام الدنيوية منمنظور اليوم: عادة معالجة المعاملات (إدخال 
المبيعات أو تحويل البنك‐عمليات الحجز ، وحجوزات شركات الطيران ، وحفظ المخزون في 
المستودعات) ومعالجة الدفعات (cus‐)الفواتير ، وكشوف المرتبات ، وإعداد 
التقارير).26 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      صفحة 49
أجبرت قواعد البيانات الأخرى في ذلك الوقت مطوري التطبيقات على التفكير كثيرًا 
فيالتمثيل الداخلي للبيانات في قاعدة البيانات. الهدف من النموذج العلائقيهو إخفاء 
تفاصيل التنفيذ خلف واجهة أنظف.على مر السنين ، كان هناك العديد من الأساليب 
المتنافسة لتخزين البيانات والاستعلام. في 1970s وأوائل 1980s، و نموذج الشبكة و 
نموذج هرميكانت البدائل الرئيسية ، لكن النموذج العلائقي هيمن عليها. موضوعجاءت 
قواعد البيانات وعادت مرة أخرى في أواخر الثمانينيات وأوائل التسعينيات. قواعد 
بيانات XMLظهرت في أوائل العقد الأول من القرن الحادي والعشرين ، لكنها لم تشهد سوى 
تبنيًا متخصصًا. كل منافسأنتج النموذج العلائقي الكثير من الضجيج في وقته ، لكنه لم 
يستمر أبدًا [ 2 ].نظرًا لأن أجهزة الكمبيوتر أصبحت أكثر قوة وترابطًا بالشبكة ، 
فقد بدأ استخدامهالأغراض متنوعة بشكل متزايد. وبشكل ملحوظ ، تحولت قواعد البيانات 
العلائقية إلىالتعميم جيدًا ، بما يتجاوز النطاق الأصلي لمعالجة بيانات الأعمال ، 
إلى أمجموعة واسعة من حالات الاستخدام. لا يزال الكثير مما تراه على الويب اليوم 
مدعومًا منقواعد البيانات العلائقية - سواء كان ذلك النشر عبر الإنترنت أو المناقشة 
أو الشبكات الاجتماعية أو الإلكترونية -تطبيقات التجارة أو الألعاب أو تطبيقات 
إنتاجية البرامج كخدمة أو أكثر من ذلك بكثير.ولادة NoSQLالآن ، في العقد الأول من 
القرن الحادي والعشرين ، تعد NoSQL أحدث محاولة للإطاحة بالنموذج العلائقيهيمنة. 
مصطلح NoSQL مؤسف ، لأنه لا يشير في الواقع إلى أي معادلةتقنية ticular - كان القصد 
منها ببساطة أن تكون هاشتاج جذاب على تويتر للقاءعلى قواعد بيانات مفتوحة المصدر 
وموزعة وغير علائقية في عام 2009 [ 3 ]. ومع ذلك ، فإنمصطلح أصاب وتوترًا ، وسرعان 
ما انتشر عبر مجتمع بدء تشغيل الويب ووراء. يرتبط عدد من أنظمة قواعد البيانات 
المثيرة للاهتمام الآن بـ#NoSQL hashtag ، وقد تمت إعادة تفسيره بأثر رجعي على أنه 
ليس فقط SQL [ 4 ].هناك العديد من القوى الدافعة وراء اعتماد قواعد بيانات NoSQL ، 
بما في ذلك:• الحاجة إلى قابلية توسع أكبر مما يمكن أن تحققه قواعد البيانات 
العلائقية بسهولة ، بما في ذلكمجموعات بيانات كبيرة جدًا أو إنتاجية كتابة عالية 
جدًا ؛• تفضيل واسع النطاق للبرامج المجانية ومفتوحة المصدر على البيانات 
التجارية‐المنتجات الأساسية• عمليات الاستعلام المتخصصة التي لا يدعمها النموذج 
العلائقي بشكل جيد.• الإحباط من تقييد المخططات العلائقية ، والرغبة في المزيدنموذج 
بيانات ديناميكي ومعبّر [ 5 ].التطبيقات المختلفة لها متطلبات مختلفة ، وأفضل 
اختيار للتكنولوجيالحالة استخدام واحدة قد تكون مختلفة تمامًا عن الخيار الأفضل 
لحالة استخدام أخرى. هو - هيلذلك يبدو من المحتمل أنه في المستقبل المنظور ، ستستمر 
قواعد البيانات العلائقيةلاستخدامها جنبًا إلى جنب مع مجموعة متنوعة من مخازن 
البيانات غير العلائقية - وهي فكرةتسمى أحيانًا استمرار تعدد اللغات [3].النموذج 
العلائقي مقابل نموذج المستند | 27

      صفحة 50
أنا. مصطلح مستعار من الإلكترونيات. كل دائرة كهربائية لها مقاومة معينة (مقاومة 
التناوبcurrent) على مدخلاته ومخرجاته. عندما تقوم بتوصيل خرج إحدى الدوائر بإدخال 
آخر ، الطاقةيتم تعظيم النقل عبر الاتصال إذا كانت معاوقة الإخراج والمدخلات 
للدائرتين متطابقتين. انيمكن أن يؤدي عدم تطابق المعاوقة إلى انعكاسات إشارة ومشاكل 
أخرى.عدم تطابق الكائن في العلائقيةيتم تطوير معظم التطبيقات اليوم في البرمجة 
الشيئية lan‐guages ​​، مما يؤدي إلى انتقاد مشترك لنموذج بيانات SQL: إذا تم تخزين 
البيانات فيالجداول العلائقية ، يلزم وجود طبقة ترجمة غير ملائمة بين الكائنات في 
ملفكود التطبيق ونموذج قاعدة البيانات للجداول والصفوف والأعمدة. قطع الاتصالبين 
النماذج يسمى أحيانًا عدم تطابق المعاوقة i .أطر عمل رسم الخرائط العلائقية (ORM) 
مثل ActiveRecord و Hibernateتقليل كمية الشفرة المعيارية المطلوبة لطبقة الترجمة 
هذه ، لكنهالا يمكن إخفاء الاختلافات بين النموذجين تمامًا.على سبيل المثال ، يوضح 
الشكل 2-1 كيف يمكن أن تكون السيرة الذاتية (ملف تعريف LinkedIn)معبرا عنها في مخطط 
العلائقية. يمكن التعرف على ملف التعريف ككل بواسطة ملف فريدالمعرف، USER_ID . 
الحقول مثل first_name و last_name تظهر بالضبط مرة واحدة لكلالمستخدم ، بحيث يمكن 
نمذجتها كأعمدة في جدول المستخدمين .ومع ذلك ، فإن معظم الناس لديهم أكثر من وظيفة 
واحدة في حياتهم المهنية (المناصب) ، تختلف‐عدد فترات التعليم ، وأي عدد من معلومات 
الاتصالنشوئها. هناك علاقة رأس بأطراف من المستخدم لهذه العناصر ، والتي يمكن أن 
تكون كذلكممثلة بطرق مختلفة:• في نموذج SQL التقليدي (قبل SQL: 1999) ، تم تطبيع 
أكثرها شيوعًاالتمثيل هو وضع المواقف ، التعليم و contact_info في منفصلةالجداول ، 
مع مرجع مفتاح خارجي لجدول المستخدمين ، كما فيالشكل 2-1 .• أضافت الإصدارات 
اللاحقة من معيار SQL دعمًا لأنواع البيانات المهيكلة وبيانات XML ، التي تسمح 
بتخزين البيانات متعددة القيم في صف واحد ، باستخدامدعم الاستعلام والفهرسة داخل 
تلك المستندات. هذه الميزاتمدعومة بدرجات متفاوتة من قبل Oracle و IBM DB2 و MS SQL 
Server و Post‐greSQL [ 6 ، 7]. تحتوي PostgreSQL أيضًا على امتدادات خاصة بالبائع 
لمصفوفة JSONأنواع البيانات ، وأكثر من ذلك [ 8 ].• تشفير الوظائف والتعليم 
ومعلومات الاتصال كمستند JSON أو XML ، وتخزينها علىعمود نص في قاعدة البيانات ، 
والسماح للتطبيق بتفسير هيكلهوالمحتوى. في هذا الإعداد ، لا يمكنك عادةً استخدام 
قاعدة البيانات للاستعلام عن val‐ues داخل هذا العمود المشفر.بالنسبة لهيكل 
البيانات مثل السيرة الذاتية ، والذي يكون في الغالب مستندًا قائمًا بذاته ، 
JSONيمكن أن يكون التمثيل مناسبًا تمامًا: انظر المثال 2-1. تتمتع JSON بجاذبية28 | 
الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      صفحة 51
كونها أبسط بكثير من XML. قواعد البيانات الموجهة للمستندات مثل MongoDB [9] ،إعادة 
التفكير في ديسيبل [10 ] ، CouchDB [ 11] و Espresso [ 12 ] يدعمان نموذج البيانات 
هذا.يشعر بعض المطورين أن نموذج JSON يقلل من عدم تطابق المعاوقة بينهمارمز التطبيق 
وطبقة التخزين. ومع ذلك ، كما سنرى في الفصل 4 ،توجد أيضًا مشكلات في JSON كتنسيق 
لترميز البيانات. عدم وجود مخططغالبًا ما يتم الاستشهاد به كميزة ؛ سنناقش هذا في 
"مرونة المخطط في docu‐منة "في الصفحة 39.تمثيل JSON له مكان أفضل من مخطط الجداول 
المتعددة فيالشكل 2-1. إذا كنت تريد جلب ملف تعريف في المثال العلائقي ، فأنت بحاجة 
إلى أي منهماإجراء استعلامات متعددة (الاستعلام عن كل جدول بواسطة user_id ) أو 
إجراء عدة استعلامات فوضويطريقة الانضمام بين جدول المستخدمين والجداول التابعة 
لها. في ممثل JSONنشوئها ، جميع المعلومات ذات الصلة في مكان واحد ، واستعلام واحد 
كاف.علاقات رأس بأطراف من ملف تعريف المستخدم إلى مناصبها التعليميةتشير معلومات 
الاتصال والاتصال إلى بنية شجرة في البيانات ، وممثل JSONيجعل الإرسال هذا الهيكل 
الشجري واضحًا (انظر الشكل 2-2 ).النموذج العلائقي مقابل نموذج المستند | 29

      صفحة 52
بيل جيتسمنطقة سياتل الكبرى | الإحسانملخصالرئيس المشارك لمؤسسة بيل وميليندا 
جيتس.رئيس شركة مايكروسوفت. شرهقارئ. متعطشا للمسافر. المدون النشط.خبرةالرئيس 
المشارك • مؤسسة بيل وميليندا جيتس2000 - حتى الآنالمؤسس المشارك ، رئيس مجلس 
الإدارة • مايكروسوفت1975 حتى الآنتعليمجامعة هارفرد1973 - 1975مدرسة ليكسايد ، 
سياتلمعلومات الاتصالالمدونة: 
thegatesnotes.comتويتر:BillGateshttp://www.linkedin.com/in/williamhgatesلنا: 
7منطقة بوسطن الكبرىلنا: 91منطقة سياتل الكبرىبطاقة 
تعريفاسم_المنطقة131الإحسان43الخدمات المالية48بناءبطاقة تعريفاسم الصناعةمعرف 
المستخدمالاسم الاولالكنيةملخصregion_idمعرّف الصناعةمعرّف_صورةفاتورةبواباتالرئيس 
المشارك لـ… blogger.لنا: 9113157817532251جدول المناطقجدول الصناعاتجدول 
المستخدمينمعرف المستخدم251251مسمى وظيفيالرئيس المشاركمنظمةبيل وميليندا جيتس ف 
...شريك مؤسس،رئيسمايكروسوفتبطاقة تعريف458457معرف المستخدم251251بطاقة تعريفاسم 
المدرسةجامعة هارفردمدرسة ليكسايد ،سياتلبدايةنهاية19731975باطلباطل807806معرف 
المستخدم251251بطاقة تعريفاكتبمقالاتتويترعنوان 
urlhttp://thegatesnotes.comhttp://twitter.com/BillGates155156جدول المواقفجدول 
التعليمجدول معلومات الاتصالالشكل 2-1. تمثيل ملف تعريف LinkedIn باستخدام مخطط 
علائقي.مثال 2-1. تمثيل ملف تعريف LinkedIn كمستند JSON.{"معرف المستخدم" :251 
،"الاسم_الأول" : "فاتورة" ،"الاسم_الأخير" :"جيتس" ،"ملخص" :"الرئيس المشارك بيل 
وميليندا جيتس ... مدون نشط." و"region_id" :"لنا: 91" ،"Industry_id" : 131 
،"photo_url" :"/p/7/000/253/05b/308dd6e.jpg" ،"المناصب" : [{ "JOB_TITLE" : 
"الرئيس المشارك" ، "منظمة" : "بيل وميليندا غيتس" }،{ "job_title" : "الشريك 
المؤسس ، الرئيس" ، "المنظمة" : "Microsoft" }] ،"التعليم" : [{ "اسم_المدرسة" : 
"جامعة هارفارد" ،"البداية" : 1973 ، "النهاية" : 1975 } ،{ "school_name" : 
"Lakeside School، Seattle" ، "start" : null ، "end" : null }30 | الفصل 2: 
​​نماذج البيانات ولغات الاستعلام

      صفحة 53
] ،"معلومات الاتصال" : {"مدونة" :"http://thegatesnotes.com" ،"تويتر" : 
"http://twitter.com/BillGates"}}مستخدم 251وظيفة 1الوظيفة 2الوظيفة 3ايدو 1ايدو 
2مسمى وظيفيمنظمةمسمى وظيفيمنظمةمسمى وظيفيمنظمةاسم المدرسةنهايةبدايةبدايةالاسم 
الاولملخصالكنيةاسم المدرسةنهايةالمواقفالتعليمالشكل 2-2. تشكل العلاقات واحد إلى 
متعدد بنية شجرة.علاقات كثير برأس وأطراف بأطراففي مثال 2-1 أعلاه، region_id و 
industry_id تعطى كما معرفات، وليس كما نص عاديسلاسل "منطقة سياتل الكبرى" و "العمل 
الخيري" . لماذا ا؟إذا كانت واجهة المستخدم تحتوي على حقول نص حر لدخول المنطقة 
والصناعة ، فإنهامن المنطقي تخزينها كسلاسل نصية عادية. ولكن هناك مزايا 
لامتلاكقوائم موحدة للمناطق الجغرافية والصناعات ، والسماح للمستخدمين بالاختيار من 
بينهاقائمة منسدلة أو مكمل تلقائي:• أسلوب وتهجئة متسقة عبر الملفات الشخصية ،• 
تجنب الغموض ، على سبيل المثال إذا كانت هناك عدة مدن بنفس الاسم ،• يتم تخزين 
الاسم في مكان واحد فقط ، لذلك من السهل تحديثه عبر اللوحةأي وقت مضى بحاجة إلى 
التغيير (على سبيل المثال ، تغيير اسم المدينة بسبب السياسيةالأحداث) ،• عندما يتم 
ترجمة الموقع إلى لغات أخرى ، يمكن أن تكون القوائم الموحدةمترجمة ، وبالتالي يمكن 
عرض المنطقة والصناعة في lan‐ الخاص بالمشاهدمقياس• بحث أفضل - على سبيل المثال ، 
البحث عن فاعلي الخير في ولاية Washing‐يمكن للطن أن يطابق هذا الملف الشخصي ، لأن 
قائمة المناطق يمكن أن تشفر حقيقة ذلكالنموذج العلائقي مقابل نموذج المستند | 31

      صفحة 54
ثانيا. يميز الأدب في النموذج العلائقي عدة أشكال طبيعية مختلفة ، لكن الفروق 
بينهاالقليل من الاهتمام العملي. كقاعدة عامة ، إذا كنت تكرر قيمًا يمكن تخزينها في 
مكان واحد فقط ،لم يتم تطبيع المخطط.ثالثا. في وقت كتابة هذا التقرير ، كانت الصلات 
مدعومة في RethinkDB ، وليست مدعومة في MongoDB ، وفقط sup‐استدار في مناظر معلنة 
مسبقًا في CouchDB.تقع سياتل في واشنطن (وهو أمر غير واضح من سلسلة "المقعد 
الأكبر"tle " ).ما إذا كنت تقوم بتخزين معرف أو سلسلة نصية هي مسألة تكرار. عندما 
تستخدم ملفاتالمعرّف ، المعلومات ذات المعنى للبشر (مثل كلمة الإحسان )يتم تخزينه 
في مكان واحد فقط ، وكل ما يشير إليه يستخدم معرفًا (يحتوي فقط علىالمعنى داخل 
قاعدة البيانات). عندما تقوم بتخزين النص مباشرة ، فأنت تقوم بالتكرارالمعلومات ذات 
المغزى البشري في كل سجل يستخدمها.تتمثل ميزة استخدام المعرف في أنه لأنه لا معنى 
له للبشر ، فهو لا يعني أبدًايحتاج إلى تغيير: يمكن أن يظل المعرف كما هو ، حتى لو 
كانت المعلومات التي يحددهاالتغييرات. قد يحتاج أي شيء له معنى للبشر إلى التغيير 
في وقت ماالمستقبل - وإذا تم تكرار هذه المعلومات ، فيجب أن تكون جميع النسخ 
المكررةمحدث. يؤدي ذلك إلى تحمل النفقات العامة على عمليات الكتابة ، وقد يؤدي إلى 
وجود تناقضات (بعض نسخيتم تحديث المعلومات ولكن البعض الآخر لا). إزالة مثل هذا 
الازدواجية هو المفتاحفكرة وراء التطبيع في قواعد البيانات. ثانيايحب مديرو ومطورو 
قواعد البيانات الجدال حول نور‐التشويه وعدم التطبيع ، لكننا سنعلق الحكمالى الان. 
وسنعود في الجزء الثالث من هذا الكتاب إلى هذا الموضوع ، واستكشاف طرق منهجية 
للتعامل مع التخزين المؤقت وعدم التطابقوالبيانات المشتقة.لسوء الحظ ، يتطلب تطبيع 
هذه البيانات علاقات شخص إلى واحد (العديد من الأشخاصالناس يعيشون في منطقة معينة ، 
يعمل الكثير من الناس في صناعة واحدة معينة) ، والتيلا تتناسب بشكل جيد مع نموذج 
المستند. في قواعد البيانات العلائقية ، من الطبيعي الرجوع إليهاإلى صفوف في جداول 
أخرى حسب المعرف ، لأن عمليات الصلات سهلة. في قواعد بيانات الوثيقة ، الصلات هيليس 
ضروريًا لهياكل الأشجار الفردية ، وغالبًا ما يكون دعم الصلات ضعيفًا. ثالثاإذا 
كانت قاعدة البيانات نفسها لا تدعم الصلات ، فيجب عليك محاكاة صلة في التطبيقرمز عن 
طريق إجراء استعلامات متعددة لقاعدة البيانات. (في هذه الحالة ، قوائم المناطق ومن 
المحتمل أن تكون الصناعات صغيرة وبطيئة التغيير بدرجة كافية بحيث يمكن للتطبيق 
ذلكببساطة احتفظ بها في الذاكرة. ولكن مع ذلك ، فإن العمل على إنشاء الصلة قد 
تغيرمن قاعدة البيانات إلى رمز التطبيق.)علاوة على ذلك ، حتى إذا كان الإصدار 
الأولي من التطبيق يتناسب جيدًا مع ملف docu‐ بدون الانضمامنموذج منة ، تميل 
البيانات إلى أن تصبح أكثر ترابطًا مثل الميزات32 | الفصل 2: ​​نماذج البيانات 
ولغات الاستعلام

      صفحة 55
أضيفت إلى التطبيقات. على سبيل المثال ، ضع في اعتبارك بعض التغييرات التي يمكننا 
إجراؤها علىمثال السيرة الذاتية:المنظمات والمدارس ككياناتفي الوصف أعلاه ، المؤسسة 
(الشركة التي عمل فيها المستخدم)و school_name (حيث درسوا) مجرد سلاسل. ربما يجب أن 
يكونوا كذلكبدلا من ذلك يشير إلى الكيانات؟ ثم يمكن لكل منظمة أو مدرسة أو جامعةأن 
يكون لها صفحة الويب الخاصة بها (مع الشعار ، وموجز الأخبار ، وما إلى ذلك) ؛ يمكن 
ربط كل سيرة ذاتية بامتدادالمنظمات والمدارس التي يذكرها ، وتشمل شعاراتها 
وغيرهاالمعلومات (انظر الشكل 2-3 على سبيل المثال).التوصياتلنفترض أنك تريد إضافة 
ميزة جديدة: يمكن لمستخدم واحد كتابة توصية لـمستخدم آخر. تظهر التوصية في السيرة 
الذاتية للمستخدم الذي كانموصى به ، جنبًا إلى جنب مع اسم وصورة المستخدم الذي قام 
بالتوصية‐إصلاح. إذا قام المُوصي بتحديث صورته ، فإن أي توصيات لهكتبوا بحاجة لتعكس 
الصورة الجديدة. لذلك ، التوصيةيجب أن يكون لديك إشارة إلى ملف تعريف المؤلف.يوضح 
الشكل 2-4 كيف تتطلب هذه الميزات الجديدة علاقات كثير إلى كثير.يمكن تجميع البيانات 
الموجودة داخل كل مستطيل منقط في مستند واحد ، ولكن ملفيجب تمثيل المراجع إلى 
المؤسسات والمدارس والمستخدمين الآخرين كمرجعences ، وتتطلب صلات عند الاستعلام 
عنها.النموذج العلائقي مقابل نموذج المستند | 33

      صفحة 56
الشكل 2-3. اسم الشركة ليس مجرد سلسلة ، ولكنه رابط لكيان شركة.34 | الفصل 2: 
​​نماذج البيانات ولغات الاستعلام

      صفحة 57
غزاله 1غزاله 2غزاله 3المدرسة 1المدرسة 2مستخدم 251المواقفوظيفة 1الوظيفة 
2التعليمأنصح-المواعيدالمدرسة 3ايدو 1ايدو 2تفصيل 1مسمى وظيفيمسمى 
وظيفينهايةبدايةنهايةبدايةمستعمل 467المواقفوظيفة 1الوظيفة 2التعليمايدو 1ايدو 
2مسمى وظيفيمسمى وظيفينهايةبدايةنهايةبدايةالشكل 2-4. توسيع السيرة الذاتية بعلاقات 
كثير إلى كثير.هل قواعد بيانات الوثيقة تعيد التاريخ؟بينما يتم استخدام العلاقات 
والصلات من متعدد إلى متعدد بشكل روتيني في البيانات العلائقية‐قواعد دون التفكير 
مرتين ، أعادت قواعد بيانات المستندات و NoSQL فتح النقاشحول أفضل السبل لتمثيل مثل 
هذه العلاقات في قاعدة بيانات. هذا النقاش أقدم بكثيرمن NoSQL - في الواقع ، يعود 
إلى أقدم نظام قاعدة بيانات محوسبةتيمس.كانت قاعدة البيانات الأكثر شيوعًا لمعالجة 
بيانات الأعمال في سبعينيات القرن الماضي هي قاعدة بيانات IBM's Infor‐نظام إدارة 
mation (IMS) ، وهو نظام قاعدة بيانات تم تطويره في الأصل للمخزون-الاحتفاظ ببرنامج 
الفضاء أبولو ، وتم إصداره تجاريًا لأول مرة في عام 1968 [ 13]. هو - هيلا يزال قيد 
الاستخدام ويتم صيانته حتى اليوم ، ويعمل على OS / 390 على حواسيب IBM المركزية 
[14].استخدم تصميم IMS نموذج بيانات بسيطًا إلى حد ما يسمى النموذج الهرمي ،التي 
لها بعض أوجه التشابه الملحوظة مع نموذج JSON المستخدم بواسطة بيانات المستند‐قواعد 
[ 2 ]. كان يمثل جميع البيانات كشجرة من السجلات المتداخلة في السجلات ، مثل 
الكثيربنية JSON لـ الشكل 2-2 أعلاه.مثل قواعد بيانات المستندات ، عملت IMS بشكل 
جيد للعلاقات الفردية ، لكنها كذلكجعلت علاقات كثير إلى كثير صعبة ولم تدعم الصلات. 
المطورينكان عليه أن يقرر ما إذا كان سيتم تكرار (إلغاء تنسيق) البيانات ، أو حل 
الرجوع يدويًاالنموذج العلائقي مقابل نموذج المستند | 35

      صفحة 58
ences من سجل إلى آخر. كانت هذه المشاكل في الستينيات تشبه إلى حد كبيرالمشاكل التي 
يواجهها المطورون في قواعد بيانات المستندات اليوم [15].تم اقتراح حلول مختلفة لحل 
قيود النموذج الهرمي.كان أبرز نموذجين هما النموذج العلائقي (الذي أصبح SQL ، 
وأخذعبر العالم) ، ونموذج الشبكة (الذي كان له في البداية عدد كبير من المتابعين 
ولكنتلاشى في النهاية في غموض). استمر "الجدل الكبير" بين هذين المعسكرينلمعظم 
السبعينيات [ 2 ].نظرًا لأن المشكلة التي حلها النموذجان لا تزال ذات صلة اليوم ، 
فهي كذلكيستحق إعادة النظر بإيجاز في هذا النقاش في ضوء اليوم.نموذج الشبكةتم توحيد 
نموذج الشبكة من قبل لجنة تسمى مؤتمر نظام البياناتtems Languages (CODASYL) ، ويتم 
تنفيذها بواسطة عدة قواعد بيانات مختلفة ven‐dors ، لذلك يُعرف أيضًا باسم نموذج 
CODASYL [ 16 ].نموذج CODASYL هو تعميم للنموذج الهرمي. في هيكل الشجرة‐في النموذج 
الهرمي ، كل سجل له أصل واحد بالضبط ؛ في الشبكةالنموذج ، يمكن أن يكون للسجل عدة 
آباء. على سبيل المثال ، يمكن أن يكون هناك سجل واحدلمنطقة "سياتل الكبرى" ، ولكل 
مستخدم يعيش في تلك المنطقةيمكن ربطها به. يسمح هذا لعلاقات أطراف بأطراف وكثير 
بأطراف أن تكون كذلكعلى غرار.الروابط بين السجلات في نموذج الشبكة ليست مفاتيح 
خارجية ، ولكنها تشبه إلى حد كبيرمؤشرات بلغة برمجة (مع استمرار تخزينها على 
القرص). الطريقة الوحيدةمن الوصول إلى سجل كان اتباع مسار من السجل الجذر على طول 
سلاسلالروابط. كان هذا يسمى مسار الوصول .في أبسط الحالات ، يمكن أن يكون مسار 
الوصول مثل اجتياز قائمة مرتبطة: ابدأ منرأس القائمة ، وانظر إلى سجل واحد في كل 
مرة ، حتى تجد السجل الذي تريده.ولكن في عالم من علاقات كثير إلى كثير ، يمكن أن 
تؤدي العديد من المسارات المختلفة إلىنفس السجل ، وكان على مبرمج يعمل مع نموذج 
الشبكة أن يتتبعمن مسارات الوصول المختلفة هذه في رؤوسهم.تم إجراء استعلام في 
CODASYL عن طريق تحريك المؤشر عبر قاعدة البيانات بواسطةالتكرار على قوائم السجلات 
ومتابعة مسارات الوصول. إذا كان سجل متعددالآباء (أي مؤشرات واردة متعددة من سجلات 
أخرى) ، رمز التطبيقكان عليه أن يتتبع جميع العلاقات المختلفة. حتى أعضاء لجنة 
CODASYL‐اعترف بيرز بأن هذا كان مثل التنقل حول مساحة بيانات ذات أبعاد n [17].على 
الرغم من أن اختيار مسار الوصول اليدوي كان قادرًا على تحقيق أقصى استفادة من 
ملفكانت قدرات الأجهزة محدودة للغاية في السبعينيات (مثل محركات الأشرطة التي تسعى 
إليهابطيئة للغاية) ، كانت المشكلة أنهم صنعوا الكود للاستعلام والتحديثقاعدة 
البيانات معقدة وغير مرنة. مع كل من التسلسل الهرمي والشبكةالنموذج ، إذا لم يكن 
لديك مسار للبيانات التي تريدها ، فقد كنت في موقع صعب36 | الفصل 2: ​​نماذج 
البيانات ولغات الاستعلام

      صفحة 59
رابعا. تسمح لك قيود المفتاح الخارجي بتقييد التعديلات ، لكن مثل هذه القيود ليست 
مطلوبة من قِبل ملفنموذج العلائقية. حتى مع وجود قيود ، يتم تنفيذ الصلات على 
المفاتيح الخارجية في وقت الاستعلام ، بينما فيCODASYL ، تم الربط بشكل فعال في وقت 
الإدراج.نشوئها. يمكنك تغيير مسارات الوصول ، ولكن بعد ذلك كان عليك المرور عبر 
الكثيرمكتوب بخط اليد رمز استعلام قاعدة البيانات وأعد كتابته للتعامل مع مسارات 
الوصول الجديدة. هو - هيكان من الصعب إجراء تغييرات على نموذج بيانات 
التطبيق.النموذج العلائقيعلى النقيض من ذلك ، كان ما فعله النموذج العلائقي هو وضع 
جميع البيانات في العلن: أالعلاقة (الجدول) هي ببساطة مجموعة من الصفوف ، وهذا كل 
شيء. لا يوجد متاهةالهياكل المتداخلة ، لا توجد مسارات وصول معقدة يجب اتباعها إذا 
كنت تريد البحثفي البيانات. يمكنك قراءة أي من أو كل الصفوف في الجدول ، واختيار 
تلك التي تتطابقشرط تعسفي. يمكنك قراءة صف معين عن طريق تعيين بعض الأعمدةكمفتاح 
ومطابقة على هؤلاء. يمكنك إدراج صف جديد في أي جدول بدونالقلق بشأن علاقات المفاتيح 
الخارجية من وإلى الجداول الأخرى. رابعافي قاعدة البيانات العلائقية ، يقرر مُحسِّن 
الاستعلام تلقائيًا أجزاء ملفالاستعلام لتنفيذه بالترتيب والفهارس التي يجب 
استخدامها. هذه الخيارات فعالة؟"مسار الوصول" ، ولكن الاختلاف الكبير هو أنه يتم 
إجراؤها تلقائيًا بواسطةمُحسِّن الاستعلام ، وليس بواسطة مطور التطبيق ، لذلك 
نادرًا ما نحتاج إلى التفكيرعنهم.إذا كنت تريد الاستعلام عن بياناتك بطرق جديدة ، 
فيمكنك فقط إعلان فهرس جديد وستستخدم الاستعلامات تلقائيًا الفهارس الأكثر ملاءمة. 
أنت لا تفعلتحتاج إلى تغيير استفساراتك للاستفادة من فهرس جديد. (راجع أيضًا 
"الاستعلام عن Lan‐guages ​​for Data "في الصفحة 42. ) وهكذا جعل النموذج العلائقي 
من السهل إضافتهميزات جديدة للتطبيقات.تعد أدوات تحسين الاستعلام لقواعد البيانات 
العلائقية وحوشًا معقدة ، ولديهالخص سنوات عديدة من جهود البحث والتطوير [18 ]. لكن 
البصيرة الرئيسية لكان النموذج العلائقي كما يلي: ما عليك سوى إنشاء مُحسِّن 
استعلام مرة واحدة ، ثم كل شيءيمكن للتطبيقات التي تستخدم قاعدة البيانات الاستفادة 
منها. إذا لم يكن لديك خيار استعلامmizer ، من الأسهل كتابة تعليمات برمجية لمسارات 
الوصول لاستعلام معين يدويًا بدلاً من كتابة ملفمُحسِّن للأغراض العامة - لكن حل 
الأغراض العامة يفوز على المدى الطويل.مقارنة بقواعد بيانات الوثائقعادت قواعد 
بيانات المستندات إلى النموذج الهرمي في جانب واحد: التخزينالسجلات المتداخلة (واحد 
إلى العديد من العلاقات، مثل المواقف ، التعليم و يخدعtact_info فيالشكل 2-1 ) داخل 
سجلهم الأصلي وليس في جدول منفصل.ومع ذلك ، عندما يتعلق الأمر بتمثيل علاقة أطراف 
بأطراف وعلاقة أطراف بأطرافلا تختلف السفن وقواعد البيانات العلائقية والوثيقة 
اختلافًا جوهريًا: في كليهماالنموذج العلائقي مقابل نموذج المستند | 37

      صفحة 60
في الحالات ، تتم الإشارة إلى العنصر ذي الصلة بواسطة معرّف فريد يسمى أجنبيًامفتاح 
في النموذج العلائقي ، ومرجع مستند في نموذج المستند [9].يتم حل هذا المعرف في وقت 
القراءة ، باستخدام استعلامات الصلة أو المتابعة. حتى الآن،قواعد بيانات الوثيقة لم 
تتبع مسار CODASYL.قواعد البيانات العلائقية مقابل قواعد البيانات الوثيقة 
اليومهناك العديد من الاختلافات التي يجب مراعاتها عند مقارنة قواعد البيانات 
العلائقية بـتوثيق قواعد البيانات ، بما في ذلك خصائص التسامح مع الخطأ (انظر الفصل 
5) والتعامل مع التزامن (انظر الفصل 7). في هذا الفصل ، سوف نركز فقط علىالاختلافات 
في نموذج البيانات.الحجج الرئيسية لصالح نموذج بيانات المستند هي: لبعض 
التطبيقاتإنه أقرب إلى هياكل البيانات المستخدمة بواسطة التطبيق ومرونة المخطط 
وأفضلالأداء بسبب الموقع. عدادات النموذج العلائقي من خلال توفير دعم أفضلمنفذ 
للصلات ، وعلاقات أطراف بأطراف.ما هو نموذج البيانات الذي يؤدي إلى رمز تطبيق 
أبسط؟إذا كانت البيانات في التطبيق الخاص بك تحتوي على هيكل يشبه المستند (أي شجرة 
من واحد إلى -العديد من العلاقات ، حيث يتم عادةً تحميل الشجرة بأكملها مرة واحدة) 
، فمن المحتملbly فكرة جيدة لاستخدام نموذج مستند. تقنية التمزيق العلائقية -تقسيم 
وثيقة مثل هيكل إلى جداول متعددة (مثل المواقف ، التعليمو contact_info فيالشكل 2-1 
) - يمكن أن يؤدي إلى مخططات مرهقة و unnecessa‐rily رمز التطبيق المعقد.نموذج 
المستند له قيود - على سبيل المثال ، لا يمكنك الرجوع مباشرة إلى ملفعنصر متداخل في 
مستند ، ولكن بدلاً من ذلك عليك أن تقول شيئًا مثل "الثانية"عنصر ond في قائمة 
الوظائف للمستخدم 251 ” (يشبه إلى حد كبير مسار الوصول في التسلسل الهرمي‐نموذج 
ical). ومع ذلك ، طالما أن المستندات ليست متداخلة بشكل كبير ، فهذا ليس كذلكعادة 
مشكلة.قد يكون ضعف الدعم لعمليات الانضمام في قواعد بيانات المستندات مشكلة أو لا 
،حسب التطبيق. على سبيل المثال ، قد لا يتم أبدًا العلاقات بين كثير إلى كثيرمطلوب 
في تطبيق تحليلات يستخدم قاعدة بيانات وثيقة لتسجيل ملفاتالأحداث وقعت في أي وقت 
[19].ومع ذلك ، إذا كان التطبيق الخاص بك يستخدم علاقات أطراف بأطراف ، فإن 
المستنديصبح النموذج أقل جاذبية. من الممكن تقليل الحاجة إلى الصلات عن طريق عديم 
الشكلالتحسين ، ولكن بعد ذلك يحتاج كود التطبيق إلى القيام بعمل إضافي للحفاظ على 
المقنع‐متسقة البيانات المخدرة. يمكن محاكاة الصلات في رمز التطبيق عن طريق 
إجراءطلبات متعددة إلى قاعدة البيانات ، ولكن هذا أيضًا ينقل التعقيد إلى التطبيق، 
وعادة ما يكون أبطأ من الصلة التي يتم إجراؤها بواسطة رمز متخصص داخل 
البيانات‐قاعدة. في مثل هذه الحالات ، يمكن أن يؤدي استخدام نموذج المستند إلى 
تعقيد أكثر بشكل ملحوظكود التطبيق وأداء أسوأ [ 15 ].38 | الفصل 2: ​​نماذج 
البيانات ولغات الاستعلام

      صفحة 61
لا يمكن القول بشكل عام عن نموذج البيانات الذي يؤدي إلى رمز تطبيق أبسط ؛يعتمد ذلك 
على أنواع العلاقات الموجودة بين عناصر البيانات. للغايةالبيانات المترابطة ، نموذج 
الوثيقة محرج للغاية ، النموذج العلائقيمقبولة ، ونماذج الرسم البياني (انظر "نماذج 
البيانات الشبيهة بالرسم البياني" في الصفحة 48) هي الأكثرطبيعي >> صفة.مرونة 
المخطط في نموذج المستندمعظم قواعد بيانات المستندات ، ودعم JSON في قواعد البيانات 
العلائقية ، لا تفعل ذلكفرض أي مخطط على البيانات الموجودة في المستندات. دعم XML 
في قواعد البيانات العلائقيةعادةً ما يأتي مصحوبًا بالتحقق الاختياري من صحة 
المخطط. لا يوجد مخطط يعني أن المفاتيح العشوائيةوالقيم يمكن أن تضاف إلى وثيقة ، 
وعند القراءة ، العملاء ليس لديهم guaran‐المحملات حول الحقول التي قد تحتويها 
المستندات.يُطلق على قواعد بيانات المستندات أحيانًا اسم schemaless ، لكن هذا أمر 
مضلل ، مثلعادةً ما يفترض الكود الذي يقرأ البيانات نوعًا من البنية - أي أن هناك 
ملفمخطط ضمني ، ولكن لا يتم فرضه بواسطة قاعدة البيانات [20 ]. المصطلح الأكثر دقة 
هوالمخطط عند القراءة (تكون بنية البيانات ضمنية ، ولا يتم تفسيرها إلا عندما يكون 
ملفتتم قراءة البيانات) ، على عكس المخطط عند الكتابة (النهج التقليدي 
للعلائقيةقواعد البيانات ، حيث يكون المخطط صريحًا وتضمن قاعدة البيانات توافق جميع 
البيانات معهاهو - هي) [21].المخطط عند القراءة مشابه لفحص الكتابة الديناميكي (وقت 
التشغيل) في البرمجةاللغات ، في حين أن المخطط عند الكتابة مشابه للنوع الثابت (وقت 
الترجمة)تدقيق. تمامًا كما أن دعاة التحقق من النوع الثابت والديناميكي لديهم 
نقاشات كبيرةحول مزاياها النسبية [ 22] ، يعد تطبيق المخططات في قاعدة البيانات 
أمرًا مثيرًا للجدلالموضوع ، وبشكل عام لا توجد إجابة صحيحة أو خاطئة.الفرق بين 
الأساليب ملحوظ بشكل خاص في الحالات عندمايريد تطبيق ما تغيير تنسيق بياناته. على 
سبيل المثال ، لنفترض أنك موجودتخزين الاسم الكامل لكل مستخدم بشكل متكرر في حقل 
واحد ، وتريد تغييره إلى المخزنالاسم الأول واسم العائلة بشكل منفصل [23 ]. في 
قاعدة بيانات المستندات ، ستفعل ذلكابدأ في كتابة مستندات جديدة باستخدام الحقول 
الجديدة ، واستخدم رمزًا في التطبيقالذي يتعامل مع الحالة عند قراءة المستندات 
القديمة ، على سبيل المثال:إذا ( المستخدم && المستخدم . اسم &&! المستعمل . 
FIRST_NAME ) {// المستندات المكتوبة قبل 8 كانون الأول (ديسمبر) 2013 لا تحتوي على 
الاسم الأولمستخدم . first_name = المستخدم . الاسم . انقسام ( "" ) [ 0 ] ؛}من 
ناحية أخرى ، في مخطط قاعدة بيانات "مكتوب بشكل ثابت" ، يمكنك عادةًشكل هجرة على 
غرار:ALTER TABLE مستخدمو ADD COLUMN first_name text ؛تحديث المستخدمين SET 
first_name = split_part ( name ، '' ، 1 ) ؛- PostgreSQLتحديث المستخدمين SET 
first_name = substring_index ( الاسم ، '' ، 1 ) ؛- MySQLالنموذج العلائقي مقابل 
نموذج المستند | 39

      صفحة 62
تغييرات المخطط لها سمعة سيئة لكونها بطيئة وتتطلب فترة نقاهة. هذهالسمعة ليست 
مستحقة تمامًا: معظم أنظمة قواعد البيانات العلائقية تنفذ الامتدادعبارة ALTER 
TABLE في بضع أجزاء من الثانية - باستثناء MySQL ، والتينسخ الجدول بأكمله على 
ALTER TABLE ، والذي يمكن أن يعني دقائق أو حتى ساعات منالتوقف عند تغيير طاولة 
كبيرة. توجد أدوات مختلفة للتغلب على هذا الحد‐نشوئها من MySQL [24، 25].من المحتمل 
أن يكون تشغيل عبارة UPDATE على جدول كبير بطيئًا على أي قاعدة بيانات ،لأن كل صف 
يحتاج إلى إعادة كتابته. إذا كان هذا غير مقبول ، يمكن للتطبيقاترك اسم_الأول 
مضبوطًا على القيمة الافتراضية NULL الخاصة به ، واملأه في وقت القراءة ، كما هو 
الحال معقاعدة بيانات وثيقة.يعتبر نهج المخطط عند القراءة مفيدًا إذا كانت البيانات 
غير متجانسة ، أيلا تحتوي جميع العناصر الموجودة في المجموعة على نفس البنية لسبب 
ما ، على سبيل المثاللان:• هناك العديد من الأنواع المختلفة من الأشياء ، وليس من 
العملي وضع كل نوعمن الكائن في الجدول الخاص به ، أو• يتم تحديد هيكل البيانات من 
خلال أنظمة خارجية ، والتي لديك عليهالا تحكم ، والتي قد تتغير في أي وقت.في مثل 
هذه المواقف ، قد يضر المخطط أكثر مما يساعد ، والخطأ docu‐يمكن أن تكون الإشارات 
نموذج بيانات أكثر طبيعية. ولكن في الحالات التي تكون فيها جميع السجلاتمن المتوقع 
أن يكون لها نفس الهيكل ، المخططات هي آلية مفيدة للوثيقة‐جي وفرض هذا الهيكل. 
سنناقش تطور المخططات والمخططات فيمزيد من التفاصيل في الفصل 4 .منطقة البيانات 
للاستعلاماتعادةً ما يتم تخزين المستند كسلسلة واحدة متصلة ، يتم ترميزها بتنسيق 
JSON أو XML أومتغير ثنائي منها (مثل BSON الخاص بـ MongoDB). إذا كان التطبيق 
الخاص بك يحتاج في كثير من الأحيانللوصول إلى المستند بأكمله (على سبيل المثال ، 
لعرضه على صفحة ويب) ، هناك ملفميزة الأداء لموقع التخزين هذا . إذا تم تقسيم 
البيانات عبر جداول متعددة ،كما في الشكل 2-1، يلزم إجراء عمليات بحث متعددة في 
الفهرس لاستردادها كلها ، والتي قد تكونتتطلب المزيد من البحث عن القرص وتستغرق 
المزيد من الوقت.تنطبق ميزة المنطقة المحلية فقط إذا كنت بحاجة إلى أجزاء كبيرة من 
المستند فينفس الوقت. تحتاج قاعدة البيانات عادةً إلى تحميل المستند بأكمله ، حتى 
لو قمت بذلكالوصول فقط إلى جزء صغير منه ، والذي يمكن أن يكون مضيعة للمستندات 
الكبيرة. علىتحديثات المستند ، فعادةً ما يحتاج المستند بأكمله إلى إعادة كتابته - 
فقطالتعديلات التي لا تغير الحجم المشفر للمستند يمكن أن تكون بسهولة لكلتشكل في 
مكانها [19 ]. لهذه الأسباب ، يوصى عمومًا بالاحتفاظ بهاالمستندات صغيرة نسبيًا ، 
وتجنب عمليات الكتابة التي تزيد من حجم المستند [9].40 | الفصل 2: ​​نماذج البيانات 
ولغات الاستعلام

      صفحة 63
v. وصف Codd الأصلي للنموذج العلائقي [1 ] سمحت في الواقع بشيء مشابه تمامًا لـ 
JSONالمستندات ضمن مخطط علائقي. أطلق عليها مجالات غير بسيطة . كانت الفكرة: القيمة 
المتتالية لا تفعل ذلكيجب أن يكون نوع بيانات بدائي مثل رقم أو سلسلة ، ولكن يمكن 
أن يكون أيضًا علاقة متداخلة (جدول) -وهكذا يمكن أن يكون لديك بنية شجرة متداخلة 
بشكل عشوائي كقيمة ، مثل دعم JSON أو XMLتمت إضافته إلى SQL بعد أكثر من 30 
عامًا.تقلل قيود الأداء هذه بشكل كبير من مجموعة المواقف التيقواعد بيانات الوثيقة 
مفيدة.تجدر الإشارة إلى أن فكرة تجميع البيانات ذات الصلة معًا من أجل المنطقة هيلا 
يقتصر على نموذج المستند. على سبيل المثال ، تقدم قاعدة بيانات Spanner من 
Googleنفس خصائص المنطقة في نموذج البيانات العلائقية ، من خلال السماح للمخطط 
بـأعلن أن صفوف الجدول يجب أن تكون متداخلة (متداخلة) داخل جدول أصلي [ 26].تسمح 
Oracle بالشيء نفسه ، باستخدام ميزة تسمى جداول مجموعة الفهرس متعدد الجداول [ 
27].في عمود الأسرة المفهوم في نموذج بيانات جداول كبيرة (المستخدمة في كاساندرا 
وHBase) له غرض مماثل في إدارة الموقع [ 28 ].سنرى أيضًا المزيد عن المنطقة المحلية 
في الفصل 3.تقارب الوثيقة وقواعد البيانات العلائقيةدعمت معظم أنظمة قواعد البيانات 
العلائقية (بخلاف MySQL) XML منذ إصدارمنتصف العقد الأول من القرن الحادي والعشرين. 
يتضمن ذلك وظائف لإجراء تعديلات محلية على مستندات XML ،والقدرة على الفهرسة 
والاستعلام داخل مستندات XML مما يسمح للتطبيقاتلاستخدام نماذج بيانات تشبه إلى حد 
بعيد ما سيفعلونه عند استخدام بيانات المستند‐قاعدة.PostgreSQL منذ الإصدار 9.3 [ 8 
] و IBM DB2 منذ الإصدار 10.5 [29 ] أيضامستوى مماثل من الدعم لوثائق JSON. نظرًا 
لشعبية JSON للويبواجهات برمجة التطبيقات ، من المحتمل أن تتبع قواعد البيانات 
العلائقية الأخرى خطواتها وتضيفهادعم JSON.على جانب قاعدة بيانات المستند ، يدعم 
RethinkDB الصلات العلائقية في الاستعلام الخاص بهاللغة ، وبعض برامج تشغيل MongoDB 
تحل تلقائيًا مراجع قاعدة البيانات(إجراء صلة من جانب العميل بشكل فعال ، على الرغم 
من أنه من المحتمل أن يكون هذا أبطأ من aتم إجراء الانضمام في قاعدة البيانات ، 
نظرًا لأنه يتطلب رحلات ذهابًا وإيابًا إضافية للشبكة وأقل تحسينًا).يبدو أن قواعد 
البيانات العلائقية والوثيقة أصبحت أكثر تشابهًاالوقت ، وهذا أمر جيد: نماذج 
البيانات تكمل بعضها البعض. v إذا كانت قاعدة البياناتقادر على التعامل مع البيانات 
الشبيهة بالمستند وأيضًا إجراء استعلامات علائقية عليها ،يمكن أن تستخدم الكاتيونات 
مجموعة من الميزات التي تناسب احتياجاتها على أفضل وجه.مزيج من النماذج العلائقية 
والوثيقة هو طريق جيد لقواعد البيانات لاتخاذهفي المستقبل.النموذج العلائقي مقابل 
نموذج المستند | 41

      صفحة 64
لغات الاستعلام عن البياناتعندما تم تقديم النموذج العلائقي ، تضمن طريقة جديدة 
للاستعلام عن البيانات:SQL هو المعلن لغة الاستعلام، في حين تساءل IMS وCODASYL 
وdata-قاعدة باستخدام رمز أمر . ماذا يعني ذلك؟العديد من لغات البرمجة شائعة 
الاستخدام ضرورية. على سبيل المثال ، إذا كنتلديك قائمة بأنواع الحيوانات ، يمكنك 
كتابة شيء مثل هذا لإرجاع فقطأسماك القرش في القائمة:دالة getSharks () {var sharks 
= [] ؛لـ ( var i = 0 ؛ i < animal . length ؛ i ++ ) {إذا ( الحيوانات [ i ]. 
الأسرة === "أسماك القرش" ) {أسماك القرش . دفع ( الحيوانات [ i ]) ؛}}العودة أسماك 
القرش .}في الجبر العلائقي ، ستكتب بدلاً من ذلك:أسماك القرش = σ عائلة = "أسماك 
القرش" (حيوانات)حيث σ (الحرف اليوناني سيغما) هو عامل الاختيار ، ويعيد فقط تلك 
ani‐mals التي تطابق عائلة الشرط = "أسماك القرش" .عندما تم تعريف SQL ، فقد اتبعت 
بنية الجبر العلائقي بشكل عادلبعناية:حدد * من الحيوانات حيث الأسرة = "أسماك 
القرش" ؛لغة حتمية تخبر الكمبيوتر بأداء عمليات معينة في معينةطلب. يمكنك أن تتخيل 
المرور عبر الكود ، سطرًا بسطر ، وتقييم الشرطوتحديث المتغيرات وتقرير ما إذا كان 
يجب الالتفاف حول الحلقة مرة أخرى.في لغة الاستعلام التعريفي ، مثل SQL أو الجبر 
العلائقي ، ما عليك سوى تحديدنمط البيانات التي تريدها - ما هي الشروط التي يجب أن 
تفي بها النتائج ، وكيف أنتتريد أن يتم تحويلها (على سبيل المثال ، مصنفة ومجمعة 
ومجمعة) ، ولكن ليس كيفية ach‐هذا الهدف. الأمر متروك لمحسن استعلام نظام قاعدة 
البيانات لتحديد أيهماالفهارس والتي تربط بين الأساليب المستخدمة ، وترتيب تنفيذ 
الأجزاء المختلفةمن الاستعلام.تعتبر لغة الاستعلام التعريفي جذابة لأنها عادة ما 
تكون أكثر إيجازًا وسهولة‐ier للعمل مع أكثر من واجهة برمجة تطبيقات حتمية. ولكن 
الأهم من ذلك أنه يخفي أيضًاتفاصيل التوجيه لمحرك قاعدة البيانات ، مما يجعل قاعدة 
البيانات ممكنةلإدخال تحسينات في الأداء دون الحاجة إلى أي تغييراتاستفسارات.42 | 
الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      صفحة 65
على سبيل المثال ، في رمز الأمر أعلاه ، تظهر قائمة الحيوانات في معينطلب. إذا 
أرادت قاعدة البيانات استعادة مساحة القرص غير المستخدمة خلف الكواليس ، فقد يحدث 
ذلكبحاجة إلى نقل السجلات ، وتغيير الترتيب الذي تظهر به الحيوانات. علبةقاعدة 
البيانات تفعل ذلك بأمان ، دون كسر الاستفسارات؟لا يضمن مثال SQL أي ترتيب معين ، 
وبالتالي لا يمانع إذايتغير الترتيب. ولكن إذا تمت كتابة الاستعلام كرمز إلزامي ، 
فيمكن لقاعدة البيانات ذلكلا تكن متأكدًا أبدًا مما إذا كان الرمز يعتمد على الطلب 
أم لا. حقيقة أن SQL هووظائف أكثر محدودية تمنح قاعدة البيانات مساحة أكبر بكثير 
للاختيار التلقائياختلاطات.أخيرًا ، غالبًا ما تصلح اللغات التقريرية للتنفيذ 
المتوازي. اليوم،تزداد سرعة وحدات المعالجة المركزية (CPU) بإضافة المزيد من النوى 
، وليس عن طريق التشغيل بمستوى أعلى بشكل ملحوظسرعات الساعة من ذي قبل [ 30]. من 
الصعب جدًا موازاة الشفرة الحتمية عبر mul‐نوى متعددة وآلات متعددة ، لأنها تحدد 
التعليمات التي يجب أن تكون لكلتشكلت بترتيب معين. اللغات التعريفية لديها فرصة 
أفضل للحصول عليهاأسرع في التنفيذ المتوازي ، لأنها تحدد نمط النتائج فقط ، 
ولكنوليس الخوارزمية المستخدمة لتحديد النتائج. قاعدة البيانات مجانية 
لاستخدامالتنفيذ الموازي للغة الاستعلام ، إذا كان ذلك مناسبًا [ 31].استفسارات 
توضيحية على الويبلا تقتصر مزايا لغات الاستعلام التقريري على قواعد البيانات فقط. 
لتوضيح النقطة ، دعنا نقارن النهج التصريحي والأمر في كومبيئة مختلفة تمامًا: متصفح 
ويب.لنفترض أن لديك موقع ويب عن الحيوانات في المحيط. يقوم المستخدم حاليًا بعرض 
ملفصفحة على أسماك القرش ، لذلك قمت بتمييز أسماك القرش الخاصة بعناصر التنقل على 
أنها محددة حاليًا ، على النحو التالي:<ul><li class = "selected" ><p> أسماك القرش 
</ p><ul><li> القرش الأبيض العظيم </ li><li> Tiger Shark </li><li> قرش المطرقة 
</ li></ul></li><li><p> الحيتان </ p><ul><li> الحوت الأزرق </ li><li> الحوت 
الأحدب </ li><li> الحوت الزعنفة </ li></ul></li></ul>لغات الاستعلام عن البيانات 
| 43

      الصفحة 66
يتم تمييز العنصر المحدد بفئة CSS "المحددة" .<p> أسماك القرش </ p> هو عنوان 
الصفحة المحددة حاليًا.لنفترض الآن أنك تريد أن يكون لعنوان الصفحة المحددة حاليًا 
خلفية زرقاء ،بحيث يتم تمييزه بشكل مرئي. هذا سهل ، باستخدام CSS:تم التحديد > p 
{لون الخلفية : أزرق ؛}هنا يحدد محدد CSS li.selected> p نمط العناصر التي 
نتبعهاتريد تطبيق النمط الأزرق: أي جميع عناصر <p> التي يكون أصلها المباشر هو 
<li>عنصر مع فئة CSS المحددة . العنصر <p> أسماك القرش </ p> في المثاليتطابق مع 
هذا النمط ، ولكن <p> الحيتان </ p> لا يتطابق ، لأن << والدته <يفتقر إلى فئة = 
"مختارة" .إذا كنت تستخدم XSL بدلاً من CSS ، فيمكنك فعل شيء مشابه:<xsl: template 
match = "li [@ class = 'selected'] / p" ><fo: block background-color = "blue" 
><xsl: application-template /></ fo: block></ xsl: template>هنا تعبير XPath li 
[@ class = 'selected'] / p يكافئ CSS selec‐تم تحديده> p أعلاه. القاسم المشترك 
بين CSS و XSL هو أنهما كذلككلا التعريفي لغات لتحديد التصميم وثيقة.تخيل كيف ستكون 
الحياة إذا كان عليك استخدام نهج حتمي. في جافا‐البرنامج النصي ، باستخدام واجهة 
برمجة تطبيقات نموذج كائن المستند (DOM) الأساسي ، قد تبدو النتيجةشيء من هذا 
القبيل:var liElements = مستند . getElementsByTagName ( "li" ) ؛لـ ( var i = 0 ؛ 
i < liElements . length ؛ i ++ ) {إذا ( liElements [ i ]. className === 
"selected" ) {var children = liElements [ i ]. childNodes .لـ ( var j = 0 ؛ j < 
children . length ؛ j ++ ) {var child = children [ j ] ؛إذا ( child . nodeType 
=== Node . ELEMENT_NODE && child . tagName === "P" ) {طفل . setAttribute ( 
"النمط" ، "لون الخلفية: أزرق" ) ؛}}}}هذه الشفرة تحدد العنصر <p> أسماك القرش </ 
p> لتكون خلفية زرقاء ،لكن الكود فظيع. ليس فقط أنها أطول وأصعب بكثير في الفهم 
منمعادلات CSS و XSL ، ولكن لديها أيضًا بعض المشكلات الخطيرة:44 | الفصل 2: 
​​نماذج البيانات ولغات الاستعلام

      صفحة 67
السادس. استخدم كل من IMS و CODASYL واجهات برمجة تطبيقات استعلام حتمية. تستخدم 
التطبيقات عادةً رمز COBOL للتكرارعلى السجلات في قاعدة البيانات ، سجل واحد في كل 
مرة [ 2، 16].• إذا تمت إزالة الفئة المحددة (على سبيل المثال ، لأن المستخدم نقر 
على فئة مختلفةpage) ، فلن تتم إزالة اللون الأزرق ، حتى إذا تم إعادة تشغيل الكود 
- وهكذا فإن ملفسيظل العنصر مميزًا حتى يتم إعادة تحميل الصفحة. مع CSS ، 
المتصفحيكتشف تلقائيًا عندما لا يتم تطبيق قاعدة li.selected> p ، ويزيل الخلفية 
الزرقاء بمجرد إزالة الفصل المحدد .• إذا كنت ترغب في الاستفادة من واجهة برمجة 
تطبيقات جديدة ، مثل document.getElementsByClassName ("محدد") أو حتى 
document.evaluate () - والتي قد تتحسنالأداء - عليك إعادة كتابة الكود. من ناحية 
أخرى ، متصفح ven‐يمكن لـ dors تحسين أداء CSS و XPath دون كسر التوافققدرة.في 
متصفح الويب ، يكون تصميم CSS التعريفي أفضل بكثير من معالجة الأنماطفي جافا 
سكريبت. وبالمثل ، في قواعد البيانات ، لغات الاستعلام التقريرية مثلتبين أن SQL 
أفضل بكثير من واجهات برمجة التطبيقات للاستعلام الإلزامي. السادسالاستعلام عن 
MapReduceMapReduce هو نموذج برمجة لمعالجة كميات كبيرة من البيانات بشكل مجمّععبر 
العديد من الأجهزة ، التي اشتهرت بواسطة Google [ 32 ]. شكل محدود من MapReduce 
هومدعومًا من قبل بعض مخازن بيانات NoSQL ، بما في ذلك MongoDB و CouchDB ، 
كملفآلية لإجراء استعلامات للقراءة فقط عبر العديد من المستندات.تم وصف MapReduce 
بشكل عام بمزيد من التفصيل في الفصل 10. في الوقت الحالي ، سنفعل ذلكناقش بإيجاز 
استخدام MongoDB للنموذج.MapReduce ليست لغة استعلام تعريفية ولا واجهة برمجة 
تطبيقات استعلام إلزامية بالكامل ،ولكن في مكان ما بينهما: يتم التعبير عن منطق طلب 
البحث باستخدام مقتطفات من التعليمات البرمجية ،والتي يتم استدعاؤها مرارًا 
وتكرارًا بواسطة إطار المعالجة. يعتمد على الخريطة (أيضًاالمعروف باسم التجميع ) 
وتقليل (المعروف أيضًا باسم الطي أو الحقن ) الوظائف الموجودة فيالعديد من لغات 
البرمجة الوظيفية.لإعطاء مثال ، تخيل أنك عالم أحياء بحرية ، وقمت بإضافة ملاحظةسجل 
في قاعدة البيانات الخاصة بك في كل مرة ترى فيها حيوانات في المحيط. الآن تريدإنشاء 
تقرير يوضح عدد أسماك القرش التي تمت مشاهدتها شهريًا.في PostgreSQL يمكنك التعبير 
عن هذا الاستعلام كما يلي:حدد date_trunc ( 'month' ، Observation_timestamp ) AS 
Observation_month ،sum ( num_animals ) AS total_animalsمن الملاحظاتأين الأسرة = 
"أسماك القرش"GROUP BY Observation_month ؛لغات الاستعلام عن البيانات | 45

      صفحة 68
و date_trunc ( 'شهر'، والوقت) يأخذ وظيفة طابع زمني وقذائفوصوله إلى أقرب بداية 
شهر تقويمي.يقوم هذا الاستعلام أولاً بتصفية الملاحظات لإظهار الأنواع في عائلة 
أسماك القرش فقط ، بعد ذلكتجمع الملاحظات حسب الشهر التقويمي الذي حدثت فيه ، 
وأخيرًاتجمع عدد الحيوانات التي شوهدت في جميع الملاحظات في ذلك الشهر.يمكن التعبير 
عن نفس الشيء مع ميزة MapReduce MongoDB على النحو التالي:ديسيبل . الملاحظات . 
mapReduce (خريطة الوظيفة () {فار سنة = هذا . observationTimestamp . getFullYear 
() ،فار شهر = هذا . observationTimestamp . getMonth () + 1 ؛ينبعث ( السنة + "-" 
+ الشهر ، هذا . numAnimals ) ؛} ،وظيفة تقليل ( مفتاح ، قيم ) {صفيف العودة . 
مجموع ( القيم ) ؛} ،{طلب البحث : { family : "Sharks" }،من : 
"MonthlySharkReport"}) ؛يمكن تحديد عامل التصفية الخاص بأنواع أسماك القرش فقط 
بشكل تصريحي (هذا ملفملحق خاص بـ MongoDB لـ MapReduce).يتم استدعاء خريطة وظيفة 
JavaScript مرة واحدة لكل مستند يطابقالاستعلام ، مع هذه المجموعة على كائن 
المستند.على خريطة وظيفة تنبعث مفتاح (سلسلة تتكون من السنة والشهر، مثل"2013-12" 
أو "2014-1" ) وقيمة (عدد الحيوانات في تلك الملاحظة).يتم تجميع أزواج المفتاح 
والقيمة المنبعثة من الخريطة حسب المفتاح. لجميع أزواج القيمة الرئيسيةباستخدام نفس 
المفتاح (أي نفس الشهر والسنة) ، يتم استدعاء وظيفة التخفيضذات مرة.ل لحد يضيف 
وظيفة حتى عدد الحيوانات من كل الملاحظات فيشهر معين.يتم كتابة الإخراج النهائي إلى 
مجموعة MonthlySharkReport .على سبيل المثال ، لنفترض أن مجموعة الملاحظات تحتوي 
على هاتين الوثيقتين:{الملاحظة الطابع الزمني : التاريخ . تحليل ( "الإثنين، 25 
ديسمبر 1995 00:34:56 GMT" )،الأسرة :"أسماك القرش" ،الأنواع :"Carcharodon 
carcharias" ،46 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      صفحة 69
عدد الحيوانات : 3}{الملاحظة الطابع الزمني : التاريخ . تحليل ( "الثلاثاء، 12 
ديسمبر 1995 16:17:18 GMT" )،الأسرة :"أسماك القرش" ،الأنواع :"Carcharias taurus" 
،عدد الحيوانات : 4}على خريطة شأنه استدعاء الدالة مرة واحدة لكل وثيقة، مما أدى 
إلىتنبعث ( "1995-1912"، 3) و تنبعث ( "1995-1912"، 4) . في وقت لاحق ، تصغير 
وظيفةسيتم استدعاؤها مع تقليل ("1995-12" ، [3 ، 4]) ، والعودة 7 .على خريطة و الحد 
من وظيفة تقتصر إلى حد ما في ما يسمح لهم القيام به.يجب أن تكون وظائف خالصة ، مما 
يعني: أنها تستخدم فقط البيانات التي يتم تمريرها إليهالهم كمدخلات ، لا يمكنهم 
إجراء استعلامات قاعدة بيانات إضافية ويجب ألا يفعلوا ذلكلها أي آثار جانبية. تسمح 
هذه القيود لقاعدة البيانات بتشغيل الوظائف أيحيث ، بأي ترتيب ، وأعد تشغيلها عند 
الفشل. ومع ذلك ، هم مع ذلك pow‐erful: يمكنهم تحليل السلاسل واستدعاء وظائف 
المكتبة وإجراء العمليات الحسابية والمزيد.MapReduce هو نموذج برمجة منخفض المستوى 
إلى حد ما للتنفيذ الموزع على ملفمجموعة من الآلات. يمكن تنفيذ لغات الاستعلام 
عالية المستوى مثل SQL كملفخط أنابيب لعمليات MapReduce (انظر الفصل 10) ، ولكن 
هناك أيضًا العديد من disتم تقدير تطبيقات SQL التي لا تستخدم MapReduce. لاحظ أنه 
لا يوجد شيء فيSQL الذي يقيده للعمل على جهاز واحد ، ولا يمتلك MapReduceاحتكار 
تنفيذ الاستعلام الموزع.تعد القدرة على استخدام كود JavaScript في منتصف الاستعلام 
ميزة رائعة لـاستعلامات متقدمة ، ولكنها لا تقتصر على MapReduce - يمكن أن تكون بعض 
قواعد بيانات SQLمع وظائف JavaScript أيضًا [33 ].تتمثل إحدى مشكلات قابلية 
الاستخدام في MapReduce في أنه يتعين عليك كتابة تنسيقين بعنايةوظائف JavaScript 
nated ، والتي غالبًا ما تكون أصعب من كتابة استعلام واحد. أكثر-أكثر من ذلك ، توفر 
لغة الاستعلام التعريفي المزيد من الفرص لمحسن الاستعلامتحسين أداء الاستعلام. لهذه 
الأسباب ، أضاف MongoDB 2.2 الدعمللغة استعلام تعريفية تسمى خط أنابيب التجميع [9]. 
في هذه اللغة ، فإن ملفيبدو نفس استعلام عد سمك القرش كما يلي:ديسيبل . الملاحظات . 
مجمع ([{ $ match : { family : "Sharks" }}،{ مجموعة $ : {_ معرّف : {السنة : { $ 
year : "$ ObservationTimestamp" }،الشهر : { $ month : "$ ObservationTimestamp" 
}} ،totalAnimals : { $ sum : "numAnimals $" }}}]) ؛لغات الاستعلام عن البيانات | 
47

      الصفحة 70
إن تعبير لغة خط التجميع مشابه لمجموعة فرعية من SQL ، ولكنيستخدم بناء جملة قائم 
على JSON بدلاً من بناء جملة نمط الجملة الإنجليزية في SQL ؛ ديفوربما يكون السور 
مسألة ذوق. المغزى من القصة هو أن نظام NoSQLقد تجد نفسها تعيد اختراع SQL عن طريق 
الخطأ ، وإن كانت مقنعة.نماذج البيانات الشبيهة بالرسم البيانيلقد رأينا سابقًا أن 
العلاقات بين كثير إلى كثير هي ميزة مميزة مهمةبين نماذج البيانات المختلفة. إذا 
كان التطبيق الخاص بك يحتوي في الغالب على علاقة رأس بأطرافالروابط (البيانات 
المهيكلة بالشجرة) أو عدم وجود علاقات بين السجلات والمستندالنموذج المناسب.ولكن 
ماذا لو كانت علاقات كثير إلى كثير شائعة جدًا في بياناتك؟ ريلاييمكن للنموذج 
المؤقت أن يتعامل مع الحالات البسيطة لعلاقات كثير إلى كثير ، ولكن كحلقةتصبح 
الأقسام داخل بياناتك أكثر تعقيدًا ، ويصبح من الطبيعي أن تبدأنمذجة بياناتك كرسم 
بياني.يتكون الرسم البياني من نوعين من الكائنات: الرؤوس (المعروفة أيضًا باسم 
العقد أو الكيانات ) والحواف (المعروفة أيضًا باسم العلاقات أو الأقواس ). يمكن 
نمذجة أنواع كثيرة من البيانات كملفرسم بياني. تشمل الأمثلة النموذجية ما 
يلي:الرسوم البيانية الاجتماعيةالرؤوس هي أشخاص ، والحواف تشير إلى الأشخاص الذين 
يعرفون بعضهم البعض.الرسم البياني للويبالرؤوس عبارة عن صفحات ويب ، وتشير الحواف 
إلى روابط HTML لصفحات أخرى.شبكات الطرق أو السكك الحديديةالرؤوس عبارة عن تقاطعات 
، وتمثل الحواف الطرق أو خطوط السكك الحديدية الواقعة بينهامعهم.يمكن أن تعمل 
الخوارزميات المعروفة على هذه الرسوم البيانية: على سبيل المثال ، أقصر مسارفي شبكة 
الطرق مفيد للتوجيه ، ويمكن استخدام نظام ترتيب الصفحات على الرسم البياني 
للويبلتحديد مدى شعبية صفحة الويب ، وبالتالي ترتيبها في نتائج البحث.في الأمثلة 
أعلاه ، تمثل جميع الرؤوس في الرسم البياني نفس النوع من الأشياء(الأشخاص أو صفحات 
الويب أو تقاطعات الطرق ، على التوالي). ومع ذلك ، لا تقتصر الرسوم البيانيةلمثل 
هذه البيانات المتجانسة : الاستخدام القوي للرسوم البيانية هو توفير تناسقطريقة 
الخيمة لتخزين أنواع مختلفة تمامًا من الكائنات في مخزن بيانات واحد. إلى عن علىعلى 
سبيل المثال ، يحتفظ Facebook برسم بياني واحد مع العديد من الأنواع المختلفة من 
الرؤوس وحافة: تمثل القمم الأشخاص والمواقع والأحداث وتسجيلات الوصول والتعليقات 
التي تم إجراؤها بواسطةالمستخدمين ؛ تشير الحواف إلى الأشخاص الذين هم أصدقاء مع 
بعضهم البعض ، مما يؤدي إلى تسجيل الوصول hap‐في أي موقع ، ومن قام بالتعليق على أي 
مشاركة ، ومن حضر الحدث ،إلخ [ 34]48 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      الصفحة 71
سنستخدم في هذا القسم المثال الموضح في الشكل 2-5. يمكن أن تؤخذ منشبكة اجتماعية أو 
قاعدة بيانات الأنساب: تظهر شخصين ، لوسي من ولاية أيداهو وآلان من بون ، فرنسا. 
إنهم متزوجون ويعيشون في لندن.هناك العديد من الطرق المختلفة ، ولكن ذات الصلة ، 
لهيكلة البيانات والاستعلام عنها بتنسيقالرسوم البيانية. في هذا القسم سنناقش نموذج 
الرسم البياني للممتلكات (تم تنفيذه بواسطةNeo4j و Titan و InfiniteGraph) ونموذج 
المتجر الثلاثي (تم تنفيذه بواسطة Datomic ،AllegroGraph وغيرها). سننظر في ثلاث 
لغات استعلام تعريفية لـالرسوم البيانية: Cypher و SPARQL و Datalog. إلى جانب هذه 
، هناك أيضًا رسم بياني إلزاميلغات الاستعلام مثل Gremlin [35 ] وأطر معالجة الرسوم 
البيانية مثل Pregel(يرى الفصل 10 ).النوع: بلدالاسم: الولايات المتحدةالنوع: 
القارةالاسم: أمريكا الشماليةالنوع: القارةالاسم: أوروباالنوع: الدولةالاسم: 
ايداهوالاختصار: IDفي غضونفي غضونفي غضونالنوع: بلدالاسم: فرنسااكتب: 
départementالاسم: كوت دورالنوع: المدينةالاسم: بونالنوع: شخصالاسم: لوسيالنوع: 
شخصالاسم: العينالنوع: المنطقةname_fr: بورغونيname_ar: عنابيفي غضونفي غضونفي 
غضونفي غضونالنوع: بلدالاسم: المملكة المتحدةالنوع: بلدالاسم: انجلتراالنوع: 
المدينةالاسم: لندنفي غضونفي غضونمولود فييعيش فيمتزوج \ متزوجةيعيش فيمولود 
فيالشكل 2-5. مثال على البيانات المهيكلة بالرسم البياني (المربعات تمثل الرؤوس ، 
تمثل الأسهمحواف مرسلة).الرسوم البيانية للممتلكاتفي نموذج الرسم البياني للممتلكات 
، يتكون كل رأس من:• معرف فريد ،• مجموعة من الحواف الصادرة ،• مجموعة من الحواف 
الواردة ، و• مجموعة من الخصائص (أزواج المفتاح والقيمة).تتكون كل حافة من:نماذج 
بيانات تشبه الرسم البياني | 49

      الصفحة 72
• معرف فريد ،• الرأس الذي تبدأ عنده الحافة (رأس الذيل ) ،• الرأس الذي تنتهي عنده 
الحافة ( رأس الرأس ) ،• تسمية لوصف نوع العلاقة بين الرأسين ، و• مجموعة من 
الخصائص (أزواج المفتاح والقيمة).يمكنك التفكير في متجر الرسم البياني على أنه 
يتكون من جدولين علائقيين ، أحدهما للرؤوسوواحد للحواف ، كما هو موضح في المثال 2-2 
(هذا المخطط يستخدم PostgreSQL jsonنوع البيانات لتخزين خصائص كل قمة أو حافة). قمة 
الرأس والذيلمخزنة على كل حافة إذا كنت تريد مجموعة الحواف الواردة أو الصادرة 
للقمة ،يمكنك الاستعلام عن جدول الحواف عن طريق head_vertex أو tail_vertex على 
التوالي.مثال 2-2. تمثيل رسم بياني للممتلكات باستخدام مخطط علائقي.إنشاء رؤوس 
الجدول (vertex_idعدد صحيح PRIMARY KEY ،خصائص json) ؛إنشاء حواف الجدول (معرّف 
الحافةعدد صحيح PRIMARY KEY ،tail_vertex صحيح مراجع القمم ( vertex_id 
)،head_vertex عدد صحيح المراجع القمم ( vertex_id ) ،ضع الكلمة المناسبةالنص 
،خصائص json) ؛CREATE INDEX edges_tails ON edges ( tail_vertex ) ؛إنشاء INDEX 
edges_heads على الحواف ( head_vertex ) ؛بعض الجوانب المهمة لهذا النموذج هي:1. أي 
قمة يمكن أن يكون لها حافة تربطها بأي قمة أخرى. لا يوجدالمخطط الذي يقيد أنواع 
الأشياء التي يمكن أو لا يمكن ربطها.2. بالنظر إلى أي رأس ، يمكنك العثور بكفاءة 
على كل من الوارد والصادرحواف ، وبالتالي اجتياز الرسم البياني - اتبع مسارًا عبر 
سلسلة من الرؤوس -إلى الأمام والخلف. (لهذا السبب يحتوي المثال 2-2 على فهارس في 
كلا الملفينtail_vertex و head_vertex الأعمدة).3. باستخدام تسميات مختلفة لأنواع 
مختلفة من العلاقات ، يمكنك تخزين العديد منهاأنواع مختلفة من المعلومات في رسم 
بياني واحد ، مع الحفاظ على نظافةنموذج البيانات.تمنح هذه الميزات الرسوم البيانية 
قدرًا كبيرًا من المرونة في نمذجة البيانات ، كما هو موضحفي الشكل 2-5. يوضح الشكل 
بعض الأشياء التي يصعب التعبير عنها في ملف50 | الفصل 2: ​​نماذج البيانات ولغات 
الاستعلام

      الصفحة 73
مخطط العلائقية التقليدية ، مثل أنواع مختلفة من الهياكل الإقليمية في مختلف‐الدول 
الأنف والحنجرة (فرنسا المقاطعات و المناطق في حين أن الولايات المتحدة لديها 
المقاطعات والدول ) ، المراوغات من التاريخ مثل بلد داخل بلد (تجاهل الآنتعقيدات 
الدول والدول ذات السيادة) ، وتباين دقة البيانات (Lucy'sتم تحديد محل إقامتها 
الحالي كمدينة ، في حين تم تحديد مكان ميلادها فقط فيمستوى الدولة).يمكنك أن تتخيل 
توسيع الرسم البياني ليشمل أيضًا العديد من الحقائق الأخرى حول لوسيوآلان أو غيرهم 
من الناس. على سبيل المثال ، يمكنك استخدامه للإشارة إلى أي مؤثر للطعام‐لديهم (عن 
طريق إدخال قمة لكل مسبب للحساسية ، وحافة بين per‐الابن ومسبب الحساسية للإشارة 
إلى الحساسية) ، وربط المواد المسببة للحساسية بمجموعة من القممالتي تظهر الأطعمة 
التي تحتوي على المواد. ثم يمكنك كتابة استعلام لتجدمعرفة ما هو آمن لكل شخص لتناول 
الطعام. الرسوم البيانية مفيدة للتطور: كما تضيفميزات التطبيق الخاص بك ، يمكن 
بسهولة توسيع الرسم البياني لاستيعاب التغييراتفي هياكل بيانات التطبيق الخاص 
بك.لغة الاستعلام CypherCypher هي لغة استعلام تعريفية للرسوم البيانية للخصائص ، 
تم إنشاؤها لـ Neo4jقاعدة بيانات الرسم البياني [36 ]. (سميت على اسم شخصية في فيلم 
The Matrix ، وهيلا علاقة لها بالأصفار في التشفير [ 37 ].)يوضح المثال 2-3 استعلام 
Cypher لإدخال الجزء الأيسر من الشكل 2-5في قاعدة بيانات الرسم البياني. يمكن إضافة 
باقي الرسم البياني بالمثل ، ويتم حذفه من أجلمقروئية. يتم إعطاء كل رأس اسمًا 
رمزيًا مثل USA أو Idaho وأجزاء أخرى منيمكن أن يستخدم الاستعلام هذه الأسماء 
لإنشاء حواف بين الرؤوس باستخدام سهمتدوين: (أيداهو) - [: داخل] -> (الولايات 
المتحدة الأمريكية) ينشئ حافة مسماة بالداخل ، مع أيداهوكعقدة الذيل والولايات 
المتحدة الأمريكية كعقدة رئيسية.المثال 2-3. مجموعة فرعية من البيانات بتنسيقالشكل 
2-5، يتم تمثيله كاستعلام Cypher.خلق( أمريكا الشمالية : الموقع {الاسم: 'أمريكا 
الشمالية' ، اكتب : 'القارة' }) ،(الولايات المتحدة الأمريكية: الموقع {name: 
'United States' ، type : 'country' }) ،(أيداهو: الموقع {الاسم: 'أيداهو' ، اكتب : 
"دولة"}) ،(لوسي: الشخص {الاسم: 'لوسي' }) ،(أيداهو) - [: داخل] -> (الولايات 
المتحدة الأمريكية) - [: في الداخل] -> (أمريكا الشمالية) ،(لوسي) - [: BORN_IN] -> 
(أيداهو)عندما يتم إضافة جميع الرؤوس والحواف في الشكل 2-5 إلى قاعدة البيانات ، 
يمكننا البدءطرح أسئلة مثيرة للاهتمام. على سبيل المثال ، ابحث عن أسماء جميع 
الأشخاص الذين emi‐مبشور من الولايات المتحدة إلى أوروبا . لكي تكون دقيقًا: أوجد 
جميع الرؤوس التي لها امتدادBORN_IN إلى موقع داخل الولايات المتحدة ، وكذلك حافة 
LIVING_IN للموقعداخل أوروبا ، وإرجاع خاصية الاسم لتلك الرؤوس.نماذج بيانات تشبه 
الرسم البياني | 51

      الصفحة 74
يوضح المثال 2-4 كيفية التعبير عن هذا الاستعلام في Cypher. نفس تدوين السهم 
هوالمستخدمة في عبارة MATCH للعثور على أنماط في الرسم البياني: (شخص) - [: 
BORN_IN] -> ()يتطابق مع أي رأسين مرتبطين بحافة مسماة BORN_IN . قمة الذيلمن تلك 
الحافة مرتبط بالشخص المتغير ، ويتم ترك رأس الرأس بدون تسمية.مثال 2-4. استعلام 
Cypher للعثور على الأشخاص الذين هاجروا من الولايات المتحدة إلى 
أوروبا.مباراة(شخص) - [: BORN_IN] -> () - [: WITHIN * 0 ..] -> (لنا: الموقع 
{name: 'United States' }) ،(شخص) - [: LIVES_IN] -> () - [: WITHIN * 0 ..] -> 
(eu: الموقع {name: 'Europe' })عودة الشخصالاستعلام يمكن قراءة ما يلي: "البحث عن 
أي قمة الرأس (الذي يطلق عليه الشخص ) الذي يلبي كلا منالشروط التالية:1. شخص لديه 
حافة صادرة BORN_IN إلى قمة رأس ما. من هذا الرأس يمكنكاتبع سلسلة المنتهية ولايته 
ضمن حواف حتى النهاية تصل إلى قمة الرأس للاكتب الموقع ، الذي تساوي خاصية اسمه 
"الولايات المتحدة" .2. رأس هذا الشخص نفسه له أيضًا حافة LIVES_IN صادرة . بعد 
ذلكالحافة، وبعد ذلك سلسلة من المنتهية ولايته داخل الحواف، التي تصل في نهاية 
المطاف إلى قمة الرأس للاكتب الموقع ، الذي تساوي خاصية اسمه "أوروبا" .لكل رأس من 
هذا الشخص ، قم بإرجاع خاصية الاسم ".هناك عدة طرق ممكنة لتنفيذ الاستعلام. الوصف 
أعلاه سوجتبدأ من خلال مسح جميع الأشخاص في قاعدة البيانات ، وفحص كل شخصمكان 
الميلاد والإقامة ، وإرجاع الأشخاص الذين يستوفون المعايير فقط.لكن بالمقابل ، 
يمكنك البدء برؤيتي الموقع والعمل بشكل عكسي.إذا كان هناك فهرس في خاصية الاسم ، 
فمن المحتمل أن تجد الاثنين بكفاءةالقمم التي تمثل الولايات المتحدة وأوروبا. ثم 
يمكنك المتابعة للعثور على جميع المواقع(الولايات والمناطق والمدن وما إلى ذلك) في 
الولايات المتحدة وأوروبا على التوالي باتباع كل الدخل‐جي داخل الحواف. أخيرًا ، 
يمكنك البحث عن الأشخاص الذين يمكن العثور عليهم من خلال ملفواردة BORN_IN أو 
LIVES_IN edge على أحد المواقع.كما هو معتاد في لغة الاستعلام التعريفي ، لا تحتاج 
إلى تحديد هذا التنفيذالتفاصيل عند كتابة الاستعلام: يختار مُحسِّن الاستعلام 
الطبقة تلقائيًاegy يُتوقع أن يكون الأكثر كفاءة ، ويمكنك متابعة كتابة الباقيمن 
تطبيقك.استعلامات الرسم البياني في SQLاقترح المثال 2-2 أنه يمكن تمثيل بيانات 
الرسم البياني في قاعدة بيانات علائقية.ولكن إذا وضعنا بيانات الرسم البياني في 
بنية علائقية ، فهل يمكننا أيضًا الاستعلام عنها باستخدام SQL؟52 | الفصل 2: 
​​نماذج البيانات ولغات الاستعلام

      صفحة 75
الجواب: نعم ولكن ببعض الصعوبة. في قاعدة البيانات العلائقية ، أنت عادةتعرف مسبقًا 
ما الذي ينضم الذي تحتاجه في استفسارك. في استعلام الرسم البياني ، يمكنكتحتاج إلى 
اجتياز عدد متغير من الحواف قبل أن تجد الرأس الذي تبحث عنهعلى سبيل المثال ، لم 
يتم تحديد عدد الصلات مسبقًا.في مثالنا ، يحدث ذلك في قاعدة () - [: WITHIN * 0 ..] 
-> () في Cypherاستفسار. الشخص LIVES_IN قد يشير حافة في أي نوع من الموقع: شارع، 
مدينة، لمنطقة ، منطقة ، ولاية ، إلخ. قد تكون المدينة داخل منطقة ، أو منطقة داخل 
ولاية ، أوالدولة داخل البلد ، وما إلى ذلك. قد تشير حافة LIVES_IN مباشرةً إلى 
الموقع ver‐tex الذي تبحث عنه ، أو قد يكون هناك عدة مستويات تمت إزالتها في 
التسلسل الهرمي للموقع.في سايفر، و: في غضون * 0 .. يعبر عن هذه الحقيقة بشكل مقتضب 
جدا: وهو ما يعني "اتباع ضمنحافة ، صفر أو مرات أكثر ". إنه مثل عامل التشغيل * في 
التعبير العادي.يمكن التعبير عن فكرة مسارات الاجتياز متغيرة الطول في استعلام منذ 
SQL:1999 باستخدام شيء يسمى تعبيرات الجدول الشائعة العودية ( WITH RECURSIVEبناء 
الجملة). يوضح المثال 2-5 نفس الاستعلام - العثور على أسماء الأشخاص الذين emi‐من 
الولايات المتحدة إلى أوروبا - معبرًا عنها في SQL باستخدام هذه التقنية (مدعومة 
فيPostgreSQL و IBM DB2 و Oracle و SQL Server). ومع ذلك ، فإن بناء الجملة أخرق 
للغايةبالمقارنة مع سايفر.مثال 2-5. نفس الاستعلام مثل المثال 2-4، معبراً عنها في 
SQL باستخدام العوديةتعبيرات الجدول المشتركة.مع عودة- in_usa هي مجموعة معرفات قمة 
الرأس لجميع المواقع داخل الولايات المتحدةin_usa ( vertex_id ) AS (حدد vertex_id 
من القمم حيث الخصائص - >> 'name' = 'United States'اتحادحدد الحواف . Tail_vertex 
من الحوافالتسجيل in_usa على الحواف . head_vertex = in_usa . vertex_idأين الحواف 
. التسمية = "ضمن") ،- in_europe هي مجموعة معرفات قمة الرأس لجميع المواقع داخل 
أوروباin_europe ( vertex_id ) AS (حدد vertex_id من القمم حيث الخصائص - >> 'name' 
= 'Europe'اتحادحدد الحواف . Tail_vertex من الحوافالانضمام إلى in_europe على 
الحواف . head_vertex = in_europe . vertex_idأين الحواف . التسمية = "ضمن") ،- 
born_in_usa هي مجموعة معرفات قمة الرأس لجميع الأشخاص المولودين في الولايات 
المتحدةborn_in_usa ( vertex_id ) AS (حدد الحواف . Tail_vertex من الحوافالتسجيل 
in_usa على الحواف . head_vertex = in_usa . vertex_idأين الحواف . التسمية = 
'born_in') ،- Lives_in_europe هي مجموعة معرفات قمة الرأس لجميع الأشخاص الذين 
يعيشون في أوروباLives_in_europe ( vertex_id ) AS (نماذج بيانات تشبه الرسم 
البياني | 53

      الصفحة 76
حدد الحواف . Tail_vertex من الحوافالانضمام إلى in_europe على الحواف . 
head_vertex = in_europe . vertex_idأين التسمية = 'Lives_in')حدد القمم . خصائص - 
>> "الاسم"من القمم- انضم للعثور على الأشخاص الذين ولدوا في الولايات المتحدة * و 
* يعيشون في أوروباالتسجيل born_in_usaعلى القمم . vertex_id = born_in_usa . 
vertex_idالتسجيل lives_in_europe على القمم . vertex_id = يعيش في_الأوروب . 
vertex_id .ابحث أولاً عن الرأس الذي يكون لخاصية اسمه القيمة "الولايات المتحدة" ، 
ثم قم بإضافتهاإلى مجموعة الرؤوس in_usa .اتبع كل واردة ضمن حواف من القمم في 
المجموعة in_usa ، وإضافتهاإلى نفس المجموعة ، حتى تتم زيارة كل الوارد داخل 
الحواف.افعل الشيء نفسه بدءًا من الرأس الذي يكون لخاصية اسمه القيمة"أوروبا" ، 
وبناء مجموعة القمم في أوروبا .لكل من القمم في المجموعة in_usa ، اتبع حواف 
Born_in الواردة للعثورالأشخاص الذين ولدوا في مكان ما داخل الولايات 
المتحدة.وبالمثل ، لكل من القمم في المجموعة in_europe ، اتبع الحيوات 
الواردةحواف.أخيرًا ، تقاطع مجموعة الأشخاص المولودين في الولايات المتحدة مع 
مجموعة الأشخاص الذين يعيشون فيهاأوروبا بالانضمام إليهم.إذا كان من الممكن كتابة 
نفس الاستعلام في أربعة أسطر بلغة استعلام واحدة ، لكنه يتطلب 29خطوط أخرى ، وهذا 
يوضح فقط أن نماذج البيانات المختلفة مصممة لتلبية مختلفحالات استخدام شديدة. من 
المهم اختيار نموذج بيانات مناسب لتطبيقك‐نشوئها.قواعد بيانات الرسم البياني مقارنة 
بنموذج الشبكةفي "هل قواعد بيانات المستندات تكرر التاريخ؟" في الصفحة 35 ناقشنا 
كيفتنافس CODASYL والنموذج العلائقي لحل مشكلة متعدد إلىالعديد من العلاقات في IMS. 
للوهلة الأولى ، يبدو نموذج شبكة CODASYL مشابهًالنموذج الرسم البياني. هي قواعد 
بيانات الرسم البياني المجيء الثاني لـ CODASYL في dis‐ستار؟لا ، فهي تختلف في عدة 
نواحٍ مهمة:• في CODASYL ، تحتوي قاعدة البيانات على مخطط يحدد نوع السجل الذي يمكن 
أن يكونمتداخلة في أي نوع سجل آخر. في قاعدة بيانات الرسم البياني ، لا يوجد مثل 
هذا54 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      الصفحة 77
التقييد: يمكن أن يكون لأي رأس حافة لأي قمة أخرى. هذا يعطي الكثيرمرونة أكبر 
للتطبيقات للتكيف مع المتطلبات المتغيرة.• في CODASYL ، كانت الطريقة الوحيدة 
للوصول إلى سجل معين هي اجتياز أحد السجلاتمسارات الوصول إليها. في قاعدة بيانات 
الرسم البياني ، يمكنك الرجوع مباشرة إلى أي رأس بواسطةمعرّفها الفريد ، أو يمكنك 
استخدام فهرس خاصية للعثور على رؤوس ذات قيمة معينةالقيمة.• في CODASYL ، كانت 
العناصر الفرعية للسجل عبارة عن مجموعة مرتبة ، لذلك كانت قاعدة البيانات 
موجودةللحفاظ على هذا الطلب (الذي كان له عواقب على تخطيط التخزين) وكان على 
التطبيقات التي أدرجت سجلات جديدة في قاعدة البيانات أن تقلق بشأنموقف الرقم 
القياسي الجديد في هذه المجموعات. في قاعدة بيانات الرسم البياني ، لا يوجد 
تعريفترتيب الرؤوس أو الحواف (يمكنك فقط فرز النتائج عند عمل ملفاستفسار).• في 
CODASYL ، كانت جميع الاستفسارات إلزامية ، ويصعب كتابتها ويمكن كسرها 
بسهولةالتغييرات في المخطط. في قاعدة بيانات الرسم البياني ، يمكنك كتابة عملية 
الاجتيازرمز حتمي إذا كنت ترغب في ذلك ، ولكن معظم قواعد بيانات الرسم البياني تدعم 
أيضًا المستوى العالي ،لغات الاستعلام التصريحية مثل Cypher أو SPARQL.ثلاث مخازن 
وسباركليكافئ نموذج المتجر الثلاثي في ​​الغالب نموذج الرسم البياني للممتلكات ، 
باستخدام الاختلافكلمات لوصف نفس الأفكار. لا يزال الأمر يستحق المناقشة ، لأنههناك 
العديد من الأدوات واللغات للمتاجر الثلاثية التي يمكن أن تكون إضافات قيمةإلى 
صندوق الأدوات الخاص بك لبناء التطبيقات.في المتجر الثلاثي ، يتم تخزين جميع 
المعلومات في شكل حالة بسيطة للغاية من ثلاثة أجزاء‐إشارات: ( الموضوع ، المسند ، 
الشيء ). على سبيل المثال ، في الثلاثية ( جيم ، يحب ، الموز ) ، جيمهو الفاعل ، 
الإعجابات هي المسند (الفعل) ، والموز هو المفعول به.موضوع الثلاثي يعادل قمة في 
الرسم البياني. الكائن واحد من اثنينأشياء:1. يمكن أن يكون الكائن قيمة في نوع 
بيانات بدائي ، مثل سلسلة أو رقم. فيفي هذه الحالة ، يكون المسند وموضوع الثلاثي 
مساويين للمفتاح والقيمةلخاصية على قمة الموضوع. على سبيل المثال ، ( lucy ، age ، 
33 ) تشبه قمة الرأسلوسي بخصائصه {"العمر": 33} .2. يمكن أن يكون الكائن رأسًا آخر 
في الرسم البياني. في هذه الحالة ، المسند هوالحافة في الرسم البياني ، والموضوع هو 
رأس الذيل والشيء هو رأس الرأس.على سبيل المثال ، في ( lucy ، marriedTo ، alain ) 
الموضوع و الكائن lucy و alain هماكلا الرأسين ، والمسند متزوج إلى هو تسمية الحافة 
التي تربطمعهم.نماذج بيانات تشبه الرسم البياني | 55

      صفحة 78
على سبيل المثال ، يوضح المثال 2-6 نفس البيانات الموجودة في المثال 2-3، مكتوبة في 
شكل ثلاثياتبتنسيق يسمى Turtle ، مجموعة فرعية من Notation3 ( N3 ) [ 38 ].مثال 
2-6. مجموعة فرعية من البيانات بتنسيقالشكل 2-5، ممثلة بثلاثيات السلحفاة.prefix: 
<urn: example:>._: لوسي أ: شخص._: لوسي: اسم "لوسي"._: لوسي: ولد في _: ايداهو._: 
ايداهو ج: الموقع._: ايداهو: اسم "ايداهو"._: idaho: اكتب "حالة"._: ايداهو: داخل 
_: الولايات المتحدة الأمريكية._: الولايات المتحدة الأمريكية أ: الموقع._: 
الولايات المتحدة الأمريكية: الاسم "الولايات المتحدة"._: الولايات المتحدة 
الأمريكية: اكتب "بلد"._: USA: within _: namerica._: اسم أ: الموقع._: namerica: 
الاسم "أمريكا الشمالية"._: namerica: اكتب "القارة".في هذا المثال ، تتم كتابة 
رؤوس الرسم البياني كـ _: someName - الاسم لايعني أي شيء خارج هذا الملف ، فهو 
موجود فقط لأننا لن نعرفأي ثلاثيات تشير إلى نفس الرأس. عندما يمثل المسند حافة ، 
فإنالكائن رأس ، كما في _: idaho: within _: usa . عندما يكون المسند ملكية ،الكائن 
عبارة عن سلسلة حرفية ، كما في _: usa: name "United States" .من المكرر تكرار نفس 
الموضوع مرارًا وتكرارًا ، لكن لحسن الحظيمكنك استخدام الفاصلة المنقوطة لقول أشياء 
متعددة حول نفس الموضوع. هذا يجعلشكل السلحفاة لطيف للغاية ويمكن قراءته: انظر 
المثال 2-7 .مثال 2-7. طريقة أكثر إيجازًا لكتابة البيانات في المثال 2-6.prefix: 
<urn: example:>._: لوسي أ: شخص ؛ : الاسم "لوسي" ؛ : bornIn _: idaho._: أيداهو أ: 
الموقع ؛ : الاسم "أيداهو" ؛ : اكتب "دولة" ؛ : داخل _: الولايات المتحدة 
الأمريكية._: الولايات المتحدة الأمريكية أ: الموقع ؛ : الاسم "الولايات المتحدة" ؛ 
: اكتب "البلد" ؛ : within _: namerica._: اسم أ: الموقع ؛ : الاسم "أمريكا 
الشمالية" ؛ : اكتب "القارة".الويب الدلاليإذا قرأت المزيد عن المتاجر الثلاثية ، 
فقد تنغمس في دوامة من المقالاتمكتوبة عن الويب الدلالي . نموذج بيانات المتجر 
الثلاثي مستقل تمامًا.ent من الويب الدلالي - على سبيل المثال ، Datomic [39] هو 
متجر ثلاثي لا يفعل ذلك56 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      صفحة 79
السابع. من الناحية الفنية ، تستخدم Datomic 5 مجموعات بدلاً من ثلاثة أضعاف ؛ 
الحقلين الإضافيين عبارة عن بيانات وصفية للإصدار‐عمل.يدعي أن له أي علاقة بالويب 
الدلالي. vii ولكن لأن الاثنين قريبان جدًامرتبطة في أذهان كثير من الناس ، يجب أن 
نناقشها بإيجاز.الويب الدلالي هو في الأساس فكرة بسيطة ومعقولة: مواقع الويب 
بالفعلنشر المعلومات كنصوص وصور ليقرأها البشر - لماذا لا يفعلون ذلك أيضًانشر 
المعلومات كبيانات قابلة للقراءة آليًا لأجهزة الكمبيوتر لقراءتها؟ و المواردوصف 
الإطار (RDF) [ 40] كان الغرض منه أن يكون آلية لشبكة مختلفةالمواقع لنشر البيانات 
بتنسيق ثابت ، مما يسمح للبيانات من مواقع الويب المختلفة بـيتم دمجها تلقائيًا في 
شبكة بيانات ، وهي نوع من "قاعدة بيانات على مستوى الإنترنتكل شىء'.لسوء الحظ ، تم 
المبالغة في تضخيم الويب الدلالي في أوائل العقد الأول من القرن الحادي والعشرين ، 
لكن لم يحدث ذلك حتى الآنأظهر أي علامة على تحقيقه في الممارسة ، مما جعل الكثير من 
الناس متشككينحوله. لقد عانى أيضًا من عدد كبير من الاختصارات المذهلة والمعقدة 
بشكل مفرطمقترحات المعايير ، والغطرسة.ومع ذلك ، إذا نظرت إلى ما وراء هذه 
الإخفاقات ، فهناك أيضًا الكثير من العمل الجيد الذي تم تحقيقهخارج مشروع الويب 
الدلالي. يمكن أن تكون الثلاثيات نموذجًا جيدًا للبيانات الداخلية 
للتطبيقالكاتيونات ، حتى لو لم تكن مهتمًا بنشر بيانات RDF على الويب الدلالي.نموذج 
بيانات RDFلغة السلحفاة التي استخدمناها في المثال 2-7 هي تنسيق مقروء من قبل 
الإنسان لـ RDFبيانات. أحيانًا تتم كتابة RDF أيضًا بتنسيق XML ، والذي يقوم بنفس 
الشيءبشكل أكثر تفصيلاً - انظر المثال 2-8. يفضل استخدام Turtle / N3 لأنه أسهل 
بكثيرعلى العيون وأدوات مثل Apache Jena [41 ] يمكن التحويل تلقائيًا بين 
مختلفتنسيقات RDF إذا لزم الأمر.مثال 2-8. بياناتالمثال 2-7 ، معبراً عنه باستخدام 
صيغة RDF / XML.<rdf: RDF xmlns = "جرة: مثال:"xmlns: rdf = 
"http://www.w3.org/1999/02/22-rdf-syntax-ns#" ><الموقع rdf: nodeID = "idaho" 
><name> ايداهو </ name><type> حالة </ النوع><ضمن><الموقع rdf: nodeID = "usa" 
><name> الولايات المتحدة </ name><type> البلد </ النوع><ضمن><الموقع rdf: nodeID 
= "namerica" ><name> أمريكا الشمالية </ name><type> القارة </ النوع>نماذج بيانات 
تشبه الرسم البياني | 57

      صفحة 80
</Location></ ضمن></Location></ ضمن></Location><Person rdf: nodeID = "lucy" 
><name> لوسي </ name><bornIn rdf: nodeID = "idaho" /></Person></ rdf: RDF>يحتوي 
RDF على بعض المراوغات نظرًا لأنه مصمم للبيانات على مستوى الإنترنتتبادل. غالبًا 
ما يكون موضوع ومُسند وموضوع الثلاثي URIs: بدلاً من aالمسند كونه داخل أو LIVES_IN 
فقط ، فهو في الواقع شيء مثل <http: // 
my-company.com/namespace#within>أو<http://my-company.com/nameمساحة # حيوات_في> . 
الفكرة من وراء ذلك: يجب أن تكون قادرًا على دمج بياناتكببيانات شخص آخر ، وإذا 
أرفقوا معنى مختلفًا للكلمة الموجودةأو Lives_in ، فلن تحصل على تعارض لأن المسندات 
الخاصة بهم هي في الواقع <http: //other.org/foo#within> و 
<http://other.org/foo#lives_in> .لا يلزم بالضرورة حل عنوان URL 
<http://my-company.com/namespace>لأي شيء - من وجهة نظر RDF ، إنها مجرد مساحة 
اسم. لتجنب الحصول علىمرتبكًا بواسطة http: // URLs ، نستخدم URIs مثل urn: 
example: within في الأمثلةفي الاعلى. لحسن الحظ ، يمكنك فقط تحديد هذه البادئة مرة 
واحدة في أعلى الملف ، ثم بعد ذلكأنسى أمره.لغة استعلام سباركلSPARQL هي لغة 
استعلام للمتاجر الثلاثية باستخدام نموذج بيانات RDF [ 42 ]. (إنه لاختصار 
لبروتوكول SPARQL ولغة RDF Query ، ويُنطق "spar‐"kle ".) يسبق Cypher ، وبما أن 
Cypher تم استعارة مطابقة الأنماط منسباركل ، تبدو متشابهة تمامًا [36 ].نفس 
الاستعلام السابق - العثور على الأشخاص الذين انتقلوا من الولايات المتحدة إلى 
أوروبا - هوأكثر إيجازًا في SPARQL مما هو عليه في Cypher: see مثال 2-9 .مثال 2-9. 
نفس الاستعلام مثل المثال 2-4، معبرًا عنها في سباركل.PREFIX : < urn : example : 
>حدد ؟ اسم الشخص أين {؟ الشخص : الاسم ؟ اسم الشخص .؟ الشخص : bornIn / : within * 
/ : الاسم "United States" .؟ الشخص : liveIn / : within * / : الاسم "Europe" .}58 
| الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      صفحة 81
ثامنا. يستخدم Datomic و Cascalog صيغة تعبير Clojure S لكتالوج البيانات. في 
الأمثلة التالية نستخدم ملفبناء جملة برولوج ، وهو أسهل قليلاً في القراءة ، لكنه 
لا يحدث فرقًا وظيفيًا.الهيكل مشابه جدا. التعبيران التاليان متكافئان 
(المتغيراتابدأ بعلامة استفهام في سباركل):(شخص) - [: BORN_IN] -> () - [: WITHIN * 
0 ..] -> (الموقع) # Cypher؟ person: bornIn /: within *؟ location. # سباركللأن 
RDF لا يميز بين الخصائص والحواف ، ولكنه يستخدم فقطcates لكليهما ، يمكنك استخدام 
نفس الصيغة لمطابقة الخصائص. في التاليالتعبير ، المتغير usa مرتبط بأي رأس مع 
تعيين خاصية الاسم على "Uniتيد الدول " :(الولايات المتحدة الأمريكية {name: 
'United States'}) # Cypher؟ usa: اسم "الولايات المتحدة". # سباركلSPARQL هي لغة 
استعلام لطيفة - حتى لو لم تحدث الويب الدلالي مطلقًا ، فيمكن ذلكأداة قوية 
للتطبيقات لاستخدامها داخليًا.المؤسسة: DatalogDatalog هي لغة أقدم بكثير من لغة 
SPARQL أو Cypher ، بعد أن تمت دراستهاعلى نطاق واسع من قبل الأكاديميين في 
الثمانينيات [ 43 ، 44 ]. إنه أقل شهرة بين البرامجالمهندسين ، لكنها مع ذلك مهمة ، 
لأنها توفر الأساس الذيلغات الاستعلام اللاحقة بناء عليها.كل عام لدينا المزيد من 
النوى داخل كل وحدة معالجة مركزية ، والمزيد من وحدات المعالجة المركزية في كل جهاز 
، والمزيد من الآلات في مجموعة شبكية. بصفتنا مبرمجين ، ما زلنا لم نتوصل إلى 
أإجابة جيدة لمشكلة كيفية العمل بشكل أفضل مع كل هذا التوازي. ولكن لديهاتم اقتراح 
أن اللغات التقريرية القائمة على Datalog قد تكون المستقبل لـالبرمجة الموازية ، 
والتي أثارت الاهتمام ببرنامج Datalog مؤخرًا [31 ]. هناككما تم إجراء الكثير من 
الأبحاث لتقييم استعلامات Datalog بكفاءة [ 43 ].في الممارسة العملية ، يتم استخدام 
Datalog في عدد قليل من أنظمة البيانات: على سبيل المثال ، هو الاستعلام lan‐مقياس 
البيانات [39 ] و Cascalog [45 ] هو تطبيق Datalog للاستعلاممجموعات البيانات 
الكبيرة في Hadoop. ثامنايشبه نموذج بيانات Datalog نموذج المتجر الثلاثي ، المعمم 
قليلاً. بدلا منكتابة ثلاثية كـ ( موضوع ، مسند ، كائن ) ، نكتبها كمسند ( موضوع ، 
كائن ).يوضح المثال 2-10 كيفية كتابة البيانات من مثالنا في Datalog.نماذج بيانات 
تشبه الرسم البياني | 59

      الصفحة 82
المثال 2-10. مجموعة فرعية من البيانات في الشكل 2-5 ، ممثلة كحقائق سجل 
البيانات.name ( namerica ، "North America" ).اكتب ( اسم ، قارة ).name ( usa ، 
"United States" ).اكتب ( الولايات المتحدة الأمريكية ، البلد ).داخل ( الولايات 
المتحدة الأمريكية ، نامريكا ).الاسم ( ايداهو ، "ايداهو" ).اكتب ( ايداهو ، الدولة 
).داخل ( أيداهو ، الولايات المتحدة الأمريكية ).الاسم ( لوسي ، لوسي ).ولد في ( 
لوسي ، ايداهو ).الآن بعد أن حددنا البيانات ، يمكننا كتابة نفس الاستعلام كما كان 
من قبل ، كما هو موضحفي المثال 2-11. يبدو مختلفًا قليلاً عن نظيره في Cypher أو 
SPARQL ،لكن لا تدع هذا يزعجك. Datalog هي مجموعة فرعية من Prolog ، والتي قد تكون 
لديكرأينا من قبل إذا كنت قد درست علوم الكمبيوتر.المثال 2-11. نفس الاستعلام 
مثلمثال 2-4 ، معبرًا عنه في Datalog.within_recursive ( الموقع ، الاسم ): - الاسم 
( الموقع ، الاسم )./* قاعدة 1 */within_recursive ( الموقع ، الاسم ): - داخل ( 
الموقع ، عبر ) ،/ * القاعدة 2 * /within_recursive ( فيا ، اسم ).هاجر ( الاسم ، 
BornIn ، LivingIn ): - الاسم ( الشخص ، الاسم ) ،/ * القاعدة 3 * /Born_in ( شخص ، 
BornLoc ) ،within_recursive ( BornLoc ، BornIn ) ،Lives_in ( شخص ، LivingLoc ) 
،within_recursive ( LivingLoc ، LivingIn ).؟ - هاجر ( من ، "الولايات المتحدة" ، 
"أوروبا" )./ * من = "لوسي". * /يقفز Cypher و SPARQL على الفور باستخدام SELECT ، 
لكن Datalog يأخذ خطوة صغيرةفي الوقت. نحدد القواعد التي تخبر قاعدة البيانات عن 
المسندات الجديدة: هنا ، نحدداثنين من المسندات جديدة، within_recursive و هاجر . 
هذه المسندات ليست ثلاثيةمخزنة في قاعدة البيانات ، ولكنها بدلاً من ذلك مشتقة من 
بيانات أو من قواعد أخرى.يمكن أن تشير القواعد إلى قواعد أخرى ، تمامًا مثلما يمكن 
للوظائف استدعاء وظائف أخرى أو تكرارها.يسمون أنفسهم بشكل حيوي. مثل هذا ، يمكن 
إنشاء الاستعلامات المعقدة قطعة صغيرة فيالوقت.في القواعد ، الكلمات التي تبدأ بحرف 
كبير هي متغيرات ، والمسنداتمتطابقة في Cypher و SPARQL. على سبيل المثال ، الاسم 
(الموقع ، الاسم) يطابق60 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      الصفحة 83
الاسم الثلاثي (namerica، 'North America') مع روابط متغيرة Location =namerica و 
اسم = 'أمريكا الشمالية .يتم تطبيق قاعدة إذا تمكن النظام من العثور على تطابق 
لجميع المسندات على الجانب الأيمنمن : - المشغل. عندما تنطبق القاعدة ، يبدو الأمر 
كما لو أن الجانب الأيسر من : -تمت إضافته إلى قاعدة البيانات (مع استبدال 
المتغيرات بالقيم المطابقة).وبالتالي ، فإن إحدى الطرق الممكنة لتطبيق القواعد 
هي:1. name (namerica، "North America") موجود في قاعدة البيانات ، لذلك تنطبق 
القاعدة 1 ، ويولد within_recursive (namerica، "North America") .2. داخل (usa ، 
namerica) موجود في قاعدة البيانات ، وداخل (nameica ، "أمريكا الشمالية") من خلال 
الخطوة السابقة ، لذلك تنطبق القاعدة 2 ،ويولد within_recursive (الولايات المتحدة 
الأمريكية ، "أمريكا الشمالية") .3. داخل (idaho ، الولايات المتحدة الأمريكية) 
موجود في قاعدة البيانات ، و within_recursive (الولايات المتحدة الأمريكية ،"North 
America") تم إنشاؤه بواسطة الخطوة السابقة ، لذلك يتم تطبيق القاعدة 2 ، و 
gen‐erates within_recursive (ايداهو، "أمريكا الشمالية) .من خلال التطبيق المتكرر 
للقاعدتين 1 و 2 ، يمكن أن يخبرنا المسند within_recursiveجميع المواقع في أمريكا 
الشمالية (أو أي اسم موقع آخر) الواردة فيقاعدة البيانات. هذا موضح فيالشكل 2-6.ضمن 
نطاق متسلسلموقعنامريكاالولايات المتحدة الأمريكيةايداهواسمشمال امريكاالولايات 
المتحدة الأمريكيةايداهوضمن نطاق متسلسلموقعنامريكاالولايات المتحدة 
الأمريكيةالولايات المتحدة الأمريكيةايداهوايداهواسمشمال امريكاشمال امريكاالولايات 
المتحدة الأمريكيةالولايات المتحدة الأمريكيةايداهوضمن نطاق 
متسلسلموقعنامريكاالولايات المتحدة الأمريكيةايداهوالولايات المتحدة 
الأمريكيةايداهوايداهواسمشمال امريكاشمال امريكاشمال امريكاالولايات المتحدة 
الأمريكيةالولايات المتحدة الأمريكيةايداهوبعد تطبيق القاعدة 1:بعد تطبيق القاعدة 2 
مرة واحدة:بعد تطبيق القاعدة 2 مرتين:داخل (الولايات المتحدة الأمريكية 
،نامريكا).داخل (أيداهو ، الولايات المتحدة الأمريكية).داخل (أيداهو ، الولايات 
المتحدة الأمريكية).الشكل 2-6. تحديد أن أيداهو في أمريكا الشمالية ، باستخدام 
قواعد البيانات منالمثال 2-11.الآن يمكن للقاعدة 3 العثور على الأشخاص الذين ولدوا 
في مكان ما BornIn ، ويعيشون في بعضهاموقع LivingIn . من خلال الاستعلام باستخدام 
BornIn = "الولايات المتحدة" و LivingIn ="أوروبا" ، وترك الشخص كمتغير Who ، نطلب 
من نظام Datalog أن يجدمن خلالها القيم التي يمكن أن تظهر للمتغير Who . إذن ، 
أخيرًا حصلنا على نفس الإجابةفي استعلام Cypher و SPARQL أعلاه.يتطلب نهج Datalog 
نوعًا مختلفًا من التفكير عن الاستعلام الآخر lan‐تمت مناقشته في هذا الفصل ، لكنه 
نهج قوي للغاية ، لأن القواعد يمكن أن تفعل ذلكنماذج بيانات تشبه الرسم البياني | 
61

      صفحة 84
يتم دمجها وإعادة استخدامها في استعلامات مختلفة. إنها أقل ملاءمة لمرة واحدة 
بسيطةاستعلامات ، ولكن يمكنها التعامل بشكل أفضل إذا كانت بياناتك معقدة.ملخصتعد 
نماذج البيانات موضوعًا ضخمًا ، وفي هذا الفصل ألقينا نظرة سريعة على ملفمجموعة 
متنوعة من النماذج المختلفة. لم يكن لدينا مساحة للخوض في كل التفاصيلكل نموذج ، 
ولكن نأمل أن تكون النظرة العامة كافية لتحفيز شهيتكاكتشف المزيد حول النموذج 
الأنسب لمتطلبات تطبيقك.تاريخيًا ، بدأ تمثيل البيانات كشجرة واحدة كبيرة (التسلسل 
الهرميالنموذج) ، ولكن هذا لم يكن جيدًا لتمثيل العلاقات بين كثير إلى كثير ، لذا 
فإنتم اختراع نموذج العلائقية لحل هذه المشكلة. في الآونة الأخيرة ، وجد المطورونأن 
بعض التطبيقات لا تتناسب جيدًا مع النموذج العلائقي أيضًا. جديد غيرتباعدت مخازن 
بيانات "NoSQL" العلائقية في اتجاهين رئيسيين:1. تستهدف قواعد بيانات المستندات 
حالات الاستخدام حيث تأتي البيانات في وثيقة قائمة بذاتها.الإشارات ، والعلاقات بين 
وثيقة وأخرى نادرة.2. قواعد بيانات الرسم البياني تذهب في الاتجاه المعاكس ، 
وتستهدف حالات الاستخدام حيث أي شيءيحتمل أن يكون مرتبطًا بكل شيء.تُستخدم جميع 
النماذج الثلاثة (المستندات والعلائقية والرسم البياني) على نطاق واسع اليوم ، وكل 
منها يستخدمجيد في مجاله الخاص. يمكن محاكاة أحد النماذج من ناحية أخرىالنموذج ، 
لكن النتيجة غالبًا ما تكون محرجة. لهذا السبب لدينا أنظمة مختلفةأغراض شرسة ، وليس 
حلًا واحدًا يناسب الجميع.الشيء الوحيد المشترك بين قواعد بيانات المستندات والرسم 
البياني هو أنها عادةًلا تفرض مخططًا للبيانات التي يخزنها ، مما يسهل 
التكيفتطبيقات على المتطلبات المتغيرة.يأتي كل نموذج بيانات مع إطار عمل أو لغة 
الاستعلام الخاصة به ، وقد ناقشنا ذلكعدة أمثلة: SQL ، MapReduce ، خط تجميع 
MongoDB ، Cypher ،SPARQL و Datalog. لقد تطرقنا أيضًا إلى CSS و XSL / XPath ، وهي 
ليست بيانات‐لغات الاستعلام الأساسية ، ولكن لها أوجه تشابه مثيرة للاهتمام.على 
الرغم من أننا غطينا الكثير من التفاصيل ، لا يزال هناك العديد من نماذج البيانات 
المتبقيةغير مذكور. لإعطاء بعض الأمثلة المختصرة:• غالبًا ما يحتاج الباحثون الذين 
يعملون مع بيانات الجينوم إلى إجراء تسلسل-عمليات البحث عن التشابه ، وهو ما يعني 
أخذ سلسلة واحدة طويلة جدًا (تمثل ملفجزيء DNA) ومطابقته مع قاعدة بيانات كبيرة من 
السلاسل المشابهةلار ، لكنها ليست متطابقة. لا يمكن لأي من قواعد البيانات المذكورة 
أعلاه التعامل مع هذا النوعمن الاستخدام ، وهذا هو سبب كتابة الباحثين لقاعدة 
بيانات الجينوم المتخصصةبرنامج مثل GenBank [ 46].62 | الفصل 2: ​​نماذج البيانات 
ولغات الاستعلام

      الصفحة 85
• كان علماء فيزياء الجسيمات يقومون بتحليل البيانات الكبيرة على غرار البيانات 
الضخمةعقود ، ومشاريع مثل مصادم الهادرون الكبير (LHC) تعمل الآن مع Hunجرافات 
البيتابايت! على هذا النطاق ، هناك حاجة إلى حلول مخصصة ، لإيقاف الصعوبةتكلفة 
السلع تتصاعد خارج نطاق السيطرة [47].• يمكن القول إن البحث عن نص كامل هو نوع من 
نماذج البيانات التي يتم استخدامها بشكل متكرر جنبًا إلى جنبقواعد بيانات. استرجاع 
المعلومات هو موضوع متخصص كبير لن نقوم بتغطيتهبتفصيل كبير في هذا الكتاب ، لكننا 
سنتطرق إلى فهارس البحث في الفصل 3 والجزء الثالث .علينا تركها هناك الآن. في الفصل 
التالي سنناقش بعضالمفاضلات التي تدخل حيز التنفيذ عند تنفيذ نماذج البيانات 
الموضحة في هذاالفصل.مراجع[1] Edgar F Codd: " نموذج علائقي للبيانات لبنوك 
البيانات المشتركة الكبيرة" COM-اتصالات من ACM ، المجلد 13 ، العدد 6 ، الصفحات 
377-387 ، يونيو 1970. دوى:10.1145 / 362384.362685[2 ] مايكل ستونبراكر وجوزيف إم 
هيلرشتاين: " ما يدور حوله يأتيحول ، "في قراءات في أنظمة قواعد البيانات ، الإصدار 
الرابع ، مطبعة معهد ماساتشوستس للتكنولوجيا ، الصفحات من 2 إلى 41 ،2005. ISBN: 
9780262693141[3] Pramod J Sadalage و Martin Fowler: NoSQL التقطير . أديسون ويسلي 
، أغسطس2012. ISBN: 9780321826626[4 ] إريك إيفانز: "NoSQL: ما هو الاسم؟ ، 
”blog.sym-link.com ، 30 أكتوبر 2009.[5 ] جيمس فيليبس: "مفاجآت في استطلاع تبني 
NoSQL، ”blog.couchbase.com ، 8فبراير 2012.[6] مايكل واجنر: SQL / XML: 2006 - 
Evaluierung der Standardkonformität ausge‐wählter Datenbanksysteme . Diplomica 
Verlag ، هامبورغ ، 2010. ISBN:978-3-8366-4609-3[7] " بيانات XML في SQL Server " 
، وثائق SQL Server 2012 ، technet.micro‐soft.com ، 2013.[8 ] "وثائق PostgreSQL 
9.3.1، "التنمية العالمية PostgreSQLمجموعة 2013.[9 ] "دليل MongoDB 2.4 ، 
"MongoDB، Inc. ، 2013.[10] " إعادة التفكير في الوثائق 1.11، "www.rethinkdb.com ، 
2013.[11] “ Apache CouchDB 1.6 Documentation ،” docs.couchdb.org، 2014.ملخص | 63

      الصفحة 86
[12 ] لين تشياو ، وكابيل سورليكر ، وشيرشانكا داس ، وآخرون: "عند تخمير الإسبريسو 
الطازج:منصة خدمة البيانات الموزعة على LinkedIn "، في مؤتمر ACM الدولي 
بتاريخإدارة البيانات (SIGMOD) ، يونيو 2013.[13] ريك لونج ، مارك هارينجتون ، 
روبرت هين ، وجيف نيكولز: IMS Primer .IBM Redbook SG24-5352-00 ، منظمة الدعم 
الفني الدولية لشركة IBM ،يناير 2000.[14] ستيفن دي بارتليت: " آي إم إس آي إم إس - 
الأساطير والحقائق والفرص "Clipper Group Navigator ، TCG2013015LI ، يوليو 
2013.[15] سارة مي: " لماذا لا تستخدم برنامج MongoDB أبدًا، "sarahmei.com ، 11 
تشرين الثاني (نوفمبر )‐بير 2013.[16] JS Knowles و DMR Bell: "نموذج CODASYL ،" في 
قواعد البيانات - الدور والهيكل: دورة متقدمة ، من تحرير PM Stocker و PMD Gray و 
MP Atkin‐ابن ، مطبعة جامعة كامبريدج ، الصفحات 19-56 ، 1984. ISBN: 0521254302[17 
] تشارلز دبليو باتشمان: "المبرمج كمستكشف، " اتصالاتACM ، المجلد 16 ، العدد 11 ، 
الصفحات 653-658 ، تشرين الثاني (نوفمبر) 1973. دوى:10.1145 / 355611.362534[18 ] 
جوزيف إم هيلرشتاين ومايكل ستونبراكر وجيمس هاميلتون: "هندسة عامةمن نظام قاعدة 
البيانات، " أسس واتجاهات قواعد البيانات ، المجلد 1 ، العدد 2 ،الصفحات 141-259 ، 
نوفمبر 2007. دوى: 10.1561 / 1900000002[19] سانديب باريك وكيلي ستيرمان: " تصميم 
مخطط لبيانات السلاسل الزمنية في مونوgoDB "blog.mongodb.org ، 30 أكتوبر 2013.[20] 
مارتن فاولر: " هياكل بيانات المخطط" ، martinfowler.com ، 7 يناير 2013.[21- عمرو 
عوض الله: مخطط على قراءة مقابل مخطط على كتابة، "في Berkeley EECSRAD Lab Retreat 
، سانتا كروز ، كاليفورنيا ، مايو 2009.[22 ] مارتن أودرسكي: "The Trouble With 
Types "، في Strange Loop ، سبتمبر 2013.[23 ] كونراد إروين:MongoDB - اعترافات 
عاشق PostgreSQL،" فيHTML5DevConf ، أكتوبر 2013.[24 ] "وثائق Percona Toolkit: 
pt-online-schema-change، "Percona Irelandالمحدودة ، 2013.[25 ] راني كيدو وتوبياس 
بيلوهلاك وتوبياس شميدت:ميجر هادرون كبيرتور، SoundCloud ، 2013.[26 ] جيمس سي 
كوربيت ، وجيفري دين ، ومايكل إبستين ، وآخرون: "المفك: جوجلقاعدة بيانات موزعة 
عالميًا، في ندوة USENIX العاشرة حول نظام التشغيلالتصميم والتنفيذ (OSDI) ، أكتوبر 
2012.[27] Donald K Burleson: " تقليل الإدخال / الإخراج باستخدام جداول مجموعة 
Oracle، "dba-oracle.com.64 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      الصفحة 87
[28] فاي تشانغ ، وجيفري دين ، وسانجاي غيماوات ، وآخرون: " Bigtable: A 
Distributed Stor‐نظام العمر للبيانات المنظمة، "في ندوة USENIX السابعة حول نظام 
التشغيلالتصميم والتنفيذ (OSDI) ، نوفمبر 2006.[29 ] Bobbie J Cochrane و Kathy A 
McKnight: "قدرات DB2 JSON ، الجزء 1:مقدمة إلى DB2 JSON، IBM developerWorks ، 20 
يونيو 2013.[30 ] هيرب سوتر: "انتهى الغداء المجاني: تحول أساسي نحو كونكور‐rency 
in Software " مجلة دكتور دوب ، المجلد 30 ، العدد 3 ، مارس 2005.[31] جوزيف إم 
هيلرشتاين: "الأمر التصريحي: التجارب والتخميناتفي المنطق الموزع ، "الهندسة 
الكهربائية وعلوم الكمبيوتر ، جامعةكاليفورنيا في بيركلي ، تقرير تقني UCB / 
EECS-2010-90 ، يونيو 2010.[32 ] جيفري دين وسانجاي غيماوات:MapReduce: معالجة 
البيانات المبسطة علىمجموعات كبيرة "، في ندوة USENIX السادسة حول تصميم نظام 
التشغيل وفرضه‐التوجيه (OSDI) ، ديسمبر 2004.[33] كريج كيرستينز: " JavaScript في 
Postgres الخاص بك، "postgres.heroku.com ، 5 يونيو2013.[34] ناثان برونسون ، زاك 
أمسدن ، جورج كابريرا ، وآخرون: " TAO: Facebook's Dis‐تخزين البيانات الجزئية 
للرسم البياني الاجتماعي، "في المؤتمر الفني السنوي USENIX(USENIX ATC) ، يونيو 
2013.[35] " لغة اجتياز الرسم البياني في Gremlin " ، TinkerPop ، 
gremlin.tinkerpop.com ، 2013.[36] " The Neo4j Manual v2.0.0 ،" Neo Technology ، 
2013.[37] إميل إيفريم: مراسلات تويتر، 3 يناير 2014.[38 ] ديفيد بيكيت وتيم بيرنرز 
لي: "السلحفاة - لغة ثلاثية RDF مقتضبة ، "تقديم فريق W3C ، 28 مارس 2011.[39] “ 
Datomic Development Resources ،” Metadata Partners، LLC، 2013.[40] مجموعة عمل 
W3C RDF: " إطار وصف الموارد (RDF) ،"www.w3.org ، 10 فبراير 2004.[41] " أباتشي 
جينا، مؤسسة أباتشي للبرمجيات.[42] ستيف هاريس ، وآندي سيبورن ، وإريك برودهوموكس: 
" SPARQL 1.1 Queryلغة، "توصية W3C ، مارس 2013.[43 ] تود جي جرين ، وشان شان هوانغ 
، وبون تاو لو ، ووينشاو تشو: "سجل البياناتوتكرار معالجة الاستعلام، " أسس 
واتجاهات قواعد البيانات ، المجلد 5 ،العدد 2 ، الصفحات 105–195 ، تشرين الثاني 
(نوفمبر) 2013. دوى: 10.1561 / 1900000017[44 ] ستيفانو سيري ، وجورج جوتلوب ، 
وليتيزيا تانكا: "ما كنت تريده دائماتعرف على Datalog (ولم تجرؤ على السؤال)، " 
معاملات IEEE على المعرفةملخص | 65

      صفحة 88
وهندسة البيانات ، المجلد 1 ، العدد 1 ، الصفحات 146-166 ، مارس 1989. دوى:10.1109 
/ 69.43410[45] ناثان مارز: "Cascalog ،" cascalog.org .[46] دينيس أ بنسون ، وإلين 
كارش-ميزراشي ، وديفيد جيه ليبمان ، وجيمس أوستل ، وديفيد إل ويلر: "GenBank، " 
أبحاث الأحماض النووية ، المجلد 36 ، إصدار قاعدة البيانات ،الصفحات من D25 إلى D30 
، ديسمبر 2007. دوى: 10.1093 / nar / gkm929[47] Fons Rademakers: " ROOT لتحليل 
البيانات الضخمة " في ورشة عمل حول مستقبلإدارة البيانات الضخمة ، لندن ، المملكة 
المتحدة ، يونيو 2013.66 | الفصل 2: ​​نماذج البيانات ولغات الاستعلام

      الصفحة 89
الفصل 3التخزين والاسترجاعWer Ordnung hält، ist nur zu faul zum Suchen.(إذا 
احتفظت بالأشياء مرتبة ، فأنت كسول جدًا بحيث لا يمكنك البحث.)- المثل الألمانيعلى 
المستوى الأساسي ، تحتاج قاعدة البيانات إلى القيام بأمرين: عندما تعطيهابعض 
البيانات ، يجب أن تخزن البيانات - وعندما تطلبها مرة أخرى لاحقًا ، يجب أن 
تعطيتعيد البيانات إليك.ناقشنا في الفصل الثاني نماذج البيانات ولغات الاستعلام ، 
أي التنسيق الذيأنت (مطور التطبيق) تعطي قاعدة البيانات بياناتك ، والآلية من 
خلالوالتي يمكنك أن تطلبها مرة أخرى لاحقًا. في هذا الفصل نناقش نفس الشيء منوجهة 
نظر قاعدة البيانات: كيف يمكننا تخزين البيانات التي نقدمها ، وكيف يمكننا ذلكتجده 
مرة أخرى عندما يطلب منا ذلك.لماذا يجب عليك ، بصفتك مطور تطبيق ، أن تهتم بكيفية 
معالجة قاعدة البيانات للتخزين وملفاتاسترجاع داخليا؟ ربما لن تقوم بتنفيذ التخزين 
الخاص بكالمحرك من الصفر، ولكنك لا تحتاج إلى تحديد مشغل تخزين غير مناسبة للتطبيقك 
، من بين العديد من التطبيقات المتوفرة. من أجل ضبط محرك التخزينلأداء جيد في نوع 
عبء العمل لديك ، يجب أن تكون لديك فكرة تقريبية عن ماهيةمحرك التخزين يقوم به تحت 
غطاء المحرك.على وجه الخصوص ، هناك فرق كبير بين محركات التخزين التي تم تحسينها من 
أجلهاأعباء عمل المعاملات وتلك التي تم تحسينها للتحليلات. سوف ننتهيهذا التمييز 
لاحقًا في الفصل ، في "معالجة المعاملات أم التحليلات؟" علىصفحة 87، وفي "التخزين 
الموجه للعمود" في الصفحة 93 سنناقش مجموعة من وحدات التخزينمحركات مُحسَّنة 
للتحليلات.67

      الصفحة 90
ومع ذلك ، سنبدأ أولاً هذا الفصل بالحديث عن محركات التخزين المستخدمة في 
ملفاتأنواع قواعد البيانات التي ربما تكون على دراية بها: البيانات العلائقية 
التقليدية‐وكذلك معظم قواعد بيانات NoSQL المعروفة. سوف نفحص عائلتين منمحركات 
التخزين: محركات تخزين منظم السجل ، ومحركات تخزين موجهة للصفحاتمثل الأشجار 
ب.هياكل البيانات التي تدعم قاعدة البيانات الخاصة بكضع في اعتبارك أبسط قاعدة 
بيانات في العالم ، يتم تنفيذها كوظائف Bash:#! / بن / باشdb_set () {صدى قاعدة 
بيانات " $ 1 ، $ 2 " >>}db_get () {قاعدة بيانات grep "^ $ 1 ،" | sed -e "s / ^ $ 
1 ، //" | الذيل ن 1}هاتان الوظيفتان تنفذان مخزن القيمة الرئيسية. يمكنك استدعاء 
قيمة مفتاح db_set ،الذي سيتم تخزين مفتاح و قيمة في قاعدة البيانات. يمكن أن يكون 
المفتاح والقيمة (تقريبًا)أي شيء تريده - على سبيل المثال ، يمكن أن تكون القيمة 
مستند JSON. يمكنك بعد ذلكcall db_get key ، والذي يبحث عن أحدث قيمة مرتبطة بهذا 
المعينمفتاح ، وإعادته.ويعمل:$ db_set 123456 '{"الاسم": "لندن"، "معالم الجذب": 
["ساعة بيج بن"، "عين لندن"]}'$ db_set 42 '{"الاسم": "سان فرانسيسكو"، "معالم 
الجذب": ["جسر البوابة الذهبية"]}'$ db_get 42{"الاسم": "سان فرانسيسكو"، "معالم 
الجذب": ["جسر البوابة الذهبية"]}تنسيق التخزين الأساسي بسيط للغاية: ملف نصي يحتوي 
كل سطر على ملفزوج من المفاتيح والقيمة ، مفصول بفاصلة (تقريبًا مثل ملف CSV ، مع 
تجاهل الهروبمسائل). كل استدعاء لـ db_set يُلحق بنهاية الملف ، لذلك إذا قمت 
بتحديث مفتاح سيفمرة أخرى ، لا يتم الكتابة فوق الإصدارات القديمة من القيمة - 
تحتاج إلى إلقاء نظرة علىآخر ظهور لمفتاح في ملف للعثور على أحدث قيمة (ومن هنا 
جاءت قيمة tail -n 1 indb_get ).$ db_set 42 '{"الاسم": "سان فرانسيسكو"، "معالم 
الجذب": ["Exploratorium"]}'$ db_get 42{"الاسم": "سان فرانسيسكو"، "معالم جذب": 
["Exploratorium"]}قاعدة بيانات $ cat123456، {"الاسم": "لندن"، "معالم الجذب": 
["ساعة بيج بن"، "عين لندن"]}68 | الفصل 3: التخزين والاسترجاع

      الصفحة 91
أنا. غالبًا ما يتم استخدام سجل الكلمات للإشارة إلى سجلات التطبيق ، حيث يُخرج 
التطبيق نصًا يصفماذا يحدث. في هذا الكتاب ، يتم استخدام السجل بالمعنى الأكثر 
عمومية: تسلسل إلحاق فقط من السجلات. هو - هيليس بالضرورة أن يكون قابلاً للقراءة 
من قبل الإنسان ، فقد يكون ثنائيًا ومخصصًا لقراءة البرامج الأخرى فقط.42، 
{"الاسم": "سان فرانسيسكو"، "معالم الجذب": ["جسر البوابة الذهبية"]}42، {"الاسم": 
"سان فرانسيسكو"، "معالم الجذب": ["Exploratorium"]}تتمتع وظيفة db_set الخاصة بنا 
بأداء جيد جدًا لشيء مابسيط ، لأن الإلحاق بملف فعال للغاية بشكل عام. العديد من 
قواعد البيانات بيننالي استخدام السجل ، ط ملف بيانات إلحاق الوحيد، يشبه إلى حد 
كبير ما db_set يفعل. بيانات حقيقية‐القواعد لديها المزيد من المشكلات للتعامل معها 
(مثل التحكم في التزامن واستعادة القرصمساحة بحيث لا ينمو السجل إلى الأبد ، 
ويتعامل مع الأخطاء ، والسجلات المكتوبة جزئيًا ،وما إلى ذلك) ولكن المبدأ الأساسي 
هو نفسه. السجلات مفيدة بشكل لا يصدق ، وسنفعلأعود إليهم لاحقًا.من ناحية أخرى ، 
فإن وظيفة db_get الخاصة بنا لها أداء سيئ إذا كان لديك حجم كبيرعدد السجلات في 
قاعدة البيانات الخاصة بك. في كل مرة تريد البحث عن مفتاح ، db_getيجب أن يمسح ملف 
قاعدة البيانات بالكامل من البداية إلى النهاية ، بحثًا عن تكراراتالمفتاح. من 
الناحية الحسابية ، فإن تكلفة البحث هي O ( n ): إذا ضاعفت الرقممن السجلات n في 
قاعدة البيانات الخاصة بك ، يستغرق البحث ضعف الوقت. هذا ليس جيدا.من أجل العثور 
بكفاءة على قيمة مفتاح معين في قاعدة البيانات ، نحتاج إلى ملفبنية بيانات مختلفة: 
فهرس . في هذا الفصل سوف ننظر في مجموعة من الفهرسةالهياكل ونرى كيف تقارن. لكن 
الفكرة العامة من وراءهم هي: الاحتفاظ ببعضالبيانات الوصفية الإضافية على الجانب ، 
والتي تعمل كعلامة إرشادية وتساعدك على تحديد موقعالبيانات التي تريدها. إذا كنت 
ترغب في البحث في نفس البيانات بعدة طرق مختلفة ، فيمكنك ذلكتحتاج إلى عدة فهارس 
مختلفة في أجزاء مختلفة من البيانات.الفهرس هو هيكل إضافي مشتق من البيانات الأولية 
- العديدتسمح لك قواعد البيانات بإضافة الفهارس وإزالتها ، وهذا لا يؤثر على 
المحتوياتمن قاعدة البيانات ، فهي تؤثر فقط على أداء الاستعلامات. الحفاظ على 
إضافيةالهياكل فوقية ، خاصة على عمليات الكتابة. للكتابة ، من الصعب التغلب على 
الأداءمجرد إلحاق ملف ، لأن هذا هو أبسط طريقة كتابة أوبرا ممكنةنشوئها. عادة ما 
يبطئ أي نوع من الفهرس عمليات الكتابة ، لأن الفهرس يجب أن يكون كذلكيتم تحديثها في 
كل مرة يتم فيها كتابة البيانات.هذه مقايضة مهمة في أنظمة التخزين: فهارس مختارة 
جيدًا تسرع القراءةالاستعلامات ، ولكن كل فهرس يبطئ يكتب. لهذا السبب ، فإن قواعد 
البيانات لا تفعل ذلك عادةقم بفهرسة كل شيء افتراضيًا ، ولكنها تتطلب منك - مطور 
التطبيق أو قاعدة البياناتالمسؤول - لاختيار الفهارس يدويًا ، باستخدام معرفتك 
بالتطبيقأنماط الاستعلام النموذجية. يمكنك بعد ذلك اختيار الفهارس التي تعطي 
تطبيقكلأعظم فائدة ، دون تقديم نفقات أكثر من اللازم.هياكل البيانات التي تدعم 
قاعدة البيانات الخاصة بك | 69

      صفحة 92
فهارس التجزئةلنبدأ بفهارس بيانات القيمة الرئيسية. ليس هذا هو النوع الوحيد من 
البيانات الذي يمكنكالفهرس ، لكنه شائع جدًا ، وهو لبنة بناء مفيدة لمزيد من 
التعقيدفهارس.تتشابه مخازن القيمة الرئيسية تمامًا مع نوع القاموس الذي يمكنك 
العثور عليه في معظم الأحيانلغات البرمجة ، والتي يتم تنفيذها عادةً كخريطة تجزئة 
(تجزئةالطاولة). يتم وصف خرائط التجزئة في العديد من الكتب المدرسية المتعلقة 
بالخوارزميات [1 ، 2 ] ، لذلك لن نذهببالتفصيل عن كيفية عملهم هنا. نظرًا لأن لدينا 
بالفعل خرائط تجزئة لـ in-هياكل بيانات الذاكرة ، لماذا لا نستخدمها لفهرسة 
بياناتنا على القرص؟لنفترض أن تخزين البيانات لدينا يتكون فقط من إلحاق ملف ، كما 
في المثالفي الاعلى. إذن ، فإن أبسط إستراتيجية ممكنة للفهرسة هي: الاحتفاظ بتجزئة 
في الذاكرةخريطة حيث يتم تعيين كل مفتاح إلى إزاحة بايت في ملف البيانات - الموقع 
فيالتي يمكن العثور على القيمة. هذا موضح في الشكل 3-1.عندما تقوم بإلحاق زوج جديد 
بقيمة مفتاح بالملف ، فإنك تقوم أيضًا بتحديث خريطة التجزئةلتعكس إزاحة البيانات 
التي كتبتها للتو (هذا يعمل على حد سواء لإدخال مفاتيح جديدةولتحديث المفاتيح 
الموجودة). عندما تريد البحث عن قيمة ، استخدم خريطة التجزئةللعثور على الإزاحة في 
ملف البيانات ، ابحث عن ذلك الموقع ، واقرأ القيمة.1 2 3 4 5 6، {"الاسم": "L 
ondon"، "attractions ": [" B igB en "،" L ondonعين"]} \ n 4 2، {" name ":" S anF 
rancisco ""وجاذبية ": [" G oldenبوابةبريدج "]} \ nخريطة تجزئة في الذاكرةملف منظم 
السجل على القرص(كل مربع بايت واحد)مفتاحإزاحة البايت123456 
042640102030405060708090100110120الشكل 3-1. تخزين سجل من أزواج القيمة الرئيسية 
بتنسيق يشبه CSV ، مفهرسًا بعلامة in-خريطة تجزئة الذاكرة.قد يبدو هذا بسيطًا ، 
لكنه نهج قابل للتطبيق. في الواقع ، هذا في الأساس هو مايعمل Bitcask (محرك التخزين 
الافتراضي في Riak) [3]. تقدم Bitcask الأداء العالييقرأ ويكتب ، مع مراعاة متطلبات 
تناسب جميع المفاتيح في ذاكرة الوصول العشوائي المتاحة ،حيث يتم الاحتفاظ بخريطة 
التجزئة بالكامل في الذاكرة. يمكن أن تستخدم القيم مساحة أكبرمن الذاكرة المتوفرة ، 
حيث يمكن تحميلها من القرص باستخدام قرص واحد فقط. لو70 | الفصل 3: التخزين 
والاسترجاع

      صفحة 93
هذا الجزء من ملف البيانات موجود بالفعل في ذاكرة التخزين المؤقت لنظام الملفات ، 
ولا تتطلب القراءة أي شيءالقرص I / O على الإطلاق.يعتبر محرك التخزين مثل Bitcask 
مناسبًا تمامًا في المواقف التي تكون فيها قيمة كل مفتاحيتم تحديثه بشكل متكرر. على 
سبيل المثال ، قد يكون المفتاح هو عنوان URL لفيديو قطة وملفقد تكون القيمة عدد 
مرات تشغيلها (تزداد كل مرةشخص ما يضرب زر التشغيل). في هذا النوع من عبء العمل ، 
هناك الكثير من الكتابات ، ولكنلا يوجد عدد كبير جدًا من المفاتيح المميزة (بحيث 
يكون من الممكن الاحتفاظ بجميع المفاتيح في الذاكرة) ،على سبيل المثال ، لديك عدد 
كبير من عمليات الكتابة لكل مفتاح.كما هو موضح حتى الآن ، فإننا نلحق ملفًا فقط - 
فكيف نتجنب في النهايةنفاد مساحة القرص؟ الحل الجيد هو تقسيم السجل إلى أجزاء منحجم 
الخصلة ، وأداء الضغط على هذه الأجزاء ، كما هو موضح في الشكل 3-2 .يعني الضغط 
التخلص من المفاتيح المكررة في السجل ، والاحتفاظ فقط بملفأحدث تحديث لكل مفتاح.مو: 
1078خرخرة: 2103الخرخرة: 2104مو: 1079ميو: 1080ميو: 1082ميو: 1081الخرخرة: 
2105الخرخرة: 2106الخرخرة: 2107الخرخرة: 2108تثاؤب: 511تثاؤب: 511عملية الضغطميو: 
1082الخرخرة: 2108مقطع ملف البياناتقطعة مضغوطةالشكل 3-2. ضغط سجل تحديث القيمة 
الرئيسية (حساب عدد مرات كل ملفتم تشغيل فيديو cat) ، مع الاحتفاظ فقط بأحدث قيمة 
لكل مفتاح.علاوة على ذلك ، نظرًا لأن الضغط غالبًا ما يجعل المقاطع أصغر كثيرًا 
(بافتراض أن أيتم الكتابة فوق key عدة مرات في المتوسط ​​داخل مقطع واحد) ، يمكننا 
أيضًا دمجعدة مقاطع معًا في نفس وقت إجراء الضغط ، كما هو موضحفي الشكل 3-3.لا يتم 
تعديل المقاطع مطلقًا بعد كتابتها ، لذا فإن المقطع المدمج هو كذلكمكتوبة في ملف 
جديد. يمكن إجراء الدمج والضغط في الخلفية، وأثناء استمراره ، لا يزال بإمكاننا 
الاستمرار في تقديم طلبات القراءة والكتابةكالمعتاد ، باستخدام ملفات المقطع 
القديم. بعد اكتمال عملية الدمج ، نحنتبديل طلبات القراءة لاستخدام المقطع المدمج 
الجديد بدلاً من الشرائح القديمة -وبعد ذلك يمكن ببساطة حذف ملفات المقطع 
القديم.هياكل البيانات التي تدعم قاعدة البيانات الخاصة بك | 71

      صفحة 94
مو: 1078خرخرة: 2103الخرخرة: 2104مو: 1079ميو: 1080ميو: 1082ميو: 1081الخرخرة: 
2105الخرخرة: 2106الخرخرة: 2107الخرخرة: 2108تثاؤب: 511خرخرة: 2109خرخرة: 2110ميو: 
1083نقطة الصفر: 252ميو: 1084خرخرة: 2114ميو: 1085خرخرة: 2111ميو: 1086خرخرة: 
2112ميو: 1087خرخرة: 2113تثاؤب: 511عملية الدمج والدمجنقطة الصفر: 252ميو: 
1087خرخرة: 2114مقطع ملف البيانات 1مقطع ملف البيانات 2الأجزاء المدمجة 1 و 2الشكل 
3-3. القيام بالضغط ودمج الأجزاء في وقت واحد.يحتوي كل مقطع الآن على جدول التجزئة 
الخاص به في الذاكرة ، ويعين مفاتيح إزاحة الملفات. فيمن أجل العثور على قيمة 
المفتاح ، نتحقق أولاً من خريطة تجزئة الجزء الأحدث ؛إذا كان المفتاح غير موجود ، 
فتحقق من ثاني أحدث قطعة ، إلخ. الدمجتحافظ العملية على عدد المقاطع صغيرًا ، لذلك 
لا تحتاج عمليات البحث إلى التحقق من الكثيرخرائط التجزئة.يتم إدخال الكثير من 
التفاصيل في جعل هذه الفكرة البسيطة تعمل في الممارسة العملية. أن أذكر بإيجازبعض 
القضايا المهمة في التنفيذ الحقيقي:تنسيق الملفCSV ليس هو أفضل تنسيق للسجل. من 
الأسرع والأبسط استخدام تنسيق ثنائيالذي يشفر أولاً طول السلسلة بالبايت ، متبوعًا 
بالسلسلة الأولية(دون حاجة للهروب).حذف السجلاتإذا كنت تريد حذف مفتاح والقيمة 
المرتبطة به ، يجب عليك إلحاق ملفسجل الحذف إلى ملف البيانات (يسمى أحيانًا علامة 
مميزة ). عندما تسجيل Segيتم دمج الإشارات ، يخبر شاهد القبر عملية الدمج لتجاهل أي 
سابقةقيم ous للمفتاح المحذوف.التعافي من الأعطالإذا تمت إعادة تشغيل قاعدة 
البيانات ، فسيتم فقد خرائط التجزئة في الذاكرة. من حيث المبدأ ، أنتيمكن استعادة 
خريطة تجزئة كل مقطع من خلال قراءة ملف المقطع بالكامل منبداية إلى النهاية ، مع 
الإشارة إلى إزاحة أحدث قيمة لكل مفتاح كـتذهب على طول. ومع ذلك ، قد يستغرق ذلك 
وقتًا طويلاً إذا كانت ملفات المقطع كبيرة ،مما يجعل إعادة تشغيل الخادم أمرًا 
مؤلمًا. Bitcask يسرع عملية الاسترداد عن طريق التخزين72 | الفصل 3: التخزين 
والاسترجاع

      صفحة 95
لقطة من خريطة تجزئة كل جزء على القرص ، والتي يمكن تحميلها في ذاكرةory 
أسرع.السجلات المكتوبة جزئيًاقد تتعطل قاعدة البيانات في أي وقت ، بما في ذلك منتصف 
الطريق خلال إلحاق ملفسجل في السجل. تتضمن ملفات Bitcask المجاميع الاختبارية التي 
تسمح بمثل هذه الملفات التالفةالكشف عن أجزاء من السجل وتجاهلها.التحكم 
التزامنينظرًا لإلحاق عمليات الكتابة بالسجل بترتيب تسلسلي صارم ، فإن ذلك يعد 
أمرًا شائعًااختيار التوجيه هو أن يكون لديك موضوع كاتب واحد فقط. مقاطع ملف 
البيانات هيإلحاق فقط وغير قابلة للتغيير ، بحيث يمكن قراءتها في نفس الوقت بواسطة 
mul‐المواضيع tiple.يبدو سجل الإلحاق فقط مضيعة للوهلة الأولى: لماذا لا تقوم 
بتحديث الملف بتنسيقمكان ، واستبدال القيمة القديمة بالقيمة الجديدة؟ لكن تصميم 
الإلحاق فقط يتحولخرج ليكون جيدًا لعدة أسباب:• الإلحاق ودمج المقاطع عبارة عن 
عمليات كتابة متسلسلة ، وهي عامةحرفيا أسرع بكثير من عمليات الكتابة العشوائية. هذا 
الاختلاف في الأداء ينطبق على حد سواءإلى محركات الأقراص الثابتة التقليدية التي 
تعمل بالقرص الدوار ومحركات الأقراص ذات الحالة الصلبة المستندة إلى ذاكرة 
فلاش(محركات أقراص الحالة الصلبة) [4].• التزامن واستعادة التعطل يكون أبسط بكثير 
إذا تم إلحاق ملفات المقطع-فقط أو غير قابل للتغيير. على سبيل المثال ، لا داعي 
للقلق بشأن الحالة التي يكون فيها ملفحدث التعطل أثناء الكتابة فوق إحدى القيم ، 
مما يترك لك ملفًاتقسم جزء من القيمة القديمة وجزء من القيمة الجديدة معًا.• يؤدي 
دمج الأجزاء القديمة إلى تجنب حدوث مشاكل في تجزئة ملفات البياناتالوقت.ومع ذلك ، 
فإن فهرس جدول التجزئة له أيضًا قيود:• يجب أن يتناسب جدول التجزئة مع الذاكرة ، 
لذلك إذا كان لديك عدد كبير جدًا من المفاتيح ،ليس لديك اي حظ. من حيث المبدأ ، 
يمكنك الاحتفاظ بخريطة التجزئة على القرص ، ولكنلسوء الحظ ، من الصعب إنشاء خريطة 
تجزئة على القرص تعمل بشكل جيد. هو - هييتطلب الكثير من عمليات الإدخال / الإخراج 
العشوائية ، ومن المكلف النمو عندما يصبح ممتلئًا ،وتتطلب تصادمات التجزئة منطقًا 
صعبًا [5].• استعلامات النطاق ليست فعالة. على سبيل المثال ، لا يمكنك جلب القيم 
بسهولةلجميع المفاتيح بين kitty00000 و kitty99999 - عليك البحث عن كل منهامفتاح 
بشكل فردي في خرائط التجزئة.في القسم التالي سنلقي نظرة على بنية الفهرسة التي لا 
تحتوي على تلك الحدود.tations.هياكل البيانات التي تدعم قاعدة البيانات الخاصة بك | 
73

      الصفحة 96
ثانيا. إذا كانت جميع المفاتيح والقيم ذات حجم ثابت ، فيمكنك استخدام البحث الثنائي 
في ملف مقطع ، وتجنب ما يلي-مؤشر الذاكرة بالكامل. ومع ذلك ، فهي عادة ما تكون 
متغيرة الطول من الناحية العملية ، مما يجعل من الصعب تحديدهاحيث ينتهي أحد السجلات 
ويبدأ السجل التالي إذا لم يكن لديك فهرس.SSTables و LSM- الأشجارفي الشكل 3-3، كل 
مقطع تخزين منظم بالسجل عبارة عن سلسلة من أزواج القيمة الرئيسية.تظهر هذه الأزواج 
بالترتيب الذي تم كتابتها به ، وتأخذ القيم لاحقًا في السجلالأسبقية على قيم نفس 
المفتاح سابقًا في السجل. بصرف النظر عن ذلك ، الترتيبمن أزواج مفتاح القيمة في 
الملف لا يهم.يمكننا الآن إجراء تغيير بسيط على تنسيق ملفات الأجزاء الخاصة بنا: 
نحن نطلب ذلكيتم فرز تسلسل أزواج القيمة الرئيسية حسب المفتاح . للوهلة الأولى ، 
هذا المطلبيبدو أنه يكسر قدرتنا على استخدام الكتابة المتسلسلة ، لكننا سنصل إلى 
ذلك في لحظة.نسمي هذا التنسيق جدول السلسلة المصنف ، أو SSTable للاختصار. نحن أيضا 
نطلب ذلكيظهر كل مفتاح مرة واحدة فقط داخل كل ملف مقطع مدمج (عملية الدمجيضمن ذلك 
بالفعل). تتمتع SSTables بالعديد من المزايا الكبيرة على مقاطع السجل باستخدام 
ملفاتفهارس التجزئة:1. يعد دمج المقاطع أمرًا بسيطًا وفعالًا ، حتى لو كانت الملفات 
أكبر من ملفالذاكرة المتوفرة. النهج هو مثل ذلك المستخدم في خوارزمية فرز الدمج 
،وهو موضح في الشكل 3-4 : تبدأ في قراءة ملفات الإدخال جنبًا إلى جنب ، انظرفي 
المفتاح الأول في كل ملف ، انسخ أدنى مفتاح (وفقًا لترتيب الفرز) إلىملف الإخراج ، 
وكرر. ينتج عن هذا ملف مقطع مدمج جديد ، يتم فرزه أيضًابالمفتاح.ماذا لو ظهر نفس 
المفتاح في عدة مقاطع إدخال؟ تذكر أن كليحتوي المقطع على جميع القيم المكتوبة في 
قاعدة البيانات خلال فترة ما منالوقت. هذا يعني أن جميع القيم في مقطع إدخال واحد 
يجب أن تكون أحدثمن جميع القيم الموجودة في المقطع الآخر (على افتراض أننا ندمج 
المتجاورة دائمًاشرائح). عندما تحتوي مقاطع متعددة على نفس المفتاح ، يمكننا 
الاحتفاظ بالقيمةمن أحدث شريحة ، وتجاهل القيم الموجودة في المقاطع الأقدم.2. من 
أجل العثور على مفتاح معين في الملف ، لم تعد بحاجة إلى الاحتفاظ بفهرسمن جميع 
المفاتيح الموجودة في الذاكرة. انظر الشكل 3-5 على سبيل المثال: لنفترض أنك تبحث عن 
ملفالمفتاح اليدوي ، لكنك لا تعرف الإزاحة الدقيقة لهذا المفتاح في المقطعملف. ومع 
ذلك، كنت لا تعرف الإزاحات لمفاتيح حقيبة و سيم ، وبسبب الفرز ، فأنت تعلم أن العمل 
اليدوي يجب أن يظهر بين هذين الاثنين.لذا يمكنك القفز إلى الإزاحة لحقيبة اليد 
والمسح الضوئي من هناك حتى تجدهاالعمل اليدوي (أو لا ، إذا كان المفتاح غير موجود 
في الملف).ما زلت بحاجة إلى فهرس في الذاكرة لإخبارك بالإزاحات لبعض المفاتيح ، 
ولكنيمكن أن يكون متناثرًا: يكفي مفتاح واحد لكل كيلو بايت من ملف المقطع ،لأنه 
يمكن فحص بضعة كيلوبايتات بسرعة كبيرة. ثانيا74 | الفصل 3: التخزين والاسترجاع

      الصفحة 97
3. نظرًا لأن طلبات القراءة تحتاج إلى إجراء مسح ضوئي لعدة أزواج من قيمة المفتاح 
في الطلبالنطاق على أي حال ، فمن الممكن تجميع تلك السجلات في كتلة وضغطهاقبل 
كتابته على القرص (المشار إليها بالمنطقة المظللة في الشكل 3-5 ). كل دخولمن فهرس 
الذاكرة المتناثر ثم يشير إلى بداية كتلة مضغوطة.في الوقت الحاضر ، عادةً ما يكون 
عرض النطاق الترددي للقرص هو عنق الزجاجة الأسوأ من وحدة المعالجة المركزية (CPU) ، 
لذا فإن الأمر يستحققضاء بضع دورات إضافية لوحدة المعالجة المركزية لتقليل كمية 
البيانات التي تحتاج إليهاالكتابة والقراءة من القرص.أصفاد: 2729 حفنة: 44662حقيبة 
يد: 8786الإعاقة: 70836العمل اليدوي: 45521 منديل: 20952 مقود: 3869 تسليم: 
5741مطبوع يدويًا: 33632حفنة: 44662 عائق: 70836 العمل اليدوي: 45521 المقاود: 
3869التسليم: 5741 مطبوع باليد: 33632أصفاد: 2729 حفنة: 42307 عائق: 67884 عمل 
يدوي: 16912منديل: 20952 مطبوع يدويًا: 15725حفنة: 40308حقيبة يد: 8786الإعاقة: 
65995 منديل: 16324المقاود: 3869 مطبوع يدويًا: 11150عملية الدمج والدمجسعلى سبيل 
المثالرجالر 1سعلى سبيل المثالرجالر 2سعلى سبيل المثالرجالر 3م1 ، 2 ، 3الشكل 3-4. 
دمج العديد من مقاطع جدول السلاسل المصنفة (SSTable) ، مع الاحتفاظ فقط بملحقأحدث 
قيمة لكل مفتاح.هياكل البيانات التي تدعم قاعدة البيانات الخاصة بك | 75

      صفحة 98
أصفاد: 2729 حفنة: 44662حقيبة يد: 8786الإعاقة: 70836 العمل اليدوي: 45521 منديل: 
20952المقاود: 3869 التسليم: 5741 المطبوع يدويًا: 33632وسيم: 86478 التلويح باليد: 
44005 بخط اليد: 22846اليد: 91541………………ملف المقطع المصنف (SSTable) على القرصمؤشر 
متناثرفي الذاكرةكتلة مضغوطةمفتاحإزاحة البايت......أرجوحة شبكية100491حقيبة 
يد102134جميل المظهر104667يتسكع106812......الشكل 3-5. جدول سلسلة مرتبة (SSTable) 
مع فهرس في الذاكرة.جيد حتى الآن - ولكن كيف يمكنك فرز بياناتك حسب المفتاح في 
المقام الأول؟ لنايمكن أن تحدث عمليات الكتابة الواردة بأي ترتيب.من الممكن الحفاظ 
على بنية مرتبة على القرص (انظر القسم التالي) ، مع الحفاظ عليهافي الذاكرة أسهل 
بكثير. هناك الكثير من هياكل بيانات الشجرة المعروفة التييمكنك استخدام ، مثل 
الأشجار ذات اللون الأحمر والأسود أو أشجار AVL [ 2]. مع هياكل البيانات هذه ، 
أنتيمكن إدخال المفاتيح بأي ترتيب ، وإعادة قراءتها بالترتيب الفرز.يمكننا الآن جعل 
محرك التخزين الخاص بنا يعمل على النحو التالي:• عندما تأتي الكتابة ، قم بإضافتها 
إلى هيكل بيانات شجرة متوازن في الذاكرة ، لـمثال شجرة حمراء-سوداء. وتسمى هذه 
الشجرة في الذاكرة أحيانا memtable .• عندما يصبح جدول الذاكرة أكبر من بعض العتبة 
- عادةً بضعة ميغا‐بايت - اكتبه على القرص كملف SSTable. يمكن القيام بذلك 
بكفاءةلأن الشجرة تحتفظ بالفعل بأزواج المفتاح والقيمة مرتبة حسب المفتاح. 
الجديديصبح ملف SSTable هو أحدث جزء من قاعدة البيانات. عندما يكون ملفSSTable جاهز 
، يمكن إفراغ جدول الذاكرة.• لتقديم طلب قراءة ، حاول أولاً العثور على المفتاح في 
جدول الذاكرة ، ثم فيأحدث جزء على القرص ، ثم في الجزء الأقدم التالي ، إلخ.• من 
وقت لآخر ، قم بتشغيل عملية الدمج والضغط في الخلفية إلىقم بدمج ملفات المقطع 
وتجاهل القيم التي تم استبدالها أو حذفها.هذا المخطط يعمل بشكل جيد جدا. انها تعاني 
فقط من مشكلة واحدة: إذا كانت قاعدة البياناتتعطل ، أحدث الكتابات (الموجودة في 
memtable ولكن لم يتم كتابتها بعدالقرص). لتجنب هذه المشكلة ، يمكننا الاحتفاظ بسجل 
منفصل على القرصالتي يتم إلحاقها فورًا بكل كتابة ، تمامًا كما في القسم السابق. 
هذا السجل76 | الفصل 3: التخزين والاسترجاع

      صفحة 99
ليس بالترتيب الفرز ، لكن هذا لا يهم ، لأن الغرض الوحيد منه هو الاستعادةmemtable 
بعد وقوع حادث. في كل مرة يتم فيها كتابة جدول memtable إلى SSTable ، فإن ملفيمكن 
تجاهل السجل المقابل.الخوارزمية الموصوفة هنا هي أساسًا ما يتم استخدامه في LevelDB 
[6] و RocksDB[7] ، مكتبات محركات تخزين القيمة الرئيسية المصممة ليتم تضمينها في 
أخرىالتطبيقات. من بين أشياء أخرى ، يمكن استخدام LevelDB في Riak ، كبديل لـ 
Bit‐برميل خشبي. تستخدم محركات التخزين المماثلة في Cassandra و HBase [8]، 
كلاهمامستوحاة من ورقة Bigtable من Google [ 9 ] (والتي قدمت مصطلحات SSTableو 
memtable ). في الأصل ، تم وصف بنية الفهرسة هذه بواسطة Patrick O'Neil etآل. تحت 
اسم Log-Structured Merge-Tree ( LSM-Tree ) [ 10] ، بناء على في وقت سابقالعمل على 
أنظمة ملفات منظم السجل [11].يستخدم Lucene ، وهو محرك فهرسة للبحث عن نص كامل 
يستخدمه Elasticsearch و Solr ، ملفطريقة مماثلة لتخزين قاموس المصطلحات الخاصة به 
[12 ، 13]. يعتبر فهرس النص الكامل أكثر من ذلك بكثيرمعقدًا من مؤشر القيمة 
الرئيسية ، ولكن في جوهره توجد فكرة مماثلة: إعطاء كلمة في aاستعلام البحث ، 
والعثور على جميع المستندات (صفحات الويب ، أوصاف المنتج ، وما إلى ذلك) التيأذكر 
الكلمة. يتم تنفيذ هذا بهيكل القيمة الرئيسية حيث يكون المفتاح هوword ( مصطلح ) ، 
والقيمة هي معرفات جميع المستندات التي تحتوي على الكلمة( قائمة المنشورات ). في 
Lucene ، يتم الاحتفاظ بهذا التعيين من قائمة المصطلح إلى قائمة الترحيلاتالملفات 
التي تم فرزها مثل SSTable ، والتي يتم دمجها في الخلفية حسب الحاجة [14 ].كما هو 
الحال دائمًا ، يتم إدخال الكثير من التفاصيل في جعل محرك التخزين يعمل بشكل جيد في 
الممارسة العملية.على سبيل المثال ، يمكن أن تكون خوارزمية LSM-tree بطيئة عند 
البحث عن مفاتيح لا تفعل ذلكموجود في قاعدة البيانات: عليك أن تتحقق من memtable ، 
ثم الأقسام على طول الطريقالعودة إلى الأقدم (ربما تضطر إلى القراءة من القرص لكل 
واحد) قبل أن تتمكن من ذلكتأكد من أن المفتاح غير موجود. من أجل تحسين ذلك ، يحافظ 
LevelDB على وظائف إضافيةمرشحات بلوم tional [15 ]. (مرشح Bloom هو بنية بيانات 
فعالة للذاكرة لـتقريب محتويات المجموعة. يمكنه إخبارك إذا لم يظهر مفتاح في 
ملفقاعدة بيانات ، وبالتالي يحفظ العديد من قراءات القرص غير الضرورية للمفاتيح غير 
الموجودة.)ومع ذلك ، فإن الفكرة الأساسية - الاحتفاظ بسلسلة من SSTables التي يتم 
دمجها في الخلف‐الأرض - بسيطة وفعالة. حتى عندما تكون مجموعة البيانات أكبر بكثير 
من mem‐أوري أنها لا تزال تعمل بشكل جيد. نظرًا لأنه يتم تخزين البيانات بترتيب فرز 
، يمكنك ذلك بكفاءةتنفيذ استعلامات النطاق (مسح جميع المفاتيح فوق بعض الحد الأدنى 
وحتى بعض maximum). ولأن عمليات الكتابة على القرص متسلسلة ، يمكن أن تدعم شجرة 
LSMإنتاجية كتابة عالية بشكل ملحوظ.ب- الأشجارالفهارس المبنية بالسجل التي ناقشناها 
حتى الآن تكتسب القبول ، لكنهاليست أكثر أنواع الفهرس شيوعًا. هيكل الفهرسة الأكثر 
استخدامًا هومختلف تمامًا: شجرة بي .هياكل البيانات التي تدعم قاعدة البيانات 
الخاصة بك | 77

      صفحة 100
تم تقديمه في عام 1970 [ 16] وسميت "منتشرة في كل مكان" بعد أقل من 10 سنوات [ 17] 
، ب الأشجارلقد صمدت أمام اختبار الزمن بشكل جيد للغاية. تظل تطبيق الفهرس 
القياسيفي جميع قواعد البيانات العلائقية تقريبًا ، والعديد من قواعد البيانات غير 
العلائقية تستخدمها أيضًا.مثل SSTables ، تحتفظ B-tree بأزواج القيمة الرئيسية 
مرتبة حسب المفتاح ، مما يسمح بالمفتاح الفعال-عمليات البحث عن القيمة واستعلامات 
النطاق. ولكن هذا هو المكان الذي ينتهي فيه التشابه: B-tree لها امتدادفلسفة تصميم 
مختلفة جدًا.الفهارس المهيكلة بالسجلات التي رأيناها سابقًا تقسم قاعدة البيانات 
إلى أحجام متغيرةالمقاطع ، التي يبلغ حجمها عادةً عدة ميغا بايت أو أكثر ، وتكتب 
دائمًا مقطعًابالتتابع. على النقيض من ذلك ، تقسم الأشجار B قاعدة البيانات إلى كتل 
ذات حجم ثابت أو كتلصفحات ، حجمها تقليديًا 4 كيلوبايت ، وتقرأ أو تكتب صفحة واحدة 
في كل مرة. هذا Correيلف بشكل أقرب إلى الأجهزة الأساسية ، حيث يتم ترتيب الأقراص 
أيضًا فيكتل الحجم.يمكن تحديد كل صفحة باستخدام عنوان أو موقع ، مما يسمح لصفحة 
واحدةتشير إلى آخر - مشابه لمؤشر ، ولكن على القرص بدلاً من الذاكرة. يمكننا ان 
نستخدمهذا لبناء شجرة من الصفحات ، كما هو موضح في الشكل 3-6.100المرجعالمرجع200 
المرجع300 المرجع400 المرجع500 المرجع111المرجعالمرجع135 المرجع152 المرجع169 
المرجع190 المرجع210المرجعالمرجع230 المرجع250 المرجع270 المرجع290 المرجع250 
فال251 فال252 فال253 فال254 فالمفتاح <100مفتاح ≥ 500400 ≤ مفتاح <500300 ≤ مفتاح 
<400100 ≤ مفتاح <200200 ≤ مفتاح <300250 مفتاح <270"ابحث عن user_id = 
251".................................الشكل 3-6. البحث عن مفتاح باستخدام فهرس 
B-tree.تم تعيين صفحة واحدة على أنها جذر شجرة B ؛ متى أردت البحث عن مفتاحفي 
الفهرس ، تبدأ هنا. تحتوي الصفحة ك مفاتيح و ك + 1 يشير إلى الطفلالصفحات (في الشكل 
3-6، k = 5 ، ولكن في الواقع تكون k عادةً بالمئات). كليعتبر الطفل مسؤولاً عن 
مجموعة مستمرة من المفاتيح ، والمفاتيح الموجودة في صفحة الجذر مخصصةحدد مكان تكمن 
الحدود بين تلك النطاقات.في مثال الشكل 3-6، نحن نبحث عن المفتاح 251 ، لذلك نعلم 
أننا بحاجةلاتباع مرجع الصفحة بين الحدود 200 و 300. هذا يأخذنا إلى أ78 | الفصل 3: 
التخزين والاسترجاع

      صفحة 101
ثالثا. يعد إدخال مفتاح جديد في شجرة B أمرًا بديهيًا بشكل معقول ، ولكن حذف مفتاح 
واحد (مع الحفاظ على توازن الشجرة)anced) أكثر انخراطًا إلى حد ما [ 2].صفحة 
متشابهة والتي تقسم نطاق 200-300 إلى نطاقات فرعية.في النهاية وصلنا إلى صفحة تحتوي 
على مفاتيح فردية ( صفحة ورقية ) ، والتيإما أن يحتوي على قيمة كل مفتاح مضمّن ، أو 
يحتوي على مراجع للصفحاتحيث يمكن العثور على كل قيمة.إذا كنت تريد تحديث قيمة مفتاح 
موجود في شجرة B ، فإنك تبحث عن المصراعصفحة تحتوي على هذا المفتاح ، وقم بتغيير 
قيمة تلك الصفحة ، واكتب الصفحة مرة أخرىالقرص (تظل أي مراجع لتلك الصفحة صالحة). 
إذا كنت ترغب في إضافة مفتاح جديد ، فأنتبحاجة إلى العثور على الصفحة التي يشمل 
نطاقها المفتاح الجديد ، وإضافته إلى تلك الصفحة.إذا لم تكن هناك مساحة خالية كافية 
في الصفحة لاستيعاب المفتاح الجديد ، فسيتم تقسيمهاإلى صفحتين نصف كاملتين ، ويتم 
تحديث الصفحة الرئيسية لحساب الاسم الفرعي الجديدرؤية نطاقات رئيسية - انظر الشكل 
3-7 . ثالثاتضمن هذه الخوارزمية أن تظل الشجرة متوازنة : شجرة B مع مفاتيح n 
دائمًايبلغ ارتفاعه O (سجل ن ). حتى لو كانت الشجرة كبيرة جدًا ، فلا داعي لمتابعة 
الكثيرمراجع الصفحة للعثور على الصفحة التي تبحث عنها. (إذا كنت معتادًا على 
Red-الأشجار السوداء أو 2-3 أشجار ، الأشجار B متشابهة جدًا ، باستثناء الواجهة 
المتفرعة الأكبر.تور.)310المرجعالمرجع333 المرجع345 المرجع(مساحة اضافية)333 فال335 
فال337 فال340 فال342 val333 ≤ مفتاح <345.........310المرجعالمرجع333 المرجع337 
المرجع(إضافي)345 المرجع(مساحة اضافية)333 فال334 فال335 فال(مساحة اضافية)337 
فال340 فال342 val333 ≤ مفتاح> 337337 ≤ مفتاح <345.........بعد إضافة مفتاح 
334:الشكل 3-7. زراعة شجرة B بتقسيم الصفحة.هياكل البيانات التي تدعم قاعدة 
البيانات الخاصة بك | 79

      صفحة 102
رابعا. يُعرف هذا التأثير - كتابة واحدة إلى قاعدة البيانات مما أدى إلى عمليات 
كتابة متعددة على القرص - باسم تضخيم الكتابة.fication ، وهو مصدر قلق خاص لمحركات 
أقراص الحالة الثابتة ، والتي يمكنها فقط استبدال الكتل لعدد محدود من المراتقبل أن 
تبلى.التحديث في المكان مقابل التسجيل الإلحاقي فقطعملية الكتابة الأساسية الأساسية 
لشجرة B هي الكتابة فوق صفحة على القرص باستخدامبيانات جديدة. من المفترض أن 
الكتابة الفوقية لا تغير موقع الصفحة ،على سبيل المثال ، تظل جميع الإشارات إلى تلك 
الصفحة كما هي عند الكتابة فوق الصفحة. في هذاتناقض صارخ مع الفهارس المبنية بسجل 
مثل LSM-tree ، التي تلحق فقط بالملفات(وأخيرًا احذف الملفات القديمة) ، لكن لا تقم 
أبدًا بتعديل الملفات في مكانها.يمكنك التفكير في الكتابة فوق صفحة على القرص 
كعملية فعلية للأجهزة. علىالقرص الصلب المغناطيسي ، وهذا يعني تحريك رأس القرص إلى 
المكان الصحيح ، في انتظارالموضع الصحيح على طبق الغزل للالتفاف ، ثم الكتابة 
فوقالقطاع المناسب ببيانات جديدة. على محركات أقراص الحالة الثابتة ، ما يحدث هو 
أكثر توافقًا إلى حد ماكاتيد ، لكنه بطيء بالمثل [ 18].علاوة على ذلك ، تتطلب بعض 
العمليات الكتابة فوق عدة صفحات مختلفة. إلى عن علىعلى سبيل المثال ، إذا قمت 
بتقسيم صفحة لأن أحد الإضافات تسبب في امتلائها بشكل مفرط ، فأنت بحاجة إلى ذلكاكتب 
الصفحتين اللتين تم تقسيمهما ، واكتب أيضًا فوق صفحتهما الرئيسية لتحديث ملفإشارات 
إلى صفحتين فرعيتين. هذه عملية خطيرة ، لأنه إذا كانت البياناتتعطل القاعدة بعد 
كتابة بعض الصفحات فقط ، وينتهي بك الأمر بفهرس تالف(على سبيل المثال ، قد تكون 
هناك صفحة يتيمة ليست تابعة لأي من الوالدين).من أجل جعل قاعدة البيانات مقاومة 
للأعطال ، من الطبيعي أن يتم تنفيذ B-Treeلتشمل بنية بيانات إضافية على القرص: سجل 
الكتابة المسبقة (WAL ، أيضًاالمعروف باسم سجل الإعادة ). هذا ملف إلحاق فقط كل 
تعديل B-treeيجب كتابته قبل أن يتم تطبيقه على صفحات الشجرة نفسها. عندما تكون 
البيانات‐تعود القاعدة مرة أخرى بعد الانهيار ، ويستخدم هذا السجل لاستعادة B-tree 
مرة أخرى إلى con‐حالة ثابتة [5، 19 ].لذلك يجب أن يكتب فهرس B-tree كل جزء من 
البيانات مرتين على الأقل: مرة واحدة في السجل ،ومرة واحدة إلى صفحة الشجرة نفسها 
(وربما مرة أخرى عند تقسيم الصفحات). من جهة أخرىتقوم الفهارس اليدوية المهيكلة 
بسجل أيضًا بإعادة كتابة البيانات عدة مرات بسبب الرجوع المتكرر‐دمج الأرض. iv ليس 
من الواضح ما إذا كانت أشجار B أو أشجار LSM أفضل في هذا الصدد- يعتمد ذلك على حجم 
العمل وضبط محرك التخزين. في النهاية هناكليس بديلاً عن أنظمة قياس الأداء مع عبء 
العمل الخاص بك.هناك تعقيد إضافي لتحديث الصفحات في مكانها وهو ذلك التزامن 
الدقيقمطلوب التحكم إذا كانت سلاسل محادثات متعددة ستصل إلى B-tree في نفس الوقت 
،وإلا فقد يرى الخيط الشجرة في حالة غير متناسقة. يتم ذلك عادة بواسطةحماية هياكل 
بيانات الشجرة بمزالج (أقفال خفيفة الوزن). منظم السجلالمناهج أبسط في هذا الصدد ، 
لأنها تقوم بكل عمليات الدمج في الخلف‐80 | الفصل 3: التخزين والاسترجاع

      صفحة 103
v. يُعرف هذا أحيانًا باسم شجرة B + ، على الرغم من أن التحسين شائع جدًا لدرجة أنه 
لا يتم تمييزه في كثير من الأحيانمن متغيرات B-Tree الأخرى.الأرض دون التدخل في 
الاستعلامات الواردة ، ومبادلة الأجزاء القديمة ذريًالشرائح جديدة من وقت 
لآخر.تحسينات B- شجرةنظرًا لأن أشجار B كانت موجودة منذ فترة طويلة ، فليس من 
المستغرب وجود العديد من التحسيناتتم تطويرها على مر السنين. على سبيل المثال لا 
الحصر:• بدلاً من الكتابة فوق الصفحات والحفاظ على WAL لاستعادة التعطل ، 
البعضتستخدم قواعد البيانات مثل LMDB نظام النسخ عند الكتابة [ 20 ]. الصفحة 
المعدلة مكتوبةعشرة إلى موقع مختلف ، وإصدار جديد من الصفحات الرئيسية في الشجرة هو 
cre‐ated ، مشيرا إلى الموقع الجديد. هذا مفيد أيضًا للتحكم في التزامن ، مثلسنرى 
في "عزل اللقطة والقراءة القابلة للتكرار" في الصفحة 228 .• يمكننا توفير مساحة في 
الصفحات من خلال عدم تخزين المفتاح بالكامل ، ولكن باختصاره.خاصة في الصفحات 
الموجودة على الجزء الداخلي من الشجرة ، تحتاج المفاتيح فقط إلى توفير ما 
يكفيالمعلومات لتكون بمثابة حدود بين النطاقات الرئيسية. تعبئة المزيد من المفاتيح 
في ملفتسمح الصفحة للشجرة بأن يكون لها عامل تفريع أعلى ، وبالتالي مستويات أقل. 
الخامس• بشكل عام ، يمكن وضع الصفحات في أي مكان على القرص ؛ لا يوجد شيء 
مطلوب‐تكون الصفحات ذات نطاقات المفاتيح القريبة قريبة على القرص. إذا كان هناك 
استعلام يحتاج إلى مسحعلى جزء كبير من النطاق الرئيسي بالترتيب الفرز ، يمكن أن 
يكون تخطيط الصفحة بصفحةغير فعال ، لأنه قد يلزم البحث عن قرص لكل صفحة تتم 
قراءتها. كثيرلذلك تحاول تطبيقات B-tree تخطيط الشجرة بحيث تظهر صفحات الورقةبترتيب 
تسلسلي على القرص. ومع ذلك ، من الصعب الحفاظ على هذا الترتيب مثل ملفتنمو الشجرة. 
على النقيض من ذلك ، نظرًا لأن أشجار LSM تعيد كتابة أجزاء كبيرة من التخزين 
بتنسيقمرة واحدة أثناء الدمج ، يسهل عليهم الاحتفاظ بالمفاتيح المتسلسلة في مكان 
قريبالقرص.• تم إضافة مؤشرات إضافية إلى الشجرة ، على سبيل المثال يمكن لكل صفحة 
طرفيةتحتوي على إشارات إلى صفحات الأشقاء إلى اليسار واليمين ، مما يسمح بالمسح 
الضوئيبالترتيب دون الرجوع إلى الصفحات الأصلية.• متغيرات ب شجرة مثل الأشجار 
كسورية [ 21] استعارة بعض الأفكار المنظمة من السجل إلىتقليل طلبات القرص (وليس لها 
علاقة بالفركتلات).مقارنة أشجار B بأشجار LSMتكون تطبيقات B-tree عمومًا أكثر نضجًا 
من تطبيقات LSM-tree ،لكن أشجار LSM واعدة جدًا نظرًا لخصائص أدائها.هياكل البيانات 
التي تدعم قاعدة البيانات الخاصة بك | 81

      صفحة 104
عادةً ما تكون أشجار LSM قادرة على الحفاظ على إنتاجية أعلى بكثير من عمليات 
الكتابة العشوائيةمقارنةً بالأشجار B ، لأنها تحول جميع عمليات الكتابة العشوائية 
إلى عمليات الكتابة المتسلسلةالجهاز الأساسي. هذا يجعلها جذابة للتطبيقات ذات 
الكتابة العاليةالإنتاجية. كقاعدة عامة ، عادةً ما تكون أشجار LSM أسرع للكتابة ، 
في حين أن B-يُعتقد أن الأشجار أسرع في القراءة [ ٢٢]. غالبًا ما تكون المعايير 
الفعلية غير قابلة للتوافقتفاعلي وحساس بتفاصيل عبء العمل [23 ].الجانب السلبي 
للتخزين منظم السجل هو أن عملية الضغط يمكن في بعض الأحيانتتداخل مع أداء عمليات 
القراءة والكتابة المستمرة. على الرغم من التخزينتحاول المحركات إجراء الضغط بشكل 
تدريجي ودون التأثير على التزامنالوصول ، فالأقراص لها موارد محدودة ، لذلك يمكن أن 
يحدث بسهولة أن يحتاج الطلب إلى ذلكانتظر حتى ينتهي القرص من عملية ضغط باهظة 
الثمن. التأثير علىعادةً ما يكون معدل الإنتاجية ومتوسط ​​وقت الاستجابة صغيرًا ، 
ولكن بنسب مئوية أعلى (انظر"وصف الأداء" في الصفحة 11 ) وقت استجابة الاستعلامات 
إلى سجل منظميمكن أن تكون محركات التخزين عالية جدًا في بعض الأحيان ، ويمكن توقع 
أشجار B بشكل أكبر[24].ميزة B-tree هي أن كل مفتاح موجود في مكان واحد بالضبط في 
الفهرس ،في حين أن محرك التخزين المنظم للسجل قد يحتوي على نسخ متعددة من نفس 
المفتاح فيشرائح مختلفة. هذا يجعل أشجار B جذابة في قواعد البيانات التي تريد 
عرضهادلالات المعاملات القوية: في العديد من قواعد البيانات العلائقية ، يكون عزل 
المعاملاتتم تنفيذه باستخدام أقفال على نطاقات المفاتيح ، وفي فهرس شجرة B ، يمكن 
أن تكون هذه الأقفالتعلق مباشرة بالشجرة [5]. سنناقش هذا بالتفصيل في الفصل السابع 
.إن الأشجار B متأصلة جدًا في بنية قواعد البيانات ، وتوفرها باستمرارأداء جيد 
للعديد من أحمال العمل ، لذلك من غير المحتمل أن تختفي في أي وقتهكذا. في مخازن 
البيانات الجديدة ، أصبحت الفهارس المهيكلة بالسجلات شائعة بشكل متزايد.لا توجد 
قاعدة سريعة وسهلة لتحديد نوع محرك التخزين الأفضللحالة الاستخدام الخاصة بك ، لذا 
فإن الأمر يستحق الاختبار تجريبيًا.هياكل الفهرسة الأخرىلقد ناقشنا حتى الآن مؤشرات 
القيمة الرئيسية فقط ، والتي تشبه فهرس المفتاح الأساسي فيالنموذج العلائقي. يحدد 
المفتاح الأساسي بشكل فريد صفًا واحدًا في جدول علائقي ،أو مستند واحد في قاعدة 
بيانات المستند ، أو رأس واحد في قاعدة بيانات الرسم البياني. آخريمكن أن تشير 
السجلات الموجودة في قاعدة البيانات إلى هذا الصف / المستند / الرأس بمفتاحه 
الأساسي (أوID) ، ويتم استخدام الفهرس لحل هذه المراجع.من الشائع أيضًا وجود فهارس 
ثانوية . في قواعد البيانات العلائقية ، يمكنك ذلكقم بإنشاء عدة فهارس ثانوية على 
نفس الجدول ، باستخدام CREATE INDEX com‐mand ، وغالبًا ما تكون حاسمة لأداء الصلات 
بكفاءة. على سبيل المثال ، فيالشكل 2-1 في الفصل 2 من المرجح أن يكون لديك فهرس 
ثانوي علىuser_id ، بحيث يمكنك العثور على جميع الصفوف التي تنتمي إلى نفس المستخدم 
في كل منهامن الجداول.82 | الفصل 3: التخزين والاسترجاع

      الصفحة 105
يمكن بسهولة إنشاء فهرس ثانوي من مؤشر قيمة المفتاح: الاختلاف الرئيسي‐وبالتالي ، 
فإن المفاتيح ليست فريدة ، أي قد يكون هناك العديد من الصفوف (المستندات 
والرؤوس)بنفس المفتاح. يمكن حل هذا بطريقتين: إما عن طريق جعل كل قيمة فيفهرس قائمة 
بمعرفات الصفوف المتطابقة (مثل قائمة النشر في فهرس نص كامل) ، أو حسبجعل كل مفتاح 
فريدًا من خلال إلحاق معرف صف به. في كلتا الحالتين ، كلا الشجرتين بويمكن استخدام 
فهارس منظم السجل كفهارس ثانوية.تخزين القيم داخل الفهرسالمفتاح في الفهرس هو الشيء 
الذي تبحث عنه طلبات البحث ، ولكن يمكن أن تكون القيمة واحدة منشيئين: يمكن أن يكون 
الصف الفعلي (المستند ، الرأس) المعني ، أو يمكن أن يكونإشارة إلى الصف المخزن في 
مكان آخر. في الحالة الأخيرة ، المكان الذي توجد فيه الصفوفيُعرف المخزن باسم ملف 
كومة ، ويقوم بتخزين البيانات بدون ترتيب معين (قد يكونإلحاق فقط ، أو قد يتتبع 
الصفوف المحذوفة من أجل الكتابة فوقهابيانات جديدة لاحقًا). يعتبر أسلوب ملف الكومة 
شائعًا ، لأنه يتجنب تكرار البياناتعند وجود عدة فهارس ثانوية: يشير كل فهرس إلى 
موقع فيملف الكومة ، ويتم الاحتفاظ بالبيانات الفعلية في مكان واحد.عند تحديث قيمة 
بدون تغيير المفتاح ، يمكن أن يكون أسلوب ملف الكومة تمامًافعال: يمكن الكتابة فوق 
السجل في مكانه بشرط ألا تكون القيمة الجديدة كذلكأكبر من القيمة القديمة. يكون 
الوضع أكثر تعقيدًا إذا كانت القيمة الجديدة أكبر ،لأنه ربما يحتاج إلى نقله إلى 
موقع جديد في الكومة حيث يوجد ما يكفيالفراغ. في هذه الحالة ، يجب تحديث كل الفهارس 
للإشارة إلى الكومة الجديدةموقع السجل ، أو تم ترك مؤشر إعادة التوجيه في موقع 
الكومة القديم[5].في بعض الحالات ، تكون القفزة الإضافية من الفهرس إلى ملف الكومة 
كبيرة جدًا لكلعقوبة الشكل للقراءات ، لذلك قد يكون من المستحسن تخزين الصف المفهرس 
مباشرةضمن فهرس. يُعرف هذا باسم فهرس متفاوت المسافات . على سبيل المثال ، في 
MySQL'sمحرك تخزين InnoDB ، المفتاح الأساسي للجدول هو دائمًا فهرس مجمع ، وتشير 
الفهارس الثانوية إلى المفتاح الأساسي (بدلاً من موقع ملف الكومة) [25 ]. فيSQL 
Server ، يمكنك تحديد فهرس مجمع لكل جدول [ 26].حل وسط بين فهرس متفاوت (تخزين جميع 
بيانات الصف داخل الفهرس) ويُعرف الفهرس غير العنقودي (تخزين الإشارات فقط إلى 
البيانات داخل الفهرس)كمؤشر تغطية أو فهرس مع الأعمدة المضمنة ، والذي يخزن بعضًا 
من col للجدولالأعمدة داخل الفهرس [ 27]. يسمح هذا بالإجابة على بعض الاستفسارات 
باستخدام امتدادالفهرس وحده (في هذه الحالة ، يُقال أن الفهرس يغطي الاستعلام) [26 
].كما هو الحال مع أي نوع من نسخ البيانات ، يمكن أن تتسارع الفهارس المجمعة 
والتغطيةيقرأ ، لكنها تتطلب مساحة تخزين إضافية ويمكن أن تضيف عبءًا على عمليات 
الكتابة. قواعد بياناتتحتاج أيضًا إلى بذل جهد إضافي لفرض ضمانات المعاملات ، لأن 
التطبيقيجب ألا ترى الكاتيونات أي تناقضات بسبب الازدواجية.هياكل البيانات التي 
تدعم قاعدة البيانات الخاصة بك | 83

      صفحة 106
فهارس متعددة الأعمدةالفهارس التي تمت مناقشتها حتى الآن تعين فقط مفتاحًا واحدًا 
لقيمة ما. هذا لا يكفي إذانحتاج إلى الاستعلام عن أعمدة متعددة في الجدول (أو عدة 
حقول في مستند)الوقت ذاته.النوع الأكثر شيوعًا من الفهرس متعدد الأعمدة يسمى الفهرس 
المتسلسل ، والذييقوم ببساطة بدمج عدة حقول في مفتاح واحد عن طريق إلحاق عمود واحد 
بآخر (ملفيحدد تعريف الفهرس ترتيب تسلسل الحقول). هذا مثل ملفدفتر هاتف ورقي من 
الطراز القديم ، والذي يوفر فهرسًا من (اسم العائلة ، الأول‐name ) لرقم الهاتف. 
نظرًا لترتيب الفرز ، يمكن استخدام الفهرس للعثور على جميع ملفاتالأشخاص الذين 
لديهم اسم عائلة معين ، أو جميع الأشخاص الذين يحملون اسمًا أخيرًا معينًا-تركيبة 
الاسم الأول. ومع ذلك ، فإن الفهرس عديم الفائدة إذا كنت ترغب في العثور على جميع 
peo‐ple باسم أول معين.الفهارس متعددة الأبعاد هي طريقة أكثر عمومية للاستعلام عن 
عدة أعمدة فيمرة واحدة ، وهو أمر مهم بشكل خاص للبيانات الجغرافية المكانية. على 
سبيل المثال ، مطعم-قد يحتوي موقع البحث على قاعدة بيانات تحتوي على خطوط الطول 
والعرض لكل موقعتورانت. عندما ينظر المستخدم إلى المطاعم على الخريطة ، يحتاج موقع 
الويب إلى ذلكابحث عن جميع المطاعم الموجودة في منطقة الخريطة المستطيلة التي 
يتعامل معها المستخدمعرض باهتمام. يتطلب هذا استعلام نطاق ثنائي الأبعاد مثل ما 
يلي:حدد * من المطاعم حيث خط العرض > 51 . 4946 و العرض < 51 . 5079و العرض > - 0 . 
1162 و العرض <- 0 . 1004 ؛لا يمكن لمؤشر B-tree القياسي أو LSM-tree أن يجيب على 
هذا النوع من الاستعلام بشكل فعال.بصدق: يمكن أن يوفر لك إما جميع المطاعم في نطاق 
من خطوط العرض (ولكن في أي مكان)gitude) ، أو جميع المطاعم الموجودة في نطاق من 
خطوط الطول (ولكن في أي مكان بين الشمالوالقطب الجنوبي) ، ولكن ليس كلاهما في وقت 
واحد.أحد الخيارات هو ترجمة موقع ثنائي الأبعاد إلى رقم واحد باستخداممنحنى يملأ 
الفراغ ، ثم استخدام فهرس B-tree منتظم [28]. الأكثر شيوعًا ، spe‐يتم استخدام 
الفهارس المكانية cialized مثل R- الأشجار. على سبيل المثال ، PostGIS تنفذالفهارس 
الجغرافية المكانية مثل أشجار R باستخدام فهرسة شجرة البحث المعممة الخاصة بـ 
PostgreSQLمنشأة [ 29 ]. ليس لدينا مساحة لوصف أشجار R بالتفصيل هنا ، ولكن هناك 
الكثيرمن الأدب عنها.فكرة مثيرة للاهتمام هي أن الفهارس متعددة الأبعاد ليست فقط 
للمواقع الجغرافيةنشوئها. على سبيل المثال ، على موقع التجارة الإلكترونية يمكنك 
استخدام ثلاثي الأبعادفهرس الأبعاد ( أحمر ، أخضر ، أزرق ) للبحث عن المنتجات في 
نطاق معين منالألوان. أو في قاعدة بيانات ملاحظات الطقس ، يمكن أن يكون لديك 
بعدينفهرس ( التاريخ ، درجة الحرارة ) من أجل البحث بكفاءة عن جميع الملاحظاتخلال 
عام 2013 حيث تراوحت درجة الحرارة بين 25 و 30 درجة مئوية. مع واحد-مؤشر الأبعاد ، 
سيكون عليك إما مسح جميع السجلات من عام 2013(بغض النظر عن درجة الحرارة) ثم قم 
بترشيحها حسب درجة الحرارة أو العكس. 2D84 | الفصل 3: التخزين والاسترجاع

      صفحة 107
يمكن أن يضيق الفهرس من خلال الطابع الزمني ودرجة الحرارة في وقت واحد. هذه 
التقنية‐nique يستخدمه HyperDex [30].فهارس غامضةتفترض جميع الفهارس التي تمت 
مناقشتها حتى الآن أن لديك بيانات دقيقة ، وتسمح لك بذلكالاستعلام عن القيم الدقيقة 
لمفتاح ، أو مجموعة من القيم لمفتاح بترتيب فرز. ماذا او مالا يسمحون لك بالبحث عن 
مفاتيح مشابهة ، مثل الكلمات التي بها أخطاء إملائية. مثليتطلب الاستعلام المبهم 
تقنيات مختلفة.لذكر مثال واحد فقط ، فإن Lucene قادر على البحث عن نص عن كلمات ضمن 
معينتعديل المسافة (تعديل مسافة 1 يعني أنه تمت إضافة حرف واحد أو إزالته 
أواستبدال) [ 31].كما هو مذكور في "أشجار SSTables و LSM" في الصفحة 74 ، يستخدم 
Lucene شكلًا يشبه SSTableهيكل لقاموس المصطلح الخاص به. تتطلب هذه البنية فهرسًا 
صغيرًا في الذاكرةالذي يخبر الاستعلامات في أي إزاحة في الملف الفرز يحتاجون إلى 
البحث عن مفتاح. فيLevelDB ، هذا الفهرس في الذاكرة عبارة عن مجموعة متفرقة من بعض 
المفاتيح ، ولكن بتنسيقLucene ، مؤشر في الذاكرة هو حالة آلية منتهية على الأحرف 
الموجودة فيمفاتيح ، على غرار Trie [32]. يمكن تحويل هذا الإنسان الآلي إلى 
Levenshteinautomaton ، الذي يدعم البحث الفعال عن الكلمات ضمن مسافة تعديل 
معينة[33].تسير تقنيات البحث الغامض الأخرى في اتجاه تصنيف المستندات والتعلم 
الالي. راجع كتاب استرجاع المعلومات لمزيد من التفاصيل [ 34].حفظ كل شيء في 
الذاكرةكانت هياكل البيانات التي تمت مناقشتها حتى الآن في هذا الفصل بمثابة إجابات 
على Limi‐tations من الأقراص. مقارنة بالذاكرة الرئيسية ، تعتبر الأقراص صعبة 
التعامل معها. كلاهماباستخدام الأقراص المغناطيسية ومحركات أقراص الحالة الصلبة ، 
يجب وضع البيانات الموجودة على القرص بعناية إذا كنت تريد ذلكأداء جيد في القراءة 
والكتابة. ومع ذلك ، نحن نتسامح مع هذا الاحراجلأن الأقراص لها ميزتان هامتان: فهي 
متينة (محتوياتهالا تضيع إذا تم إيقاف تشغيل الطاقة) ، ولديهم تكلفة أقل لكل 
جيجابايت منالرامات "الذاكرة العشوائية في الهواتف والحواسيب.عندما تصبح ذاكرة 
الوصول العشوائي أرخص ، تتآكل حجة التكلفة لكل جيجابايت. العديد من مجموعات 
البياناتببساطة ليست بهذه الضخامة ، لذلك من الممكن تمامًا الاحتفاظ بها بالكامل في 
الذاكرة ، ممكنموزعة على عدة أجهزة. وقد أدى ذلك إلى تطوير في-قواعد بيانات الذاكرة 
.بعض مخازن قيمة المفاتيح في الذاكرة ، مثل Memcached ، مخصصة للاستخدام في التخزين 
المؤقتفقط ، حيث يكون من المقبول فقدان البيانات في حالة إعادة تشغيل الجهاز. لكن 
أخرى في-تهدف قواعد بيانات الذاكرة إلى المتانة ، والتي يمكن تحقيقها باستخدام 
أجهزة خاصة(مثل ذاكرة الوصول العشوائي التي تعمل بالبطارية ، والتي لا تزال غير 
معتادة) ، عن طريق كتابة سجل التغييرات علىهياكل البيانات التي تدعم قاعدة البيانات 
الخاصة بك | 85

      صفحة 108
القرص ، عن طريق كتابة لقطات دورية على القرص ، أو عن طريق نسخ الحالة في الذاكرة 
إلىآلات أخرى.عند إعادة تشغيل قاعدة بيانات في الذاكرة ، فإنها تحتاج إلى إعادة 
تحميل حالتها ، إما من القرصأو عبر الشبكة من نسخة متماثلة (ما لم يتم استخدام 
أجهزة خاصة). على الرغم من الكتابةإلى القرص لا يزال يمثل قاعدة بيانات في الذاكرة 
، لأن القرص يُستخدم فقط كملحق-فقط سجل لقوة التحمل ، ويتم تقديم القراءات بالكامل 
من الذاكرة. الكتابة على القرصله أيضًا مزايا تشغيلية: يمكن بسهولة نسخ الملفات 
الموجودة على القرص احتياطيًا وفحصها وتحليلها بواسطة المرافق الخارجية.البائعون 
مثل VoltDB و MemSQL و Oracle TimesTen هم قواعد بيانات في الذاكرةبنموذج علائقي ، 
ويدعون أنه يمكنهم تقديم تحسينات كبيرة في الأداء‐إشارات عن طريق إزالة جميع 
النفقات العامة المرتبطة بإدارة هيكل البيانات على القرص‐توريس [ 35 ، 36]. 
RAMCloud هو مخزن مفتوح المصدر للقيمة الرئيسية في الذاكرة معالمتانة (باستخدام نهج 
منظم للبيانات في الذاكرة وكذلك البياناتعلى القرص) [37]. يوفر Redis و Couchbase 
متانة ضعيفة من خلال الكتابة إلى القرص غير المتزامنبشكل مزمن.بشكل عكسي ، فإن ميزة 
الأداء لقواعد البيانات في الذاكرة ليست بسببحقيقة أنهم لا يحتاجون إلى القراءة من 
القرص. حتى محرك التخزين المستند إلى القرص قد يفعل ذلكلا تحتاج أبدًا إلى القراءة 
من القرص إذا كانت لديك ذاكرة كافية ، لأن نظام التشغيلتستخدم مخابئ tem مؤخرًا كتل 
القرص في الذاكرة على أي حال. بدلا من ذلك ، يمكن أن تكون أسرعلأنها يمكن أن تتجنب 
النفقات العامة لترميز هياكل البيانات في الذاكرة في ملفشكل يمكن كتابته على القرص 
[38].إلى جانب الأداء ، هناك مجال آخر مثير للاهتمام لقواعد البيانات في 
الذاكرةنماذج البيانات التي يصعب تنفيذها باستخدام الفهارس المستندة إلى الأقراص. 
فمثلا،يقدم Redis واجهة تشبه قاعدة البيانات للعديد من هياكل البيانات مثل 
الأولويةطوابير ومجموعات. من خلال الاحتفاظ بجميع البيانات في الذاكرة ، يكون 
تنفيذها نسبيًابسيط.تشير الأبحاث الحديثة إلى أنه يمكن توسيع بنية قاعدة البيانات 
في الذاكرةلدعم مجموعات بيانات أكبر من الذاكرة ، دون إعادة النفقات العامة 
لملفبنية مركزية القرص [39 ]. يعمل ما يسمىبمقاربة مكافحة التخزين المؤقت عن طريق 
الإخلاءالبيانات الأقل استخدامًا من الذاكرة إلى القرص عندما لا توجد ذاكرة كافية 
،وتحميله مرة أخرى في الذاكرة عند الوصول إليه مرة أخرى في المستقبل. هذا مشابه لما 
تفعله أنظمة التشغيل بالذاكرة الافتراضية وملفات المبادلة ، لكن قاعدة البيانات 
تستطيع ذلكإدارة الذاكرة بشكل أكثر كفاءة من نظام التشغيل ، حيث يمكن أن تعمل 
بدقةسجلات فردية بدلاً من صفحات ذاكرة كاملة. هذا النهج لا يزال يتطلبفهارس لتلائم 
الذاكرة تمامًا (مثل مثال Bitcask في بداية ملفالفصل).في الوقت الحالي ، لا تزال 
قواعد البيانات في الذاكرة تقنية جديدة إلى حد ما ، لكنها تستحق ذلكترقبته في 
المستقبل.86 | الفصل 3: التخزين والاسترجاع

      الصفحة 109
السادس. معنى الإنترنت في OLAP غير واضح ؛ ربما يشير إلى حقيقة أن طلبات البحث ليست 
فقط لمرحلة ما قبلبغرامات مالية ، لكن المحللين يستخدمون نظام OLAP بشكل تفاعلي 
للاستفسارات الاستكشافية.معالجة المعاملات أو التحليلات؟في الأيام الأولى لمعالجة 
بيانات الأعمال ، عادة ما تكون الكتابة إلى قاعدة البيانات صحيحةخاضع لمعاملة 
تجارية تتم : إجراء عملية بيع ، تقديم طلبمع مورد ، ودفع راتب الموظف ، وما إلى ذلك 
مع توسع قواعد البيانات في المناطقالتي لا تنطوي على تبادل الأموال ، إلا أن مصطلح 
المعاملة عالق ،بالإشارة إلى مجموعة من القراءات والكتابة التي تشكل وحدة منطقية.لا 
تحتاج الصفقة بالضرورة إلى ACID (atomicity، consis‐)خصائص العزلة والمتانة). 
معالجة المعاملاتيعني فقط السماح للعملاء بإجراء عمليات قراءة وكتابة بزمن انتقال 
منخفض -على عكس مهام المعالجة المجمعة ، والتي لا تعمل إلا بشكل دوري ،على سبيل 
المثال مرة واحدة في اليوم. نناقش حمض في الفصل 7 ومعالجة الدُفعات في الفصل العاشر 
.على الرغم من بدء استخدام قواعد البيانات للعديد من أنواع البيانات المختلفة - 
com‐الإشارات في منشورات المدونة ، أو الإجراءات في اللعبة ، أو جهات الاتصال في 
دفتر العناوين ، وما إلى ذلك -ظل نمط الوصول الأساسي مشابهًا لمعالجة المعاملات 
التجارية. تطبيقتبحث الكاتيون عادة عن عدد صغير من السجلات بواسطة بعض المفاتيح ، 
باستخدام فهرس.يتم إدراج السجلات أو تحديثها بناءً على مدخلات المستخدم. لأن هذه 
التطبيقاتتفاعلية ، أصبح نمط الوصول يُعرف باسم معالجة المعاملات عبر 
الإنترنت(OLTP).ومع ذلك ، بدأ استخدام قواعد البيانات بشكل متزايد لتحليلات 
البيانات ، وهو ما حدث بالفعلأنماط وصول مختلفة جدًا. عادةً ما يحتاج الاستعلام 
التحليلي إلى مسح ملف ضخمعدد السجلات وحساب الإحصائيات الإجمالية (مثل العدد أو 
المجموع أو المتوسط)بدلاً من إعادة البيانات الأولية إلى المستخدم. على سبيل المثال 
، إذا كانت بياناتك عبارة عن جدولمعاملات المبيعات ، فقد تكون الاستفسارات 
التحليلية:• ما هو إجمالي إيرادات كل متجر من متاجرنا في شهر يناير؟• ما هي كمية 
الموز التي قمنا ببيعها أكثر من المعتاد خلال عرضنا الترويجي الأخير؟• العلامة 
التجارية لأغذية الأطفال التي يتم شراؤها غالبًا مع العلامة التجارية X 
dia‐بيرس؟غالبًا ما تتم كتابة هذه الاستعلامات بواسطة محللي الأعمال ، ويتم إدخالها 
في التقارير التي تساعدإدارة الشركة تتخذ قرارات أفضل ( ذكاء الأعمال ). مرتبلتمييز 
هذا النمط من استخدام قواعد البيانات عن معالجة المعاملات ، فلديهتم استدعاء 
المعالجة التحليلية عبر الإنترنت (OLAP) [ 40 ]. vi الفرق بين OLTPمعالجة المعاملات 
أو التحليلات؟ | 87

      الصفحة 110
و OLAP ليس واضحًا دائمًا ، ولكن يتم سرد بعض الخصائص النموذجية فيالجدول 
3-1.الجدول 3-1. مقارنة خصائص معالجة المعاملات مقابل الأنظمة التحليلية.ملكيةأنظمة 
معالجة المعاملات (OLTP)الأنظمة التحليلية (OLAP)نمط القراءة الرئيسيعدد صغير من 
السجلات لكل استعلام ، يتم جلبها بواسطة المفتاحالتجميع على عدد كبير من السجلاتنمط 
الكتابة الرئيسيالوصول العشوائي والكتابة ذات زمن الوصول المنخفض من مدخلات 
المستخدمالاستيراد المجمع (ETL) أو دفق الأحداثتستخدم في المقام الأول من 
قبلالمستخدم النهائي / العميل ، عبر تطبيق الويبمحلل داخلي لدعم القرارما هي 
البيانات التي تمثل أحدث حالة للبيانات (النقطة الحالية في الوقت المناسب)تاريخ 
الأحداث التي حدثت مع مرور الوقتحجم مجموعة البياناتغيغا بايت إلى تيرابايتتيرابايت 
إلى بيتابايتفي البداية ، تم استخدام نفس قواعد البيانات لمعالجة المعاملات 
والتحليلاستفسارات. اتضح أن SQL مرنة للغاية في هذا الصدد: فهي تعمل بشكل جيد مع 
OLTP-استعلامات النوع وكذلك استعلامات من نوع OLAP. ومع ذلك ، في أواخر الثمانينيات 
وأوائل القرن الماضيفي التسعينيات ، كان هناك اتجاه للشركات للتوقف عن استخدام 
أنظمة OLTP للتحليلاتالأغراض ، ولتشغيل التحليلات على قاعدة بيانات منفصلة بدلاً من 
ذلك. هذه البيانات المنفصلة‐القاعدة كانت تسمى مستودع البيانات .تخزين البياناتقد 
يكون لدى المؤسسة العشرات من أنظمة معالجة المعاملات المختلفة ، لـأمثلة على 
الأنظمة التي تدعم موقع الويب الذي يواجه العملاء ، وتتحكم في نقطة البيع(الخروج) 
أنظمة في المخازن المادية ، تتبع المخزون في المستودعات ، التخطيططرق للمركبات ، 
وإدارة الموردين ، وإدارة الموظفين ، إلخ. كل من هؤلاءالأنظمة معقدة وتحتاج إلى 
فريق من الأشخاص لصيانتها ، لذلك ينتهي الأمر بالنظمتعمل في الغالب بشكل مستقل عن 
بعضها البعض.عادةً ما يُتوقع أن تكون أنظمة OLTP هذه متاحة بدرجة عالية وأن تقوم 
بمعالجة التحويلالإجراءات ذات وقت الاستجابة المنخفض ، نظرًا لأنها غالبًا ما تكون 
حاسمة لتشغيل الأعمال.لذلك يقوم مسؤولو قواعد البيانات بحماية قواعد بيانات OLTP 
الخاصة بهم عن كثب. هم عادةمتردد في السماح لمحللي الأعمال بإجراء استعلامات 
تحليلية مخصصة على بيانات OLTP‐الأساسي ، نظرًا لأن طلبات البحث هذه غالبًا ما تكون 
باهظة الثمن ، مما يؤدي إلى مسح أجزاء كبيرة من مجموعة البيانات ،مما قد يضر بأداء 
المعاملات المتزامنة.على النقيض من ذلك ، فإن مستودع البيانات هو قاعدة بيانات 
منفصلة يمكن للمحللين الاستعلام عنهامحتوى القلب ، دون التأثير على عمليات OLTP [41 
]. مخزن البيانات يخدعنسخة للقراءة فقط من البيانات في جميع أنظمة OLTP المختلفة في 
الشركة.يتم استخراج البيانات من قواعد بيانات OLTP (باستخدام إما تفريغ البيانات 
بشكل دوري أوتيار ضئيل من التحديثات) ، تم تحويله إلى مخطط سهل التحليل ، تم 
تنظيفه88 | الفصل 3: التخزين والاسترجاع

      صفحة 111
لأعلى ، ثم تحميلها في مستودع البيانات. عملية الحصول على البيانات في ملفيُعرف 
المستودع باسم Extract-Transform-Load (ETL) ، وهو موضح فيالشكل 3-8 .توجد مستودعات 
البيانات الآن في جميع المؤسسات الكبيرة تقريبًا ، ولكن في الشركات الصغيرةلم يسمع 
بها من قبل. ربما يكون هذا لأن معظم الشركات الصغيرة لا تفعل ذلكلديها العديد من 
أنظمة OLTP المختلفة ، ومعظم الشركات الصغيرة لديهاكمية البيانات - صغيرة بما يكفي 
بحيث يمكن الاستعلام عنها في بيانات SQL التقليدية‐قاعدة ، أو حتى تحليلها في جدول 
بيانات. في شركة كبيرة ، هناك الكثير من الرفع الثقيلمطلوب لفعل شيء بسيط في شركة 
صغيرة.ميزة كبيرة لاستخدام مستودع بيانات منفصل ، بدلاً من الاستعلام عن OLTP 
sys‐tems مباشرة للتحليلات ، هو أنه يمكن تحسين مستودع البيانات للتحليلأنماط 
الوصول. اتضح أن خوارزميات الفهرسة نوقشت في النصف الأول منيعمل هذا الفصل جيدًا مع 
OLTP ، ولكنه لا يجيد الإجابة على الاستفسارات التحليلية.في الجزء المتبقي من هذا 
الفصل ، سنلقي نظرة على محركات التخزين التي تم تحسينها من أجلlytics بدلاً من 
ذلك.عميلشاحنةسائقمخطط طريق السيارةجيوDBموقع التجارة الإلكترونيةمبيعاتDBالتطبيق 
حفظ المخزونجردDBمستودععاملأنظمة OLTPأنظمة OLAPيوsersمستودع 
البياناتتحولتحولتحولاستخراجاستخراجاستخراجحملحملحملعملالمحللاستفسارالشكل 3-8. 
مخطط مبسط لـ ETL في مستودع بيانات.الاختلاف بين قواعد بيانات OLTP ومستودعات 
البياناتنموذج البيانات في مستودع البيانات هو الأكثر شيوعًا علائقية ، لأن SQL 
هيمناسب بشكل عام للاستفسارات التحليلية. هناك العديد من أدوات تحليل البيانات 
الرسوميةمعالجة المعاملات أو التحليلات؟ | 89

      الصفحة 112
التي تنشئ استعلامات SQL ، وتصور النتائج ، وتسمح للمحللين باستكشافالبيانات (من 
خلال عمليات مثل الحفر إلى أسفل و تشريح وتقطيع ).على السطح ، يبدو مستودع البيانات 
وقاعدة بيانات OLTP العلائقية متشابهين ،لأن كلاهما يحتوي على واجهة استعلام SQL. 
ومع ذلك ، فإن الأجزاء الداخلية للأنظمةيمكن أن تبدو مختلفة تمامًا ، لأنها محسّنة 
لأنماط طلب بحث مختلفة جدًا.يركز العديد من بائعي قواعد البيانات الآن على دعم 
معالجة المعاملات أوالتحليلات ، ولكن ليس كلاهما.تدعم بعض قواعد البيانات ، مثل 
Microsoft SQL Server و SAP HANA ، ملفاتمعالجة المعاملات وتخزين البيانات في نفس 
المنتج. ومع ذلك ، همأصبحت بشكل متزايد محركين منفصلين للتخزين والاستعلام ، وهو ما 
يحدثيمكن الوصول إليها من خلال واجهة SQL مشتركة [42 ، 43، 44 ].موردو مستودعات 
البيانات مثل Teradata و Vertica و SAP HANA و ParAccel typi‐تبيع cally أنظمتها 
بموجب تراخيص تجارية باهظة الثمن. Amazon RedShift هو ملفنسخة مستضافة من ParAccel. 
في الآونة الأخيرة ، ظهر عدد كبير من برامج SQL-on- مفتوحة المصدرظهرت مشاريع 
Hadoop. هم شباب ، لكنهم يهدفون إلى التنافس مع comأنظمة مستودعات البيانات 
التجارية. وتشمل هذه Apache Hive و AMPLab's Shark وكلوديرا إمبالا وهورتونوركس 
ستينغر وفيسبوك بريستو وأباتشي تاجو وأباتشيحفر [ 45، 46 ]. بعضها يعتمد على أفكار 
من جوجل دريميل [ 47 ].النجوم والثلج: مخططات للتحليلاتكما تم استكشافه في الفصل 2 
، يتم استخدام مجموعة واسعة من نماذج البيانات المختلفة في المجالمن تجهيز 
المعاملات ، حسب احتياجات التطبيق. من جهة أخرىناحية ، في التحليلات ، هناك تنوع 
أقل بكثير في نماذج البيانات. العديد من مستودعات البياناتتُستخدم بأسلوب معادل إلى 
حد ما ، يُعرف باسم مخطط النجوم (المعروف أيضًا باسم dimen‐النمذجة sional [ 48 
]).يوضح مخطط المثال في الشكل 3-9 مستودع بيانات يمكن العثور عليه فيبائع تجزئة 
للبقالة. يوجد في وسط المخطط ما يسمى بجدول الحقائق (هنا ،حقائق_مبيعات ). يمثل كل 
صف في جدول الحقائق حدثًا وقع عند أحد المشاركين‐الوقت الأصلي (هنا ، يمثل كل صف 
منتجًا اشتراه أحد العملاء). لوكنا نحلل حركة مرور موقع الويب بدلاً من مبيعات 
التجزئة ، فقد يمثل كل صف ملفعرض الصفحة أو نقرة من قبل المستخدم.عادة ، يتم تسجيل 
الحقائق كأحداث فردية ، لأن هذا يسمح بأقصى قدر من المرونةإمكانية التحليل لاحقًا. 
ومع ذلك ، هذا يعني أن جدول الحقائق يمكن أن يصبحكبير للغاية. قد يكون لدى مؤسسة 
كبيرة مثل Apple أو Walmart أو eBay عشرات بيتابايت من سجل المعاملات في مستودع 
البيانات ، ومعظمها عبارة عن جداول فعلية [49 ].بعض الأعمدة في جدول الحقائق هي 
سمات ، مثل السعر الذي عنده ملفتم بيع المنتج وتكلفة شرائه من المورد (مع السماح 
بالربحالهامش المراد حسابه). الأعمدة الأخرى في جدول الحقائق هي مراجع مفاتيح 
خارجية لها90 | الفصل 3: التخزين والاسترجاع

      صفحة 113
جداول أخرى تسمى جداول الأبعاد . نظرًا لأن كل صف في جدول الحقائق يمثل حدثًا ،تمثل 
أبعاد الذين ، ما ، حيث ، عندما ، كيف و ماذا لهذا الحدث.على سبيل المثال في الشكل 
3-9، أحد الأبعاد هو المنتج الذي تم بيعه. كلالصف في جدول dim_product يمثل نوعًا 
واحدًا من المنتجات المعروضة للبيع ، بما في ذلكوحدة حفظ المخزون (SKU) ، الوصف ، 
اسم العلامة التجارية ، الفئة ، محتوى الدهون ، العبوةالحجم ، إلخ. يستخدم كل صف في 
جدول Fact_sales مفتاحًا خارجيًا للإشارة إلى المنتجتم بيع uct في تلك الصفقة 
المعينة. (للتبسيط ، إذا اشترى العميل سبعةمختلف المنتجات في آن واحد ، يتم تمثيلها 
كصفوف منفصلة في الحقيقةالطاولة.)غالبًا ما يتم تمثيل التاريخ والوقت باستخدام 
جداول الأبعاد ، لأن هذا يسمح بذلكمعلومات إضافية حول التواريخ (مثل أيام العطل 
الرسمية) ليتم تشفيرها ، والسماحاستعلامات للتمييز بين المبيعات في أيام العطلات 
وغير أيام العطلات.يأتي اسم مخطط نجمة من حقيقة أنه عندما تكون علاقات الجدوليتصور 
جدول الحقائق في المنتصف ، وتحيط به المفاتيح الخارجية للأبعادطاولات مثل أشعة 
نجم.يُعرف أحد أشكال هذا القالب باسم مخطط ندفة الثلج ، حيث تكون الأبعاد 
الفراء‐هناك مقسمة إلى أبعاد فرعية. على سبيل المثال ، يمكن أن يكون هناك بعد 
منفصلجداول sion للعلامات التجارية وفئات المنتجات ، وكل صف في جدول 
dim_productيمكن الإشارة إلى العلامة التجارية والفئة على أنها مفاتيح خارجية ، 
بدلاً من تخزينها على أنهاالسلاسل في جدول dim_product . مخططات ندفة الثلج أكثر 
تطبيعًا من مخططات النجمةالمخططات ، ولكن في هذه الحالة ، غالبًا ما تُفضل المخططات 
النجمية لأنها أبسطللمحللين للعمل مع [48].معالجة المعاملات أو التحليلات؟ | 91

      صفحة 114
تاريخ_المفتاح140102140102140102140102product_skstore_sk promotion_sk customer_sk 
كمية net_priceسعر 
الخصم316974333538باطل1923باطلباطلباطل19123513142.492.4914.999.994.493.890.990.99جدول 
Fact_salesproduct_skSKUAB1234وصفموزطعام السمككرواسونماركةالفئة323130فريش 
ماكسأكواتيكمخادعفاكهة طازجةمستلزمات الحيوانات الأليفةمخبزموافق 4012KA9511جدول 
dim_productحالة store_skمدينة321WAكاليفورنياكاليفورنياسياتلسان فرانسيسكوبالو 
التوجدول خافتاسمad_typecoupon_typeتخفيضات العام الجديدصفقة حوض السمكحزمة القهوة 
والكعكالبريد المباشرملصقمنشورعلامة داخل المتجر1819Promotion_sk20باطلباطلجدول 
dim_promotiondate_key عام شهر يوم من أيام الأسبوع يوم من أيام الأسبوع 
is_holiday140103140102140101201420142014ينايرينايريناير123الأربعاءخميسالجمعةنعمرقمرقمجدول 
dim_dateاسم customer_skتاريخ 
الولادة192أليسبوبسيسيل1901911979-03-291961-09-021991-12-13جدول dim_customerالشكل 
3-9. مثال على مخطط نجمي للاستخدام في مستودع بيانات.في مستودع البيانات النموذجي ، 
غالبًا ما تكون الجداول واسعة جدًا: غالبًا ما تحتوي جداول الحقائق على أكثر من 
100عدة مئات في بعض الأحيان [ 44 ]. يمكن أن تكون جداول الأبعاد أيضًا واسعة جدًا ، 
مثلأنها تشمل جميع البيانات الوصفية ذات الصلة التي قد تكون ذات صلة بالتحليل - على 
سبيل المثال ،و dim_store قد تتضمن الجدول التفاصيل التي تقدم خدمات في كل مخزن،ما 
إذا كان يحتوي على مخبز داخل المتجر ، بالقدم المربع ، وتاريخ إنشاء المتجر لأول 
مرةتم فتحه ، عندما تم إعادة تشكيله آخر مرة ، كم يبعد عن أقرب طريق سريع ، إلخ.92 
| الفصل 3: التخزين والاسترجاع

      الصفحة 115
تخزين عموديإذا كان لديك تريليونات من الصفوف والبيتابايت من البيانات في جداول 
البيانات الفعلية ، يمكنك تخزين ويصبح الاستعلام عنها بكفاءة مشكلة صعبة. جداول 
الأبعاد معتادةأصغر بكثير (ملايين الصفوف) ، لذلك سنركز في هذا القسم بشكل أساسيعلى 
تخزين الحقائق.على الرغم من أن جداول البيانات الواقعية غالبًا ما يزيد عرضها عن 
100 عمود ، إلا أنه استعلام نموذجي لمستودع البياناتيصل فقط إلى 4 أو 5 منهم في وقت 
واحد ( نادرًا ما تكون هناك حاجة لاستعلامات "SELECT *" لـتحليلات) [ 44]. خذ 
الاستعلام في المثال 3-1: يصل إلى عدد كبير من الصفوف(كل مرة يشتري فيها شخص ما 
الفاكهة أو الحلوى خلال السنة التقويمية 2013) ،ولكنها تحتاج فقط إلى وصول ثلاثة 
أعمدة من fact_sales الجدول: date_key ، همزuct_sk و كمية . يتم تجاهل كافة الأعمدة 
الأخرى بواسطة الاستعلام.مثال 3-1. تحليل ما إذا كان الناس أكثر ميلًا لشراء 
الفاكهة الطازجة أو الحلوى ،حسب يوم الأسبوع.تحديدخافت . أيام الأسبوع ، 
dim_product . فئة ،SUM ( fact_sales . كمية ) AS quantity_soldمن Fact_salesتاريخ 
dim_dateعلى Fact_sales . تاريخ_المفتاح= dim_date . تاريخ_المفتاحالتسجيل 
dim_product ON fact_sales . product_sk = dim_product . product_skأينخافت . السنة 
= 2013 ومنتج خافت . الفئة IN ( "فواكه طازجة" ، "حلوى" )مجموعة منخافت . أيام 
الأسبوع ، dim_product . فئة ؛كيف يمكننا تنفيذ هذا الاستعلام بكفاءة؟في معظم قواعد 
بيانات OLTP ، يتم وضع التخزين بطريقة موجهة للصف : كل ​​القيممن صف واحد في الجدول 
يتم تخزينها بجانب بعضها البعض. قواعد بيانات الوثيقة هي محاكاةLar: عادةً ما يتم 
تخزين المستند بأكمله كتسلسل واحد متجاور من البايت. أنتيمكن رؤية هذا في مثال CSV 
بالشكل 3-1.من أجل معالجة استعلام مثل المثال 3-1 ، قد يكون لديك فهارس 
علىfact_sales.date_key و / أو fact_sales.product_sk ، التي تخبر محرك التخزينمكان 
العثور على جميع المبيعات لتاريخ معين أو لمنتج معين. ولكن بعد ذلك ، ألا يزال محرك 
التخزين الموجه نحو الصفوف بحاجة إلى تحميل كل تلك الصفوف (يتكون كل منها منأكثر من 
100 سمة) من القرص إلى الذاكرة ، وتحليلها ، وتصفية تلك التيلا تستوفي الشروط 
المطلوبة. يمكن أن يستغرق وقتا طويلا.الفكرة وراء التخزين الموجه نحو الأعمدة 
بسيطة: لا تخزن كل القيم من واحدصف معًا ، ولكن قم بتخزين جميع القيم من كل عمود 
معًا بدلاً من ذلك. إذا كان كل كولونيتم تخزين العمود في ملف منفصل ، يحتاج 
الاستعلام فقط إلى قراءة هذه الأعمدة وتحليلهاتخزين عمودي | 93

      صفحة 116
التي يتم استخدامها في هذا الاستعلام ، والتي يمكن أن توفر الكثير من العمل. هذا 
موضح فيالشكل 3-10.تاريخ_المفتاحمحتويات ملف date_key:140102، 140102، 140102، 
140102، 140103، 140103، 140103، 140103محتويات ملف product_sk:69 ، 69 ، 69 ، 74 ، 
31 ، 31 ، 31 ، 31محتويات ملف store_sk:4 ، 5 ، 5 ، 3 ، 2 ، 3 ، 3 ، 8محتويات ملف 
Promotion_sk: NULL ، 19 ، NULL ، 23 ، NULL ، NULL ، 21 ، NULLمحتويات ملف 
customer_sk:NULL ، NULL ، 191 ، 202 ، NULL ، NULL ، 123 ، 233محتويات ملف 
الكمية:1 ، 3 ، 1 ، 5 ، 1 ، 3 ، 1 ، 1محتويات ملف net_price:13.99 ، 14.99 ، 14.99 
، 0.99 ، 2.49 ، 14.99 ، 49.99 ، 0.99محتويات ملف discount_price: 13.99 ، 9.99 ، 
14.99 ، 0.89 ، 2.49 ، 9.99 ، 39.99 ، 
0.99140102140102140102140102product_skstore_sk promotion_sk customer_sk كمية 
net_priceسعر 
الخصم696969744553باطل19باطل23باطلباطل191202131513.9913.9914.999.9914.9914.990.990.89جدول 
Fact_salesتخطيط التخزين 
العمودي:140103140103140103140103313131312338باطلباطل21باطلباطلباطل12323313112.492.4914.999.9949.9939.990.990.99الشكل 
3-10. تخزين البيانات العلائقية حسب العمود بدلاً من الصف.يعتمد تخطيط التخزين 
الموجه إلى العمود على كل عمود يحتوي على الصفوف في ملفنفس الترتيب. وبالتالي ، إذا 
كنت بحاجة إلى إعادة تجميع صف كامل ، فيمكنك أن تأخذ الصف الثالث والعشرينالإدخال 
من كل ملف من ملفات الأعمدة الفردية ، وجمعها معًا لتشكيل ملفالصف 23 من الجدول.من 
الأسهل فهم تخزين العمود في نموذج البيانات العلائقية ،لكنه ينطبق بالتساوي على 
البيانات غير العلائقية. على سبيل المثال ، باركيه[50] هو تنسيق تخزين عمودي لنموذج 
بيانات المستند ،استنادًا إلى Google Dremel [ 47].ضغط العمودإلى جانب تحميل تلك 
الأعمدة المطلوبة للاستعلام من القرص فقط ، يمكننا ذلكزيادة تقليل الطلب على 
إنتاجية القرص عن طريق ضغط البيانات. لحسن الحظ،غالبًا ما يفسح التخزين الموجه نحو 
العمود نفسه جيدًا للضغط.94 | الفصل 3: التخزين والاسترجاع

      صفحة 117
في الشكل 3-10، راجع تسلسل القيم لكل عمود: غالبًا ما تبدو تمامًامتكرر ، وهي علامة 
جيدة للضغط. اعتمادا على البيانات الموجودة في col‐يمكن استخدام تقنيات ضغط مختلفة. 
تقنية واحدة خاصةيعتبر ترميز الصور النقطية فعالاً بشكل كبير في مستودعات البيانات 
، كما هو موضح في الشكل 3-11 .قيم العمود:صورة نقطية لكل قيمة ممكنة:ترميز طول 
التشغيل:product_sk:6969696974 31 31 31 31 29 30 30 31 31 31 68 69 69product_sk = 
29:product_sk = 29: 9 ، 1(9 أصفار ، 1 واحد ، بقية الأصفار)product_sk = 30:10 ، 
2(10 أصفار ، 2 آحاد ، باقي أصفار)product_sk = 31: 5، 4، 3، 3(5 أصفار ، 4 آحاد ، 
3 أصفار ، 3 آحاد ، بقية أصفار)product_sk = 68:15 ، 1(15 صفراً ، 1 واحد ، بقية 
الأصفار)product_sk = 69: 0 ، 4 ، 12 ، 2 (0 أصفار ، 4 آحاد ، 12 أصفار ، 2 
آحاد)product_sk = 74: 4 ، 1(4 أصفار ، 1 واحد ، بقية 
الأصفار)000000000100000000product_sk = 30:000000000011000000product_sk = 
31:000001111000111000product_sk = 68:000000000000000100product_sk = 
69:111100000000000011product_sk = 74:000010000000000000الشكل 3-11. تخزين مضغوط 
ومفهرس بالصور النقطية لعمود واحد.غالبًا ما يكون عدد القيم المميزة في العمود 
صغيرًا مقارنة بعددالصفوف (على سبيل المثال ، قد يكون لدى بائع التجزئة مليارات من 
معاملات البيع ، ولكن فقط 100،000منتجات متميزة). يمكننا الآن أخذ عمود به عدد n من 
القيم المميزة ، وتحويله إلىn صور نقطية منفصلة: صورة نقطية واحدة لكل قيمة مميزة ، 
مع بت واحد لكل صف. اليكون البت 1 إذا كان الصف به تلك القيمة ، و 0 إذا لم يكن 
كذلك.إذا كانت n صغيرة جدًا (على سبيل المثال ، قد يحتوي عمود البلد على ما يقرب من 
200 dis‐قيم صبغة) ، يمكن تخزين تلك الصور النقطية بتة واحدة لكل صف. ولكن إذا كان 
n أكبر ،سيكون هناك الكثير من الأصفار في معظم الصور النقطية (نقول إنها متفرقة ). 
في هذاالحالة ، يمكن أيضًا أن تكون الصور النقطية مشفرة بطول التشغيل ، كما هو موضح 
في الجزء السفلي منالشكل 3-11. هذا يمكن أن يجعل ترميز العمود مضغوطًا بشكل 
ملحوظ.فهارس الصور النقطية مثل هذه مناسبة جدًا لنوع الاستعلامات الموجودةmon في 
مستودع البيانات:تخزين عمودي | 95

      صفحة 118
مكان إدخال product_sk (30 ، 68 ، 69):قم بتحميل الصور النقطية الثلاثة لكل من 
product_sk = 30 و product_sk = 68 و product_sk= 69 ، وحساب OR أحاديًا للصور 
النقطية الثلاث ، والتي يمكن إجراؤها جدًابكفاءة.حيث product_sk = 31 AND store_sk 
= 3:قم بتحميل الصور النقطية لـ product_sk = 31 و store_sk = 3 ، واحسب البت‐حكيم 
و . يعمل هذا لأن الأعمدة تحتوي على الصفوف بنفس الترتيب ،لذا فإن البتة k في 
الصورة النقطية لعمود واحد تتوافق مع نفس الصف مثل البتة kفي الصورة النقطية لعمود 
آخر.هناك أيضًا العديد من أنظمة الضغط الأخرى لأنواع مختلفة من البيانات ، لكننالن 
أخوض في التفاصيل - انظر [51 ] للحصول على لمحة عامة.عرض النطاق الترددي للذاكرة 
وتنفيذ خطوط الأنابيببالنسبة إلى استعلامات مستودع البيانات التي تحتاج إلى مسح 
ملايين الصفوف ، يمثل عنق الزجاجة كبيرًاهو عرض النطاق الترددي لإحضار البيانات من 
القرص إلى الذاكرة. ومع ذلك ، هذا ليس ملفعنق الزجاجة فقط. كما يقلق مطورو قواعد 
البيانات التحليلية من استخدام وحدة المعالجة المركزيةدورات بكفاءة: عرض النطاق 
الترددي من الذاكرة الرئيسية إلى ذاكرة التخزين المؤقت لوحدة المعالجة المركزية ، 
وتجنب ذلكأخطاء الفروع والفقاعات في خط أنابيب معالجة تعليمات وحدة المعالجة 
المركزية ، والاستفادة من تعليمات أحادية التعليمات متعددة البيانات (SIMD) في 
وحدات المعالجة المركزية الحديثة[52، 53].إلى جانب تقليل حجم البيانات التي يجب 
تحميلها من القرص والعمود-تعد مخططات التخزين الموجهة مفيدة أيضًا للاستخدام الفعال 
لدورات وحدة المعالجة المركزية. إلى عن علىعلى سبيل المثال ، يمكن أن يأخذ محرك 
الاستعلام جزءًا من بيانات العمود المضغوط التي تناسبهابشكل مريح في ذاكرة التخزين 
المؤقت لوحدة المعالجة المركزية (CPU) ، وقم بالتكرار من خلالها في حلقة ضيقة. هذا 
هوأسرع بكثير من التعليمات البرمجية التي تتطلب الكثير من استدعاءات الوظائف 
والشروط لكل منهاالسجل الذي تتم معالجته. يسمح ضغط العمود باحتواء المزيد من الصفوف 
من العمودفي نفس المقدار من ذاكرة التخزين المؤقت L1. عوامل التشغيل ، مثل المعامل 
AND و ORالموصوفة أعلاه ، يمكن تصميمها للعمل على مثل هذه القطع من العمود 
المضغوطالبيانات مباشرة. تُعرف هذه التقنية بالمعالجة الموجهة [ 51، 42 ].ترتيب 
الفرز في تخزين العمودفي مخزن الأعمدة ، لا يهم بالضرورة ترتيب تخزين الصفوف.من 
الأسهل تخزينها بالترتيب الذي تم إدخالها به منذ ذلك الحينالصف الجديد يعني فقط 
إلحاق كل ملف من ملفات الأعمدة. ومع ذلك ، يمكننا الاختيارلفرض أمر ، كما فعلنا مع 
SSTables سابقًا ، واستخدامه كفهرسةآلية.لاحظ أنه لن يكون من المنطقي فرز كل عمود 
بشكل مستقل ، لأنه بعد ذلكلم نعد نعرف العناصر الموجودة في الأعمدة التي تنتمي إلى 
نفس الصف. نحن96 | الفصل 3: التخزين والاسترجاع

      صفحة 119
يمكن فقط إعادة بناء صف لأننا نعلم أن العنصر k في عمود واحد ينتميإلى نفس الصف مثل 
العنصر k في عمود آخر.بدلاً من ذلك ، تحتاج البيانات إلى فرز صف كامل في كل مرة ، 
على الرغم من تخزينها بواسطةعمودي. يمكن لمسؤول قاعدة البيانات اختيار الأعمدة التي 
من خلالهايجب فرز الجدول باستخدام معرفتهم بطلبات البحث الشائعة. على سبيل المثال ، 
إذاغالبًا ما تستهدف طلبات البحث نطاقات زمنية ، مثل الشهر الماضي ، فقد يكون من 
المنطقي القيام بذلكdate_key هو مفتاح الفرز الأول. ثم يمكن لمحسن الاستعلام فحص 
الصفوف فقط من ملفالشهر الماضي ، والذي سيكون أسرع بكثير من مسح جميع الصفوف.يمكن 
أن يحدد العمود الثاني ترتيب الفرز لأي صفوف لها نفس الترتيبالقيمة في العمود 
الأول. على سبيل المثال ، إذا كان date_key هو أول مفتاح فرز فيالشكل 3-10 ،قد يكون 
من المنطقي أن يكون product_sk هو مفتاح الفرز الثاني ، بحيث تكون جميع مبيعاتيتم 
تجميع نفس المنتج في نفس اليوم معًا في المخزن. من شأنها أن تساعد الاستفساراتالتي 
تحتاج إلى تجميع أو تصفية المبيعات حسب المنتج ضمن نطاق زمني معين.ميزة أخرى 
للترتيب المصنف هي أنه يمكن أن يساعد في ضغط الأعمدة. لولا يحتوي عمود الفرز 
الأساسي على العديد من القيم المميزة ، ثم بعد الفرز ، سيكون كذلكلها تسلسلات طويلة 
حيث يتم تكرار نفس القيمة عدة مرات متتالية. بسيطيمكن ضغط ترميز طول التشغيل ، كما 
استخدمنا في الصور النقطية في الشكل 3-11هذا العمود وصولاً إلى بضعة كيلوبايت - حتى 
لو كان الجدول يحتوي على بلايين الصفوف.يكون تأثير الضغط هذا هو الأقوى على مفتاح 
الفرز الأول. النوع الثاني والثالثسيكون المفتاح مختلطًا بشكل أكبر ، وبالتالي لا 
يحتوي على مثل هذه المجموعات الطويلة من القيم المتكررة.تظهر الأعمدة الموجودة أسفل 
أولوية الفرز بترتيب عشوائي بشكل أساسي ، لذلكربما لن يضغطوا كذلك. ولكن لا يزال 
فرز الأعمدة القليلة الأولى قائمًاالفوز بشكل عام.عدة أوامر فرز مختلفةتم تقديم 
امتداد ذكي لهذه الفكرة في C-Store ، وتم اعتمادها في com‐مستودع البيانات التجارية 
Vertica [54 ، 55 ]. تستفيد الاستعلامات المختلفة من أنواع مختلفةالطلبات ، فلماذا 
لا تخزن نفس البيانات مرتبة بعدة طرق مختلفة ؟ البيانات تحتاج إلىيمكن نسخها إلى 
أجهزة متعددة على أي حال ، بحيث لا تفقد البيانات إذا كان جهاز واحدفشل. يمكنك 
أيضًا تخزين تلك البيانات الزائدة التي تم فرزها بطرق مختلفة ، لذلكعند معالجة 
استعلام ، يمكنك استخدام الإصدار الأنسب للاستعلام باتالخرشنة طائر مائي.إن وجود 
أوامر فرز متعددة في متجر موجه نحو الأعمدة يشبه إلى حد ما وجود mul‐فهارس ثانوية 
في متجر موجه نحو الصفوف. لكن الاختلاف الكبير هو أن الخلاف-يحافظ المخزن الموجه 
على كل صف في مكان واحد (في ملف كومة أو فهرس متفاوت) ، وتحتوي الفهارس الثانوية 
فقط على مؤشرات للصفوف المتطابقة. في مخزن الأعمدة ،عادة لا توجد أي مؤشرات 
للبيانات في مكان آخر ، فقط أعمدة تحتوي على قيم.تخزين عمودي | 97

      الصفحة 120
الكتابة إلى التخزين الموجه إلى الأعمدةهذه التحسينات منطقية في مستودعات البيانات 
، لأن معظم الحمل يسيطر علىمجموعات من الاستعلامات الكبيرة للقراءة فقط التي يديرها 
المحللون. تخزين عمودي ، كومبريسسيساعد هذا الترتيب والفرز في جعل هذه الاستعلامات 
التي تمت قراءتها أسرع. ومع ذلك ، لديهمالجانب السلبي من جعل الكتابة أكثر 
صعوبة.نهج التحديث في المكان ، مثل استخدام B-tree ، غير ممكن مع ضغط colالأعمدة. 
إذا كنت تريد إدراج صف في منتصف جدول تم فرزه ، فستفعل ذلك أكثرمن المحتمل أن تعيد 
كتابة جميع ملفات الأعمدة. كما يتم تحديد الصفوف من خلال موقعهاداخل العمود ، يجب 
أن يقوم الإدراج بتحديث جميع الأعمدة بشكل متسق.لحسن الحظ ، لقد رأينا بالفعل حلاً 
جيدًا في وقت سابق من هذا الفصل: أشجار LSM.تذهب جميع عمليات الكتابة أولاً إلى 
مخزن في الذاكرة ، حيث تتم إضافتها إلى بنية مرتبة ،وعلى استعداد للكتابة على 
القرص. لا يهم ما إذا كان المخزن في الذاكرةموجه نحو الصف أو العمود المنحى. عندما 
يتراكم عدد كافٍ من الكتابات ، فإنها تكون كذلكدمجها مع ملفات الأعمدة الموجودة على 
القرص ، وكتابتها إلى ملفات جديدة بكميات كبيرة. هذا هو الاسينيtially ما يفعله 
Vertica [ 55].تحتاج الاستعلامات إلى فحص بيانات العمود الموجودة على القرص وعمليات 
الكتابة الأخيرة في memory ، واجمع بين الاثنين. ومع ذلك ، يخفي مُحسِّن الاستعلام 
هذا التمييز منالمستخدم. من وجهة نظر المحلل ، البيانات التي تم تعديلها بإدخالات 
،تنعكس التحديثات أو الحذف على الفور في الاستعلامات اللاحقة.التجميع: مكعبات 
البيانات والآراء المحققةليس كل مستودع بيانات هو بالضرورة مخزن أعمدة: تقليدي موجه 
نحو الصفكما يتم استخدام قواعد البيانات وبعض الأبنية الأخرى. ومع ذلك ، يمكن 
التخزين العمودييكون أسرع بشكل ملحوظ بالنسبة إلى الاستعلامات التحليلية المخصصة ، 
لذلك يكتسب شعبية بسرعة[44، 56].وثمة جانب آخر من مستودعات البيانات التي الجدير 
بالذكر فترة وجيزة تتحققالمجاميع . كما تمت مناقشته أعلاه ، غالبًا ما تتضمن 
استعلامات مستودع البيانات تجميعًاوظيفة، مثل COUNT ، SUM ، AVG ، MIN أو MAX في 
SQL. إذا تم استخدام نفس المجاميعمن خلال العديد من الاستعلامات المختلفة ، يمكن أن 
يكون مضيعة للهدر في معالجة البيانات الأولية كلالوقت. لماذا لا تخزن بعض الأعداد 
أو المجاميع التي تستخدمها الاستعلامات في أغلب الأحيان؟إحدى طرق إنشاء ذاكرة 
التخزين المؤقت هذه هي الرؤية الواقعية . في نموذج البيانات العلائقية ،غالبًا ما 
يتم تعريفه كعرض قياسي (افتراضي): كائن يشبه الجدول ومحتوياتهنتائج بعض الاستعلام. 
الفرق هو أن العرض المتحقق هو نسخة فعليةمن نتائج الاستعلام ، مكتوبة على القرص ، 
في حين أن العرض الافتراضي هو مجرد اختصار للكتابة‐استفسارات جي. عندما تقرأ من 
طريقة عرض افتراضية ، يقوم محرك SQL بتوسيعها إلى ملفعرض الاستعلام الأساسي بشكل 
سريع ، ثم يعالج الاستعلام الموسع.عندما تتغير البيانات الأساسية ، يجب تحديث طريقة 
العرض الفعلية ، لأنإنها نسخة غير طبيعية من البيانات. يمكن لقاعدة البيانات القيام 
بذلك تلقائيًا ، ولكن98 | الفصل 3: التخزين والاسترجاع

      الصفحة 121
مثل هذه التحديثات تجعل الكتابة أكثر تكلفة ، وهذا هو السبب في أن العروض الواقعية 
ليست كذلكغالبًا ما تستخدم في قواعد بيانات OLTP. في مخازن البيانات المليئة 
بالقراءة يمكنهم تحقيق المزيدالمعنى (سواء كانت تحسن أداء القراءة أم لا تعتمد على 
العنصر المستقلحالة vidual).تُعرف الحالة الخاصة الشائعة للعرض المادي باسم مكعب 
البيانات أو مكعب OLAP[57]. إنها شبكة من المجاميع مجمعة حسب أبعاد مختلفة. يوضح 
الشكل 3-12مثال.تاريخ_المفتاحproduct_sk……………………………………المجموع 14967.09 
5910.43الكثير7328.85……6885.3932333435……مجموع140102132.1819.7882.9110.96……73091.28140103196.750.0012.5264.67……54688.10140104178.369.9888.7556.16……95121.09حدد 
المجموع (net_price)من Fact_salesحيث date_key = 140101AND product_sk = 32حدد 
المجموع (net_price)من Fact_salesحيث date_key = 
140101+++140101149.6031.0184.5828.18……40710.53+++++++حدد المجموع (net_price)من 
Fact_salesحيث product_sk = 32الشكل 3-12. بعدين لمكعب البيانات ، تجميع البيانات 
عن طريق الجمع.تخيل الآن أن لكل حقيقة مفاتيح خارجية لجدولي أبعاد فقط - فيالشكل 
3-12 ، وهذه هي التاريخ و المنتج . يمكنك الآن رسم جدول ثنائي الأبعاد ،مع التواريخ 
على طول أحد المحاور والمنتجات على طول المحور الآخر. كل خلية تحتوي على 
aggre‐بوابة (على سبيل المثال SUM ) لسمة (مثل net_price ) لجميع الحقائق مع تاريخ 
المنتج com‐بنين. ثم يمكنك تطبيق نفس التجميع على طول كل صف أو عمود ، والحصول 
علىملخص تم تقليله بمقدار بعد واحد (بغض النظر عن المبيعات حسب المنتجمن التاريخ ، 
أو المبيعات حسب التاريخ بغض النظر عن المنتج).بشكل عام ، غالبًا ما يكون للحقائق 
أكثر من بعدين. في الشكل 3-9 يوجد خمسةالأبعاد: التاريخ والمنتج والمتجر والترويج 
والعميل. من الصعب جدًا تخيلهافي الشكل الذي سيبدو عليه المكعب الخماسي الأبعاد ، 
لكن يظل المبدأ هونفس: تحتوي كل خلية على مبيعات ترويج متجر تاريخ - منتج - 
معين-مجموعة العملاء. يمكن بعد ذلك تلخيص هذه القيم بشكل متكرر على طول كل منهامن 
الأبعاد.تتمثل ميزة مكعب البيانات المحقق في أن بعض الاستعلامات تصبح سريعة جدًا 
،لأنه تم حسابها مسبقًا بشكل فعال. على سبيل المثال ، إذا كنت تريد أن تعرفتخزين 
عمودي | 99

      الصفحة 122
إجمالي المبيعات لكل متجر أمس ، ما عليك سوى إلقاء نظرة على الإجماليات على 
طولالبعد priate - لا حاجة لمسح ملايين الصفوف.العيب هو أنه لا يتمتع بنفس المرونة 
مثل الاستعلام عن البيانات الأولية.على سبيل المثال ، لا توجد طريقة لحساب نسبة 
المبيعات التي تأتي منهاالعناصر التي تزيد تكلفتها عن 100 دولار ، لأن السعر ليس 
أحد الأبعاد. عظملذلك تحاول مستودعات البيانات الاحتفاظ بأكبر قدر ممكن من البيانات 
الخام ، واستخدام aggre‐بوابات مثل مكعبات البيانات فقط لتعزيز الأداء لطلبات بحث 
معينة.ملخصفي هذا الفصل ، حاولنا الوصول إلى الجزء السفلي من أسئلة تخزين البيانات 
واسترجاع. ماذا يحدث عند تخزين بعض البيانات في قاعدة بيانات ، وماذا يفعل ملفقاعدة 
البيانات تفعل عند الاستعلام عن البيانات مرة أخرى في وقت لاحق؟على مستوى عالٍ ، 
رأينا أن محركات التخزين تنقسم إلى فئتين رئيسيتين:تم تصميمه لمعالجة المعاملات 
(OLTP) ، وتلك المحسّنة للتحليلات. هناكهي اختلافات كبيرة بين أنماط الوصول في 
حالات الاستخدام تلك:• عادة ما تكون أنظمة OLTP مواجهة للمستخدم ، مما يعني أنهم قد 
يرون حجمًا ضخمًاحجم الطلبات. من أجل التعامل مع الحمل ، عادةً ما تلمس التطبيقات 
ملفعدد صغير من السجلات في كل استعلام. يطلب التطبيق استخدام السجلاتنوع من 
المفاتيح ، ويستخدم محرك التخزين فهرسًا للعثور على البيانات الخاصة بـالمفتاح 
المطلوب. غالبًا ما يكون وقت البحث عن القرص هو عنق الزجاجة هنا.• مستودعات 
البيانات والأنظمة التحليلية المماثلة أقل شهرة ، لأنهايتم استخدامها بشكل أساسي من 
قبل محللي الأعمال ، وليس من قبل المستخدمين النهائيين. يتعاملون مع الكثيرحجم 
استعلامات أقل من أنظمة OLTP ، ولكن كل استعلام عادةً ما يكون مرتفعًا جدًاتتطلب 
الكثير من ملايين السجلات ليتم مسحها ضوئيًا في وقت قصير.غالبًا ما يكون عرض النطاق 
الترددي للقرص (لا يبحث عن الوقت) هو عنق الزجاجة هنا والعمود-التخزين الموجه هو حل 
شائع بشكل متزايد لهذا النوع من عبء العمل.على جانب OLTP ، رأينا محركات تخزين من 
مدرستين رئيسيتين للفكر:• المدرسة المنظمة من السجل ، والتي تسمح فقط بإلحاق 
الملفات وحذفهاقديمة ، ولكن لا يتم تحديث الملف الذي تمت كتابته. Bitcask ، 
SSTables ،تنتمي LSM-Trees و LevelDB و Cassandra و HBase و Lucene وغيرها إلى هذه 
المجموعة.• مدرسة التحديث في المكان ، التي تتعامل مع القرص كصفحات ذات حجم ثابت 
يمكنها ذلكيمكن الكتابة فوقها. تعتبر أشجار B هي أكبر مثال على هذه الفلسفة ، حيث 
يتم استخدامها فيجميع قواعد البيانات العلائقية الرئيسية وكذلك العديد من القواعد 
غير العلائقية.تعد محركات التخزين ذات التنظيم اللوغاريتمي تطورًا حديثًا نسبيًا. 
مفتاحهمالفكرة هي أنهم يحولون بشكل منهجي عمليات الكتابة ذات الوصول العشوائي إلى 
عمليات الكتابة المتسلسلةالقرص ، والذي يتيح سرعة كتابة أعلى بسبب خصائص الأداءمن 
محركات الأقراص الصلبة ومحركات أقراص الحالة الصلبة.100 | الفصل 3: التخزين 
والاسترجاع

      الصفحة 123
بعد الانتهاء من جانب OLTP ، قمنا بجولة قصيرة من خلال بعض الأشياء الأكثر 
تعقيدًاهياكل الفهرسة وقواعد البيانات التي تم تحسينها لحفظ جميع البيانات في 
الذاكرة.ثم أخذنا منعطفًا من الأجزاء الداخلية لمحركات التخزين ، لننظر إلى المستوى 
العاليهندسة مستودع بيانات نموذجي. هذه الخلفية توضح السبب التحليليتختلف أحمال 
العمل كثيرًا عن OLTP: عندما تتطلب استعلاماتك مسحًا متسلسلًا‐عبر عدد كبير من 
الصفوف ، تكون الفهارس أقل صلة. بدلا من ذلكيصبح مهمًا لترميز البيانات بشكل مضغوط 
للغاية ، لتقليل كمية البياناتأن الاستعلام يحتاج إلى القراءة من القرص. ناقشنا 
كيفية التخزين الموجه للعموديساعد في تحقيق هذا الهدف.بصفتك مطور تطبيق ، إذا كنت 
مسلحًا بهذه المعرفة حول العناصر الداخليةمن محركات التخزين ، فأنت في وضع أفضل 
بكثير لمعرفة الأداة الأنسبلتطبيقك الخاص. إذا كنت بحاجة إلى ضبط معلمات ضبط قاعدة 
البيانات ،هذا الفهم يسمح لك بتخيل التأثير الذي يمكن أن يكون لقيمة أعلى أو 
أقللديك.على الرغم من أن هذا الفصل لا يمكن أن يجعلك خبيرًا في ضبط أي متجر 
معين‐محرك العمر ، آمل أن يكون قد زودك بمفردات وأفكار كافية لكيمكن أن يكون له 
معنى لوثائق قاعدة البيانات التي تختارها.مراجع[1] ألفريد في أهو ، وجون إي 
هوبكروفت ، وجيفري دي أولمان: هياكل البيانات و Algo‐إيقاعات . أديسون ويسلي ، 
1983. ISBN: 0-201-00023-7[2] توماس إتش كورمن ، تشارلز إي ليسرسون ، رونالد إل 
ريفيست ، وكليفورد شتاين:مقدمة في الخوارزميات ، الطبعة الثالثة. مطبعة معهد 
ماساتشوستس للتكنولوجيا ، 2009. ISBN: 978-0-262-53305-8[3 ] جاستن شيهي وديفيد 
سميث: "Bitcask: جدول تجزئة منظم لسجل السرعةبيانات المفتاح / القيمة، "Basho 
Technologies ، أبريل 2010.[4 ] ينان لي ، بينغشنغ هي ، روبن جون يانغ ، كيونغ لو ، 
وكي يي: "فهرسة الشجرةعلى محركات الأقراص ذات الحالة الصلبة، " Proceedings of the 
VLDB Endowment ، المجلد 3 ، العدد 1 ،الصفحات 1195-1206 ، سبتمبر 2010.[5 ] جويتز 
جريف: "تقنيات B-Tree الحديثة، " أسس واتجاهات البيانات‐القواعد ، المجلد 3 ، العدد 
4 ، الصفحات 203-402 ، أغسطس 2011. دوى: 10.1561 / 1900000028[6 ] جيفري دين 
وسانجاي غيماوات: "ملاحظات تنفيذ LevelDB، ليفوeldb.googlecode.com.[7 ] دروبا 
بورثاكور:تاريخ RocksDB، "hivedata.com ، 26 تشرين الثاني (نوفمبر) 2013.[8 ] ماتيو 
بيرتوزي:Apache HBase I / O - HFile "blog.cloudera.com ، 29 حزيران (يونيو) 
2012.ملخص | 101

      صفحة 124
[9] فاي تشانغ ، وجيفري دين ، وسانجاي غيماوات ، وآخرون: " Bigtable: A Distributed 
Stor‐نظام العمر للبيانات المنظمة، "في ندوة USENIX السابعة حول نظام 
التشغيلالتصميم والتنفيذ (OSDI) ، نوفمبر 2006.[10] باتريك أونيل ، وإدوارد تشينغ ، 
وديتر جاوليك ، وإليزابيث أونيل: " The Log-شجرة الدمج المهيكلة (LSM-Tree) ، " 
Acta Informatica ، المجلد 33 ، العدد 4 ، الصفحات351–385 ، يونيو 1996. دوى: 
10.1007 / s002360050048[11 ] مندل روزنبلوم وجون كيه أوسترهوت: "التصميم 
والتنفيذمن نظام ملفات سجل منظم، " معاملات ACM على أنظمة الكمبيوتر ، المجلد10 ، 
العدد 1 ، الصفحات 26-52 ، شباط 1992. دوى: 10.1145 / 146941.146943[12 ] أدريان 
جراند: "ماذا يوجد في فهرس لوسين؟، في Lucene / Solr Revolution ، Novem‐بير 
2013.[13 ] ديباك كانديبت: "القرصنة لوسين - تنسيق الفهرس ، "hackerlabs.org ، 
1أكتوبر 2011.[14 ] مايكل ماكاندليس: "يتم دمج تصور مقطع لوسين، 
"blog.mikemc‐candless.com11 فبراير 2011.[15] بيرتون إتش بلوم: " مقايضات المكان / 
الوقت في ترميز التجزئة مع المسموح بهأخطاء ، اتصالات من ACM ، المجلد 13 ، العدد 7 
، الصفحات 422-426 ، يوليو1970. دوى: 10.1145 / 362686.362692[16] رودولف باير 
وإدوارد إم ماكرايت: “ تنظيم وصيانةمؤشرات مرتبة كبيرة، "مختبرات بوينغ للبحوث 
العلمية ، الرياضيات ومعمل علوم المعلومات ، تقرير رقم. 20 يوليو 1970.[17 ] دوغلاس 
كومر: "شجرة B في كل مكان ، " ACM Computing Surveys ، المجلد 11 ،العدد 2 ، 
الصفحات 121-137 ، يونيو 1979. دوى: 10.1145 / 356770.356776[18 ] إيمانويل 
جوسايرت: "Coding for SSDs ، "codecapsule.com ، 12 فبراير 2014.[19] سي موهان 
وفرانك ليفين: " الحمل / المراسلة الفورية: تزامن فعال وعاليطريقة إدارة الفهرس 
باستخدام التسجيل المسبق ، "في ACM International Con‐مرجع حول إدارة البيانات 
(SIGMOD) ، الصفحات 371-380 ، يونيو 1992. دوى:10.1145 / 130283.130338[20 ] هوارد 
تشو: "LDAP في Lightning Speed ، "في BuildStuffLT ، فيلنيوس ، ليتوانيا ،تشرين 
الثاني (نوفمبر) 2014.[21] برادلي سي كوزماول: " مقارنة بين الأشجار الكسورية 
والاندماج اللوغاريتمي المنظم(LSM) Trees "، tokutek.com ، 22 أبريل 2014.[22 ] 
مانوس أثناسوليس ، مايكل إس كيستر ، لوكاس إم ماس وآخرون: "الوصول إلى 
التصميمالأساليب: تخمين RUM "، في المؤتمر الدولي التاسع عشر حول التمديدتكنولوجيا 
قواعد البيانات (EDBT) ، مارس 2016. doi: 10.5441 / 002 / edbt.2016.42[23 ] كيفين 
تسينج: "معايير LevelDB، "leveldb.googlecode.com ، تموز (يوليو) 2011.102 | الفصل 
3: التخزين والاسترجاع

      الصفحة 125
[24 ] ميتشي موتسوزاكي: "MySQL مقابل LevelDB، "github.com ، آب (أغسطس) 2011.[25] 
دليل MySQL 5.7 المرجعي. أوراكل ، 2014.[26] كتب عبر الإنترنت لـ SQL Server 2012. 
مايكروسوفت ، 2012.[27 ] جو ويب: "استخدام فهارس التغطية لتحسين أداء الاستعلام ، 
"بسيط-talk.com ، 29 سبتمبر 2008.[28] فرانك رامساك وفولكر ماركل وروبرت فينك 
وآخرون: " دمج شجرة UB فيa Database System Kernel ، "في المؤتمر الدولي السادس 
والعشرين حول البيانات الكبيرة جدًاالقواعد (VLDB) ، سبتمبر 2000.[29 ] مجموعة 
PostGIS Development: "دليل PostGIS 2.1.2dev ، "postgis.net ، 2014.[30] روبرت 
إسكريفا ، برنارد وونغ ، وأمين غون سيرر: " HyperDex: A Distributed ،متجر القيمة 
الرئيسية القابل للبحث، "في مؤتمر ACM SIGCOMM ، أغسطس 2012. doi:10.1145 / 
2377677.2377681[31 ] مايكل ماكاندليس: "FuzzyQuery من Lucene أسرع 100 مرة في 4.0 
، "blog.mikemccandless.com ، 24 مارس 2011.[32 ] Steffen Heinz و Justin Zobel و 
Hugh E Williams: "محاولات الاندفاع: سريعة وفعالةبنية البيانات لمفاتيح السلسلة ، 
" معاملات ACM على أنظمة المعلومات ، المجلد20 ، العدد 2 ، الصفحات 192-223 ، أبريل 
2002. دوى: 10.1145 / 506309.506312[33كلاوس يو شولز وستويان ميهوف: " التصحيح 
السريع للأوتار باستخدام Levenshteinآلي، " المجلة الدولية لتحليل المستندات 
والاعتراف بها ، المجلد 5 ،العدد 1 ، الصفحات 67-85 ، تشرين الثاني (نوفمبر) 2002. 
دوى: 10.1007 / s10032-002-0082-8[34] كريستوفر دي مانينغ ، برابهاكار راغافان ، 
وهينريش شوتز: تقديمنشوئها لاسترجاع المعلومات. مطبعة جامعة كامبريدج ، 2008. ISBN: 
0521865719[35] مايكل ستونبراكر ، صموئيل مادن ، دانيال جيه آبادي ، وآخرون: “ The 
End of anالعصر المعماري (حان الوقت لإعادة كتابة كاملة)، في المؤتمر الدولي الثالث 
والثلاثينبعد ذلك على قواعد البيانات الكبيرة جدًا (VLDB) ، الصفحات 1150-1160 ، 
سبتمبر 2007.[36] " ورقة بيضاء حول نظرة عامة تقنية حول VoltDB ،" VoltDB ، 
2014.[37 ] ستيفن إم رامبل وأنكيتا كيجريوال وجون كيه أوسترهوت: "منظم السجلذاكرة 
للتخزين المستند إلى DRAM، "في مؤتمر USENIX الثاني عشر حول الملفات 
والتخزينTechnologies (FAST) ، فبراير 2014.[38] ستافروس هاريزوبولوس ، ودانييل جيه 
أبادي ، وصمويل مادن ، ومايكل ستونبراكر: " OLTP من خلال النظرة الزجاجية ، وما 
وجدناه هناك، "في ACMالمؤتمر الدولي حول إدارة البيانات (SIGMOD) ، يونيو 2008. 
doi:10.1145 / 1376616.1376713[39] جاستن ديبرابانت وأندرو بافلو وستيفن تو ومايكل 
ستونبراكر وستانZdonik: " مكافحة التخزين المؤقت: نهج جديد لنظام إدارة قواعد 
البيانات Archi‐ملخص | 103

      صفحة 126
محاضرة، " وقائع الوقف VLDB ، المجلد 6 ، العدد 14 ، الصفحات 1942–1953 ، سبتمبر 
2013.[40] Edgar F Codd و SB Codd و CT Salley: " توفير OLAP لمحللي 
المستخدمين:تفويض تكنولوجيا المعلومات، "EF Codd Associates ، 1993.[41 ] سوراجيت 
شودري وأوميشوار ديال: "نظرة عامة على تخزين البياناتو OLAP Technology ، " سجل ACM 
SIGMOD ، المجلد 26 ، العدد 1 ، الصفحات 65-74 ،مارس 1997. دوى: 10.1145 / 
248603.248616[42 ] Per-Åke Larson و Cipri Clinciu و Campbell Fraser وآخرون: 
"تحسينات على SQLمخازن أعمدة الخادم، "في مؤتمر ACM الدولي حول إدارة 
البيانات(SIGMOD) ، يونيو 2013.[43] فرانز فاربر ، نورمان ماي ، فولفجانج لينر 
وآخرون: " قاعدة بيانات SAP HANA- نظرة عامة على الهندسة المعمارية ، " نشرة IEEE 
Data Engineering ، المجلد 35 ، العدد 1 ،الصفحات 28–33 ، مارس 2012.[44 ] مايكل 
ستونبراكر: "حكمة RDBMS التقليدية هي (بالتأكيد تقريبًا)كل شيء خاطئ، "عرض تقديمي 
في EPFL ، مايو 2013.[45 ] دانيال ج أبادي: "تصنيف حلول SQL-on-Hadoop "، 
hadapt.com ، 2أكتوبر 2013.[46] مارسيل كورناكر وألكسندر بيم وفيكتور بيتورف 
وآخرون: " إمبالا: حديث ،محرك SQL مفتوح المصدر لبرنامج Hadoop "، في المؤتمر 
السابع الذي يعقد كل سنتين حول الابتكاربحوث نظم البيانات (CIDR) ، يناير 2015.[47] 
سيرجي ميلنيك ، وأندريه جوباريف ، وجينج جينج لونج ، وآخرون: " Dremel: 
Interactiveتحليل مجموعات البيانات على نطاق الويب " ، في المؤتمر الدولي السادس 
والثلاثين حول البيانات الكبيرة جدًاالقواعد (VLDB) ، الصفحات 330-339 ، سبتمبر 
2010.[48] رالف كيمبل ومارجي روس: مجموعة أدوات مستودع البيانات: النهائيدليل 
النمذجة الأبعاد ، الطبعة الثالثة. John Wiley & Sons ، يوليو 2013. 
ISBN:978-1118530801[49 ] ديريك هاريس: "لماذا تمتلك Apple و eBay و Walmart بعضًا 
من أكبر البياناتمستودعات رأيتها من قبل "، gigaom.com ، 27 آذار (مارس) 2013.[50 ] 
جوليان لو ديم: "أصبح Dremel بسيطًا مع الباركيه "blog.twitter.com ، 11 
سبتمبر‐تشرين الثاني 2013.[51] دانيال جيه أبادي وبيتر بونكز وستافروس هاريزوبولوس 
وستراتوس إدريوس وصموئيلمادن: "تصميم وتنفيذ قاعدة البيانات الحديثة ذات التوجه 
العموديالأنظمة، " أسس واتجاهات قواعد البيانات ، المجلد 5 ، العدد 3 ، الصفحات 
197-280 ،ديسمبر 2013. دوى: 10.1561 / 1900000024104 | الفصل 3: التخزين والاسترجاع

      صفحة 127
[52 ] بيتر بونش ومارسين زوكوفسكي ونيلز نيس: "MonetDB / X100: فرط-تنفيذ استعلام 
خطوط الأنابيب ، "في المؤتمر الثاني الذي يعقد كل سنتين حول أنظمة البيانات 
المبتكرةالبحث (CIDR) ، يناير 2005.[53 ] جينغرن زو وكينيث أ روس: "تنفيذ عمليات 
قاعدة البيانات باستخدامتعليمات SIMD ، "في المؤتمر الدولي لـ ACM حول إدارة 
البيانات (SIG‐MOD) ، الصفحات 145-156 ، يونيو 2002. دوى: 10.1145 / 
564691.564709[54] مايكل ستونبراكر ، دانيال جيه آبادي ، آدم باتكين وآخرون: " 
C-Store: A Column-نظم إدارة قواعد البيانات الموجهة، "في المؤتمر الدولي الحادي 
والثلاثين لقواعد البيانات الكبيرة جدًا (VLDB) ،الصفحات 553-564 ، سبتمبر 2005.[55 
] أندرو لامب ومات فولر وراماكريشنا فاراداراجان وآخرون: "ذا فيرتيكا آناقاعدة 
البيانات lytic: C-Store بعد 7 سنوات ، " وقائع VLDB Endowment ، المجلد5 ، العدد 
12 ، الصفحات 1790-1801 ، أغسطس 2012.[56] Julien Le Dem و Nong Li: " تخزين بيانات 
فعال للتحليلات باستخدام Apacheالباركيه 2.0، "في Hadoop Summit ، سان خوسيه ، 
حزيران (يونيو) 2014.[57] جيم جراي ، سوراجيت تشودري ، آدم بوسورث ، وآخرون: " مكعب 
البيانات: علاقةعامل التجميع يعمم Group-By و Cross-Tab و Sub-Totals " Dataالتعدين 
واكتشاف المعرفة ، المجلد 1 ، العدد 1 ، الصفحات 29-53 ، مارس 2007.دوى: 10.1023 / 
أ: 1009726021843ملخص | 105

      صفحة 128


      صفحة 129
الفصل 4الترميز والتطوركل شيء يتغير ولا شيء يقف ساكنا.- Heraclitus of Ephesus ، 
كما نقل عنأفلاطون في كراتيلوس (360 قبل الميلاد)تتغير التطبيقات حتمًا بمرور 
الوقت. تمت إضافة الميزات أو تعديلها على أنها جديدةيتم إطلاق المنتجات ، تصبح 
متطلبات المستخدم مفهومة بشكل أفضل ، أو الأعمال التجاريةتغير الركام. في الفصل 
الأول قدمنا ​​فكرة القابلية للتطور : يجب علينا ذلكتهدف إلى بناء أنظمة تجعل من 
السهل التكيف مع التغيير (انظر "قابلية التطور: صنعالتغيير سهل "في الصفحة 19).في 
معظم الحالات ، يتطلب تغيير ميزات التطبيق أيضًا تغيير البيانات الخاصة بهمخازن: 
ربما يلزم تسجيل حقل أو نوع سجل جديد ، أو ربما يكون موجودًايجب تقديم البيانات 
بطريقة جديدة.نماذج البيانات التي ناقشناها في الفصل 2 لها طرق مختلفة للتعامل مع 
مثل هذهيتغيرون. تفترض قواعد البيانات العلائقية عمومًا أن جميع البيانات الموجودة 
في قاعدة البيانات متوافقةإلى مخطط واحد: على الرغم من أنه يمكن تغيير هذا المخطط 
(من خلال عمليات ترحيل المخطط ،أي بيانات ALTER ) ، هناك مخطط واحد بالضبط ساري 
المفعول في أي وقت.على النقيض من ذلك ، فإن قواعد بيانات المخطط عند القراءة ("غير 
المخطط") لا تفرض مخططًا ، لذا فإنيمكن أن تحتوي قاعدة البيانات على مزيج من 
تنسيقات البيانات القديمة والحديثة المكتوبة في مختلفمرات (انظر "مرونة المخطط في 
نموذج المستند" في الصفحة 39).عندما يتغير تنسيق البيانات أو المخطط ، تغيير مناظر 
في رمز التطبيقغالبًا ما يحدث (على سبيل المثال ، أضف حقلاً جديدًا إلى سجل ، 
والتطبيقيبدأ رمز نشوئها الآن في قراءة هذا الحقل وكتابته). ومع ذلك ، في تطبيق 
كبير ،غالبًا لا يمكن أن تحدث تغييرات الكود على الفور:107

      الصفحة 130
• مع تطبيقات الخادم ، قد ترغب في إجراء ترقية متجددة (أيضًاالمعروف باسم الطرح 
التدريجي ) - نشر الإصدار الجديد على بضع عقد في وقت واحد ،التحقق مما إذا كان 
الإصدار الجديد يعمل بسلاسة ، ويعمل بشكل تدريجيطريقك من خلال جميع العقد. يسمح هذا 
بنشر إصدارات جديدة بدونتعطل الخدمة ، وبالتالي يشجع على المزيد من الإصدارات 
المتكررة والتطور الأفضلقدرة.• مع التطبيقات من جانب العميل ، فأنت تحت رحمة 
المستخدم الذي قد لا يقوم بتثبيتهالتحديث لبعض الوقت.هذا يعني أن الإصدارات القديمة 
والجديدة من الكود وتنسيقات البيانات القديمة والجديدة ،من المحتمل أن تتواجد 
جميعها في النظام في نفس الوقت. من أجل النظاماستمر في العمل بسلاسة ، نحتاج إلى 
الحفاظ على التوافق في كلا الاتجاهين:التوافقيمكن للكود الأحدث قراءة البيانات التي 
تمت كتابتها بواسطة رمز أقدم.التوافق إلى الأماميمكن للكود الأقدم قراءة البيانات 
التي تمت كتابتها بواسطة رمز أحدث.ليس من الصعب عادةً تحقيق التوافق مع الإصدارات 
السابقة: بصفتك مؤلف الكود الأحدث ،أنت تعرف تنسيق البيانات المكتوبة بواسطة رمز 
قديم ، وبالتالي يمكنك التعامل معها بشكل صريح(إذا لزم الأمر ببساطة عن طريق 
الاحتفاظ بالكود القديم لقراءة البيانات القديمة). التوافق إلى الأماميمكن أن تكون 
bility أكثر تعقيدًا ، لأنها تتطلب رمزًا أقدم لتجاهل الإضافات التي تم إجراؤها 
بواسطة ملفأحدث إصدار من الكود.في هذا الفصل سوف نلقي نظرة على العديد من التنسيقات 
لترميز البيانات ، بما في ذلك JSON ،XML ، البروتوكول المؤقت ، التوفير و Avro. على 
وجه الخصوص ، سوف ننظر في كيفية عملهمتغييرات مخطط dle وكيف أنها تدعم الأنظمة حيث 
البيانات والرموز القديمة والجديدةبحاجة إلى التعايش. سنناقش بعد ذلك كيفية استخدام 
هذه التنسيقات لتخزين البيانات وللتواصل: في خدمات الويب و REST و RPC بالإضافة إلى 
نظام تمرير الرسائل‐تمس مثل الممثلين وقوائم انتظار الرسائل.تنسيقات تشفير 
البياناتتعمل البرامج عادةً مع البيانات في (على الأقل) تمثيلين مختلفين:1. في 
الذاكرة ، يتم الاحتفاظ بالبيانات في كائنات وهياكل وقوائم ومصفوفات وجداول تجزئة 
وأشجار وما إلى ذلكعلى. تم تحسين هياكل البيانات هذه للوصول الفعال والمعالجة 
بواسطةوحدة المعالجة المركزية (عادةً باستخدام المؤشرات).2. عندما تريد كتابة 
البيانات إلى ملف ، أو إرسالها عبر الشبكة ، يجب عليك ذلكقم بترميزه كنوع من تسلسل 
مستقل من البايتات (على سبيل المثال ، JSONوثيقة). نظرًا لأن المؤشر لن يكون له 
معنى لأي عملية أخرى ، فهذا108 | الفصل الرابع: الترميز والتطور

      الصفحة 131
أنا. باستثناء بعض الحالات الخاصة ، مثل بعض الملفات المعينة للذاكرة ، أو التي 
تعمل مباشرة على comضغط البيانات (كما في "ضغط العمود" في الصفحة 94).ثانيا. لاحظ 
أن التشفير لا علاقة له بالتشفير . نحن لا نناقش التشفير في هذا الكتاب.يبدو تمثيل 
تسلسل البايت مختلفًا تمامًا عن هياكل البياناتالتي تستخدم عادة في الذاكرة. 
أناوبالتالي ، نحن بحاجة إلى نوع من الترجمة بين التمثيلين. العابريُطلق على lation 
من التمثيل في الذاكرة إلى تسلسل البايت ترميز (أيضًاالمعروف باسم التسلسل أو 
التنظيم ) ، والعكس يسمى فك التشفير ( التحليل ،إلغاء التسلسل ، وإلغاء التنظيم ). 
ثانياتصادم المصطلحاتيتم استخدام التسلسل للأسف أيضًا في سياق transac‐(انظر الفصل 
7 ) ، بمعنى مختلف تمامًا. لتجنب التحميل الزائد للكلمة التي سنلتزم بترميزها في 
هذا الكتاب ،على الرغم من أن التسلسل ربما يكون مصطلحًا أكثر شيوعًا.نظرًا لأن هذه 
مشكلة شائعة ، فهناك عدد لا يحصى من المكتبات والترميز المختلفة‐جي للاختيار من 
بينها. لنقم بإلقاء نظرة عامة موجزة.تنسيقات خاصة باللغةتأتي العديد من لغات 
البرمجة مع دعم مدمج للتشفير في الذاكرةكائنات في متواليات بايت. على سبيل المثال ، 
تحتوي Java على java.io.Serializable [1 ] ، روبيلديها مارشال [ 2 ] ، بايثون بها 
مخلل [ 3 ] ، وهكذا. العديد من مكتبات الطرف الثالث أيضًاموجودة ، مثل Kryo for 
Java [ 4 ].مكتبات التشفير هذه مريحة للغاية ، لأنها تسمح بالكائنات الموجودة في 
الذاكرةليتم حفظها واستعادتها مع الحد الأدنى من التعليمات البرمجية الإضافية. ومع 
ذلك ، لديهم أيضًا ملفعدد المشاكل العميقة:• غالبًا ما يرتبط الترميز بلغة برمجة 
معينة والقراءةالبيانات بلغة أخرى صعبة للغاية. إذا قمت بتخزين أو نقل البيانات في 
مثلترميزًا ، فأنت تلتزم بشبكة محلية للبرمجة الحاليةيحتمل أن يكون لفترة طويلة 
جدًا ، ويمنع تكامل أنظمتكمع المنظمات الأخرى (التي قد تستخدم لغات مختلفة).• من 
أجل استعادة البيانات في نفس أنواع الكائنات ، تحتاج عملية فك التشفير إلى ذلكتكون 
قادرة على إنشاء مثيل للفئات التعسفية. هذا هو في كثير من الأحيان مصدر 
للأمنالمشاكل [ 5 ]: إذا تمكن المهاجم من الحصول على تطبيقك لفك تشفير بايت 
عشوائيالتسلسل ، يمكنهم إنشاء مثيل للفئات التعسفية ، والتي بدورها تسمح لهم في 
كثير من الأحيانلفعل أشياء فظيعة مثل تنفيذ التعليمات البرمجية التعسفية عن بُعد [ 
6 ، 7 ].تنسيقات تشفير البيانات | 109

      صفحة 132
• غالبًا ما تكون بيانات تعيين الإصدار فكرة متأخرة في هذه المكتبات: كما هو مقصود 
منهالتشفير البيانات بسرعة وسهولة ، غالبًا ما يهملون المشكلة المزعجة‐يمس التوافق 
الأمامي والخلفي.• الكفاءة (الوقت المستغرق لوحدة المعالجة المركزية للتشفير أو فك 
التشفير ، وحجم التشفيرهيكل) هو أيضا في كثير من الأحيان فكرة لاحقة. على سبيل 
المثال ، التسلسل المدمج في Javaتشتهر بأدائها السيئ وترميزها المتضخم [8].لهذه 
الأسباب ، من الجيد عمومًا استخدام الترميز المدمج في لغتك من أجلأي شيء بخلاف 
الأغراض العابرة للغاية.المتغيرات الثنائية و JSON و XMLالانتقال إلى الترميزات 
الموحدة التي يمكن كتابتها وقراءتها بواسطة العديد من البرامج‐تعتبر لغات ming و 
JSON و XML من المنافسين الواضحين. هم معروفون على نطاق واسع ،مدعوم على نطاق واسع 
، ومكروه على نطاق واسع تقريبًا. غالبًا ما يتم انتقاد XML لكونه أيضًامطول ومعقد 
بلا داعٍ [ 9 ]. تعود شعبية JSON بشكل أساسي إلىدعم مدمج بواسطة متصفحات الويب 
(بحكم كونها مجموعة فرعية من JavaScript) و sim‐مرونة بالنسبة إلى XML. CSV هو 
تنسيق آخر شائع مستقل عن اللغة ، وإن كانأقل قوة.JSON و XML و CSV هي تنسيقات نصية 
، وبالتالي يمكن قراءتها إلى حد ما(على الرغم من أن بناء الجملة موضوع شائع 
للنقاش). إلى جانب النحوية السطحيةالمشكلات ، لديهم أيضًا بعض المشكلات الدقيقة:• 
هناك الكثير من الغموض حول ترميز الأرقام. في XML و CSV ،لا يمكنك التمييز بين 
الرقم والسلسلة التي تتكون منأرقام (باستثناء الإشارة إلى مخطط خارجي). يميز JSON 
السلاسل والأرقام ، لكنها لا تميز بين الأعداد الصحيحة والفاصلة العائمة ، ولا تفعل 
ذلكتحديد الدقة.هذه مشكلة عند التعامل مع الأعداد الكبيرة ؛ على سبيل المثال ، 
أعداد صحيحة أكبرمن 2 53 لا يمكن تمثيلها بالضبط في IEEE 754 عائم مزدوج الدقة-رقم 
النقطة ، لذلك تصبح هذه الأرقام غير دقيقة عند تحليلها بلغة مايستخدم أرقام الفاصلة 
العائمة (مثل JavaScript). مثال على الأرقامأكبر من 2 53 يحدث على Twitter ، والذي 
يستخدم رقم 64 بت لتعريف كل منهاسقسقة. يشتمل JSON الذي تم إرجاعه بواسطة واجهة 
برمجة تطبيقات Twitter على معرّفات التغريدات مرتين ، مرة واحدة كملفرقم JSON ومرة 
​​واحدة كسلسلة عشرية ، للتغلب على حقيقة أنلم يتم تحليل الأرقام بشكل صحيح بواسطة 
تطبيقات JavaScript [10 ].• يتمتع JSON و XML بدعم جيد لسلاسل أحرف Unicode ، على 
سبيل المثال ،نص قابل للقراءة ، لكنها لا تدعم السلاسل الثنائية (تسلسل البايت بدون 
ملفترميز الأحرف). تعتبر السلاسل الثنائية ميزة مفيدة ، لذلك يتفادى الناس 
ذلكالتقييد عن طريق ترميز البيانات الثنائية كنص باستخدام Base64. ثم المخططتُستخدم 
للإشارة إلى أنه يجب تفسير القيمة على أنها مشفرة باستخدام Base64. هذهيعمل ، لكنه 
اختراق إلى حد ما.110 | الفصل الرابع: الترميز والتطور

      الصفحة 133
• يوجد دعم مخطط اختياري لكل من XML [11 ] وجسون [ 12]. هؤلاءتعتبر لغات المخطط 
قوية جدًا ، وبالتالي فهي معقدة جدًا للتعلم وينفذ. يعد استخدام مخططات XML منتشرًا 
إلى حد ما ، ولكن العديد منها يعتمد على JSONأدوات لا تهتم باستخدام المخططات. منذ 
التفسير الصحيح للبيانات (مثلكأرقام وسلاسل ثنائية ، على النحو الوارد أعلاه) يعتمد 
على المعلومات الموجودة في المخطط ،تحتاج التطبيقات التي لا تستخدم مخططات XML / 
JSON إلى تضمين إضافات محتملةرمز tional لتشفير / فك تشفير البيانات بشكل صحيح.• لا 
يحتوي ملف CSV على أي مخطط ، لذا فإن الأمر متروك للتطبيق لتحديد المتوسطجي من كل 
صف وعمود. إذا أدى تغيير التطبيق إلى إضافة صف أو عمود جديد ،عليك التعامل مع هذا 
التغيير يدويًا. CSV هو أيضًا تنسيق غامض تمامًا (ماذايحدث إذا كانت القيمة تحتوي 
على فاصلة أو حرف سطر جديد؟) - على الرغم من أنهاتم تحديد قواعد الهروب رسميًا [13 
] ، ليس كل المحللين يطبقونها بشكل صحيحبشكل مستقيم.على الرغم من هذه العيوب ، فإن 
JSON و XML و CSV جيدة بما يكفي لأغراض عديدة. إنهمن المحتمل أن تظل شائعة ، خاصةً 
كتنسيقات تبادل البيانات (مثل إرسالالبيانات من منظمة إلى أخرى). في هذه الحالات ، 
طالما أن الناستوافق على ماهية التنسيق ، غالبًا لا يهم مدى جمال أو كفاءة 
التنسيقيكون. صعوبة جعل المنظمات المختلفة توافق على أي شيء يفوقهامعظم الاهتمامات 
الأخرى.ترميز ثنائيبالنسبة للبيانات التي يتم استخدامها داخليًا فقط داخل مؤسستك ، 
يكون هناك ضغط أقل علىاستخدم تنسيق ترميز ذو قاسم مشترك. على سبيل المثال ، يمكنك 
أن تختارتنسيق أكثر إحكاما أو أسرع في التحليل. بالنسبة لمجموعة بيانات صغيرة ، 
تكون المكاسبلا يكاد يذكر ، ولكن بمجرد وصولك إلى التيرابايت ، يمكن أن يكون 
لاختيار تنسيق البيانات ملفتأثير كبير.JSON أقل طولًا من XML ، لكن كلاهما لا يزال 
يستخدم مساحة كبيرة مقارنة بالثنائيالتنسيقات. أدت هذه الملاحظة إلى تطوير وفرة من 
الترميزات الثنائيةلـ JSON (MessagePack و BSON و BJSON و UBJSON و BISON و Smile ، 
على سبيل المثال لا الحصر)ولـ XML (WBXML و Fast infoset ، على سبيل المثال). كانت 
هذه التنسيقاتتم تبنيه في مختلف المجالات ، ولكن لم يتم اعتماد أي منها على نطاق 
واسع مثل النسخة النصيةإصدارات JSON و XML.تعمل بعض هذه التنسيقات على توسيع مجموعة 
أنواع البيانات (مثل التمييز بين الأعداد الصحيحة والنقطة العائمة ، أو إضافة دعم 
للسلاسل الثنائية) ، لكنهم يحتفظون بامتدادنموذج بيانات JSON / XML لم يتغير. على 
وجه الخصوص ، لأنهم لا يصفون أالمخطط ، يحتاجون إلى تضمين جميع أسماء حقول الكائنات 
داخل البيانات المشفرة. هذا هو،في الترميز الثنائي لوثيقة JSON ، المثال 4-1 ، لا 
يزالون بحاجة إلى تضمينهالسلاسل userName ، و favouriteNumber والاهتمامات في مكان 
ما.تنسيقات تشفير البيانات | 111

      صفحة 134
مثال 4-1. مثال على السجل الذي سنقوم بترميزه في العديد من التنسيقات الثنائية في 
هذاالفصل.{"اسم المستخدم" : "مارتن" ،"favournumber" : 1337 ،"الاهتمامات" : [ 
"أحلام اليقظة" ، "القرصنة" ]}لنلقِ نظرة على مثال MessagePack ، وهو ترميز ثنائي 
لـ JSON. الشكل 4-1يعرض تسلسل البايت الذي تحصل عليه إذا قمت بتشفير مستند JSON 
مثال 4-1مع MessagePack [14 ]. البايتات الأولى هي كما يلي:1. يشير البايت الأول 
0x83 إلى أن ما يلي هو كائن (أعلى أربع بتات = 0x80 )مع 3 حقول (أربع بتات سفلية = 
0 × 03 ). (في حال كنت تتساءل عما يحدثإذا كان الكائن يحتوي على أكثر من 15 حقلاً ، 
فإن عدد الحقول لا يتناسب مع أربعةبت: ثم يحصل على مؤشر نوع مختلف ، ويتم ترميز عدد 
الحقول فيهاثنين أو أربعة بايت.)2. يشير البايت الثاني 0xa8 إلى أن ما يلي هو سلسلة 
(البتات الأربعة العليا = 0xa0 )هذا طوله 8 بايت (أربع بتات سفلية = 0x08 ).3. 8 
بايت التالية هي اسم الحقل userName في ASCII. منذ أن كان الطول indi‐المذكورة 
سابقًا ، ليست هناك حاجة لأي محدد لإخبارنا بمكان انتهاء السلسلة(أو أي هروب).4. 
وهلم جرا.يبلغ طول الترميز الثنائي 66 بايت ، وهو أقل بقليل من 81 بايت 
المأخوذةبواسطة ترميز JSON النصي (مع إزالة المسافات). جميع الترميزات الثنائية 
لـJSON متشابهة في هذا الصدد. ليس من الواضح ما إذا كان هذا الحد من مساحة 
صغيرة(وربما التسريع في التحليل) يستحق فقدان قابلية القراءة البشرية.في الأقسام 
التالية ، سنرى كيف يمكننا القيام بعمل أفضل ، وترميز ملفنفس السجل في 32 بايت 
فقط.112 | الفصل الرابع: الترميز والتطور

      صفحة 135
حزمة الرسائل83 a8 75 73 65 72 4e 61 6d 65 a6 4d 61 72 74 69 6e ae 66 6176 6f 72 
69 74 65 4e 75 6d 62 65 72 cd 05 39 a9 69 6e 74 6572 65 73 74 73 92 ab 64 61 79 
64 72 65 61 6d 69 6e 67 a7 6861 63 6 ب 69 6 هـ 67تسلسل البايت (66 بايت):83أ 8أ 
64d 61 72 74 69 6eم ارتين75 73 65 72 4e 61 6d 65اسم االمستخدممفعول(3 
إدخالات)سلسلة(الطول 8)سلسلة(الطول 6)ae66 61 76 6f 72 69 74 65 4e 75 6d 62 65 
72رقمك المفضلسلسلة(الطول 14)92أب64 61 79 64 72 65 61 6d 69 6e 67احلام 
اليقظةسلسلة(الطول 11)مجموعة مصفوفة(2 مدخلات)أ 768 61 63 6b 69 6e 
67القرصنةسلسلة(الطول 7)أ 969 6e 74 65 72 65 73 74 73الإهتماماتسلسلة(الطول 9)قرص 
مضغوط05 39uint161337انفصال:الشكل 4-1. سجل مثال ( مثال 4-1 ) مشفر باستخدام 
MessagePack.التوفير والمخازن المؤقتة للبروتوكولأباتشي التوفير [ 15] والمخازن 
المؤقتة للبروتوكول [ 16] هي مكتبات تشفير ثنائيةعلى نفس المبدأ. تم تطوير مخازن 
البروتوكول في الأصل في Google ،تم تطوير Thrift في الأصل على Facebook ، وكلاهما 
كان مفتوح المصدر في2007-08 [ 17 ].تتطلب المخازن المؤقتة للتوفير والبروتوكول 
مخططًا لأي بيانات تم ترميزها. لبترميز بيانات المثال 4-1 في التوفير ، يمكنك وصف 
المخطط في ملفلغة تعريف واجهة التوفير (IDL) مثل هذا:شخص منظم {1 : السلسلة 
المطلوبةاسم المستخدم ،2 : اختياري i64رقم ،3 : قائمة اختيارية < سلسلة > 
الاهتمامات}يبدو تعريف المخطط المكافئ للمخازن المؤقتة للبروتوكول مشابهًا 
جدًا:تنسيقات تشفير البيانات | 113

      صفحة 136
ثالثا. في الواقع ، يحتوي على ثلاثة - BinaryProtocol و CompactProtocol و 
DenseProtocol - على الرغم من DenseProtocolمدعوم فقط من خلال تطبيق C ++ لذلك لا 
يتم احتسابه على أنه متعدد اللغات [ 18 ]. إلى جانب هؤلاء ، هو أيضاله نوعان 
مختلفان من تنسيقات التشفير المستندة إلى JSON [ 19 ]. يا لها من متعة!رسالة الشخص 
{مطلوب سلسلة اسم المستخدم= 1 ؛اختياري int64 favour_number = 2 ؛سلسلة المصالح 
المتكررة= 3 ؛}تأتي كل من المخازن المؤقتة للتوفير والبروتوكول مع أداة إنشاء 
التعليمات البرمجية التي تأخذ ملفتعريف المخطط مثل التعريف أعلاه ، وينتج الفئات 
التي تنفذ الامتدادالمخطط في لغات البرمجة المختلفة [ 18]. يمكن أن يسمى رمز 
التطبيق الخاص بك هذارمز تم إنشاؤه لتشفير أو فك تشفير سجلات المخطط.كيف تبدو 
البيانات المشفرة بهذا المخطط؟ بشكل محير ، لدى Thrift عيبانferent صيغ الترميز 
ثنائي ج ] دعا BinaryProtocol و CompactProtocol respec-بهدوء. دعونا نلقي نظرة على 
BinaryProtocol أولاً. يأخذ مثال التشفير 4-1 بهذا الشكل59 بايت ، كما هو موضح في 
الشكل 4-2 [19].تسلسل البايت (59 بايت):0fاكتب 15 (قائمة)0 بنوع العنصر 11 
(سلسلة)علامة المجال = 300 032 عناصر قائمة00 00 00 020 أاكتب 10 (i64)علامة الحقل 
= 200 02133700 00 00 00 00 00 05 39الطول 1100 00 00 0 ب64 61 79 64 72 65 61 6d 
69 6e 67احلام اليقظةالطول 700 00 00 0768 61 63 6b 69 6e 67القرصنةنهاية 
الهيكل00التوفير BinaryProtocol0 باكتب 11 (سلسلة)4d 61 72 74 69 6eم ارتينعلامة 
الحقل = 100 01الطول 600 00 00 060b 00 01 00 00 00 06 4d 61 72 74 69 6e 0a 00 02 
00 00 00 0000 00 05 39 0f 00 03 0b 00 00 00 02 00 00 00 0b 64 61 79 6472 65 61 
6d 69 6e 67 00 00 00 07 68 61 63 6b 69 6e 67 00انفصال:الشكل 4-2. سجل مثال مشفر 
باستخدام بروتوكول Thrift's BinaryProtocol.114 | الفصل الرابع: الترميز والتطور

      الصفحة 137
على غرار الشكل 4-1، يحتوي كل حقل على نوع تعليق توضيحي (للإشارة إلى ما إذا كان 
بامتدادسلسلة ، عدد صحيح ، قائمة وما إلى ذلك) ، وعند الاقتضاء ، مؤشر الطول (طول 
السلسلة ،عدد العناصر في القائمة). السلاسل التي تظهر في البيانات ("مارتن" ، 
"أحلام اليقظة‐ing "،" hacking ") أيضًا مشفرة كـ ASCII (أو بالأحرى ، UTF-8) ، على 
غرار ما سبق.يتمثل الاختلاف الكبير مقارنة بالشكل 4-1 في عدم وجود أسماء حقول ("اسم 
المستخدم" ،"رقم مفضل" ، "اهتمامات"). بدلاً من ذلك ، تحتوي البيانات المشفرة على 
علامات الحقول ، والتيهي الأرقام 1 و 2 و 3. هذه هي الأرقام التي تظهر في تعريف 
المخططفي الاعلى. علامات الحقول مثل الأسماء المستعارة للحقول - إنها طريقة مضغوطة 
لقول ماذاالمجال الذي نتحدث عنه ، دون الحاجة إلى تهجئة اسم الحقل.ترميز Thrift 
CompactProtocol مكافئ لغويًا لـ BinaryProtocol ،ولكن كما ترى في الشكل 4-3 ، فإنه 
يحزم نفس المعلومات في 34 بايت فقط. هو - هييقوم بذلك عن طريق تعبئة نوع الحقل ورقم 
العلامة في بايت واحد وباستخدامالأعداد الصحيحة متغيرة الطول. بدلاً من استخدام 8 
بايت كاملة للرقم 1337 ، فهي كذلكالمشفرة في 2 بايت ، باستخدام الجزء العلوي من كل 
بايت للإشارة إلى ما إذا كان لا يزال هناكالمزيد من البايتات القادمة. هذا يعني أن 
الأرقام بين -64 و 63 مشفرة في واحدبايت ، الأرقام بين -8192 و 8191 مشفرة في 2 
بايت ، إلخ. أرقام أكبراستخدام المزيد من البايت.4d 61 72 74 69 6e1806م ارتينالطول 
664 61 79 64 72 65 61 6d 69 6e 670 باحلام اليقظةالطول 11نهاية الهيكل0068 61 63 
6b 69 6e 6707القرصنةالطول 7تسلسل البايت (34 بايت):0 0 0 1 1 0 0 0اكتب 8 
(سلسلة)علامة الحقل = 10 0 0 1 0 1 1 0اكتب 6 (i64)علامة الحقل + = 1اكتب 9 
(قائمة)0 0 0 1 1 0 0 1علامة الحقل + = 11928نوع العنصر 8 (سلسلة)0 0 1 0 1 0 0 02 
عناصر قائمة16f2 14إشارة1 1 1 1 0 0 1 0 0 0 1 0 1 0 013370 0 1 0 1 0 0 1 1 1 0 0 
1بروتوكول ثريفت كومباكت18 06 4d 61 72 74 69 6e 16 f2 14 19 28 0b 64 61 79 64 72 
6561 6d 69 6e 67 07 68 61 63 6b 69 6e 67 00انفصال:الشكل 4-3. مثال سجل مشفر 
باستخدام بروتوكول CompactProtocol الخاص بـ Thrift.أخيرًا ، تقوم مخازن البروتوكول 
(التي تحتوي على تنسيق ترميز ثنائي واحد فقط) بترميز ملفنفس البيانات الموضحة في 
الشكل 4-4. إنها تقوم بتعبئة البتات بشكل مختلف قليلاً ، لكنها كذلكتنسيقات تشفير 
البيانات | 115

      صفحة 138
يشبه إلى حد بعيد بروتوكول CompactProtocol الخاص بـ Thrift. البروتوكول المؤقت 
يناسب نفسهسجل في 33 بايت.تفصيل واحد يجب ملاحظته: في المخططات أعلاه ، تم وضع 
علامة على كل حقل إما مطلوب أواختياري ، لكن هذا لا يحدث فرقًا في كيفية ترميز 
الحقل (لا شيء في ملفتشير البيانات الثنائية إلى ما إذا كان الحقل مطلوبًا). 
الاختلاف ببساطة هو ذلكمطلوب تمكين فحص وقت التشغيل الذي يفشل إذا لم يتم تعيين 
الحقل ، وهو ما يمكن أن يكون مفيدًالاصطياد الحشرات.تسلسل البايت (33 
بايت):انفصال:مخازن البروتوكول4d 61 72 74 69 6e0 أ06م ارتينالطول 60 0 0 0 1 0 1 
0النوع 2 (سلسلة)علامة الحقل = 110b9 0a0 0 0 1 0 0 0 0اكتب 0 (فارينت)علامة الحقل 
= 264 61 79 64 72 65 61 6d 69 6e 671 أ0 باحلام اليقظةالطول 11النوع 2 (سلسلة)0 0 
0 1 1 0 1 0علامة المجال = 368 61 63 6b 69 6e 671 أ07القرصنةالطول 7النوع 2 
(سلسلة)0 0 0 1 1 0 1 0علامة المجال = 313371 0 1 1 1 0 0 1 0 0 0 0 1 0 1 00 0 0 1 
0 1 0 0 1 1 1 0 0 10a 06 4d 61 72 74 69 6e 10 b9 0a 1a 0b 64 61 79 64 72 65 616d 
69 6e 67 1a 07 68 61 63 6b 69 6e 67الشكل 4-4. مثال سجل مشفر باستخدام مخازن 
البروتوكول.العلامات الميدانية وتطور المخططقلنا سابقًا أن المخططات بحاجة حتمًا 
إلى التغيير بمرور الوقت. نسمي هذاتطور المخطط . كيف تتعامل مخازن التوفير 
والبروتوكول مع تغييرات المخطط أثناءالحفاظ على التوافق مع الإصدارات السابقة 
والأمامية؟كما ترى من الأمثلة ، فإن السجل المشفر هو مجرد تسلسل لهالحقول المشفرة. 
يتم تحديد كل حقل برقم علامته (الأرقام 1 ، 2 ، 3 فيالمخططات أعلاه) ، مع نوع 
بيانات (مثل سلسلة أو عدد صحيح). إذا كانت قيمة الحقللم يتم تعيينه ، يتم حذفه 
ببساطة من السجل المشفر. من هذا يمكنك أن ترى ذلكتعد علامات الحقول مهمة لمعنى 
البيانات المشفرة. يمكنك تغيير اسمحقل في المخطط ، نظرًا لأن البيانات المشفرة لا 
تشير أبدًا إلى أسماء الحقول ، ولكن يمكنكلا تغير علامة الحقل ، لأن ذلك سيجعل جميع 
البيانات المشفرة الحالية غير صالحة.يمكنك إضافة حقول جديدة إلى المخطط ، بشرط أن 
تمنح كل حقل علامة جديدةعدد. إذا كان الكود القديم (الذي لا يعرف عن أرقام العلامات 
الجديدة التي أضفتها)116 | الفصل الرابع: الترميز والتطور

      الصفحة 139
يحاول قراءة البيانات المكتوبة برمز جديد ، بما في ذلك حقل جديد برقم علامة عليهلا 
يتعرف عليه ، يمكنه ببساطة تجاهل هذا المجال. يسمح التعليق التوضيحي بنوع البيانات 
بامتدادالمحلل اللغوي لتحديد عدد البايت المطلوب تخطيه. هذا يحافظ إلى الأمام 
com‐إمكانية الوصول: يمكن للكود القديم قراءة السجلات التي تمت كتابتها بواسطة رمز 
جديد.ماذا عن التوافق مع الإصدارات السابقة؟ طالما أن كل حقل له رقم علامة فريد 
،يمكن للرمز الجديد دائمًا قراءة البيانات القديمة ، لأن أرقام العلامات لا تزال 
موجودةالمعنى. التفاصيل الوحيدة هي أنك إذا أضفت حقلاً جديدًا ، فلا يمكنك جعله 
مطلوبًا .إذا كنت تريد إضافة حقل وجعله مطلوبًا ، فسيفشل هذا الفحص في حالة وجود 
رمز جديديقرأ البيانات المكتوبة بالرمز القديم ، لأن الكود القديم لم يكتب الحقل 
الجديد ذلكأضفته. لذلك ، للحفاظ على التوافق مع الإصدارات السابقة ، كل حقل تضيفه 
بعد ذلكيجب أن يكون النشر الأولي للمخطط اختياريًا أو أن يكون له قيمة 
افتراضية.تشبه إزالة حقل تمامًا إضافة حقل ، مع التوافق مع الإصدارات السابقة 
والأماميةعكس المخاوف. هذا يعني أنه يمكنك فقط إزالة حقل اختياري (ملفلا يمكن إزالة 
الحقل المطلوب أبدًا) ، ولا يمكنك أبدًا استخدام نفس رقم العلامةمرة أخرى (لأنه لا 
يزال لديك بيانات مكتوبة في مكان ما تتضمن العلامة القديمةرقم ، ويجب تجاهل هذا 
الحقل برمز جديد).أنواع البيانات وتطور المخططماذا عن تغيير نوع بيانات الحقل؟ قد 
يكون ذلك ممكنًا - تحقق من docu‐الإرشاد للحصول على التفاصيل - ولكن هناك خطر من أن 
القيم تفقد الدقة أو يتم اقتطاعها.على سبيل المثال ، لنفترض أنك قمت بتغيير عدد 
صحيح 32 بت إلى عدد صحيح 64 بت. رمز جديد يمكنقراءة البيانات المكتوبة بواسطة الكود 
القديم بسهولة ، لأن المحلل اللغوي يمكنه ملء أي بتات مفقودةمع صفر. ومع ذلك ، إذا 
كان الكود القديم يقرأ البيانات المكتوبة برمز جديد ، فإن الكود القديم يظل 
كذلكباستخدام متغير 32 بت للاحتفاظ بالقيمة. إذا كانت قيمة 64 بت التي تم فك 
تشفيرها لا تناسب 32بت ، سيتم اقتطاعها.من التفاصيل الغريبة للمخازن المؤقتة 
للبروتوكول أنه لا يحتوي على قائمة أو نوع بيانات مصفوفة ،ولكن بدلاً من ذلك يحتوي 
على علامة مكررة للحقول (وهو خيار ثالث بجانبمطلوب و اختياري ). كما ترى في الشكل 
4-4، ترميز مكررالحقل هو فقط ما يقوله على العلبة: تظهر علامة الحقل نفسها عدة مرات 
فيسجل. هذا له تأثير جميل أنه لا بأس في تغيير اختياري (ذو قيمة واحدة)الحقل في حقل 
متكرر (متعدد القيم). كود جديد يقرأ البيانات القديمة يرى قائمة بهاصفر أو عنصر 
واحد (اعتمادًا على ما إذا كان الحقل موجودًا) ؛ قراءة الكود القديمالبيانات 
الجديدة ترى فقط العنصر الأخير في القائمة.يحتوي Thrift على نوع بيانات قائمة مخصص 
، والذي يتم تحديد معلماته باستخدام نوع بيانات ملفعناصر القائمة. هذا لا يسمح بنفس 
التطور من أحادية القيمة إلى متعددةيتم تقييمها كما تفعل مخازن البروتوكول ، ولكن 
لها ميزة دعم القوائم المتداخلة.تنسيقات تشفير البيانات | 117

      الصفحة 140
أفروApache Avro [ 20 ] هو تنسيق ترميز ثنائي آخر مختلف بشكل مثير للاهتماممن مخازن 
البروتوكول والتوفير. بدأ في عام 2009 كمشروع فرعي لشركة Hadoop ،نتيجة لعدم ملاءمة 
Thrift لحالات استخدام Hadoop [ 21].يستخدم Avro أيضًا مخططًا لتحديد بنية البيانات 
التي يتم تشفيرها. لها اثنانلغات المخطط: واحدة (Avro IDL) مخصصة للتحرير البشري ، 
وواحدة (تعتمد علىJSON) التي يسهل قراءتها آليًا.قد يبدو مخطط المثال الخاص بنا ، 
المكتوب بلغة Avro IDL ، كما يلي:سجل الشخص {سلسلةاسم المستخدم ؛union { null ، 
long } favouriteNumber = null ؛مجموعة < سلسلة >اهتمامات ؛}تمثيل JSON المكافئ 
لهذا المخطط هو كما يلي:{"النوع" : "سجل" ،"الاسم" : "الشخص" ،"الحقول" : [{ 
"الاسم" : "اسم المستخدم" ،"type" : "string" }،{ "الاسم" : "favournumber" ، 
"type" : [ "null" ، "long" ]، "default" : null }،{ "الاسم" : "الاهتمامات" 
،"type" : { "type" : "array" ، "items" : "string" }}]}بادئ ذي بدء ، لاحظ عدم 
وجود أرقام علامات في المخطط. إذا قمنا بترميز ملفسجل المثال ( المثال 4-1 ) 
باستخدام هذا المخطط ، فإن تشفير Avro الثنائي هو 32 فقطبايت طويل - أصغر الترميزات 
التي رأيناها مضغوطة. انهياريظهر تسلسل البايت المشفر بتنسيق الشكل 4-5 .118 | 
الفصل الرابع: الترميز والتطور

      الصفحة 141
تسلسل البايت (32 بايت):أفرو4d 61 72 74 69 6eم ارتين0 جإشارةالطول 60 0 0 0 1 1 0 
0f2 14فرع الاتحاد 1 (طويل ، غير فارغ)0 0 0 0 0 0 1 002إشارة1 1 1 1 0 0 1 0 0 0 1 
0 1 0 013370 0 1 0 1 0 0 1 1 1 0 0 1يتبع 2 عناصر مجموعة0 0 0 0 0 1 0 00464 61 79 
64 72 65 61 6d 69 6e 67احلام اليقظةالطول 110 0 0 1 0 1 1 01668 61 63 6b 69 6e 
67القرصنةالطول 70 0 0 0 1 1 1 00eنهاية المصفوفة000c 4d 61 72 74 69 6e 02 f2 14 
04 16 64 61 79 64 72 65 61 6d69 6e 67 0e 68 61 63 6b 69 6e 67 00انفصال:الشكل 
4-5. مثال سجل مشفر باستخدام Avro.إذا قمت بفحص تسلسل البايت ، يمكنك أن ترى أنه لا 
يوجد شيء لتعريف الحقولأو أنواع البيانات الخاصة بهم. يتكون الترميز ببساطة من قيم 
متسلسلة معًا. أالسلسلة هي مجرد بادئة طول متبوعة بـ UTF-8 بايت ، ولكن لا يوجد شيء 
في enco‐بيانات ded التي تخبرك أنها سلسلة. يمكن أن يكون عددًا صحيحًا أو بعضًاشيء 
آخر تمامًا. يتم ترميز عدد صحيح باستخدام ترميز متغير الطول (نفسمثل بروتوكول 
Thrift CompactProtocol).لتحليل البيانات الثنائية ، يمكنك استعراض الحقول بالترتيب 
الذي تظهر بهالمخطط ، واستخدم المخطط لإخبارك بنوع البيانات لكل حقل. هذا يعني 
ذاكلا يمكن فك تشفير البيانات الثنائية بشكل صحيح إلا إذا كانت الشفرة التي تقرأ 
البيانات تستخدم الامتدادنفس مخطط الشفرة الذي كتب البيانات بالضبط . أي عدم تطابق 
في المخططبين القارئ والكاتب يعني البيانات التي تم فك تشفيرها بشكل غير صحيح.لذا ، 
كيف يدعم Avro تطور المخطط؟مخطط الكاتب ومخطط القارئباستخدام Avro ، عندما يريد أحد 
التطبيقات تشفير بعض البيانات (لكتابتها في ملف أوقاعدة بيانات ، لإرسالها عبر 
الشبكة ، وما إلى ذلك) ، تقوم بترميز البيانات باستخدام أي إصدارمن المخطط الذي 
يعرف عنه - على سبيل المثال ، يمكن تجميع هذا المخطط فيهتطبيق. يُعرف هذا بمخطط 
الكاتب .تنسيقات تشفير البيانات | 119

      صفحة 142
عندما يريد أحد التطبيقات فك تشفير بعض البيانات (اقرأها من ملف أو قاعدة بيانات 
،تلقيها من الشبكة ، وما إلى ذلك) ، فمن المتوقع أن تكون البيانات في بعض المخططات 
، والتييُعرف باسم مخطط القارئ . هذا هو المخطط الذي يعتمد عليه رمز التطبيق- ربما 
تم إنشاء رمز من هذا المخطط أثناء بناء التطبيقمعالجة.الفكرة الأساسية في Avro هي 
أن مخطط الكاتب ومخطط القارئ ليس بهماأن تكون هي نفسها - يجب أن تكون متوافقة فقط. 
عندما يتم فك تشفير البيانات (قراءة) ، فإن ملفتحل مكتبة Avro الاختلافات من خلال 
النظر في مخطط الكاتب ومخططمخطط القارئ جنبًا إلى جنب ، وترجمة البيانات من مخطط 
الكاتب إلىمخطط القارئ. مواصفات Avro [ 20] يحدد بالضبط كيف هذا القراريعمل ، وهو 
موضح في الشكل 4-6.على سبيل المثال ، لا توجد مشكلة إذا كان مخطط الكاتب ومخطط 
القارئ متوفرينحقولهم بترتيب مختلف ، لأن دقة المخطط تطابق الحقولحسب اسم المجال. 
إذا كان الحقل الموجود على جانب الكاتب لا يحتوي على حقل مطابق فيجانب القارئ ، يتم 
تجاهله. إذا لم يكن هناك حقل مطابق في جانب القارئمن جانب الكاتب ، يتم ملؤه بقيمة 
افتراضية معلنة في مخطط القارئ.مخطط الكاتب لسجل الشخصمخطط القارئ لسجل الشخصنوع 
البياناتاسم الحقلسلسلةاسم االمستخدمسلسلةعنوان URL للصورالاتحاد {null، long} 
favouriteNumberمجموعة <سلسلة>الإهتماماتنوع البياناتاسم الحقلطويلمعرف 
المستخدممجموعة <سلسلة>الإهتماماتالاتحاد {null، int}رقمك المفضلسلسلةاسم 
االمستخدمالشكل 4-6. يقوم قارئ Avro بحل الاختلافات بين مخطط الكاتب ومخططمخطط 
القارئ.قواعد تطور المخططمع Avro ، يعني التوافق مع التوجيه أنه يمكنك الحصول على 
إصدار جديد منالمخطط ككاتب وإصدار قديم من المخطط كقارئ. على العكس من ذلك ، إلى 
الوراءالتوافق يعني أنه يمكنك الحصول على إصدار جديد من المخطط كقارئ وملفالإصدار 
القديم ككاتب.للحفاظ على التوافق ، يمكنك فقط إضافة أو إزالة الحقل الذي يحتوي على 
حقل افتراضيالقيمة. (الحقل مفضل رقم في مخطط Avro أعلاه له قيمة افتراضيةnull .) 
على سبيل المثال ، لنفترض أنك أضفت حقلاً بقيمة افتراضية ، لذلك يوجد هذا الحقل 
الجديد فيالمخطط الجديد ولكن ليس المخطط القديم. عندما يقرأ قارئ يستخدم المخطط 
الجديد ملفسجل مكتوب بالمخطط القديم ، يتم ملء القيمة الافتراضية للحقل المفقود.120 
| الفصل الرابع: الترميز والتطور

      صفحة 143
رابعا. لكي تكون دقيقًا ، يجب أن تكون القيمة الافتراضية من نوع الفرع الأول 
للاتحاد ، على الرغم من أن هذا هوقيود معينة على Avro ، وليس سمة عامة لأنواع 
الاتحاد.إذا كنت تريد إضافة حقل ليس له قيمة افتراضية ، فلن يتمكن القراء الجدد من 
ذلكقراءة البيانات المكتوبة من قبل الكتاب القدامى ، لذلك سوف تكسر التوافق مع 
الإصدارات السابقة. اذا أنتهي إزالة حقل ليس له قيمة افتراضية ، فلن يتمكن القراء 
القدامى من القراءةالبيانات المكتوبة من قبل كتّاب جدد ، لذا ستفقد التوافق.في بعض 
لغات البرمجة ، يعد null قيمة افتراضية مقبولة لأي متغير ، ولكنليس هذا هو الحال في 
Avro: إذا كنت تريد السماح لأحد الحقول بأن يكون فارغًا ، فيجب عليك استخدام ملفنوع 
الاتحاد . على سبيل المثال ، حقل union {null، long، string}؛ يدل علييمكن أن يكون 
الحقل رقمًا أو سلسلة أو فارغًا. يمكنك فقط استخدام القيمة الخالية كقيمة افتراضية 
إذاهو أحد فروع الاتحاد. iv هذا مطول أكثر بقليل من الحصول على كليمكن أن يكون 
nullable بشكل افتراضي ، ولكنه يساعد في منع الأخطاء من خلال توضيح ما يمكنولا يمكن 
أن يكون فارغًا [ 22].ونتيجة لذلك، أفرو لم يكن لديك الاختيارية و المطلوبة علامات 
بنفس الطريقة التيتعمل مخازن البروتوكول والتوفير ، لأنها تحتوي على أنواع موحدة 
وقيم افتراضية بدلاً من ذلك.من الممكن تغيير نوع بيانات الحقل ، بشرط أن يتمكن Avro 
من تحويل النوع.تغيير اسم الحقل ممكن ولكنه معقد بعض الشيء: يمكن لمخطط القارئ أن 
يفعل ذلكتحتوي على أسماء مستعارة لأسماء الحقول ، لذا يمكن أن تتطابق مع أسماء حقول 
مخطط الكاتب القديمةضد الأسماء المستعارة. هذا يعني أن تغيير اسم الحقل متوافق مع 
الإصدارات السابقة ولكنلا إلى الأمام متوافق. وبالمثل ، فإن إضافة فرع إلى نوع 
الاتحاد أمر رجعي comصالح للأمام ولكن غير متوافق.لكن ما هو مخطط الكاتب؟هناك سؤال 
مهم ألقينا الضوء عليه حتى الآن: كيف يفعل القارئتعرف مخطط الكاتب الذي تم به تشفير 
جزء معين من البيانات؟ نحنلا يمكن فقط تضمين المخطط بأكمله مع كل سجل ، لأن 
المخططمن المحتمل أن تكون أكبر بكثير من البيانات المشفرة ، مما يوفر كل المساحة من 
ملفثنائي غير مجدي.تعتمد الإجابة على السياق الذي يتم فيه استخدام Avro. لتقديم بعض 
الامتحانات‐الرجاء:ملف كبير به الكثير من السجلاتالاستخدام الشائع لـ Avro - خاصة 
في سياق Hadoop - هو تخزين ملفملف كبير يحتوي على ملايين السجلات ، جميعها مشفرة 
بنفس المخطط. (نحنسوف يناقش هذا النوع من المواقف في الفصل 10. ) في هذه الحالة ، 
كاتب ذلكيمكن أن يتضمن الملف مخطط الكاتب مرة واحدة في بداية الملف. أفرويحدد تنسيق 
ملف (ملفات حاوية الكائنات) للقيام بذلك.تنسيقات تشفير البيانات | 121

      صفحة 144
قاعدة بيانات مع سجلات مكتوبة بشكل فرديفي قاعدة البيانات ، يمكن كتابة سجلات 
مختلفة في أوقات مختلفة باستخداممخططات الكاتب المختلفة - لا يمكنك افتراض أن جميع 
السجلات ستحتوي على الامتدادنفس المخطط. أبسط حل هو تضمين رقم الإصدار في 
البداية‐نينج من كل سجل مشفر ، والاحتفاظ بقائمة إصدارات المخطط في بياناتك‐قاعدة. 
يمكن للقارئ إحضار سجل ، واستخراج رقم الإصدار ، ثم جلب ملفمخطط الكاتب لرقم 
الإصدار هذا من قاعدة البيانات. باستخدام هذا الكاتبالمخطط ، يمكنه فك تشفير بقية 
السجل. (اسبريسو [ 23] يعمل بهذه الطريقة ، من أجلمثال.)إرسال السجلات عبر اتصال 
الشبكةعندما تتواصل عمليتان عبر اتصال شبكة ثنائية الاتجاه‐يمكنهم التفاوض بشأن 
إصدار المخطط عند إعداد الاتصال ، ثم الموافقةtinue باستخدام هذا المخطط طوال عمر 
الاتصال. Avro RPCبروتوكول (انظر "تدفق البيانات عبر الخدمات: REST و RPC" في 
الصفحة 127 ) يقوم بهذا.تعد قاعدة بيانات إصدارات المخطط أمرًا مفيدًا في أي حال ، 
نظرًا لأنها تعمل كـالوثائق ، ويمنحك فرصة للتحقق من توافق المخطط [24 ]. مثل 
ver‐رقم sion ، يمكنك استخدام عدد صحيح متزايد ، أو يمكنك استخدام 
تجزئةالمخطط.المخططات التي تم إنشاؤها ديناميكيًاتتمثل إحدى ميزات نهج Avro ، 
مقارنةً بمخازن البروتوكول والتوفير ، في ذلكلا يحتوي المخطط على أي أرقام علامات. 
ولكن لماذا هذا مهم؟ ما هومشكلة في الاحتفاظ ببعض الأرقام في المخطط؟الفرق هو أن 
Avro أكثر ملاءمة للمخططات التي يتم إنشاؤها ديناميكيًا . إلى عن علىعلى سبيل 
المثال ، لنفترض أن لديك قاعدة بيانات علائقية تريد تفريغ محتوياتها في ملفfile ، 
وتريد استخدام تنسيق ثنائي لتجنب المشاكل المذكورة أعلاه معالتنسيقات النصية (JSON 
، CSV ، SQL). إذا كنت تستخدم Avro ، فيمكنك بسهولة إنشاء ملفمخطط Avro (في تمثيل 
JSON أعلاه) من المخطط العلائقي ، وترميز محتويات قاعدة البيانات باستخدام هذا 
المخطط ، وإلقاء كل ذلك في كائن Avroملف الحاوية [ 25]. تقوم بإنشاء مخطط سجل لكل 
جدول قاعدة بيانات ولكل منهايصبح العمود حقلاً في هذا السجل. يتم تعيين اسم العمود 
في قاعدة البيانات إلى ملفاسم الحقل في Avro.الآن ، إذا تغير مخطط قاعدة البيانات 
(على سبيل المثال ، يحتوي الجدول على عمود واحد مضاف وتمت إزالة عمود واحد) ، ما 
عليك سوى إنشاء مخطط Avro جديد من البيانات المحدثة‐مخطط قاعدة البيانات وتصديرها 
في مخطط Avro الجديد. عملية تصدير البيانات تفعل ذلكلا تحتاج إلى الالتفات إلى 
تغيير المخطط - يمكنه ببساطة تنفيذ المخططالتحويل في كل مرة يتم تشغيلها. أي شخص 
يقرأ ملفات البيانات الجديدة سيرى أن ملفتم تغيير حقول السجل ، ولكن نظرًا لتحديد 
الحقول بالاسم ، فإنلا يزال من الممكن مطابقة مخطط الكاتب المحدّث مع مخطط القارئ 
القديم.122 | الفصل الرابع: الترميز والتطور

      صفحة 145
على النقيض من ذلك ، إذا كنت تستخدم Thrift أو Protocol Buffers لهذا الغرض ، 
الحقلمن المحتمل أن يتم تعيين العلامات يدويًا: في كل مرة يكون مخطط قاعدة 
البياناتالتغييرات ، سيتعين على المسؤول تحديث التعيين يدويًا من البيانات‐أسماء 
الأعمدة الأساسية لعلامات الحقل. (قد يكون من الممكن أتمتة هذا ، ولكنيجب أن يكون 
منشئ المخطط حريصًا جدًا على عدم تعيين حقل مستخدم سابقًاالعلامات.) لم يكن هذا 
النوع من المخططات التي تم إنشاؤها ديناميكيًا هدفًا تصميميًا لـالتوفير أو مخازن 
البروتوكول ، بينما كان لـ Avro.توليد الكود واللغات المكتوبة ديناميكيًاتعتمد 
المخازن المؤقتة للتوفير والبروتوكول على إنشاء الكود: بعد تحديد المخطط ،يمكنك 
إنشاء رمز يقوم بتنفيذ هذا المخطط بلغة برمجةاختيارك. هذا مفيد في اللغات المكتوبة 
بشكل ثابت مثل Java أو C ++ أو C # ،لأنه يسمح باستخدام هياكل فعالة في الذاكرة 
للبيانات التي تم فك تشفيرها ، ويسمح بفحص النوع والإكمال التلقائي في IDEs عند 
كتابة البرامج التي تصلهياكل البيانات.في لغات البرمجة المكتوبة ديناميكيًا مثل 
JavaScript أو Ruby أو Python ،لا توجد فائدة كبيرة في إنشاء الكود ، نظرًا لعدم 
وجود نوع وقت الترجمةالمدقق لإرضاء. غالبًا ما يكون إنشاء الكود أمرًا مستهجنًا في 
هذه اللغات ، منذ ذلك الحينوإلا فإنهم يتجنبون خطوة الامتثال الصريحة. علاوة على 
ذلك ، في حالة الديناميكيمخطط تم إنشاؤه cally (مثل مخطط Avro الذي تم إنشاؤه من 
جدول قاعدة البيانات) ،إنشاء الكود هو عقبة لا داعي لها للوصول إلى البيانات.يوفر 
Avro إنشاء رمز اختياريًا للغات البرمجة المكتوبة بشكل ثابت ،ولكن يمكن استخدامه 
أيضًا بدون أي إنشاء رمز. إذا كان لديك كائن يخدعtainer (الذي يدمج مخطط الكاتب) ، 
يمكنك ببساطة فتحه باستخدام ملف Avroمكتبة ، وانظر إلى البيانات بنفس الطريقة التي 
تنظر بها إلى ملف JSON. الملفهو وصف ذاتي لأنه يتضمن جميع البيانات الوصفية 
الضرورية.هذا مفيد بشكل خاص بالاقتران مع معالجة البيانات المكتوبة 
ديناميكيًا.غوغات مثل خنزير أباتشي [ 26]. في Pig ، يمكنك فقط فتح بعض ملفات Avro 
وبدء تشغيل ana‐تعذيبهم حتى دون التفكير في المخططات.مزايا المخططاتكما رأينا ، 
تستخدم كل من مخازن البروتوكول و Thrift و Avro مخططًا لوصف ثنائيتنسيق الترميز. 
لغات مخططهم أبسط بكثير من مخطط XML أومخطط JSON ، الذي يدعم قواعد تحقق أكثر 
تفصيلاً (على سبيل المثال ، "السلسلةيجب أن تتطابق قيمة هذا الحقل مع هذا التعبير 
العادي "أو" قيمة العدد الصحيح لهذايجب أن يكون الحقل بين 0 و 100 ”). كمخازن 
بروتوكول ، فإن التوفير و Avro أبسطللتنفيذ وأسهل في الاستخدام ، فقد نمت لدعم 
مجموعة واسعة إلى حد ما منلغات البرمجة.تنسيقات تشفير البيانات | 123

      الصفحة 146
إن الأفكار التي تستند إليها هذه الترميزات ليست جديدة بأي حال من الأحوال. 
فمثلا،لديهم الكثير من القواسم المشتركة مع ASN.1 ، وهي لغة تعريف مخطط كانت 
الأولىموحدة في عام 1984 [27 ]. تم استخدامه لتحديد بروتوكولات الشبكة المختلفة ، 
ولا يزال يستخدم التشفير الثنائي DER لتشفير شهادات SSL (X.509) ، على سبيل المثال 
[ 28].يدعم ASN.1 تطور المخطط باستخدام أرقام العلامات ، على غرار مخازن البروتوكول 
والتوفير [ 29]. ومع ذلك ، فهو أيضًا معقد للغاية وموثق بشكل سيئ ، لذا فإن ASN.1 
كذلكربما لا يكون اختيارًا جيدًا للتطبيقات الجديدة.تنفذ العديد من أنظمة البيانات 
أيضًا نوعًا من الملكية القائمة على التشفير الثنائيعلى المخططات. على سبيل المثال 
، تحتوي معظم قواعد البيانات العلائقية على بروتوكول شبكة يزيدوالتي يمكنك من 
خلالها إرسال استفسارات إلى قاعدة البيانات والحصول على الردود. تلك 
البروتوكولاتبشكل عام خاصة بقاعدة بيانات معينة ، ويوفر مورد قاعدة البيانات 
ملفبرنامج التشغيل (على سبيل المثال استخدام واجهات برمجة تطبيقات ODBC أو JDBC) 
الذي يقوم بفك تشفير الاستجابات من البيانات‐بروتوكول شبكة القاعدة في هياكل 
البيانات في الذاكرة.لذلك ، يمكننا أن نرى أنه على الرغم من تنسيقات البيانات 
النصية مثل JSON و XML و CSVتعتبر الترميزات الثنائية واسعة الانتشار القائمة على 
المخططات خيارًا قابلاً للتطبيق. لديهمعدد العقارات الجميلة:• يمكن أن تكون أكثر 
إحكاما من المتغيرات "الثنائية JSON" المختلفة ، منذ ذلك الحينيمكنهم حذف أسماء 
الحقول من البيانات المشفرة.• المخطط هو شكل قيم من الوثائق ، ولأن المخطط هومطلوب 
لفك التشفير ، يمكنك التأكد من أنه محدث (بينما يدويًاقد تتباعد الوثائق المحفوظة 
بسهولة عن الواقع).• يسمح لك الاحتفاظ بقاعدة بيانات المخططات بالتحقق من الوصول 
إلى الأمام والخلفتتغير صلاحية مخطط قاعدة البيانات ، قبل نشر أي شيء.• بالنسبة 
لمستخدمي لغات البرمجة المكتوبة بشكل ثابت ، القدرة على إنشاء التعليمات البرمجيةمن 
المخطط مفيد ، لأنه يتيح التحقق من النوع في وقت الترجمة.باختصار ، يسمح تطور 
المخطط بنفس النوع من المرونة مثل المخططات /توفر قواعد بيانات JSON المخطط عند 
قراءتها (راجع "مرونة المخطط في المستندmodel "في الصفحة 39 ) ، مع توفير ضمانات 
أفضل حول بياناتك والرهان‐أدوات ثالثًا.طرق تدفق البياناتقلنا في بداية هذا الفصل 
أنه كلما أردت إرسال بعض البيانات إلىعملية أخرى لا تشارك بها الذاكرة - على سبيل 
المثال ، في أي وقتتريد إرسال البيانات عبر الشبكة أو كتابتها إلى ملف - فأنت بحاجة 
إلى ترميزها كملفتسلسل البايت. ثم ناقشنا مجموعة متنوعة من الترميزات المختلفة 
للقيام بذلك.تحدثنا عن التوافق الأمامي والخلفي ، وهو أمر مهم للتطور‐القدرة (جعل 
التغيير سهلاً من خلال السماح لك بترقية أجزاء مختلفة من نظامك124 | الفصل الرابع: 
الترميز والتطور

      الصفحة 147
بشكل مستقل ، وعدم الاضطرار إلى تغيير كل شيء مرة واحدة). التوافق هو علاقةالعلاقة 
بين عملية ترميز البيانات وعملية أخرى تقوم بفك التشفيرهو - هي.هذه فكرة مجردة إلى 
حد ما - هناك العديد من الطرق التي يمكن أن تتدفق بها البيانات من محترف واحد‐عبء 
لآخر. من يقوم بترميز البيانات ومن يقوم بفك تشفيرها؟ في بقية هذا الفصلسنقوم 
بتفكيك بعض الطرق الأكثر شيوعًا حول كيفية تدفق البيانات بين العمليات:• عبر قواعد 
البيانات (انظر "تدفق البيانات عبر قواعد البيانات" في الصفحة 125) ،• عبر 
المكالمات إلى الخدمات (انظر "تدفق البيانات عبر الخدمات: REST و RPC" في الصفحة 
127) ،و• عبر تمرير الرسائل غير المتزامن (انظر "تدفق بيانات تمرير الرسائل" في 
الصفحة 132).تدفق البيانات من خلال قواعد البياناتفي قاعدة البيانات ، تقوم العملية 
التي تكتب إلى قاعدة البيانات بترميز البيانات ، بينما تقوم عملية الكتابة على 
قاعدة البيانات بتشفيرcess الذي يقرأ من قاعدة البيانات بفك تشفيره. قد تكون هناك 
عملية واحدة فقطالوصول إلى قاعدة البيانات ، وفي هذه الحالة يكون القارئ مجرد إصدار 
لاحق من نفس الشيءالعملية - في هذه الحالة يمكنك التفكير في تخزين شيء ما في قاعدة 
البيانات على أنه إرسالرسالة إلى نفسك في المستقبل .من الواضح أن التوافق مع 
الإصدارات السابقة ضروري هنا ، وإلا فلن تكون نفسك في المستقبل كذلكقادر على فك ما 
كتبته سابقا.بشكل عام ، من الشائع أن تقوم عدة عمليات مختلفة بالوصول إلى قاعدة 
بيانات علىنفس الوقت. قد تكون هذه العمليات عدة تطبيقات أو خدمات مختلفة ، أوقد 
تكون ببساطة عدة حالات من نفس الخدمة (تعمل بالتوازي مع scalالقدرة أو تحمل الخطأ). 
في كلتا الحالتين ، في بيئة يوجد فيها التطبيقالتغيير ، فمن المحتمل أن بعض 
العمليات التي تصل إلى قاعدة البيانات ستعمل بشكل أحدثكود وبعضها سيعمل كود قديم - 
على سبيل المثال لأن الإصدار الجديد هويتم نشرها حاليًا في ترقية متجددة ، لذلك تم 
تحديث بعض الحالاتبينما لم يفعل الآخرون بعد.هذا يعني أنه يمكن كتابة قيمة في قاعدة 
البيانات بواسطة إصدار أحدث منالشفرة ، ثم تمت قراءتها لاحقًا بواسطة إصدار أقدم من 
الكود الذي لا يزال قيد التشغيل.وبالتالي ، غالبًا ما يكون التوافق مع التوجيه 
مطلوبًا لقواعد البيانات.ومع ذلك ، هناك مشكلة إضافية. لنفترض أنك أضفت حقلاً إلى 
مخطط السجل ، وأحدث رمز يكتب قيمة لهذا الحقل الجديد إلى قاعدة البيانات. في وقت 
لاحق ، من كبار السنإصدار الكود (الذي لا يعرف بعد عن الحقل الجديد) يقرأ السجل 
،يقوم بتحديثه وإعادة كتابته. في هذه الحالة ، عادة ما يكون السلوك المرغوب 
فيهالشفرة القديمة للحفاظ على الحقل الجديد سليمًا ، على الرغم من أنه لا يمكن 
تفسيره.تدعم تنسيقات التشفير التي تمت مناقشتها أعلاه مثل هذا الحفاظ على الحقول 
غير المعروفة ،لكن في بعض الأحيان تحتاج إلى الاهتمام على مستوى التطبيق ، كما هو 
موضح فيطرق تدفق البيانات | 125

      الصفحة 148
v. باستثناء MySQL ، التي غالبًا ما تعيد كتابة جدول كامل على الرغم من أنه ليس 
ضروريًا تمامًا ، مثل الرجال‐مشي في "مرونة المخطط في نموذج المستند" في الصفحة 39 
.الشكل 4-7 . على سبيل المثال ، إذا قمت بفك تشفير قيمة قاعدة بيانات إلى كائنات 
نموذج في ملفالتطبيق ، ثم إعادة ترميز هذه الكائنات النموذجية لاحقًا ، فقد يتم فقد 
الحقل غير المعروففي عملية الترجمة تلك. حل هذه ليست مشكلة صعبة ، كل ما عليك فعله 
هو حل هذه المشكلةعلى علم بذلك.شخص من الدرجة العامة {سلسلة خاصة userName ؛رقم 
مفضل طويل خاصقائمة خاصة <String> الاهتمامات ؛// حاصل على وضعية ...}الشخص الشخص = 
db.read (…) ؛person.setFavoriteNumber (42) ؛db.write (person.toJSON ()) 
؛{"userName": "مارتن" ،"favournumber": 1337 ،"الاهتمامات": ["القرصنة"] ،"عنوان 
URL للصور": "http: //…"}{"userName": "مارتن" ،"رقم مفضل": 42 ،"الاهتمامات": 
["القرصنة"]}اقرأ وفك الشفرةفي كائن نموذجيالتحديث وإعادة الترميزواكتب مرة 
أخرىالإصدار القديم من الكود (لا يعرفحول حقل photoURL)البيانات مكتوبة بنسخة جديدة 
من التعليمات البرمجية(بما في ذلك حقل photoURL الجديد)تم فقد قيمة حقل 
photoURLDBDBالشكل 4-7. عندما يقوم إصدار أقدم من التطبيق بتحديث البيانات المكتوبة 
مسبقًابواسطة إصدار أحدث من التطبيق ، قد تفقد البيانات إذا لم تكن حريصًا.قيم 
مختلفة مكتوبة في أوقات مختلفةتسمح قاعدة البيانات عمومًا بتحديث أي قيمة في أي 
وقت. هذا يعني ذاكفي قاعدة بيانات واحدة ، قد يكون لديك بعض القيم التي تمت كتابتها 
خمسة مليليقبل ثوانٍ ، وبعض القيم التي كُتبت قبل خمس سنوات.عند نشر إصدار جديد من 
التطبيق الخاص بك (من تطبيق من جانب الخادم ، علىعلى الأقل) ، يمكنك استبدال 
الإصدار القديم بالكامل بالإصدار الجديد في غضون بضعة أيامدقائق. لا ينطبق الشيء 
نفسه على محتويات قاعدة البيانات: ستظل البيانات القديمة على حالهاهناك ، في 
الترميز الأصلي ، ما لم تكن قد أعدت كتابته بشكل صريح منذ ذلك الحين. هذهيتم تلخيص 
الملاحظة في بعض الأحيان على أنها تدوم أطول من رمز البيانات .من المؤكد أن إعادة 
كتابة ( ترحيل ) البيانات إلى مخطط جديد أمر ممكن ، لكنها تكلفةsive شيء تفعله على 
مجموعة بيانات كبيرة ، لذلك تتجنب معظم قواعد البيانات ذلك إن أمكن. معظم ريلايتسمح 
قواعد البيانات المؤقتة بإجراء تغييرات بسيطة على المخطط ، مثل إضافة عمود جديد 
بامتدادقيمة افتراضية خالية ، دون إعادة كتابة البيانات الموجودة. v عند قراءة صف 
قديم ، فإن ملفتقوم قاعدة البيانات بتعبئة القيم الخالية لأي أعمدة مفقودة من 
البيانات المشفرة في126 | الفصل الرابع: الترميز والتطور

      الصفحة 149
القرص. تستخدم قاعدة بيانات Espresso في قاعدة بيانات LinkedIn Avro للتخزين ، مما 
يسمح لها بالاستخدامقواعد تطور مخطط Avro [23 ].وهكذا يسمح تطور المخطط لقاعدة 
البيانات بأكملها بالظهور كما لو تم ترميزها بامتدادمخطط واحد ، على الرغم من أن 
التخزين الأساسي قد يحتوي على سجلات مشفرة بامتدادإصدارات تاريخية مختلفة من 
المخطط.تخزين أرشيفيةربما تأخذ لقطة من قاعدة البيانات الخاصة بك من وقت لآخر ، 
لنقل للنسخ الاحتياطي.يطرح أو للتحميل في مستودع البيانات (انظر "تخزين البيانات" 
في الصفحة 88 ). فيفي هذه الحالة ، سيتم عادةً ترميز ملف تفريغ البيانات باستخدام 
أحدث مخطط ، حتى إذا كان ملفاحتوى الترميز الأصلي في قاعدة البيانات المصدر على 
مزيج من إصدارات المخططمن عصور مختلفة. نظرًا لأنك تنسخ البيانات على أي حال ، 
يمكنك أيضًا ترميزهانسخة البيانات باستمرار.نظرًا لأن تفريغ البيانات مكتوب دفعة 
واحدة ، وبعد ذلك غير قابل للتغيير ، تنسيقات مثل Avroملفات حاوية الكائن مناسبة 
بشكل جيد. هذه أيضًا فرصة جيدة لتشفير البياناتبتنسيق عمودي سهل التحليلات مثل 
Parquet (راجع "Column com‐pression "في الصفحة 94 ).سنتحدث أكثر في الفصل العاشر 
عن استخدام البيانات في تخزين الأرشيف.تدفق البيانات من خلال الخدمات: REST و 
RPCعندما يكون لديك عمليات تحتاج إلى الاتصال عبر شبكة ، فهناك القليل منهاطرق 
مختلفة لترتيب هذا الاتصال. الترتيب الأكثر شيوعًا هولدينا اثنين من الأدوار: عملاء 
و الخوادم . تعرض الخوادم واجهة برمجة تطبيقات عبر الشبكة ،ويمكن للعملاء الاتصال 
بالخوادم لتقديم طلبات إلى واجهة برمجة التطبيقات هذه. APIيتعرض لها الخادم يُعرف 
باسم الخدمة .يعمل الويب بهذه الطريقة: يقدم العملاء (متصفحات الويب) طلبات إلى 
خوادم الويب ،جي GET طلبات تحميل HTML، CSS، وجافا سكريبت والصور وما إلى ذلك، وجعل 
وظيفةطلبات تقديم البيانات إلى الخادم. يتكون API من مجموعة موحدة من proto‐cols 
وتنسيقات البيانات (HTTP و URLs و SSL / TLS و HTML وما إلى ذلك). لأن متصفحات 
الويب ،توافق خوادم الويب ومؤلفو مواقع الويب في الغالب على هذه المعايير ، يمكنك 
استخدام أي منهامتصفح الويب للوصول إلى أي موقع (على الأقل من الناحية 
النظرية!).متصفحات الويب ليست هي النوع الوحيد من العملاء. على سبيل المثال ، تطبيق 
محلي يعمل على ملفيمكن للجهاز المحمول أو كمبيوتر سطح المكتب أيضًا تقديم طلبات 
الشبكة إلى الخادم ، ويمكن استخدام تطبيق JavaScript من جانب العميل يعمل داخل 
مستعرض ويبطلب XMLHttpRequest ليصبح عميل HTTP (تُعرف هذه التقنية باسم Ajax 
[30]).في هذه الحالة ، لا تكون استجابة الخادم عادةً بتنسيق HTML للعرض على الإنسان 
،ولكن بالأحرى بيانات في ترميز مناسب لمزيد من المعالجة من قبل العميل-رمز التطبيق 
الجانبي (مثل JSON). على الرغم من أنه يمكن استخدام HTTP كوسيلة نقلطرق تدفق 
البيانات | 127

      صفحة 150
البروتوكول ، واجهة برمجة التطبيقات المطبقة في الأعلى خاصة بالتطبيق ، والعميل 
ويجب أن يوافق الخادم على تفاصيل واجهة برمجة التطبيقات تلك.علاوة على ذلك ، يمكن 
أن يكون الخادم نفسه عميلاً لخدمة أخرى (على سبيل المثال ، شبكة ويب نموذجيةيعمل 
خادم التطبيق كعميل لقاعدة بيانات). غالبًا ما يستخدم هذا لتحليل تطبيق كبيرcation 
إلى خدمات أصغر حسب مجال الوظيفة ، بحيث تجعل خدمة واحدةطلب إلى شخص آخر عندما 
يتطلب بعض الوظائف أو البيانات من ذلك الخادم الآخرنائب. يُطلق على هذا النهج 
تقليديًا اسم العمارة الموجهة نحو الخدمة(SOA) ، تم تنقيحه وتغيير علامته التجارية 
مؤخرًا إلى هندسة الخدمات الدقيقة [ 31، 32].يتمثل أحد أهداف التصميم الرئيسية لمثل 
هذه البنية في تسهيل تغيير التطبيقوالمحافظة عليها من خلال جعل الخدمات قابلة للنشر 
والتطور بشكل مستقل. من أجل الإختبار-ple ، يجب أن تكون كل خدمة مملوكة لفريق واحد 
، ويجب أن يكون هذا الفريق قادرًا على ذلكإطلاق إصدارات جديدة من الخدمة بشكل متكرر 
، دون الحاجة إلى التنسيق معهافرق أخرى. بمعنى آخر ، يجب أن نتوقع الإصدارات 
القديمة والجديدة من الخوادم والعملاء ليتم تشغيلهم في نفس الوقت ، وبالتالي فإن 
تشفير البيانات المستخدم من قبل الخوادم ويجب أن يكون العملاء متوافقين عبر إصدارات 
واجهة برمجة تطبيقات الخدمة - بالضبط ما لدينانتحدث عنه في هذا الفصل.خدمات 
الويبعند استخدام HTTP كبروتوكول أساسي للتحدث إلى الخدمة ، يطلق عليه اسمخدمة 
الويب . ربما تكون هذه تسمية خاطئة طفيفة ، لأن خدمات الويب لا تُستخدم فقطعلى 
الويب ، ولكن في عدة سياقات مختلفة:1. تطبيق عميل يعمل على جهاز المستخدم (مثل 
التطبيق الأصلي على الهاتف المحمولأو تطبيق ويب JavaScript باستخدام Ajax) تقديم 
طلبات إلى خدمة أكثرHTTP. عادة ما تذهب هذه الطلبات عبر الإنترنت العام.2. خدمة 
واحدة تقدم طلبات إلى خدمة أخرى مملوكة لنفس المنظمة ،غالبًا ما يقع داخل نفس مركز 
البيانات ، كجزء من بنية SOA / الخدمات الدقيقة archi‐محاضرة. (أحيانًا يُطلق على 
البرنامج الذي يدعم هذا النوع من حالات الاستخدام اسم " الأوسط")وير .)3. خدمة 
واحدة تقدم طلبات إلى خدمة مملوكة لمؤسسة مختلفة ، وهي usu‐حليف عبر الإنترنت. 
يستخدم هذا لتبادل البيانات بين المنظمات المختلفةأنظمة الواجهة الخلفية. تتضمن هذه 
الفئة واجهات برمجة التطبيقات العامة التي يوفرها عبر الإنترنتالخدمات ، على سبيل 
المثال أنظمة معالجة بطاقات الائتمان ، أو OAuth للوصول المشتركلبيانات 
المستخدم.128 | الفصل الرابع: الترميز والتطور

      صفحة 151
السادس. حتى داخل كل معسكر هناك الكثير من الحجج. على سبيل المثال ، HATEOAS ( 
الوسائط التشعبية مثل المحركحالة التطبيق ) ، غالبًا ما يثير المناقشات 
[34].السابع. على الرغم من تشابه الاختصارات ، فإن SOAP ليس شرطًا لـ SOA. SOAP هي 
تقنية خاصة ،في حين أن الخدمية هي نهج عام تجاه أنظمة البناء.هناك طريقتان شائعتان 
لخدمات الويب: REST و SOAP . هم تقريبامتناقضة تمامًا من حيث الفلسفة ، وغالبًا ما 
تكون موضوع نقاش ساخنبين أنصارهم. السادسREST ليس بروتوكولًا ، ولكنه فلسفة تصميم 
تعتمد على المبادئمن HTTP [33، 34]. إنه يؤكد على تنسيقات البيانات البسيطة ، 
باستخدام عناوين URL لتحديد الهويةالموارد واستخدام ميزات HTTP للتحكم في ذاكرة 
التخزين المؤقت والمصادقة والمحتوىاكتب التفاوض. اكتسب REST شعبية مقارنة بـ SOAP ، 
على الأقل فيسياق تكامل الخدمات عبر المنظمات [35 ] وغالبا ما يرتبطمع الخدمات 
المصغرة [31 ]. API المصمم وفقًا لمبادئ REST هوتسمى RESTful .على النقيض من ذلك ، 
فإن SOAP هو بروتوكول قائم على XML لتقديم طلبات API للشبكة. السابععلى الرغم من 
استخدامه بشكل شائع عبر HTTP ، إلا أنه يهدف إلى أن يكون مستقلاً عنHTTP ويتجنب 
استخدام معظم ميزات HTTP. بدلا من ذلك ، فإنه يأتي مع مترامي الأطراف والعديد من 
المعايير المعقدة ذات الصلة ( إطار عمل خدمة الويب ، المعروف باسم WS- *)التي تضيف 
ميزات مختلفة [36].يتم وصف API الخاص بخدمة ويب SOAP باستخدام لغة قائمة على XML 
تسمىWSDL (يسمى RESTful المكافئ لـ WSDL Swagger [37 ]). WSDL يمكّن الكودالجيل ، 
بحيث يمكن للعميل الوصول إلى خدمة عن بعد باستخدام الفئات والطريقة 
المحليةالمكالمات (التي تم تشفيرها إلى رسائل XML وفك تشفيرها مرة أخرى بواسطة إطار 
العمل).هذا مفيد في لغات البرمجة المكتوبة بشكل ثابت ، ولكنه أقل فائدة في 
الديناميكيالمكتوبة (راجع "إنشاء الكود واللغات المكتوبة ديناميكيًا" في الصفحة 
123).نظرًا لأن WSDL لم يتم تصميمه ليكون قابلاً للقراءة من قِبل الإنسان ، كما أن 
رسائل SOAP غالبًا ما تكون كذلكمعقدًا في الإنشاء يدويًا ، يعتمد مستخدمو SOAP بشكل 
كبير على دعم الأداة والرمزالجيل و IDEs [ 38]. لمستخدمي لغات البرمجة غير 
المدعومةبواسطة بائعي SOAP ، يعد التكامل مع خدمات SOAP أمرًا صعبًا.على الرغم من 
أن SOAP وامتداداته المختلفة موحدة ظاهريًا ، إلا أنها تعمل بشكل متداخل‐غالبًا ما 
تؤدي القدرة بين تطبيقات البائعين المختلفة إلى حدوث مشكلات [39 ]. إلى عن علىكل 
هذه الأسباب ، على الرغم من استمرار استخدام SOAP في العديد من المؤسسات الكبيرة ، 
فقد انخفضغير صالح في معظم الشركات الصغيرة.استدعاءات الإجراءات عن بعد (RPC)خدمات 
الويب هي مجرد أحدث تجسيد لسلسلة طويلة من التقنيات لـتقديم طلبات واجهة برمجة 
التطبيقات عبر شبكة ، تلقى الكثير منها الكثير من الضجيج ولكن تم ذلكمشاكل خطيرة. 
Enterprise JavaBeans (EJB) واستدعاء أسلوب Java عن بعدطرق تدفق البيانات | 129

      صفحة 152
(RMI) مقصورة على Java. يقتصر DCOM على أنظمة Microsoft الأساسية. كوربا هو 
exces‐معقدة بشكل فردي ، ولا توفر توافقًا مع الإصدارات السابقة أو السابقة [40].كل 
هذه تستند إلى فكرة استدعاء الإجراء البعيد (RPC) ، والتي كانتمنذ السبعينيات [41 
]. يحاول RPC تقديم طلب لخدمة شبكة بعيدةيشبه استدعاء دالة أو طريقة في لغة البرمجة 
الخاصة بك ، في الداخلنفس العملية (وهذا ما يسمى شفافية الموقع ). على الرغم من أن 
هذا يبدو نقللا شيء في البداية ، النهج معيب جوهريًا [42 ، 43]. طلب الشبكة 
هومختلفة جدًا عن استدعاء الوظيفة المحلية:• يمكن التنبؤ باستدعاء الوظيفة المحلية 
، ويكون إما ناجحًا أو يفشل ، بناءً على ذلك فقطعلى المعلمات التي هي تحت سيطرتك. 
طلب الشبكة غير متوقع:قد يتم فقد الطلب أو الاستجابة بسبب مشكلة في الشبكة أو جهاز 
التحكم عن بعدقد تكون الآلة بطيئة أو غير متوفرة ، وهذه المشاكل خارج نطاقسيطرتك. 
مشاكل الشبكة شائعة ، لذا عليك توقعها ،على سبيل المثال عن طريق إعادة محاولة طلب 
فاشل.• يقوم استدعاء دالة محلية بإرجاع نتيجة ، أو طرح استثناء ، أو عدم القيام 
بذلك مطلقًايعود (لأنه يذهب في حلقة لا نهائية أو تعطل العملية). شبكةالطلب له 
نتيجة أخرى محتملة: قد يعود بدون نتيجة ، بسبب أمهلة . في هذه الحالة ، أنت ببساطة 
لا تعرف ما حدث: إذا لم تحصل على ملفاستجابة من الخدمة البعيدة ، ليس لديك طريقة 
لمعرفة ما إذا كانطلب من خلال أو لا. (نناقش هذا بمزيد من التفصيل فيالفصل 8.)• إذا 
قمت بإعادة محاولة طلب شبكة فاشل ، فقد يحدث أن الطلبات موجودةفي الواقع ، وفقط 
الردود تضيع. في هذه الحالة ، أعيدسيؤدي rying إلى تنفيذ الإجراء عدة مرات ، ما لم 
تقم ببناء ملفآلية لإلغاء المكررة ( idempotence ) في البروتوكول. الوظيفة 
المحليةالمكالمات ليس لديها هذه المشكلة.• في كل مرة تستدعي فيها وظيفة محلية ، 
عادة ما يستغرق الأمر نفس الوقت تقريبًا لتظهرجذاب. طلب الشبكة أبطأ بكثير من 
استدعاء الوظيفة ، ووقت الاستجابة الخاص بهمتغير أيضًا بشكل كبير: في الأوقات 
الجيدة ، قد يكتمل في أقل من ميلي ثانية ،وعند ازدحام الشبكة أو زيادة تحميل الخدمة 
عن بُعد ، قد يحدث ذلكيستغرق الأمر عدة ثوان للقيام بنفس الشيء بالضبط.• عند 
استدعاء دالة محلية ، يمكنك تمرير مراجعها (المؤشرات) بكفاءة إليهاكائنات في 
الذاكرة المحلية. عند إجراء طلب شبكة ، كل هذه المعلماتيجب ترميزها في تسلسل البايت 
الذي يمكن إرساله عبر الشبكة.لا بأس إذا كانت المعلمات بدائية مثل الأرقام أو 
السلاسل ، ولكن بسرعةتصبح مشكلة مع الأجسام الأكبر.• يمكن تنفيذ العميل والخدمة في 
لغة برمجة مختلفةguages ​​، لذلك يجب أن يترجم إطار عمل RPC أنواع البيانات من لغة 
واحدة إلىاخر. قد ينتهي الأمر بهذا الأمر بشكل قبيح ، حيث لا تتشابه الأنواع مع كل 
اللغات -تذكر مشاكل JavaScript مع الأرقام الأكبر من 2 53 ، على سبيل المثال 
(انظر130 | الفصل الرابع: الترميز والتطور

      صفحة 153
"JSON و XML والمتغيرات الثنائية" في الصفحة 110 ). هذه المشكلة غير موجودة في 
ملفعملية واحدة مكتوبة بلغة واحدة.كل هذه العوامل تعني أنه لا جدوى من محاولة إظهار 
الخدمة عن بُعديشبه إلى حد كبير عنصرًا محليًا في لغة البرمجة الخاصة بك ، لأنه 
أساسيتالي شيء مختلف. جزء من جاذبية REST هو أنه لا يحاول إخفاء الحقيقةأنه 
بروتوكول شبكة (على الرغم من أن هذا لا يبدو أنه يمنع الأشخاص من البناءمكتبات RPC 
أعلى REST).الاتجاهات الحالية لـ RPCعلى الرغم من كل هذه المشاكل ، فإن RPC لن 
تختفي. العديد من أطر RPC لهاتم إنشاؤه فوق جميع الترميزات المذكورة في هذا الفصل: 
على سبيل المثال ، Thriftو Avro يأتي مع دعم RPC مضمن ، gRPC هو تطبيق RPC 
باستخداممخازن البروتوكول ، يستخدم Finagle أيضًا Thrift ، ويستخدم Rest.li JSON 
عبر HTTP.هذا الجيل الجديد من أطر عمل RPC أكثر وضوحًا حول حقيقة أن جهاز التحكم عن 
بعدطلب يختلف عن استدعاء وظيفة محلية. على سبيل المثال ، يستخدم Finagle و 
Rest.liالآجلة ( وعود ) لتغليف الإجراءات غير المتزامنة التي قد تفشل. العقود 
الآجلة أيضاتبسيط المواقف التي تحتاج فيها إلى تقديم طلبات لخدمات متعددة بشكل 
متوازٍ ،ودمج نتائجهم [44 ]. يدعم gRPC التدفقات ، حيث تتكون المكالمة من لاطلب 
واحد واستجابة واحدة ، ولكن سلسلة من الطلبات والردود بمرور الوقت[45].توفر بعض أطر 
العمل هذه أيضًا اكتشاف الخدمة - أي السماح للعميل بذلكاكتشف عنوان IP ورقم المنفذ 
الذي يمكن أن يجد فيه خدمة معينة. سنقومالعودة إلى هذا الموضوع في "طلب التوجيه" في 
الصفحة 205.يمكن لبروتوكولات RPC المخصصة ذات تنسيق التشفير الثنائي تحقيق أداء 
أفضلمن شيء عام مثل JSON على REST. ومع ذلك ، فإن واجهة برمجة تطبيقات RESTful 
لديهامزايا أخرى مهمة: إنه مفيد للتجربة وتصحيح الأخطاء (يمكنك ذلكما عليك سوى 
تقديم طلبات إليه باستخدام مستعرض ويب أو أداة curl لسطر الأوامر ،بدون أي إنشاء 
رمز أو تثبيت برنامج) ، فهو مدعوم من قبل جميع الأجهزة الرئيسية‐تتدفق لغات ومنصات 
البرمجة ، وهناك نظام بيئي واسع من الأدوات(الخوادم ، ذاكرات التخزين المؤقت ، 
أرصدة التحميل ، الوكلاء ، الجدران النارية ، المراقبة ، أدوات التصحيح ، 
الاختبار‐أدوات جي ، إلخ).لهذه الأسباب ، يبدو أن REST هو النمط السائد لواجهات 
برمجة التطبيقات العامة. الرئيسيةينصب تركيز أطر عمل استدعاء الإجراء عن بُعد على 
الطلبات بين الخدمات التي تمتلكها نفس المنظمة ‐zation ، عادةً داخل نفس مركز 
البيانات.ترميز البيانات وتطورها لـ RPCمن أجل قابلية التطور ، من المهم أن يتم 
تغيير الخوادم وعملاء RPC ونشر بشكل مستقل. مقارنة بالبيانات المتدفقة من خلال 
قواعد البيانات (في آخرالقسم) ، يمكننا عمل افتراض مبسط في حالة تدفق البيانات من 
خلال servطرق تدفق البيانات | 131

      صفحة 154
ices: من المعقول أن نفترض أنه سيتم تحديث جميع الخوادم أولاً ، وجميع ملفاتعملاء 
ثانيا. وبالتالي ، فأنت تحتاج فقط إلى التوافق مع الطلبات وإعادة التوجيهالتوافق مع 
الردود.يتم توريث خصائص التوافق مع الإصدارات السابقة والأمامية لنظام RPCمن أي 
تشفير تستخدمه:• يمكن تطوير التوفير و gRPC (مخازن البروتوكول) و Avro RPC وفقًا 
لـقواعد التوافق لتنسيق الترميز المعني.• في SOAP ، يتم تحديد الطلبات والردود 
باستخدام مخططات XML. يمكن أن تكون هذهتطورت ، ولكن هناك بعض المزالق الدقيقة [46 
].• تستخدم RESTful APIs JSON بشكل شائع (بدون مخطط محدد رسميًا)للاستجابات ، 
ومعلمات طلب JSON أو URI المشفرة / المشفرة بالنموذج لـالطلبات. إضافة معاملات طلب 
اختيارية وإضافة حقول جديدة للاستجابةكائنات تعتبر عادة تغييرات تحافظ على 
التوافق.أصبح توافق الخدمة أكثر صعوبة بسبب حقيقة أن RPC غالبًا ما يستخدم 
للتواصلعبر الحدود التنظيمية ، لذلك غالبًا ما لا يمتلك مقدم الخدمة أيالسيطرة على 
عملائها ولا يمكنها إجبارهم على الترقية. وبالتالي ، التوافق يحتاجلفترة طويلة ، 
ربما إلى أجل غير مسمى. إذا كان كسر التوافقالتغيير مطلوب ، غالبًا ما ينتهي مزود 
الخدمة بالحفاظ على إصدارات متعددةمن خدمة API جنبًا إلى جنب.لا يوجد اتفاق حول 
كيفية عمل إصدارات واجهة برمجة التطبيقات ، أي كيف يمكن للعميل معرفةحدد إصدار API 
الذي تريد استخدامه [ 47]. بالنسبة لواجهات برمجة تطبيقات RESTful ، فهي 
شائعةالأساليب هي استخدام رقم إصدار في عنوان URL ، أو في رأس HTTP Accept.بالنسبة 
للخدمات التي تستخدم مفاتيح API لتحديد عميل معين ، هناك خيار آخر وهو التخزينإصدار 
API المطلوب للعميل على الخادم ، وللسماح باختيار هذا الإصدارتم التحديث من خلال 
واجهة إدارية منفصلة [48 ].تمرير رسالة تدفق البياناتلقد كنا نبحث في الطرق 
المختلفة لكيفية تدفق البيانات المشفرة من عملية واحدةإلى آخر. حتى الآن ، ناقشنا 
REST و RPC (حيث ترسل عملية واحدة طلبًاعبر الشبكة لعملية أخرى ، وتتوقع استجابة في 
أسرع وقت ممكن) ،وقواعد البيانات (حيث تكتب إحدى العمليات البيانات المشفرة وتقرأها 
عملية أخرىمرة أخرى في وقت ما في المستقبل).في هذا القسم الأخير ، سنلقي نظرة موجزة 
على أنظمة تمرير الرسائل غير المتزامنة ،التي تقع في مكان ما بين RPC وقواعد 
البيانات. إنها تشبه RPC في ذلكطلب العميل (عادة ما يسمى رسالة ) يتم تسليمه إلى 
عملية أخرى منخفضةوقت الإستجابة. إنها تشبه قواعد البيانات من حيث أن الرسالة لا 
يتم إرسالها عبر شبكة مباشرة‐اتصال العمل ، ولكنه يمر عبر وسيط يسمى وسيط الرسائل 
(ويسمى أيضًا a132 | الفصل الرابع: الترميز والتطور

      صفحة 155
قائمة انتظار الرسائل أو البرامج الوسيطة الموجهة للرسالة ) ، والتي تخزن الرسالة 
مؤقتًا‐إلي.يتمتع استخدام وسيط الرسائل بالعديد من المزايا مقارنةً بـ RPC 
المباشر:• يمكن أن يعمل كمخزن مؤقت إذا كان المستلم غير متوفر أو محمّل بشكل زائد ، 
وبالتاليتحسين موثوقية النظام ؛• يمكنه إعادة تسليم الرسائل تلقائيًا إلى عملية 
تعطلت ، وبالتالي قبلرسائل التنفيس من الضياع ؛• يتجنب المرسل الحاجة إلى معرفة 
عنوان IP ورقم المنفذ الخاص بـالمستلم (وهو أمر مفيد بشكل خاص في نشر "السحابة" حيث 
يكون افتراضيًاغالبًا ما تأتي الآلات وتذهب) ؛• يسمح بإرسال رسالة واحدة إلى عدة 
مستلمين.• يفصل منطقياً المرسل عن المستلم (المرسل ينشر فقطالرسائل ولا يهتم بمن 
يستهلكها).ومع ذلك ، فإن الاختلاف مقارنةً بـ RPC هو أن اتصال تمرير الرسائل 
هوعادةً في اتجاه واحد: لا يتوقع المرسل عادةً أن يتلقى ردًا على رسائله. هو - هيمن 
الممكن لعملية إرسال رد ، ولكن هذا عادة ما يتم على sepa‐قناة معدل. هذا ما يجعلها 
غير متزامنة : المرسل لا ينتظر mes‐حكيم ليتم تسليمها ، ولكن ببساطة يرسلها ثم ينسى 
ذلك.وسطاء الرسائلفي الماضي ، كان المشهد التجاري لوسطاء الرسائل يهيمن عليهبرامج 
الجوائز من قبل شركات مثل TIBCO و IBM WebSphere و WebMethods.في الآونة الأخيرة ، 
تم استخدام تطبيقات مفتوحة المصدر مثل RabbitMQ و ActiveMQ و Hor‐أصبحت netQ و NATS 
و Apache Kafka شائعة. سنقارنهم فيمزيد من التفاصيل في الفصل 11 .تختلف دلالات 
التسليم المفصلة حسب التنفيذ والتكوين ، ولكن بتنسيقبشكل عام ، يتم استخدام وسطاء 
الرسائل على النحو التالي: عملية واحدة ترسل رسالة إلى مسمىقائمة انتظار أو موضوع ، 
ويضمن الوسيط تسليم الرسالة إلى واحد أو أكثرالمستهلكين أو المشتركين في تلك 
القائمة أو الموضوع. يمكن أن يكون هناك العديد من المنتجين والعديد من المستهلكين 
حول نفس الموضوع.يوفر الموضوع تدفق بيانات أحادي الاتجاه فقط. ومع ذلك ، يمكن 
للمستهلك نشر نفسهالرسائل إلى موضوع آخر (حتى تتمكن من ربطها معًا ، كما سنرى في 
Chap‐ثالثًا 11) ، أو إلى قائمة انتظار الرد التي يستهلكها مرسل الرسالة 
الأصلية(السماح بتدفق بيانات الطلب والاستجابة ، على غرار RPC).لا يفرض وسطاء 
الرسائل عادةً أي نموذج بيانات معين - الرسالة فقطسلسلة من البايت ، مع بعض 
البيانات الوصفية ، بحيث يمكنك استخدام أي تنسيق ترميز. إذا كانطرق تدفق البيانات | 
133

      صفحة 156
الترميز متوافق مع الإصدارات السابقة والأمامية ، ولديك أكبر قدر من المرونة 
فيتغيير الناشرين والمستهلكين بشكل مستقل ونشرهم بأي ترتيب.إذا أعاد المستهلك نشر 
الرسائل إلى موضوع آخر ، فقد تحتاج إلى توخي الحذرالاحتفاظ بحقول غير معروفة ، لمنع 
المشكلة التي تم وصفها مسبقًا في سياققواعد بيانات (الشكل 4-7 ).أطر الممثلين 
الموزعةو النموذج الفاعل هو نموذج البرمجة لالتزامن في عملية واحدة. على الاصحمن 
التعامل مباشرة مع الخيوط (والمشاكل المرتبطة بظروف السباق ،القفل والمأزق) ، يتم 
تغليف المنطق في الجهات الفاعلة . كل ممثل يتواصل معالجهات الفاعلة الأخرى عن طريق 
إرسال واستقبال الرسائل غير المتزامنة. تسليم الرسالة هوغير مضمون: في سيناريوهات 
خطأ معينة ، ستفقد الرسائل. منذ كل ممثل proتوقف رسالة واحدة فقط في كل مرة ، فلا 
داعي للقلق بشأن سلاسل الرسائل ، وكل منهايمكن جدولة الفاعل بشكل مستقل من خلال 
الإطار.في أطر الممثلين الموزعة ، يتم استخدام نموذج البرمجة هذا لتوسيع نطاق 
التطبيق.نشوئها عبر عقد متعددة. يتم استخدام نفس آلية تمرير الرسائل ، بغض 
النظرسواء كان المرسل والمستلم على نفس العقدة أو على عقد مختلفة. إذا كانوا 
كذلكعلى العقد المختلفة ، يتم تشفير الرسالة بشفافية في تسلسل بايت ، يتم 
إرسالهاعبر الشبكة ، وفك الشفرة على الجانب الآخر.تعمل شفافية الموقع بشكل أفضل في 
نموذج الممثل عنها في RPC ، لأن الفاعليفترض النموذج بالفعل أنه قد يتم فقد الرسائل 
، حتى خلال عملية واحدة.على الرغم من أن وقت الاستجابة عبر الشبكة من المحتمل أن 
يكون أعلى منه في نفس العملية ،هناك قدر أقل من عدم التوافق الأساسي بين الاتصال 
المحلي والاتصال عن بعدعند استخدام نموذج الممثل.يدمج إطار عمل الممثل الموزع بشكل 
أساسي وسيط الرسائل والممثلنموذج البرمجة في إطار واحد. ومع ذلك ، إذا كنت تريد 
تنفيذ Roll‐مع ترقيات تطبيقك المستند إلى الممثلين ، لا يزال عليك القلق بشأن 
التقدموالتوافق مع الإصدارات السابقة ، حيث يمكن إرسال الرسائل من عقدة تقوم بتشغيل 
الملف الجديدالإصدار إلى عقدة تعمل بالإصدار القديم ، والعكس صحيح.تتعامل ثلاثة أطر 
عمل للممثلين الموزعين مع هذا على النحو التالي:• يستخدم Akka تسلسل Java المدمج 
افتراضيًا ، والذي لا يوفر إعادة توجيهأو التوافق مع الإصدارات السابقة. ومع ذلك ، 
يمكنك استبداله بشيء مثل Pro‐tocol Buffers ، وبالتالي اكتساب القدرة على القيام 
بتحديثات متدرجة [ 49].• تستخدم أورليانز بشكل افتراضي تنسيقًا مخصصًا لترميز 
البيانات لا يدعمهنشر الترقية المتداول ؛ لنشر نسخة جديدة من التطبيق الخاص بك ، 
أنتبحاجة إلى إنشاء مجموعة جديدة ، ونقل حركة المرور من الكتلة القديمة إلى 
المجموعة الجديدة ، وأغلق القديم [ 50، 51]. كما هو الحال مع Akka ، يمكن لملحقات 
التسلسل المخصصةيستخدم.134 | الفصل الرابع: الترميز والتطور

      الصفحة 157
• في Erlang OTP ، من الصعب جدًا إجراء تغييرات على مخططات التسجيل (على الرغم 
منالنظام يحتوي على العديد من الميزات المصممة للتوافر العالي) ؛ ترقيات 
المتداولممكنة ولكنها تحتاج إلى التخطيط بعناية [ 52 ]. خرائط تجريبية جديدةنوع 
البيانات (بنية تشبه JSON ، تم تقديمها في Erlang R17 في عام 2014) قد تصنعهذا أسهل 
في المستقبل [ 53].ملخصفي هذا الفصل نظرنا في عدة طرق لتحويل هياكل البيانات إلى 
بايت على ملفشبكة أو بايت على القرص. لقد رأينا كيف أن تفاصيل هذه الترميزات لا 
تؤثر فقطكفاءتها ، ولكن الأهم من ذلك أيضًا بنية التطبيقات وخيارات لنشرها.على وجه 
الخصوص ، تحتاج العديد من الخدمات إلى دعم الترقيات المتجددة ، حيث يوجد إصدار جديد 
منيتم نشر الخدمة تدريجيًا إلى بضع عقد في وقت واحد ، بدلاً من نشرها للجميعالعقد 
في وقت واحد. تسمح الترقيات المتدرجة بإصدار إصدارات جديدة من الخدمةبدون توقف 
(وبالتالي ، تشجيع الإصدارات الصغيرة المتكررة على الإصدارات الكبيرة النادرة) 
،وجعل عمليات النشر أقل خطورة (مما يسمح باكتشاف الإصدارات المعيبة وإدارتهاقبل أن 
تؤثر على عدد كبير من المستخدمين). هذه الخصائص مفيدة بشكل كبيرللمحاكمة ل تطورية ، 
وسهولة إجراء تغييرات على الطلب.أثناء الترقيات المتدرجة ، أو لأسباب أخرى مختلفة ، 
يجب أن نفترض ذلك الاختلافتقوم العقد بتشغيل إصدارات مختلفة من كود تطبيقنا. 
وبالتالي ، فمن المهميتم ترميز جميع البيانات المتدفقة حول النظام بطريقة توفر 
العودةالتوافق مع وارد (الكود الجديد يمكنه قراءة البيانات القديمة) والتوافق مع 
التوجيه (الكود القديميمكنه قراءة البيانات الجديدة).ناقشنا العديد من تنسيقات 
ترميز البيانات وناقشنا خاصية التوافق الخاصة بها.erties:• تقتصر الترميزات الخاصة 
بلغة البرمجة على برنامج واحد‐ming ، وغالبًا ما تفشل في توفير التوافق الأمامي 
والخلفي.• تنتشر التنسيقات النصية مثل JSON و XML و CSV وتتوافق معها‐تعتمد المدينة 
على كيفية استخدامها. لديهم لغات مخطط اختيارية ، والتيتكون مفيدة في بعض الأحيان ، 
وفي بعض الأحيان تشكل عائقًا. هذه التنسيقات إلى حد ماغامضة بشأن أنواع البيانات ، 
لذلك عليك توخي الحذر مع أشياء مثل الأرقام وسلاسل ثنائية.• التنسيقات الثنائية 
المعتمدة على المخطط مثل Thrift و Protocol Buffers و Avro allow comميثاق ، تشفير 
فعال مع توافق محدد بوضوح للأمام والخلفدلالات. يمكن أن يكون المخطط مفيدًا للتوثيق 
وإنشاء التعليمات البرمجية بتنسيقاللغات المكتوبة بشكل ثابت. ومع ذلك ، فإن لديهم 
الجانب السلبي الذي يجب أن تكون عليه البياناتتم فك شفرته قبل أن يصبح قابلاً 
للقراءة من قبل الإنسان.ملخص | 135

      صفحة 158
ناقشنا أيضًا العديد من أنماط تدفق البيانات ، مع توضيح السيناريوهات المختلفة التي 
يتم فيهاترميزات البيانات مهمة:• قواعد البيانات ، حيث تقوم عملية الكتابة إلى 
قاعدة البيانات بترميز البيانات ، وعملية القراءة من قاعدة البيانات بفك تشفيرها.• 
RPC و REST APIs ، حيث يقوم العميل بترميز الطلب ، يقوم الخادم بفك تشفيرطلب 
استجابة وتشفيرها ، ويقوم العميل في النهاية بفك تشفير الاستجابة.• تمرير الرسائل 
غير المتزامن (باستخدام وسطاء الرسائل أو الممثلين) ، حيث العقدالتواصل عن طريق 
إرسال الرسائل التي تم تشفيرها من قبل المرسلوفك الشفرة من قبل المستلم.يمكننا أن 
نستنتج أنه مع القليل من العناية ، التوافق مع الإصدارات السابقة / للأمام 
والمتداولالترقيات قابلة للتحقيق تمامًا. نرجو أن يكون تطور تطبيقك سريعًا ويصبح 
لديكتكون عمليات النشر متكررة.مراجع[1 ] "مواصفات Java Object Serialization "، 
docs.oracle.com ، 2010.[2 ] "توثيق واجهة برمجة تطبيقات Ruby 2.2.0، "ruby-doc.org 
، كانون الأول (ديسمبر) 2014.[3 ] "الدليل المرجعي لمكتبة Python 3.4.3 القياسية ، 
"docs.python.org ، فبراير2015.[4 ] "البرمجيات / كريو، ”github.com ، تشرين الأول 
(أكتوبر) 2014.[5] " CWE-502: إلغاء تسلسل البيانات غير الموثوق بها، "عدد نقاط 
الضعف الشائعة‐، cwe.mitre.org ، 30 يوليو 2014.[6] ستيف برين: " ماذا تفعل 
WebLogic و WebSphere و JBoss و Jenkins و OpenNMS والتطبيق الخاص بك لديه القواسم 
المشتركة؟ هذا الضعف ، "foxglovesecurity.com ، 6تشرين الثاني (نوفمبر) 2015.[7 ] 
باتريك ماكنزي: "ما تعنيه مشكلة أمان ريلز لبدء تشغيلك، "كالوzumeus.com ، 31 يناير 
2013.[8 ] عيشي سميث: "jvm-serializers wiki "github.com ، تشرين الثاني (نوفمبر) 
2014.[9 ] "يعد XML نسخة رديئة من تعبيرات S.، "c2.com wiki.[10] مات هاريس: " 
Snowflake: تحديث وبعض المعلومات المهمة جدًا ،"بريد إلكتروني إلى القائمة البريدية 
لـ Twitter Development Talk ، 19 أكتوبر 2010.[11 ] شودي (ساندي) جاو ، و CM 
Sperberg-McQueen ، و Henry S Thompson: "XMLمخطط 1.1 ، "توصية W3C ، مايو 2001.[12 
] فرانسيس جاليج ، وكريس زيب ، وجاري كورت: "مخطط JSON، "إنترنت IETF-مسودة ، 
فبراير 2013.136 | الفصل الرابع: الترميز والتطور

      الصفحة 159
[13 ] ياكوف شافرانوفيتش:RFC 4180: التنسيق العام ونوع MIME لـملفات القيم المفصولة 
بفواصل (CSV) ، أكتوبر 2005.[14] “ مواصفات MessagePack، "msgpack.org.[15] مارك 
سلي ، وأديتيا أغاروال ، ومارك كوياتكوفسكي: " التوفير: عرض قابل للتطوير-تنفيذ 
خدمات اللغة ، تقرير فني لـ Facebook ، أبريل 2007.[16] " Protocol Buffers 
Developer Guide " ، Google Inc. ، developer.google.com.[17] إيغور أنيشينكو: " 
Thrift vs Protocol Buffers vs Avro - Biased Comparison ،"slideshare.net ، 17 
سبتمبر 2012.[18] " مصفوفة الميزات التي تدعمها كل مكتبة لغة فردية 
،"wiki.apache.org.[19 ] مارتن كليبمان: "تطور المخطط في Avro والمخازن المؤقتة 
للبروتوكول والتوفير ، "martin.kleppmann.com ، 5 ديسمبر 2012.[20] " Apache Avro 
1.7.7 الوثائق، avro.apache.org ، تموز (يوليو) 2014.[21] دوغ كاتنج وتشاد والترز 
وجيم كيليرمان وآخرون: " [اقتراح] برنامج فرعي جديدجيكت: أفرو، "موضوع البريد 
الإلكتروني في القائمة البريدية العامة hadoop ، mail-archives.apache.org ،أبريل 
2009.[22 ] توني هور: "مراجع لاغية: خطأ المليار دولار، "في QCon London ،مارس 
2009.[23] Aditya Auradkar و Tom Quiggle: " تقديم Espresso - LinkedIn الرائجمخزن 
المستندات الموزع الجديد، "engineering.linkedin.com ، 21 كانون الثاني (يناير) 
2015.[24] جاي كريبس: " استخدام أباتشي كافكا: دليل عملي لبناء جدولمنصة البيانات 
(الجزء 2) "blog.confluent.io ، 25 شباط (فبراير) 2015.[25] جوين شابيرا: " مشكلة 
إدارة المخططات ،" radar.oreilly.com ، 4تشرين الثاني (نوفمبر) 2014.[26] " Apache 
Pig 0.14.0 Documentation " ، pig.apache.org ، تشرين الثاني (نوفمبر) 2014.[27] 
جون لارماوث: ASN.1 مكتمل. مورجان كوفمان ، 1999. ISBN:0-12233-435-3[28] راسل 
هوسلي ووارويك فورد وتيم بولك وديفيد سولو: " RFC 2459: الإنترنتX.509 Public Key 
Infrastructure: الشهادة وملف تعريف CRL، "شبكة عمل IETF‐مجموعة جي ، مسار المعايير 
، يناير 1999.[29] ليف والكين: " سؤال: القابلية للتوسعة وإسقاط الحقول " ، 
lionet.info ، 21 سبتمبر‐نوفمبر 2010.[30 ] جيسي جيمس جاريت: "Ajax: نهج جديد 
لتطبيقات الويب ، "التكيفي"path.com ، 18 فبراير 2005.ملخص | 137

      الصفحة 160
[31] سام نيومان: بناء الخدمات المصغرة . O'Reilly Media ، فبراير 2015. 
ISBN:978-1-4919-5035-7[32 ] كريس ريتشاردسون: "الخدمات المصغرة: تحليل التطبيقات 
لقابلية النشروقابلية التوسع، ”infoq.com ، 25 أيار (مايو) 2014.[33] روي توماس 
فيلدينغ: " الأساليب المعمارية والتصميم القائم على الشبكةمعماريات البرمجيات ، 
"أطروحة دكتوراه ، جامعة كاليفورنيا ، ايرفين ، 2000.[34 ] روي توماس فيلدينغ: "يجب 
أن تكون واجهات برمجة تطبيقات REST قائمة على النص التشعبي، "roy.gbiv.com ، 
20أكتوبر 2008.[35] " REST in peace ، SOAP " ، royal.pingdom.com ، 15 أكتوبر 
2010.[36] " معايير خدمات الويب اعتبارًا من الربع الأول من عام 2007، innoq.com ، 
شباط (فبراير) 2007.[37] “ مواصفات وثائق Swagger RESTful API، swagger.io ، 8 
سبتمبر2014.[38 ] بيت لاسي:حرف S يعني Simple "، wanderingbarque.com ، 15 
نوفمبر2006.[39 ] ستيفان تيلكوف:مقابلة: بيت لاسي ينتقد خدمات الويب، "infoq.com ، 
12كانون الأول (ديسمبر) 2006.[40 ] ميتشي هينينج: "صعود وسقوط كوربا، " قائمة 
انتظار ACM ، المجلد 4 ، العدد5 ، الصفحات 28–34 ، يونيو 2006. doi: 10.1145 / 
1142031.1142044[41] أندرو دي بيرل وبروس جاي نيلسون: " تنفيذ الإجراء عن 
بعدالمكالمات ، " معاملات ACM على أنظمة الكمبيوتر (TOCS) ، المجلد 2 ، العدد 1 ، 
الصفحات39-59 ، فبراير 1984. دوى: 10.1145 / 2080.357392[42] جيم والدو ، وجيف 
وايانت ، وآن وولراث ، وسام كيندال: " ملاحظة على Dis‐تحصيل الحوسبة ، "صن 
مايكروسيستمز لابوراتوريز ، إنك ، تقرير تقنيTR-94-29 ، نوفمبر 1994.[43 ] ستيف 
فينوسكي: "الراحة على الصواب ، " IEEE Internet Computing ، vol‐ume 12، number 4، 
pages 89–92، July 2008. دوى: 10.1109 / MIC.2008.75[44 ] ماريوس إريكسن: "الخادم 
الخاص بك كوظيفة، "في ورشة العمل السابعة حول البرمجةاللغات وأنظمة التشغيل(PLOS) ، 
نوفمبر 2013.دوى:10.1145 / 2525528.2525538[45] “ grpc- التوثيق المشترك، "Google 
Inc. ، github.com ، شباط (فبراير) 2015.[46 ] أديتيا نارايان وإرينا سينغ: "تصميم 
مواقع الويب المتوافقة وإصدارهاخدمات، "ibm.com ، 28 مارس 2007.[47] Troy Hunt: " 
إصدار API الخاص بك خاطئ ، ولهذا قررت أن أفعل ذلك 3طرق خاطئة مختلفة "، موقع 
troyhunt.com ، 10 شباط (فبراير) 2014.138 | الفصل الرابع: الترميز والتطور

      الصفحة 161
[48] " ترقيات واجهة برمجة التطبيقات ،" Stripe، Inc. ، نيسان (أبريل) 2015.[49 ] 
جوناس بونير:قم بالترقية في مجموعة عكا، "إرسال بريد إلكتروني إلى القائمة البريدية 
لمستخدمي عكا ، 28اغسطس 2013.[50] فيليب أ برنشتاين ، وسيرجي بيكوف ، وآلان جيلر ، 
وغابرييل كليوت ، ويورجن ثيلين:"أورليانز: الفاعلون الظاهريون الموزعون من أجل 
البرمجة وقابلية التوسع،" مايكروسوفتالتقرير الفني البحثي MSR-TR-2014-41 ، مارس 
2014.[51] “ Microsoft Project Orleans Documentation، "أبحاث Microsoft ، 
dotnet.git‐hub.io ، 2015.[52 ] ديفيد ميرسر ، وشون هند ، وينسو تشين ، وريتشارد 
أوكيف: "مبتدئ:تحديث هياكل البيانات ، "موضوع البريد الإلكتروني على القائمة 
البريدية لأسئلة إرلانغ ، أكتوبر2007.[53] فريد هيبرت: " Postscript: Maps " ، 
learnyousomeerlang.com ، 9 أبريل 2014.ملخص | 139

      الصفحة 162


      صفحة 163
الجزء الثانيالبيانات الموزعةلتكنولوجيا ناجحة ، يجب أن يكون للواقع الأسبقية على 
العلاقات العامةلا يمكن خداع الطبيعة.—ريتشارد فاينمان ، روجرز كوميزوتقرير سيون 
(1986)في الجزء الأول من هذا الكتاب ، ناقشنا جوانب أنظمة البيانات التي تنطبق 
عندما تكون البياناتمخزنة على جهاز واحد. الآن ، في الجزء الثاني ، ننتقل إلى مستوى 
أعلى ونسأل: ماذا يحدث؟أقلام إذا كانت هناك آلات متعددة متورطة في تخزين واسترجاع 
البيانات؟هناك العديد من الأسباب التي قد تجعلك ترغب في توزيع قاعدة بيانات عبر 
متعددآلات التنوير القائل:قابلية التوسعإذا كان حجم بياناتك أو حمل القراءة أو حمل 
الكتابة ينمو أكبر من جهاز واحديمكنك التعامل معها ، فمن المحتمل أن تتمكن من توزيع 
الحمل عبر أجهزة متعددة.تحمل الخطأ / التوافر العاليإذا كان التطبيق الخاص بك يحتاج 
إلى مواصلة العمل ، حتى لو كان هناك جهاز واحد (أو عدةالأجهزة ، أو الشبكة ، أو 
مركز البيانات بأكمله) معطلة ، يمكنك استخدام متعددآلات التنوير القائل لمنحك 
التكرار. عندما يفشل أحدهم ، يمكن لشخص آخر أن يتولى زمام الأمور.وقت الإستجابةإذا 
كان لديك مستخدمون من جميع أنحاء العالم ، فقد ترغب في الحصول على خوادم في var‐ous 
في جميع أنحاء العالم ، بحيث يمكن خدمة المستخدمين من مركز البياناتبالقرب منهم 
جغرافيا. هذا يتجنب المستخدم الاضطرار إلى انتظار الشبكةحزم للسفر في منتصف الطريق 
حول العالم.

      صفحة 164
أنا. في جهاز كبير ، على الرغم من أن أي وحدة معالجة مركزية يمكنها الوصول إلى أي 
جزء من الذاكرة ، فإن بعض بنوك الذاكرة تكون أقرب إليهاوحدة معالجة مركزية واحدة 
أكثر من غيرها (يسمى هذا الوصول إلى الذاكرة غير المنتظم أو NUMA [ 1 ]). للاستفادة 
الفعالة منهذه البنية ، يجب تقسيم المعالجة بحيث تصل كل وحدة معالجة مركزية في 
الغالب إلى الذاكرة الموجودةقريب - مما يعني أن التقسيم لا يزال مطلوبًا ، حتى عند 
تشغيله ظاهريًا على جهاز واحد.ثانيا. التخزين المتصل بالشبكة (NAS) أو شبكة منطقة 
التخزين (SAN).التحجيم إلى حمولة أعلىإذا كان كل ما تحتاجه هو التوسع إلى حمل أعلى 
، فإن أبسط نهج هو شراء المزيد من القوةآلة erful (تسمى أحيانًا التحجيم الرأسي أو 
توسيع النطاق ). العديد من وحدات المعالجة المركزية ، العديديمكن ربط شرائح ذاكرة 
الوصول العشوائي والعديد من الأقراص معًا في إطار نظام تشغيل واحد ، ويتيح التوصيل 
البيني السريع لأي وحدة معالجة مركزية الوصول إلى أي جزء من الذاكرة أو القرص. من 
هذا النوعمن بنية الذاكرة المشتركة ، يمكن التعامل مع جميع المكونات كآلة واحدة[1]. 
أناتكمن مشكلة نهج الذاكرة المشتركة في أن التكلفة خطية للغاية: أجهاز مع ضعف عدد 
وحدات المعالجة المركزية ، ضعف تكلفة ذاكرة الوصول العشوائي والقرص عادة sig‐ببراعة 
أكثر من ضعف ذلك. بسبب الاختناقات ، يمكن للآلة التي يبلغ حجمها ضعف حجمهاليس 
بالضرورة التعامل مع ضعف الحمل.قد توفر بنية الذاكرة المشتركة تسامحًا محدودًا مع 
الخطأ: الآلات المتطورةتحتوي على مكونات قابلة للتبديل السريع (يمكنك استبدال 
الأقراص ووحدات الذاكرة وحتى ملفاتوحدات المعالجة المركزية (CPU) دون إيقاف تشغيل 
الجهاز) ولكنها تقتصر بالتأكيد على منطقة جغرافية واحدةموقع الرسم.طريقة أخرى هي 
بنية القرص المشترك ، والتي تستخدم العديد من الأجهزة معوحدات المعالجة المركزية 
(CPU) وذاكرة الوصول العشوائي (RAM) المستقلة ، ولكنها تخزن البيانات على مجموعة من 
الأقراص المشتركةبين الأجهزة ، متصلة عبر شبكة سريعة. ii يتم استخدام هذه العمارة 
لبعض أعباء عمل تخزين البيانات ، ولكن الخلاف والنفقات العامة لقفل الحدقابلية 
توسيع نهج القرص المشترك [2].بنى لا شيء مشتركعلى النقيض من ذلك ، فإن معماريات لا 
شيء مشترك [3] (تسمى أحيانًا التحجيم الأفقي أوالتوسع ) اكتسبت شعبية كبيرة. في هذا 
النهج ، كل آلة أو افتراضيةيسمى الجهاز الذي يقوم بتشغيل برنامج قاعدة البيانات 
العقدة . تستخدم كل عقدة وحدات المعالجة المركزية الخاصة بها ،ذاكرة الوصول 
العشوائي والأقراص بشكل مستقل. أي تنسيق بين العقد يتم في softمستوى وير ، باستخدام 
شبكة تقليدية.لا يتطلب نظام لا شيء مشترك أجهزة خاصة ، لذا يمكنك استخدام أي 
شيءالآلات لديها أفضل نسبة السعر / الأداء. من المحتمل أن تتمكن من توزيع 
البياناتعبر مناطق جغرافية متعددة ، وبالتالي تقليل وقت الاستجابة للمستخدمين 
وربماتكون قادرة على البقاء على قيد الحياة بعد فقدان مركز البيانات بأكمله. مع 
عمليات النشر "السحابية" الافتراضية

      الصفحة 165
آلات ، فأنت لست بحاجة إلى أن تعمل على نطاق Google: حتى بالنسبة للشركات الصغيرة 
،هندسة معمارية موزعة متعددة المناطق ممكنة الآن.في هذا الجزء الثاني، نحن نركز على 
أبنية لا شيء مشترك - ليس لأنها ضروريةالخيار الأفضل لكل حالة استخدام ، ولكن لأنها 
تتطلب أكثر من غيرهاالحذر منك ، مطور التطبيق. إذا تم توزيع البيانات الخاصة بك عبر 
متعددple ، يجب أن تكون على دراية بالقيود والمفاضلات التي تحدث في مثل هذاالنظام 
الموزع - لا يمكن لقاعدة البيانات إخفاء هذه الأشياء عنك بطريقة سحرية.في حين أن 
بنية عدم المشاركة الموزعة لها العديد من المزايا ، إلا أنها عادةً ما تكون 
أيضًايتحمل تعقيدًا إضافيًا للتطبيقات ، ويحد أحيانًا من التعبيريةنيس من نماذج 
البيانات التي يمكنك استخدامها. في بعض الحالات ، برنامج بسيط ذو مؤشر ترابط 
واحديمكن أن يؤدي أداءً أفضل بكثير من الكتلة التي تحتوي على أكثر من 100 نواة 
لوحدة المعالجة المركزية [4]. على المن ناحية أخرى ، يمكن أن تكون أنظمة عدم 
المشاركة قوية جدًا. الفصول القليلة القادمة تذهبفي تفاصيل المشكلات التي تنشأ عند 
توزيع البيانات.النسخ المتماثل مقابل التجزئةهناك طريقتان شائعتان لتوزيع البيانات 
عبر عقد متعددة:تكرارالاحتفاظ بنسخة من نفس البيانات على عدة عقد مختلفة ، من 
المحتمل أن تكون مختلفة‐مواقع الأنف والحنجرة. يوفر النسخ المتماثل التكرار: إذا 
كانت بعض العقد غير متوفرة ،لا يزال من الممكن تقديم البيانات من العقد المتبقية. 
يمكن أن يساعد النسخ المتماثل أيضًاتحسين الأداء. نناقش التكرار فيالفصل 
5.التقسيمتقسيم قاعدة البيانات الكبيرة إلى مجموعات فرعية أصغر تسمى الأقسام ، بحيث 
يكون ذلك مختلفًايمكن تعيين الأقسام لعقد مختلفة (تُعرف أيضًا باسم التجزئة ). نحن 
ديسلعنة التقسيم في الفصل 6.هذه آليات منفصلة ، لكنها غالبًا ما تسير جنبًا إلى جنب 
، كما هو موضح فيالشكل II-1 .

      صفحة 166
قسم 1 ، نسخة 1القسم 2 ، نسخة 1القسم 1 ، النسخة المتماثلة 2القسم 2 ، النسخة 
المتماثلة 2136أربع نقاطوسبعةمند سنواتآباؤنا211يوهانسدي جراسياريكس 
أنجليدومينوس377بينماالتعرف علىالتابعمتأصل629Die Würdeالرجال-شين 
ISTunantastbar696بينماالحكامروحيوالإيقاع-858ونحن نحملهذه الحقائقلتكون على 
طبيعتها-واضح136أربع نقاطوسبعةمند سنواتآباؤنا211يوهانسدي جراسياريكس 
أنجليدومينوس377بينماالتعرف علىالتابعمتأصل629Die Würdeالرجال-شين 
ISTunantastbar696بينماالحكامروحيوالإيقاع-858ونحن نحملهذه الحقائقلتكون على 
طبيعتها-واضحنسخة مننفس الشيءبياناتنسخة مننفس الشيءبياناتالشكل II-1. قاعدة بيانات 
مقسمة إلى قسمين ، مع نسختين متماثلتين لكل قسم.بمجرد أن يكون لدينا هؤلاء ، يمكننا 
مناقشة المقايضات الصعبة التي تحتاج إليهاصنع في نظام موزع. سنناقش المعاملات في 
الفصل السابع، لأن ذلك سيساعدنحن نفهم كل الأشياء العديدة التي يمكن أن تسوء في 
نظام البيانات ، وماذا نفعليمكن أن تفعل حيال ذلك. سنختتم هذا الجزء من الكتاب 
بمناقشة الأساسياتقيود الأنظمة الموزعة في الفصل 8 و الفصل 9 .لاحقًا ، في الجزء 
الثالث من هذا الكتاب ، سنناقش كيف يمكنك أن تأخذ عدة (على الأرجحموزعة) مخازن 
البيانات ودمجها في نظام أكبر ، لتلبية احتياجاتتطبيق معقد. لكن أولاً ، دعنا نتحدث 
عن البيانات الموزعة.مراجع[1 ] أولريش دريبر: "ما يجب أن يعرفه كل مبرمج عن 
الذاكرة، "akka‐dia.org ، 21 نوفمبر 2007.[2] بن ستوبفورد: " لا شيء مشترك مقابل 
بنى القرص المشترك: مستقلرأي، "benstopford.com ، 24 تشرين الثاني (نوفمبر) 
2009.[3] مايكل ستونبراكر: " قضية لا شيء مشترك، هندسة قاعدة بيانات IEEEالنشرة ، 
المجلد 9 ، العدد 1 ، الصفحات 4-9 ، آذار 1986.[4] فرانك ماكشيري ومايكل إيسارد 
وديريك جي موراي: " قابلية التوسع! لكن في ماذاكلفة؟ ، في ورشة عمل USENIX الخامسة 
عشرة حول الموضوعات الساخنة في أنظمة التشغيل (HotOS) ،مايو 2015.

      صفحة 167
الفصل 5تكرارالفرق الرئيسي بين الشيء الذي قد يحدث بشكل خاطئ والشيء الذي لا يمكن 
أن يحدثمن المحتمل أن يحدث خطأ هو أنه عندما يحدث خطأ لا يمكن أن يحدث بشكل 
خاطئعادة ما يكون من المستحيل الوصول إليه أو إصلاحه.- دوغلاس آدامز ، معظمه غير 
مؤذٍ(1992)يعني النسخ المتماثل الاحتفاظ بنسخة من نفس البيانات على أجهزة 
متعددةمتصل عبر شبكة. كما تمت مناقشته في مقدمةالجزء الثاني، هناك العديدالأسباب 
التي قد تجعلك ترغب في نسخ البيانات:• لإبقاء البيانات قريبة جغرافيًا من 
المستخدمين (وبالتالي تقليل زمن الوصول) ؛• للسماح للنظام بمواصلة العمل حتى إذا 
كانت بعض أجزاء النظام بهافشل (وبالتالي زيادة التوافر) ؛ أو• لتوسيع نطاق عدد 
الأجهزة التي يمكن أن تخدم استعلامات القراءة (وبالتاليزيادة سرعة القراءة).في هذا 
الفصل سنفترض أن مجموعة البيانات الخاصة بك صغيرة جدًا بحيث يمكن لكل جهاز القيام 
بذلكاحتفظ بنسخة من مجموعة البيانات بأكملها. فيالفصل 6 سوف نخفف من هذا الافتراض ، 
ونتخلص منلعنة تقسيم ( عملية التجزئة ) من قواعد البيانات التي هي كبيرة جدا لجهاز 
واحد. في وقت لاحقسنناقش أنواعًا مختلفة من الأخطاء التي يمكن أن تحدث في نظام 
البيانات المنسوخ.tem ، وكيفية التعامل معها.إذا لم تتغير البيانات التي تنسخها 
بمرور الوقت ، فسيكون النسخ المتماثل أمرًا سهلاً:ما عليك سوى نسخ البيانات إلى كل 
عقدة مرة واحدة ، وتكون قد انتهيت. كل الصعوباتتكمن الثقافة في النسخ المتماثل في 
التعامل مع التغييرات على البيانات المنسوخة ، وهذا ما هذاالفصل حول. سنناقش ثلاث 
خوارزميات شائعة لتكرار التغييراتبين العقد: تكرار فردي ، متعدد القادة ، وتكرار 
بلا قائد . تقريبا كل dis145

      صفحة 168
أنا. الشعب المختلفة لها تعريفات مختلفة ل الساخن ، الحارة و الباردة خوادم وضع 
الاستعداد. في PostgreSQL ، لـعلى سبيل المثال ، يتم استخدام وضع الاستعداد السريع 
للإشارة إلى نسخة متماثلة تقبل القراءة من العملاء ، في حين يتم استخدام وضع 
الاستعداد الساخنيعالج التغييرات من القائد ولكنه لا يعالج أي استفسارات من 
العملاء. لأغراض هذا الكتاب ، فإنالاختلاف ليس مهما.تستخدم قواعد البيانات 
التقديرية أحد هذه الأساليب الثلاثة. كل منهم مختلف الايجابيات وسلبيات ، والتي سوف 
ندرسها بالتفصيل.هناك العديد من المفاضلات التي يجب مراعاتها عند التكرار: على سبيل 
المثال ، ما إذا كنت تريد الاستخدام أم لاالنسخ المتماثل المتزامن أو غير المتزامن 
، وكيفية التعامل مع النسخ المتماثلة الفاشلة. هؤلاءغالبًا ما تكون خيارات التكوين 
في قواعد البيانات ، وعلى الرغم من أن التفاصيل تختلف حسب البيانات‐القاعدة ، 
المبادئ العامة متشابهة عبر العديد من التطبيقات المختلفة. نحنسوف تناقش عواقب مثل 
هذه الاختيارات في هذا الفصل.يعد تكرار قواعد البيانات موضوعًا قديمًا - لم تتغير 
المبادئ كثيرًا منذ ذلك الحينتمت دراستهم في السبعينيات [1] ، لأن القيود الأساسية 
للشبكاتبقيت على حالها. ومع ذلك ، خارج البحث ، استمر العديد من المطورينلنفترض 
لفترة طويلة أن قاعدة البيانات تتكون من عقدة واحدة فقط. الاستخدام السائدمن قواعد 
البيانات الموزعة هو الأحدث. نظرًا لأن العديد من مطوري التطبيقات جدد علىفي هذه 
المنطقة ، كان هناك الكثير من سوء الفهم حول قضايا مثل نهائيةالاتساق . في "مشاكل 
مع تأخر النسخ المتماثل" في الصفحة 155 سنكون أكثر دقةحول الاتساق في نهاية المطاف، 
ومناقشة الامور مثل القراءة الخاص بك بين الكتابة و أحاديةيقرأ منشط 
الضمانات.القادة والأتباعكل عقدة تخزن نسخة من قاعدة البيانات تسمى نسخة متماثلة . 
مع النسخ المتماثلة المتعددة ،يطرح سؤال لا محالة: كيف يمكننا التأكد من أن جميع 
البيانات تنتهي في جميع المندوبين؟Licas؟يجب معالجة كل عملية كتابة إلى قاعدة 
البيانات بواسطة كل نسخة متماثلة ، وإلا فإن Rep‐التراخيص لم تعد تحتوي على نفس 
البيانات. الحل الأكثر شيوعًا لهذا هويسمى النسخ المتماثل المستند إلى القائد 
(المعروف أيضًا باسم النسخ المتماثل النشط / السلبي أو المتماثل الرئيسي 
والعبد)نشوئها ) ويوضح في الشكل 5-1. يعمل على النحو التالي:1. تم تعيين إحدى النسخ 
المتماثلة كقائد (يُعرف أيضًا باسم رئيسي أو أساسي ).عندما يرغب العملاء في الكتابة 
إلى قاعدة البيانات ، يجب عليهم إرسال طلباتهم إلىالقائد ، الذي يكتب البيانات 
الجديدة أولاً إلى وحدة التخزين المحلية الخاصة به.2. تُعرف النسخ المتماثلة الأخرى 
باسم المتابعين ( اقرأ النسخ المتماثلة أو العبيد أو الاستعدادات الساخنة i ).عندما 
يكتب القائد بيانات جديدة إلى وحدة التخزين المحلية الخاصة به ، فإنه يرسل البيانات 
أيضًاالتغيير إلى جميع متابعيه كجزء من سجل النسخ أو تغيير التدفق . كليأخذ المتابع 
السجل من القائد ويقوم بتحديث نسخته المحلية من قاعدة البيانات146 | الفصل 5: النسخ 
المتماثل

      الصفحة 169
وفقًا لذلك ، من خلال تطبيق جميع عمليات الكتابة بنفس الترتيب الذي تمت معالجتها 
فيهالقائد.3. عندما يريد العميل القراءة من قاعدة البيانات ، يمكنه الاستعلام إما 
عن القائد أوأي من المتابعين. ومع ذلك ، لا يتم قبول الكتابة إلا على القائد 
(المتابعة‐هي للقراءة فقط من وجهة نظر العميل).يعد وضع النسخ المتماثل هذا ميزة 
مضمنة في العديد من قواعد البيانات العلائقية ، مثلPostgreSQL (منذ الإصدار 9.0) ، 
MySQL ، Oracle Data Guard [ 2] و SQL Serverمجموعات التوفر AlwaysOn [3]. كما أنها 
تستخدم في بعض قواعد البيانات غير العلائقية ،بما في ذلك MongoDB و RethinkDB و 
Espresso [ 4 ]. أخيرًا ، النسخ المتماثل القائم على القائدلا يقتصر على قواعد 
البيانات فقط: وسطاء الرسائل الموزعة مثل كافكا [5] وقوائم انتظار RabbitMQ عالية 
التوفر [6] استخدمه أيضًا. بعض أنظمة ملفات الشبكة وملفاتأجهزة الكتلة المكررة مثل 
DRBD متشابهة.مستخدم 1234تكوينات جديدةالصوره الشخصيهتحديث المستخدمينتعيين 
picture_url = "me-new.jpg"حيث user_id = 1234تغيير 
البياناتالطاولة:المستخدمينالمفتاح الأساسي: 1234عمودي:رابط الصورةold_value: 
me-old.jpgnew_value: me-new.jpgالصفقة: 987654321استفسارات للقراءة فقطحدد * من 
المستخدمينحيث user_id = 1234زعيمنسخة مطابقة للأصلتابعنسخة مطابقة للأصلتابعنسخة 
مطابقة للأصلمستخدم 2345وجهات النظر المستخدمملف 1234 الشخصياستفسارات القراءة 
والكتابةتيارات النسخ المتماثلالشكل 5-1. النسخ المتماثل القائم على القائد (السيد 
والعبد).متزامن مقابل النسخ المتماثل غير المتزامنمن التفاصيل المهمة للنظام 
المنسوخ ما إذا كان النسخ المتماثل سيحدث متزامنًا أم لابشكل مزمن أو غير متزامن . 
(في قواعد البيانات العلائقية ، غالبًا ما يكون هذا ملفاختيار؛ غالبًا ما تكون 
الأنظمة الأخرى مشفرة بحيث تكون إما أحدهما أو الآخر.)فكر فيما يحدث في الشكل 5-1 ، 
حيث يقوم مستخدم موقع الويب بتحديث ملفصورة الملف الشخصي. في وقت ما ، يرسل العميل 
طلب التحديث إلى القائد ؛بعد ذلك بوقت قصير ، استقبله القائد. في مرحلة ما ، يقوم 
القائد بإعادة توجيهتغيير البيانات للمتابعين. في النهاية ، يخطر القائد العميل بأن 
التحديثكان ناجحا.يوضح الشكل 5-2 الاتصال بين مختلف مكونات النظام:عميل المستخدم 
والقائد واثنين من المتابعين. الوقت يتدفق من اليسار إلى اليمين. طلب أوتظهر رسالة 
الرد كسهم سميك.في مثال الشكل 5-2 ، يكون النسخ المتماثل للمتابع 1 متزامنًا : 
القائدينتظر حتى يؤكد المتابع 1 أنه تلقى الكتابة قبل الإبلاغ عن النجاحللمستخدم ، 
وقبل جعل الكتابة مرئية للعملاء الآخرين. النسخ المتماثل إلىالقادة والتابعون | 147

      الصفحة 170
المتابع 2 غير متزامن : يرسل القائد الرسالة ، لكنه لا ينتظر ملفاستجابة من 
التابع.مستخدم 1234زعيمالمتابع 1المتابع 2الوقتتحديث المستخدمينتعيين picture_url = 
"me-new.jpg"حيث user_id = 1234حسناحسنافي انتظار موافق التابعحسناتغيير 
البياناتتغيير البياناتالشكل 5-2. النسخ المتماثل المستند إلى القائد مع ملف واحد 
متزامن وآخر غير متزامنأدنى.يوضح الرسم التخطيطي أن هناك تأخيرًا كبيرًا قبل أن 
يعالج المتابع 2 ملفرسالة. عادةً ما يكون النسخ المتماثل سريعًا جدًا: تطبق معظم 
أنظمة قواعد البيانات التغييرات علىالمتابعون في أقل من ثانية. ومع ذلك ، ليس هناك 
ما يضمن إلى متى قد يستغرق ذلكيأخذ. هناك ظروف قد يتخلف فيها الأتباع عن القائد من 
قبل عدة أشخاصدقائق أو أكثر ، على سبيل المثال إذا كان أحد المتابعين يتعافى من فشل 
، إذا كان النظاميعمل بالقرب من السعة القصوى ، أو إذا كانت هناك مشاكل في الشبكة 
بينالعقد.ميزة النسخ المتزامن هي أن المتابع مضموننسخة محدثة من البيانات التي 
تتوافق مع القائد. اذا الزعيم سودdenly فشل ، يمكننا التأكد من أن البيانات لا تزال 
متاحة على المتابع. الفوضىالأفضل هو أنه إذا لم يستجب المتابع المتزامن (لأنه تحطم 
،أو أن هناك خطأ في الشبكة ، أو لأي سبب آخر) ، لا يمكن معالجة الكتابة.يجب على 
القائد حظر جميع عمليات الكتابة والانتظار حتى تتوفر النسخة المتماثلة 
المتزامنةتكرارا.لهذا السبب ، من غير العملي أن يكون جميع المتابعين متزامنين: أي 
عقدة واحدةقد يتسبب انقطاع التيار الكهربائي في توقف النظام بأكمله. في الممارسة 
العملية ، إذا قمت بتمكين المزامنةالنسخ المتماثل المزمن على قاعدة بيانات ، فهذا 
يعني عادةً أن أحد المتابعين متزامن.مزمن والآخرون غير متزامن. إذا أصبح التابع 
المتزامنغير متوفر أو يسير ببطء ، يتم جعل أحد المتابعين غير المتزامنين 
متزامنًا.هذا يضمن أن لديك نسخة محدثة من البيانات على عقدتين على الأقل:القائد 
وأحد المتابعين المتزامنين. هذا التكوين يسمى أحيانًا أيضًاشبه متزامن [ 7 ].148 | 
الفصل 5: النسخ المتماثل

      الصفحة 171
في كثير من الأحيان ، يتم تكوين النسخ المتماثل المستند إلى القائد ليكون غير 
متزامن تمامًا. في هذاالحالة ، إذا فشل القائد ولم يكن قابلاً للاسترداد ، فإن أي 
كتابات لم يتم الرد عليها بعدتضيع من المتابعين. هذا يعني أنه ليس من المضمون أن 
تكون الكتابة دائمة ،حتى لو تم تأكيده للعميل. ومع ذلك ، فإن التكوين غير المتزامن 
تمامًاميزة نشوئها أن القائد يمكنه الاستمرار في معالجة الكتابات ، حتى لو كانت 
جميع ملفاتأتباع قد تخلفوا.قد يبدو ضعف المتانة وكأنه مقايضة سيئة ، ولكن النسخ 
المتماثل غير المتزامن هو كذلكيكاد يكون لا مفر منه إذا كان هناك العديد من 
المتابعين ، أو إذا كانوا موزعين جغرافيًا.سنعود إلى هذا في "مشاكل مع تأخر النسخ 
المتماثل" في الصفحة 155.إنشاء متابعين جددمن وقت لآخر ، تحتاج إلى إنشاء متابعين 
جدد - ربما لزيادة عددber من النسخ المتماثلة ، أو لاستبدال العقد الفاشلة. كيف 
تتأكد من أن المتابع الجديدلديه نسخة دقيقة من بيانات القائد؟لا يكفي عادةً نسخ 
ملفات البيانات من عقدة إلى أخرى: العملاءيكتبون باستمرار إلى قاعدة البيانات ، 
والبيانات دائمًا في حالة تغير مستمر ، لذا فهو ملف قياسيسيشاهد النسخ أجزاء مختلفة 
من قاعدة البيانات في نقاط زمنية مختلفة. النتائجقد لا يكون له أي معنى.يمكنك جعل 
الملفات الموجودة على القرص متسقة عن طريق قفل قاعدة البيانات (مما يجعلهاغير متاح 
للكتابة) ، ولكن هذا يتعارض مع هدفنا المتمثل في الإتاحة العالية. فورتوفي الآونة 
الأخيرة ، يمكن عادةً إعداد المتابعين دون توقف. مفاهيميًا ،تبدو العملية كما 
يلي:1. خذ لقطة متسقة من قاعدة بيانات القائد في وقت ما - إذاممكن ، دون قفل قاعدة 
البيانات بأكملها. معظم قواعد البيانات لديها هذاميزة ، كما هو مطلوب أيضًا للنسخ 
الاحتياطية. في بعض الحالات ، تكون أدوات الجهات الخارجيةمطلوب ، مثل innobackupex 
لـ MySQL [ 8 ].2. انسخ اللقطة إلى عقدة المتابع الجديدة.3. يتصل المتابع بالقائد 
ويطلب جميع التغييرات التي حدثت في البياناتمنذ أخذ اللقطة. هذا يتطلب أن يتم إقران 
اللقطة بـموقع دقيق في سجل النسخ المتماثل للزعيم. هذا الموقف مختلف‐أسماء ent: على 
سبيل المثال ، تسميها PostgreSQL رقم تسلسل السجل ، و MySQLيطلق عليه إحداثيات 
binlog .4. عندما يقوم المتابع بمعالجة تراكم تغييرات البيانات منذ اللقطة ،نقول 
أنها لم المحاصرين . يمكنه الآن متابعة معالجة تغييرات البيانات منزعيم كما 
يحدث.تختلف الخطوات العملية لإعداد المتابع بشكل كبير حسب قاعدة البيانات. في 
بعضالأنظمة ، تكون العملية مؤتمتة بالكامل ، بينما في أنظمة أخرى ، يمكن أن تكون 
إلى حد ماالقادة والتابعون | 149

      الصفحة 172
سير عمل غامض متعدد الخطوات يجب أن يقوم به المسؤول يدويًاتور.معالجة انقطاع 
العقدةيمكن أن تنخفض أي عقدة في النظام ، ربما بشكل غير متوقع بسبب خطأ ، ولكن 
تمامًا مثلعلى الأرجح بسبب الصيانة المخطط لها (على سبيل المثال ، إعادة تشغيل آلة 
لتثبيت ker‐تصحيح الأمان nel). إن القدرة على إعادة تشغيل العقد الفردية دون توقف 
يعد أمرًا كبيرًاميزة للعمليات والصيانة. وبالتالي ، فإن هدفنا هو الحفاظ على 
النظام كملفيعمل بالكامل على الرغم من العُقد الفردية الفاشلة ، وللحفاظ على تأثير 
العقدة الخارجية‐أصغر ما يمكن.كيف يمكنك تحقيق الإتاحة العالية باستخدام النسخ 
المتماثل المستند إلى القائد؟فشل المتابع: استرجاع اللحاق بالركبيحتفظ كل متابع على 
قرصه المحلي بسجل لتغييرات البيانات التي تلقاها منهالقائد. إذا تعطل أحد المتابعين 
وأعيد تشغيله ، أو إذا كانت الشبكة بين القائدويتم مقاطعة المتابع مؤقتًا ، ويمكن 
للمتابع التعافي بسهولة تامة:من سجله ، يعرف آخر معاملة تمت معالجتها قبل حدوث 
الخطأ‐أحمر. وبالتالي يمكن للمتابع الاتصال بالقائد ، ويطلب كل تغيير البيانات 
ذلكحدثت خلال وقت فصل المتابع. عندما يتم تطبيقههذه التغييرات ، فقد استوعبت القائد 
، ويمكن أن تستمر في تلقي تدفق منتتغير البيانات كما كان من قبل.فشل القائد: تجاوز 
الفشلإن التعامل مع فشل القائد أمر أصعب: يحتاج أحد المتابعين إلى الترقيةلكي نكون 
القائد الجديد ، يحتاج العملاء إلى إعادة تشكيلهم لإرسال كتاباتهم إلى الجديدالقائد 
، ويحتاج المتابعون الآخرون إلى البدء في استهلاك تغييرات البيانات من الجديدزعيم. 
تسمى هذه العملية تجاوز الفشل .يمكن أن يحدث تجاوز الفشل يدويًا (يتم إخطار المسؤول 
بفشل القائد ،ويتخذ الخطوات اللازمة لتكوين قائد جديد) ، أو تلقائيًا. تلقائيتتكون 
عملية تجاوز الفشل عادةً من الخطوات التالية:1. تحديد فشل القائد. هناك العديد من 
الأشياء التي يمكن أن تؤدي إلىيحدث خطأ في الوقت نفسه: الأعطال وانقطاع التيار 
الكهربائي ومشكلات الشبكة وغير ذلك الكثير. يوجدلا توجد طريقة مضمونة لاكتشاف 
الأخطاء التي حدثت ، لذلك تستخدم معظم الأنظمةمهلة: غالبًا ما ترتد العقد الرسائل 
ذهابًا وإيابًا بين بعضها البعض ،وإذا لم تستجب العقدة لبعض الوقت - لنقل 30 ثانية 
- فهي كذلكيفترض أنه ميت. (إذا تم إنزال القائد عمدًا من أجل الصيانة المخطط 
لها‐نانس ، هذا لا ينطبق.)2. اختيار قائد جديد. يمكن أن تكون هذه إما عملية 
انتخابية (حيث يكون الزعيميتم اختياره من قبل غالبية النسخ المتماثلة المتبقية) ، 
أو يمكن أن يكون قائد جديد150 | الفصل 5: النسخ المتماثل

      صفحة 173
ثانيا. يُعرف هذا باسم المبارزة أو ، بشكل أكثر تأكيدًا ، أطلق النار على العقدة 
الأخرى في الرأس (STONITH).تم تعيينه بواسطة عقدة تحكم منتخبة مسبقًا . أفضل مرشح 
للقائد‐عادةً ما تكون السفينة هي النسخة المتماثلة التي تحتوي على أحدث تغييرات 
البيانات من القديمزعيم (لتقليل أي فقدان للبيانات). الحصول على جميع العقد للاتفاق 
على قائد جديدهي مشكلة إجماع تمت مناقشتها بالتفصيل في الفصل 9 .3. إعادة تكوين 
النظام لاستخدام القائد الجديد. يحتاج العملاء الآن لإرسال ملفاتكتابة طلبات إلى 
القائد الجديد (نناقش هذا في "طلب التوجيه" في الصفحة 205 ).إذا عاد الزعيم القديم 
، فقد يظل يعتقد أنه زعيم وليس مدركًاأن النسخ المتماثلة الأخرى أجبرتها على 
التنحي. يحتاج النظام إلى التأكدأن يصبح الزعيم القديم تابعاً ويتعرف على القائد 
الجديد.تجاوز الفشل محفوف بالأشياء التي يمكن أن تسوء:• إذا تم استخدام النسخ 
المتماثل غير المتزامن ، فقد لا يكون القائد الجديد قد تلقى كل شيءيكتب من الزعيم 
القديم قبل أن يفشل. إذا عاد الزعيم السابق إلى الكتلةبعد اختيار قائد جديد ، ماذا 
سيحدث لهؤلاء الذين يكتبون؟ الجديدقد يكون الزعيم قد تلقى كتابات متضاربة في هذه 
الأثناء. الأكثر شيوعاالحل هو التخلص من كتابات الزعيم القديم غير المكررة ببساطة ، 
وهوقد ينتهك توقعات المتانة للعملاء.• يعتبر التخلص من الكتابات أمرًا خطيرًا بشكل 
خاص إذا كانت أنظمة التخزين الأخرى خارج النطاقيجب تنسيق قاعدة البيانات مع محتويات 
قاعدة البيانات. على سبيل المثال ، في واحدحادثة في جيثب [9] ، تمت ترقية متابع 
MySQL قديمًا إلى قائد.استخدمت قاعدة البيانات عداد تزايد تلقائي لتعيين مفاتيح 
أساسية للجديدمن الصفوف ، ولكن نظرًا لأن عداد الزعيم الجديد يتخلف عن الزعيم 
القديم ، فإنه يتراجعاستخدم بعض المفاتيح الأساسية التي تم تعيينها مسبقًا بواسطة 
القائد القديم. هؤلاءتم استخدام المفاتيح الأساسية أيضًا في متجر Redis ، لذا فإن 
إعادة استخدام المفاتيح الأساسية يؤدي إلىفي عدم الاتساق بين MySQL و Redis ، مما 
تسبب في بعض البيانات الخاصةليتم الكشف عنها للمستخدمين الخطأ.• في بعض سيناريوهات 
الخطأ (انظر الفصل 8 ) ، يمكن أن يحدث أن كلا العقدتيننعتقد أنهم القائد. هذا 
الموقف يسمى انقسام الدماغ ، وهو dan‐شجاع: إذا وافق كلا الزعيمين على الكتابة ، 
ولم تكن هناك عملية لحل مشكلةflicts (راجع "النسخ المتماثل متعدد القادة" في الصفحة 
161 ) ، من المحتمل أن يتم فقد البيانات أوتالف. كمصيد أمان ، تحتوي بعض الأنظمة 
على آلية لإغلاق أحدهاعقدة إذا تم الكشف عن زعيمين. ii ومع ذلك ، إذا لم تكن 
محظوظًا ، فقد ينتهي بك الأمرمع إغلاق كلا العقدتين [ 10].• ما هي المهلة الصحيحة 
قبل إعلان وفاة الزعيم؟ مهلة أطوليعني وقتًا أطول للتعافي في حالة فشل القائد. ومع 
ذلك ، إذا كانالمهلة قصيرة جدًا ، فقد تكون هناك تجاوزات غير ضرورية. على سبيل 
المثال ، إيقاعيمكن أن يتسبب ارتفاع الحمل المتكرر في زيادة وقت استجابة العقدة فوق 
المهلة ،القادة والتابعون | 151

      الصفحة 174
أو قد يتسبب خلل في الشبكة في تأخير الحزم. إذا كان النظام مضطربًا بالفعلبسبب 
مشاكل التحميل أو الشبكة العالية ، فمن المحتمل أن يؤدي الفشل غير الضروريجعل الوضع 
أسوأ وليس أفضل.لا توجد حلول سهلة لهذه المشاكل. لهذا السبب ، بعض العملياتتفضل 
الفرق إجراء تجاوز الفشل يدويًا ، حتى إذا كان البرنامج يدعم تلقائيًاتجاوز 
الفشل.هذه المشكلات - فشل العقدة ، والشبكات غير الموثوق بها ، والمفاضلات حول 
النسخ المتماثلةالدقة والمتانة والتوافر والكمون - هي في الواقع مشاكل أساسية 
فيالانظمة الموزعة. في الفصل 8 و الفصل 9 فإننا سوف نناقشها في أكبرعمق.تنفيذ سجلات 
النسخ المتماثلكيف يعمل الاستنساخ المستند إلى القائد تحت الغطاء؟ عدة نسخ 
مختلفةتُستخدم طرق التشاور في الممارسة العملية ، لذلك دعونا نلقي نظرة موجزة على 
كل منها.النسخ المتماثل القائم على البيانفي أبسط الحالات ، يسجل القائد كل طلب 
كتابة ( بيان ) ينفذه ،ويرسل سجل البيان هذا إلى أتباعه. لقاعدة البيانات العلائقية 
، هذا يعنيأن كل إدراج ، تحديث أو حذف يتم توجيه بيان إلى أتباعه، وكل fol-تحليلات 
أقل وتنفيذ عبارة SQL هذه كما لو تم استلامها من العميل.على الرغم من أن هذا قد 
يبدو معقولًا ، إلا أن هناك طرقًا مختلفة يمكن من خلالها اتباع هذا النهجللنسخ 
المتماثل يمكن أن ينهار:• أي عبارة تستدعي وظيفة غير حتمية ، على سبيل المثال NOW 
() للحصول عليهاالتاريخ والوقت الحاليين ، أو RAND () للحصول على رقم عشوائي ، من 
المرجح أن يولدأكلت قيمة مختلفة في كل نسخة طبق الأصل.• إذا كانت العبارات تستخدم 
عمود زيادة تلقائية ، أو إذا كانت تعتمد على العمود الحاليالبيانات في قاعدة 
البيانات (على سبيل المثال UPDATE ... حيث <بعض الشروط> ) ، يجب أن تكون كذلكيتم 
تنفيذها بنفس الترتيب تمامًا على كل نسخة متماثلة ، وإلا فقد يكون لديهم ملفتأثير 
مختلف. يمكن أن يكون هذا مقيدًا عندما يكون هناك العديد من exe‐ في نفس الوقت.قطع 
المعاملات.• البيانات التي لها آثار جانبية (مثل المشغلات ، والإجراءات المخزنة ، 
والمعرفة من قبل المستخدموظائف) قد تؤدي إلى آثار جانبية مختلفة تحدث على كل نسخة 
متماثلة ، إلا إذاالآثار الجانبية حتمية تماما.من الممكن حل هذه المشكلات - على 
سبيل المثال ، يمكن للقائد استبدال أي منهااستدعاءات دالة غير حتمية بقيمة إرجاع 
ثابتة عندما تكون العبارة log‐ged ، بحيث يحصل جميع المتابعين على نفس القيمة. ومع 
ذلك ، لأن هناك الكثيرحالات الحافة ، يفضل الآن طرق النسخ الأخرى بشكل عام.152 | 
الفصل 5: النسخ المتماثل

      صفحة 175
تم استخدام النسخ المتماثل المستند إلى البيان في MySQL قبل الإصدار 5.1. لا يزال 
بعضالأوقات المستخدمة اليوم ، لأنها مضغوطة تمامًا ، ولكن بشكل افتراضي تتحول MySQL 
الآن إلى الصف-الاستنساخ القائم على أساس (انظر أدناه) إذا كان هناك أي عدم حتمية 
في بيان. فولت ديسيبليستخدم النسخ المتماثل المستند إلى البيان ، ويجعله آمنًا من 
خلال اشتراط أن تكون المعاملاتحتمية [ 11].الكتابة المسبقة للشحن (WAL)ناقشنا في 
الفصل الثالث كيف تمثل محركات التخزين البيانات على القرص ، ووجدنا ذلكالتي عادة ما 
يتم إلحاق كل كتابة بسجل:• في حالة محرك تخزين منظم السجل (انظر "SSTables و 
LSM-trees" علىالصفحة 74) ، هذا السجل هو المكان الرئيسي للتخزين. يتم ضغط مقاطع 
السجل وتم جمع القمامة في الخلفية.• في حالة الشجرة B (انظر " B-tree " في الصفحة 
77 ) ، والتي تحل محل الفردكتل القرص ، تتم كتابة كل تعديل أولاً في سجل الكتابة 
المسبقة (WAL) بحيثيمكن استعادة الفهرس إلى حالة متسقة بعد حدوث عطل.في كلتا 
الحالتين ، يكون السجل عبارة عن سلسلة من وحدات البايت للإلحاق فقط تحتوي على جميع 
عمليات الكتابة إلى ملفقاعدة البيانات. يمكننا استخدام نفس السجل بالضبط لبناء نسخة 
متماثلة على عقدة أخرى: إلى جانب ذلكعند كتابة السجل على القرص ، يرسله القائد 
أيضًا عبر الشبكة إلى أتباعه.عندما يقوم المتابع بمعالجة هذا السجل ، فإنه ينشئ 
نسخة من نفس هيكل البيانات بالضبط‐tures كما هو موجود في الزعيم.تُستخدم طريقة 
النسخ هذه في PostgreSQL و Oracle ، من بين أمور أخرى [12 ]. الالعيب الرئيسي هو أن 
السجل يصف البيانات على مستوى منخفض للغاية: WAL conتفاصيل الخانات التي تم تغيير 
البايتات في كتلة القرص. هذا يجعل النسخ المتماثلمقترنة بشكل وثيق بمحرك التخزين. 
إذا قامت قاعدة البيانات بتغيير تنسيق التخزين الخاص بها منمن إصدار إلى آخر ، لا 
يمكن عادةً تشغيل إصدارات مختلفة منبرنامج قاعدة البيانات على القائد والمتابعين.قد 
يبدو هذا وكأنه تفاصيل تنفيذ بسيطة ، ولكن يمكن أن يكون لها عملية تشغيلية 
كبيرةتأثير. إذا كان بروتوكول النسخ المتماثل يسمح للمتابع باستخدام إصدار برنامج 
أحدثمن القائد ، يمكنك إجراء ترقية بدون توقف لبرنامج قاعدة البياناتمن خلال ترقية 
المتابعين أولاً ، ثم إجراء تجاوز فشل لإنشاء أحدترقية العقد القائد الجديد. إذا 
كان بروتوكول النسخ المتماثل لا يسمح بهذا الإصدارعدم التطابق ، كما هو الحال 
غالبًا مع شحن WAL ، تتطلب مثل هذه الترقيات فترة تعطل.تكرار السجل المنطقيالبديل 
هو استخدام تنسيقات سجل مختلفة للنسخ والتخزينمحرك. يسمح ذلك بفصل سجل النسخ 
المتماثل عن محرك التخزين بينnals. يُطلق على هذا أحيانًا اسم السجل المنطقي ، 
لتمييزه عن سجل محرك التخزينتمثيل البيانات ( المادية ).القادة والتابعون | 153

      الصفحة 176
عادةً ما يكون السجل المنطقي لقاعدة البيانات العلائقية عبارة عن سلسلة من السجلات 
تصفيكتب في جداول قاعدة البيانات بتفاصيل الصف:• بالنسبة للصف المدرج ، يحتوي السجل 
على القيم الجديدة لجميع الأعمدة.• بالنسبة للصف المحذوف ، يحتوي السجل على معلومات 
كافية لتعريف ملفالصف الذي تم حذفه. عادةً ما يكون هذا هو المفتاح الأساسي ، ولكن 
إذا لم يكن هناكالمفتاح الأساسي في الجدول ، يجب تسجيل القيم القديمة لجميع 
الأعمدة.• بالنسبة للصف المحدث ، يحتوي السجل على معلومات كافية لتعريفه بشكل 
فريدالصف المحدث والقيم الجديدة لجميع الأعمدة (أو على الأقل القيم الجديدة لـكل 
الأعمدة التي تغيرت).تؤدي المعاملة التي تقوم بتعديل عدة صفوف إلى إنشاء العديد من 
سجلات السجل ، متبوعةمن خلال سجل يشير إلى أن المعاملة قد تم ارتكابها. binlog في 
MySQL (متىتم تكوينه لاستخدام النسخ المتماثل المستند إلى الصف) يستخدم هذا الأسلوب 
[13 ].نظرًا لأن السجل المنطقي منفصل عن الأجزاء الداخلية لمحرك التخزين ، فيمكنه 
بسهولة أكبرأن تظل متوافقة مع الإصدارات السابقة ، مما يسمح للقائد والتابع بالعمل 
بشكل مختلفإصدارات برنامج قاعدة البيانات ، أو حتى محركات التخزين المختلفة.تنسيق 
السجل المنطقي أسهل أيضًا في تحليل التطبيقات الخارجية. هذا مفيد إذا كانتريد إرسال 
محتويات قاعدة بيانات إلى نظام خارجي ، مثل البياناتمستودع للتحليل دون اتصال 
بالإنترنت ، أو لإنشاء فهارس وذاكرة تخزين مؤقت مخصصة [14]. هذا هويسمى التقاط 
بيانات التغيير ، وسنعود إليه في الفصل الحادي عشر.النسخ المتماثل القائم على 
الزناديتم تنفيذ أساليب النسخ الموصوفة حتى الآن بواسطة نظام قاعدة البيانات ،دون 
الحاجة إلى أي كود تطبيق. في كثير من الحالات ، هذا ما تريده - لكنهناك بعض الظروف 
التي تتطلب المزيد من المرونة. على سبيل المثال ، إذا كنتتريد فقط نسخ مجموعة فرعية 
من البيانات ، أو تريد النسخ من نوع واحد من البيانات‐من قاعدة إلى أخرى ، أو إذا 
كنت بحاجة إلى منطق حل التعارض (راجع "معالجة التحكّم بالكتابة)flicts "في الصفحة 
164) ، فقد تحتاج إلى نقل النسخ المتماثل إلى طبقة التطبيق.بعض الأدوات ، مثل 
Oracle GoldenGate [15 ] ، يمكن القيام بذلك عن طريق قراءة سجل قاعدة 
البيانات.وبديل ذلك هو استخدام ميزات المتوفرة في العديد من قواعد البيانات 
العلائقية: trig-جارس و الإجراءات المخزنة .يتيح لك المشغل تسجيل رمز تطبيق مخصص في 
نظام قاعدة بيانات بحيث يكون كذلكيتم تنفيذه تلقائيًا عند حدوث تغيير في البيانات 
(معاملة الكتابة). الزنادلديه الفرصة لتسجيل هذا التغيير في جدول منفصل ، حيث يمكن 
قراءتهمن خلال عملية خارجية. يمكن لهذه العملية الخارجية بعد ذلك تطبيق أي تطبيق 
ضروريمنطق نشوئها ، وتكرار تغيير البيانات إلى نظام آخر. Databus لـ Oracle 
[16]وبوكاردو لـ Postgres [ 17] تعمل مثل هذا.154 | الفصل 5: النسخ المتماثل

      الصفحة 177
ثالثا. صاغ دوجلاس تيري وآخرون مصطلح الاتساق النهائي . [20] ، التي أشاعها Werner 
Vogels[18] ، وأصبحت صرخة المعركة للعديد من مشاريع NoSQL. ومع ذلك ، ليس فقط قواعد 
بيانات NoSQL هي في النهايةمتسقة: المتابعون في قاعدة بيانات علائقية مكررة بشكل 
غير متزامن لديهم نفس الخصائص.عادةً ما يكون للنسخ المتماثل المستند إلى المشغل 
نفقات عامة أكبر من النسخ المتماثل الأخرىالطرق ، وهو أكثر عرضة للأخطاء والقيود من 
الرد المدمج في قاعدة البياناتالكاتيون. ومع ذلك ، يمكن أن يكون مفيدًا نظرًا 
لمرونته.مشاكل مع تأخر النسخ المتماثلإن القدرة على تحمل فشل العقدة هي سبب واحد 
فقط للرغبة في النسخ المتماثل. كماالمذكورة سابقًا ، من الأسباب الأخرى قابلية 
التوسع (معالجة طلبات أكثر من الخطيئة‐يمكن لآلة gle التعامل معها) والكمون (وضع 
النسخ المتماثلة جغرافيًا بالقرب من المستخدمين).يتطلب النسخ المتماثل المستند إلى 
القائد أن تمر جميع عمليات الكتابة عبر عقدة واحدة ، ولكن يجب قراءة-يمكن 
الاستعلامات فقط الانتقال إلى أي نسخة متماثلة. لأحمال العمل التي تتكون في الغالب 
من عمليات القراءة وفقط نسبة صغيرة من عمليات الكتابة (نمط شائع على الويب) ، هناك 
attrac‐الخيار tive: إنشاء العديد من المتابعين وتوزيع طلبات القراءة عبر هؤلاء 
الأشخاصيخفض. هذا يزيل الحمل من القائد ، ويسمح للقراء أن يقدمها قريبنسخة مطابقة 
للأصل.في بنية تحجيم القراءة هذه ، يمكنك زيادة السعة لخدمة القراءة فقطيطلب ببساطة 
عن طريق إضافة المزيد من المتابعين. ومع ذلك ، فإن هذا النهج واقعي فقطيعمل مع 
النسخ المتماثل غير المتزامن - إذا حاولت النسخ المتماثل للجميع بشكل 
متزامنالمتابعين ، سيؤدي فشل عقدة واحدة أو انقطاع الشبكة إلى جعل النظام بأكملهغير 
متاح للكتابة. وكلما زاد عدد العقد لديك ، زادت احتمالية تعطلها ،لذلك فإن التكوين 
المتزامن بالكامل سيكون غير موثوق به للغاية.لسوء الحظ ، إذا قرأ أحد التطبيقات من 
متابعين غير متزامنين ، فقد يرى outda‐معلومات تيد إذا كان التابع قد تخلف عن 
الركب. هذا يؤدي إلى تناقض واضحcies في قاعدة البيانات: إذا قمت بتشغيل نفس 
الاستعلام على القائد والتابع فيفي نفس الوقت ، قد تحصل على نتائج مختلفة ، لأنه لم 
تنعكس كل الكتابات فيالتابع. هذا التناقض هو مجرد حالة مؤقتة - إذا توقفت عن 
الكتابة إلىقاعدة البيانات وانتظر بعض الوقت ، سوف يلحق المتابعون في النهاية 
بالركب ويصبحون consis‐خيمة مع الزعيم. لهذا السبب ، يُعرف هذا التأثير بالاتساق 
النهائي [18 ،19 ]. ثالثاالمصطلح غامض بشكل متعمد في النهاية : بشكل عام ، لا يوجد 
حد إلى أي مدىيمكن أن تتخلف lica. في التشغيل العادي ، فإن التأخير بين حدوث 
الكتابة فيالقائد والانعكاس على التابع - تأخر النسخ - قد يكون مجرد شجارمن الثانية 
، وليس ملحوظًا في الممارسة. ومع ذلك ، إذا كان النظام يعملبالقرب من السعة أو إذا 
كانت هناك مشكلة في الشبكة ، يمكن أن يزيد التأخير بسهولة إلىعدة ثوان أو 
دقائق.مشاكل مع تأخر النسخ المتماثل | 155

      صفحة 178
عندما يكون التأخير كبيرًا جدًا ، فإن التناقضات التي يقدمها ليست مجرد نظريةمشكلة 
، لكنها مشكلة حقيقية للتطبيقات. في هذا القسم سوف نسلط الضوء على ثلاثةأمثلة على 
المشاكل التي من المحتمل أن تحدث عندما يكون هناك تأخر في النسخ المتماثل وخارجهخط 
بعض الطرق لحلها.قراءة كتاباتكتتيح العديد من التطبيقات للمستخدم إرسال بعض 
البيانات ، ثم عرض ما لديهم من الباطن.القفاز. قد يكون هذا سجلاً في قاعدة بيانات 
العملاء ، أو تعليقًا على مناقشةموضوع ، أو شيء من هذا القبيل. عند إرسال بيانات 
جديدة ، يجب إرسالها إلىالقائد ، ولكن عندما يعرض المستخدم البيانات ، يمكن قراءتها 
من أحد المتابعين. هذا هو espe‐مناسب اجتماعيًا إذا تم عرض البيانات بشكل متكرر ، 
ولكن يتم كتابتها في بعض الأحيان فقط.مع النسخ المتماثل غير المتزامن ، هناك مشكلة 
موضحة في الشكل 5-3: إذا كانيرى المستخدم البيانات بعد وقت قصير من إجراء الكتابة ، 
قد لا تكون البيانات الجديدة قد فعلت بعدوصلت إلى النسخة المتماثلة. بالنسبة 
للمستخدم ، يبدو كما لو أن البيانات التي أرسلها قد ضاعت ،لذلك سيكونون غير سعداء 
بشكل مفهوم.مستخدم 1234زعيمالمتابع 1المتابع 2الوقتإدراج في التعليقات(مؤلف ، رد ، 
رسالة)القيم (1234 ، 55555 ، "يبدو جيدًا!")أدخل موافقادخل فيتعليقات...ادخل 
فيتعليقات...حدد * من التعليقاتحيث reply_to = 55555لا نتائج!الشكل 5-3. يقوم 
المستخدم بكتابة ، متبوعة بقراءة من نسخة متماثلة قديمة. كى تمنعهذا الشذوذ ، نحن 
بحاجة إلى اتساق القراءة بعد الكتابة.في هذه الحالة ، نحتاج إلى تناسق القراءة بعد 
الكتابة ، والمعروف أيضًا بالقراءة والكتابةالاتساق [ 20]. هذا ضمان أنه إذا أعاد 
المستخدم تحميل الصفحة ، فسيظل كذلك دائمًارؤية أي تحديثات قدموها بأنفسهم. لا تقدم 
أي وعود حول المستخدمين الآخرين:قد لا تظهر تحديثات المستخدمين الآخرين حتى وقت 
لاحق. ومع ذلك ، فإنه يطمئنالمستخدم الذي تم حفظ إدخالاته بشكل صحيح.كيف يمكننا 
تطبيق اتساق القراءة بعد الكتابة في نظام قائم على القائدتكرار؟ هناك العديد من 
التقنيات الممكنة ، على سبيل المثال لا الحصر:• عند قراءة شيء ربما يكون المستخدم 
قد عدله ، اقرأه منقائد ، وإلا اقرأها من أحد المتابعين. هذا يتطلب أن يكون لديك 
طريقة مامعرفة ما إذا كان شيء ما قد تم تعديله ، دون استعلام فعلي‐156 | الفصل 5: 
النسخ المتماثل

      صفحة 179
جي عليه. على سبيل المثال ، عادةً ما تكون معلومات ملف تعريف المستخدم على شبكة 
اجتماعية فقطقابل للتعديل بواسطة المالك الوحيد للملف الشخصي ، وليس بواسطة أي شخص 
آخر. هكذا قاعدة بسيطةهو: اقرأ دائمًا ملف تعريف المستخدم الخاص من القائد وأي 
مستخدم آخر مؤيدملفات من أحد المتابعين.• إذا كانت معظم الأشياء في التطبيق قابلة 
للتحرير من قبل المستخدم ، فحينئذٍلن يكون النهج فعالاً ، حيث يجب قراءة معظم 
الأشياء منزعيم (ينفي فائدة توسيع نطاق القراءة). في هذه الحالة ، قد تكون المعايير 
الأخرىاعتاد أن يقرر ما إذا كان سيقرأ من القائد. على سبيل المثال ، يمكنك تتبع 
ملفوقت التحديث الأخير ؛ لمدة دقيقة واحدة بعد التحديث الأخير ، تتم جميع 
القراءاتمن القائد. يمكنك أيضًا مراقبة تأخر النسخ المتماثل على المتابعين ، ومنع 
الاستفسارات عن أي متابع يتخلف أكثر من دقيقة عن القائد.• طريقة أخرى: يمكن للعميل 
تذكر الطابع الزمني لأحدثهاالكتابة - ثم يمكن للنظام التأكد من أن النسخة المتماثلة 
تخدم أي قراءة لذلكيعكس المستخدم التحديثات على الأقل حتى ذلك الطابع الزمني. إذا 
كانت النسخة المتماثلة ليست كافيةمحدثة ، يمكن إما معالجة القراءة بواسطة نسخة 
متماثلة أخرى ، أو يمكن الاستعلامانتظر حتى تلتقط النسخة المتماثلة. يمكن أن يكون 
الطابع الزمني طابعًا زمنيًا منطقيًا(شيء يشير إلى ترتيب عمليات الكتابة ، مثل رقم 
تسلسل السجل) ،أو ساعة النظام الفعلية (وفي هذه الحالة تصبح مزامنة الساعة أمرًا 
بالغ الأهمية ،انظر "الساعات غير الموثوقة" في الصفحة 278 ).• إذا تم توزيع النسخ 
المتماثلة الخاصة بك عبر مراكز بيانات متعددة (للمناطق الجغرافيةالقرب من 
المستخدمين أو للتوافر) ، هناك تعقيد إضافي. اي طلبالتي يجب أن يتم تقديمها من قبل 
القائد يجب توجيهها إلى مركز البيانات الذييلطخ القائد.تنشأ تعقيد آخر عندما يصل 
المستخدم نفسه إلى خدمتك من mul‐أجهزة متعددة ، على سبيل المثال متصفح ويب سطح 
المكتب وتطبيق جوال. في هذه الحالة أنتقد ترغب في توفير تناسق للقراءة بعد الكتابة 
عبر الأجهزة : إذا قام المستخدم بإدخال البعضالمعلومات الموجودة على أحد الأجهزة ، 
ثم عرضها على جهاز آخر ، يجب أن يشاهدوا ملفالمعلومات التي أدخلوها للتو.في هذه 
الحالة ، هناك بعض المشكلات الإضافية التي يجب مراعاتها:• الأساليب التي تتطلب تذكر 
الطابع الزمني لآخر تحديث للمستخدمأصبح أكثر صعوبة ، لأن الكود الذي يعمل على جهاز 
واحد لا يعرفما التحديثات التي حدثت على الجهاز الآخر. ستحتاج هذه البيانات الوصفية 
إلىأن تكون مركزية.• إذا تم توزيع النسخ المتماثلة الخاصة بك عبر مراكز بيانات 
مختلفة ، فلا يوجد ضمانيتم توجيه الاتصالات من أجهزة مختلفة إلى نفس مركز البيانات. 
(إلى عن علىعلى سبيل المثال ، إذا كان كمبيوتر سطح المكتب يستخدم اتصال النطاق 
العريض المنزلي ويستخدم الجهاز المحمول شبكة البيانات الخلوية ، وقد تكون مسارات 
الشبكة الخاصة بهم com‐مشاكل مع تأخر النسخ المتماثل | 157

      صفحة 180
مختلف تمامًا.) إذا كان أسلوبك يتطلب القراءة من القائد ، فيمكنك ذلكتحتاج أولاً 
إلى توجيه الطلبات من جميع أجهزة المستخدم إلى نفس مركز البيانات.يقرأ رتيبةمثالنا 
الثاني للشذوذ الذي يمكن أن يحدث عند القراءة من غير المتزامنالمتابعون: من الممكن 
للمستخدم أن يرى الأشياء تتحرك إلى الوراء في الوقت المناسب .يمكن أن يحدث هذا إذا 
أجرى المستخدم عدة قراءات من نسخ متماثلة مختلفة. فمثلا،يوضح الشكل 5-4 قيام 
المستخدم 2345 بإجراء نفس الاستعلام مرتين ، أولاً لمتابع مع القليلتأخرًا ، ثم إلى 
متابع يعاني من تأخر أكبر. (هذا السيناريو محتمل تمامًا إذا كان المستخدمتحديث صفحة 
ويب ، ويتم توجيه كل طلب إلى خادم عشوائي.) الاستعلام الأوليقوم بإرجاع تعليق تمت 
إضافته مؤخرًا بواسطة المستخدم 1234 ، ولكن الاستعلام الثانيلا يُرجع أي شيء ، لأن 
المتابع المتأخر لم يلتقط تلك الكتابة بعد.في الواقع ، فإن الاستعلام الثاني هو 
مراقبة النظام في وقت سابق منالاستعلام الأول. لن يكون الأمر سيئًا للغاية إذا لم 
يُرجع الاستعلام الأول أي شيء ، لأنهربما لن يعرف المستخدم 2345 أن المستخدم 1234 
قد أضاف تعليقًا مؤخرًا.ومع ذلك ، فإنه أمر محير للغاية بالنسبة للمستخدم 2345 إذا 
رأوا لأول مرة تعليق المستخدم 1234تظهر ، ثم تراها تختفي مرة أخرى.قراءة رتيبة [ 
19] ضمان عدم حدوث هذا النوع من الشذوذ. انهضمان أقل من الاتساق القوي ، ولكنه ضمان 
أقوى من الضمان النهائيحكمة. عندما تقرأ البيانات ، قد ترى قيمة قديمة ؛ القراءة 
الرتيبة تعني فقطأنه إذا أجرى مستخدم عدة قراءات متتالية ، فلن يرى الوقت يتراجع 
،أي أنهم لن يقرأوا البيانات القديمة بعد قراءة البيانات الأحدث مسبقًا.تتمثل إحدى 
طرق تحقيق قراءات رتيبة في التأكد من أن كل مستخدم يقوم بذلك دائمًاقراءاتهم من نفس 
النسخة المتماثلة (يمكن للمستخدمين المختلفين القراءة من نسخ متماثلة مختلفة).على 
سبيل المثال ، يمكن اختيار النسخة المتماثلة بناءً على تجزئة معرف المستخدم الخاص 
بهم ، بدلاً منبطريقة عشوائية.158 | الفصل 5: النسخ المتماثل

      صفحة 181
مستخدم 1234زعيمالمتابع 1المتابع 2مستخدم 2345الوقتإدراج في التعليقات(مؤلف ، رد ، 
رسالة)القيم (1234 ، 55555 ، "يبدو جيدًا!")أدخل موافقادخل فيتعليقات...ادخل 
فيتعليقات...حدد * من التعليقاتحيث reply_to = 55555لا نتائج!حدد * من التعليقاتحيث 
reply_to = 55555نتيجة واحدةالشكل 5-4. يقرأ المستخدم أولاً من نسخة متماثلة حديثة 
، ثم من نسخة متماثلة قديمة. وقتيبدو أنه يعود إلى الوراء. لمنع هذا الشذوذ ، نحتاج 
إلى قراءات رتيبة.يقرأ بادئة متسقةمثالنا الثالث على شذوذ تأخر النسخ المتماثل 
يتعلق بانتهاك السببية. إيماجوفي الحوار القصير التالي بين السيد Poons و Mrs 
Cake:السيد Poonsإلى أي مدى يمكنك رؤية المستقبل يا سيدة كيك؟كيك السيدةحوالي عشر 
ثوانٍ في العادة ، سيد بوونز.هناك علاقة سببية بين هاتين الجملتين: سمعت السيدة كيك 
السيدسؤال Poons '، وأجابته.الآن ، تخيل أن شخصًا ثالثًا يستمع إلى هذه المحادثة من 
خلال المتابعين. الالأشياء التي قالتها السيدة كيك تمر من خلال أحد المتابعين 
بتأخير بسيط ، لكن الأشياء التي قالهاالسيد Poons لديه تأخر أطول في النسخ المتماثل 
(انظر الشكل 5-5). هذا المراقب سوف يسمعالتالية:كيك السيدةحوالي عشر ثوانٍ في 
العادة ، سيد بوونز.السيد Poonsإلى أي مدى يمكنك رؤية المستقبل يا سيدة كيك؟بالنسبة 
للمراقب ، يبدو الأمر كما لو أن السيدة كيك تجيب على السؤال أمام السيدلقد سألها 
Poons حتى. هذه القوى النفسية مثيرة للإعجاب ، ولكنها أيضًا مربكة للغاية[21].مشاكل 
مع تأخر النسخ المتماثل | 159

      صفحة 182
السيد Poonsالقسم 1زعيمالقسم 1تابعكيك السيدةالقسم 2زعيمالقسم 2تابعمراقبالوقت"إلى 
أي مدى في المستقبلهل يمكنك أن ترى يا سيدة كيك؟ ""إلى أي مدى في المستقبلهل يمكنك 
أن ترى يا سيدة كيك؟ ""حوالي عشر ثوانعادة ، السيد Poons "."حوالي عشر ثوانعادة ، 
السيد Poons ".الشكل 5-5. إذا تم نسخ بعض الأقسام بشكل أبطأ من الأخرى ، فقد يرى 
مراقب ملفأجب قبل أن يروا السؤال.يتطلب منع هذا النوع من الشذوذ نوعًا آخر من 
الضمان: بادئة متسقةيقرأ [19 ]. ينص هذا الضمان على أنه إذا حدثت سلسلة من عمليات 
الكتابة بترتيب معين ،عندها سيرى أي شخص يقرأ تلك الكتابات ظهورها بنفس الترتيب.هذه 
مشكلة خاصة في قواعد البيانات المقسمة (المجزأة) ، والتي سنناقشهافي الفصل 6. إذا 
كانت قاعدة البيانات تطبق دائمًا عمليات الكتابة بالترتيب نفسه ، فسيتم عرض القراءة 
دائمًابادئة متسقة ، لذلك لا يمكن أن يحدث هذا الشذوذ. ومع ذلك ، في كثير وزعتقواعد 
البيانات ، تعمل الأقسام المختلفة بشكل مستقل ، لذلك لا يوجد ترتيب عالمي لـيكتب: 
عندما يقرأ المستخدم من قاعدة البيانات ، فقد يرى بعض أجزاء قاعدة البياناتفي حالة 
أقدم ، وبعضها في حالة أحدث.أحد الحلول هو التأكد من أن أي كتابات مرتبطة ارتباطًا 
سببيًا ببعضها البعضتتم كتابتها على نفس القسم - ولكن في بعض التطبيقات التي لا 
يمكن إجراؤها بطريقة فعالةبصحة. بشكل عام ، يتطلب ضمان قراءات البادئة المتسقة 
نوعًا من التوزيعمعاملة بضمان مثل عزل اللقطة . سنعود إلى هذا الموضوع فيالفصل 
7.حلول تأخير النسخ المتماثلعند العمل بنظام متسق أخيرًا ، يجدر التفكير في كيفية 
القيام بذلكيتصرف التطبيق إذا زاد تأخر النسخ المتماثل إلى عدة دقائق أو حتىساعات. 
إذا كانت الإجابة "لا مشكلة" ، فهذا رائع. ومع ذلك ، إذا كانت النتيجة عرضًا 
سيئًا160 | الفصل 5: النسخ المتماثل

      صفحة 183
رابعا. إذا كانت قاعدة البيانات مقسمة (انظرالفصل 6) ، كل قسم له قائد واحد. قد 
تحتوي الأقسام المختلفةقادتهم على عقد مختلفة ، ولكن يجب أن يحتوي كل قسم مع ذلك 
على عقدة رئيسية واحدة.صراحة للمستخدمين ، من المهم تصميم النظام لتوفير ضمان أقوى 
،مثل القراءة بعد الكتابة. التظاهر بأن النسخ المتماثل متزامن ، بينما هو في 
الواقعغير متزامن ، هو وصفة لمشاكل أسفل الخط.كما تمت مناقشته أعلاه ، هناك طرق 
يمكن أن يوفر بها التطبيق أقوىضمانًا من قاعدة البيانات الأساسية ، على سبيل المثال 
عن طريق أداء أنواع معينة منيقرأ على الزعيم. ومع ذلك ، فإن هذا يزيد من تعقيد 
التطبيق ، ويسهل القيام بهيخطئ.سيكون من الأفضل إذا لم يضطر مطورو التطبيقات إلى 
القلق بشأن النسخ المتماثلة الدقيقةيمكن أن تثق في قاعدة البيانات الخاصة بهم "لفعل 
الشيء الصحيح". هذا هو السببالمعاملات موجودة: فهي وسيلة لقاعدة البيانات لتوفير 
ضمانات أقوى ، لذلكأن التطبيق يمكن أن يكون أبسط.كانت المعاملات أحادية العقدة 
موجودة لفترة طويلة. ومع ذلك ، في الانتقال إلى dis‐قواعد بيانات تحية (منسوخة 
ومقسمة) ، تخلت عنها العديد من الأنظمة ،مدعيا أن المعاملات باهظة الثمن من حيث 
الأداء والتوافر ،والتأكيد على أن الاتساق النهائي أمر لا مفر منه في نظام قابل 
للتطوير. هذا ليسبالضرورة صحيح. سنعود إلى موضوع المعاملات فيالفصل 7.النسخ 
المتماثل متعدد القادةحتى الآن في هذا الفصل نظرنا فقط في النسخ المستند إلى 
القائد. برغم منهذا نموذج تكرار شائع ، وهناك بدائل مثيرة للاهتمام أيضًا.النسخ 
المتماثل المستند إلى القائد له جانب سلبي رئيسي واحد: لا يوجد سوى قائد واحد ، 
والجميعيكتب يجب أن يمر من خلاله. iv إذا لم تتمكن من الاتصال بالقائد لأي سبب من 
الأسباب ، من أجلعلى سبيل المثال بسبب انقطاع الشبكة بينك وبين القائد ، لا يمكنك 
الكتابة إليهقاعدة البيانات.الامتداد الطبيعي لنموذج النسخ المتماثل القائم على 
القائد هو السماح بأكثر من نموذجعقدة لقبول الكتابة. لا يزال النسخ المتماثل يحدث 
بنفس الطريقة: كل عقدة تقدميجب أن تقوم عمليات الكتابة بإعادة توجيه تغيير البيانات 
إلى جميع العقد الأخرى. نسمي هذا أتكوين متعدد القادة (يُعرف أيضًا باسم النسخ 
المتماثل الرئيسي أو النشط / النشط ).في هذا الإعداد ، يعمل كل قائد في نفس الوقت 
على أنه تابع للقادة الآخرين.حالات الاستخدام للنسخ المتماثل متعدد القادةنادرًا ما 
يكون من المنطقي استخدام إعداد متعدد القادة داخل مركز بيانات واحد ، لأننادرا ما 
تفوق الفوائد التعقيد الإضافي. ومع ذلك ، هناك بعض المواقعالتي يكون فيها هذا 
تكوينًا معقولًا.النسخ المتماثل متعدد القادة | 161

      صفحة 184
عملية متعددة مراكز البياناتتخيل أن لديك قاعدة بيانات بها نسخ متماثلة في عدة 
مراكز بيانات مختلفة (ربما يكون الأمر كذلكأنه يمكنك تحمل فشل مركز بيانات بأكمله ، 
أو ربما من أجل أن تكون أقربللمستخدمين). مع إعداد النسخ المتماثل العادي القائم 
على القائد ، يجب أن يكون القائد فيأحد مراكز البيانات ، وجميع عمليات الكتابة يجب 
أن تمر عبر مركز البيانات هذا.في تكوين متعدد القادة ، يمكن أن يكون لديك قائد في 
كل مركز بيانات. الشكل 5-6يوضح الشكل الذي قد تبدو عليه هذه العمارة. داخل كل مركز 
بيانات ، قائد منتظم-يتم استخدام تكرار المتابعين ؛ بين مراكز البيانات ، يكرر قائد 
كل مركز بياناتتغييراته على القادة في مراكز البيانات 
الأخرى.متابعزعيمالتغييراتنزاعالدقةقراءة و 
كتابةاستفساراتزعيممتابعالتغييراتنزاعالدقةقراءة و كتابةاستفساراتمركز البيانات 
1مركز البيانات 2الشكل 5-6. النسخ المتماثل متعدد القادة عبر مراكز بيانات 
متعددة.دعنا نقارن أداء تكوينات القائد الفردي ومتعدد القادة فينشر مركز 
البيانات:أداءفي تكوين القائد الفردي ، يجب أن تنتقل كل عملية كتابة عبر الإنترنت 
إلى ملفمركز البيانات مع القائد. يمكن أن يضيف هذا وقت استجابة كبير للكتابات ، 
والقوةيتعارض مع الغرض من وجود عدة مراكز بيانات في المقام الأول. فيتكوين متعدد 
القادة ، يمكن معالجة كل عملية كتابة في مركز البيانات المحلي ،ويتم نسخه بشكل غير 
متزامن مع مراكز البيانات الأخرى. وبالتالي فإن inter-يتم إخفاء تأخير شبكة مركز 
البيانات عن المستخدمين ، مما يعني أن القيمة المتصورةقد يكون الشكل أفضل.التسامح 
مع انقطاعات مركز البياناتفي التكوين ذي القائد الفردي ، إذا فشل مركز البيانات مع 
القائد ، تجاوز الفشليمكن أن تروج لأحد المتابعين في مركز بيانات آخر ليكون قائدًا. 
في كون متعدد القادة162 | الفصل 5: النسخ المتماثل

      الصفحة 185
التشكيل ، يمكن أن يستمر كل مركز بيانات في العمل بشكل مستقل عن الآخرين ،ويلحق 
النسخ المتماثل عندما يعود مركز البيانات الفاشل إلى الإنترنت.التسامح مع مشاكل 
الشبكةعادة ما تمر حركة المرور بين مراكز البيانات عبر الإنترنت العام ، وقد 
يكونأقل موثوقية من الشبكة المحلية داخل مركز البيانات. تكوين قائد واحدالحصص 
الغذائية حساسة جدًا للمشكلات الموجودة في ارتباط مركز البيانات هذا ، لأن يكتبتتم 
بشكل متزامن عبر هذا الارتباط. تكوين متعدد القادة مع Asyn‐يمكن للنسخ المتماثل أن 
يتسامح مع مشاكل الشبكة بشكل أفضل: مؤقتلا يمنع انقطاع الشبكة معالجة عمليات 
الكتابة.تدعم بعض قواعد البيانات تكوينًا متعدد القادة افتراضيًا ، ولكنه غالبًا ما 
يكون كذلكتم تنفيذه بأدوات خارجية ، مثل Tungsten Replicator for MySQL [ 22 ] ، 
BDRلـ PostgreSQL [23 ] ، و GoldenGate لـ Oracle [15].على الرغم من أن النسخ 
المتماثل متعدد القادة له مزايا ، إلا أن له أيضًا جانبًا سلبيًا كبيرًا:قد يتم 
تعديل نفس البيانات بشكل متزامن في مركزين مختلفين للبيانات ، وتلك الكتابةيجب حل 
النزاعات (يشار إليها باسم "حل النزاع" في الشكل 5-6 ). سنقومناقش هذا في "معالجة 
تعارض الكتابة" في الصفحة 164.نظرًا لأن النسخ المتماثل متعدد القادة هو ميزة تم 
تعديلها إلى حد ما في العديد من قواعد البيانات ، هناكغالبًا ما تكون عيوبًا خفية 
في التكوين وتفاعلات مفاجئة مع قاعدة بيانات أخرىالميزات. على سبيل المثال ، يمكن 
زيادة المفاتيح والمشغلات وقيود التكامل تلقائيًاتكون إشكالية. لهذا السبب ، غالبًا 
ما يُعتبر النسخ متعدد القادة خطرًا‐المنطقة التي ينبغي تجنبها إن أمكن 
[24].العملاء مع العملية دون اتصال بالإنترنتهناك موقف آخر يكون فيه النسخ المتماثل 
متعدد القادة مناسبًا إذا كان لديك ملفالتطبيق الذي يحتاج إلى متابعة العمل أثناء 
فصله عن الإنترنت.على سبيل المثال ، ضع في اعتبارك تطبيقات التقويم على هاتفك 
المحمول والكمبيوتر المحمول وأجهزة أخرى. يجب أن تكون قادرًا على رؤية اجتماعاتك 
(تقديم طلبات قراءة) وإنشاءتناول اجتماعات جديدة (تقديم طلبات كتابة) في أي وقت ، 
بغض النظر عما إذا كانالجهاز متصل حاليًا بالإنترنت. إذا قمت بإجراء أي تغييرات 
أثناء وجودكفي وضع عدم الاتصال ، يجب مزامنتها مع خادم وأجهزتك الأخرى عندما يكون 
الجهازهو التالي عبر الإنترنت.في هذه الحالة ، يحتوي كل جهاز على قاعدة بيانات 
محلية تعمل كقائد (يقبل الكتابةالطلبات) ، وتوجد عملية نسخ متعددة القادة غير 
متزامنة (مزامنة)بين النسخ المتماثلة للتقويم الخاص بك على جميع أجهزتك. قد يتأخر 
النسخ المتماثلتكون ساعات أو حتى أيام ، حسب الوقت الذي يتوفر فيه اتصال 
بالإنترنت.من وجهة نظر معمارية ، هذا هو في الأساس نفس الرد متعدد القادةالكاتيون 
بين مراكز البيانات ، إلى أقصى الحدود: كل جهاز هو "مركز بيانات" ، واتصال الشبكة 
بينهما غير موثوق به للغاية. مثل التاريخ الغني لالنسخ المتماثل متعدد القادة | 163

      الصفحة 186
توضح تطبيقات مزامنة التقويم المعطلة ، والنسخ متعدد القادة هو ملفشيء مخادع للحصول 
على حق.هناك أدوات تهدف إلى تسهيل هذا النوع من التكوين متعدد القادة. إلى عن 
علىعلى سبيل المثال ، تم تصميم CouchDB لهذا الوضع من التشغيل [ 25].التحرير 
التعاونيتسمح تطبيقات التحرير التعاونية في الوقت الحقيقي للعديد من الأشخاص بتحرير 
مستندالوقت ذاته. على سبيل المثال ، Etherpad [ 26 ] ومُحرر مستندات Google [ 27] 
تسمح بعدة أشخاصple لتحرير مستند نصي أو جدول بيانات بشكل متزامن (يتم عرض 
الخوارزمية لفترة وجيزةcussed في "حل النزاع التلقائي" في الصفحة 167 ).لا نفكر 
عادةً في التحرير التعاوني باعتباره مشكلة نسخ قاعدة البيانات ، ولكنلديها الكثير 
من القواسم المشتركة مع حالة استخدام التحرير دون اتصال المذكورة سابقًا. متييقوم 
مستخدم واحد بتحرير مستند ، ويتم تطبيق التغييرات على الفور على النسخة المتماثلة 
المحلية (ملفحالة المستند في مستعرض الويب أو تطبيق العميل) ، و asynchroيتم نسخها 
بدقة إلى الخادم وأي مستخدمين آخرين يقومون بتحرير نفس المستندمنة.إذا كنت تريد 
ضمان عدم وجود تعارضات في التحرير ، فيجب على التطبيقالحصول على قفل على المستند 
قبل أن يتمكن المستخدم من تحريره. إذا أراد مستخدم آخر التعديلنفس المستند ، يجب 
عليهم أولاً الانتظار حتى يلتزم المستخدم الأولالتغييرات وأطلق سراح القفل. نموذج 
التعاون هذا يعادل القائد الفرديالنسخ المتماثل مع المعاملات على القائد.ومع ذلك ، 
من أجل تعاون أسرع ، قد ترغب في جعل وحدة التغيير غاية في الأهميةصغيرة (مثل ضغطة 
واحدة) ، وتجنب القفل. هذا يسمح لعدة مستخدمين بالتحريرفي وقت واحد ، ولكنه يجلب 
أيضًا جميع تحديات النسخ متعدد القادة ،بما في ذلك طلب حل النزاع.التعامل مع 
تعارضات الكتابةأكبر مشكلة في النسخ المتماثل متعدد القادة هي إمكانية حدوث تعارضات 
في الكتابة ،مما يعني أن حل النزاع مطلوب.على سبيل المثال ، ضع في اعتبارك صفحة 
wiki يتم تحريرها في نفس الوقت بواسطة مستخدمين ، مثلهو مبين في الشكل 5-7. يقوم 
المستخدم 1 بتغيير عنوان الصفحة من أ إلى ب ، والمستخدم 2يغير العنوان من A إلى C 
في نفس الوقت. يتم تغيير كل مستخدم بنجاحتنطبق على زعيمهم المحلي. ومع ذلك ، عندما 
تكون التغييرات نسخة متماثلة بشكل غير متزامنتيد ، تم الكشف عن تعارض [ 28 ]. لا 
تحدث هذه المشكلة في البيانات ذات القائد الواحد‐قاعدة.164 | الفصل 5: النسخ 
المتماثل

      صفحة 187
المستخدم 1القائد 1القائد 2المستخدم 2الوقتصفحات التحديثتعيين العنوان = "ب"حيث 
المعرف = 123حسناصفحات التحديثتعيين العنوان = 'C'حيث المعرف = 123حسنامعرف التغيير 
= 123:قديم = أ ، جديد = جمعرف التغيير = 123 ،قديم = أ ، جديد = بالتعارض: لا يمكن 
تغيير العنوان من أ إلى ج ،لأن العنوان الآن بالتعارض: لا يمكن تغيير العنوان من أ 
إلى ب ،لأن العنوان الآن Cبدءا، هناكالصفحة ذاتمعرف = 123 ، العنوان = أالشكل 5-7. 
تعارض في الكتابة سببه قائدان يقومان بتحديث نفس الشيء في نفس الوقتسجل.كشف الصراع 
المتزامن مقابل غير المتزامنفي قاعدة بيانات ذات قائد واحد ، يقوم الكاتب الثاني 
إما بحظر الأول وانتظارهالكتابة لإكمال أو إحباط معاملة الكتابة الثانية ، مما يجبر 
المستخدم على إعادة محاولةاكتب.من ناحية أخرى ، في الإعداد متعدد القادة ، يكون كلا 
الكتابين ناجحين ، بينمايتم اكتشاف flict بشكل غير متزامن فقط في وقت لاحق. في ذلك 
الوقت ، قد يكونفات الأوان لمطالبة المستخدم بحل التعارض.من حيث المبدأ ، يمكنك جعل 
اكتشاف التعارض متزامنًا ، على سبيل المثال ، انتظر ملفاكتب ليتم تكراره على جميع 
النسخ المتماثلة قبل إخبار المستخدم أن الكتابة كانت ناجحة‐فول. ومع ذلك ، من خلال 
القيام بذلك ، ستفقد الميزة الرئيسية للرد متعدد القادةالكاتيون: السماح لكل نسخة 
بقبول الكتابة بشكل مستقل. إذا كنت تريد متزامناكتشاف الصراع ، يمكنك أيضًا استخدام 
النسخ المتماثل للقائد الفردي.تجنب الصراعإن أبسط استراتيجية للتعامل مع النزاعات 
هي تجنبها: إذا كان التطبيق قادرًا على ذلكتأكد من أن جميع عمليات الكتابة لسجل 
معين تمر من خلال نفس القائد ، ثملا يمكن أن تحدث الكسور. منذ العديد من تطبيقات 
مقبض النسخ المتماثل متعدد القادةالنزاعات سيئة للغاية ، فإن تجنب النزاعات هو نهج 
يوصى به كثيرًا [ 29 ].على سبيل المثال ، في أحد التطبيقات حيث يمكن للمستخدم تحرير 
بياناته الخاصة ، يمكنك التأكد من ذلكأن الطلبات من مستخدم معين يتم توجيهها دائمًا 
إلى نفس مركز البيانات ، واستخدامهاالرائد في مركز البيانات هذا للقراءة والكتابة. 
قد يختلف المستخدمون المختلفونالنسخ المتماثل متعدد القادة | 165

      الصفحة 188
مراكز بيانات "المنزل" (ربما يتم اختيارها بناءً على القرب الجغرافي من المستخدم) 
،ولكن من وجهة نظر أي مستخدم ، فإن التكوين هو في الأساس قائد واحد.ومع ذلك ، في 
بعض الأحيان قد ترغب في تغيير القائد المعين لسجل -ربما بسبب فشل أحد مراكز 
البيانات وتحتاج إلى إعادة توجيه حركة المرور إلى مركز آخرمركز البيانات ، أو ربما 
بسبب انتقال المستخدم إلى موقع مختلف وهو الآنأقرب إلى مركز بيانات مختلف. في هذه 
الحالة ، ينهار تجنب الصراع ، وعليك أن تتعامل مع إمكانية الكتابة المتزامنة عن 
قادة مختلفين.تتقارب نحو دولة متسقةتطبق قاعدة البيانات ذات القائد الفردي عمليات 
الكتابة بترتيب تسلسلي: إذا كان هناك العديد منهابالتحديثات إلى نفس الحقل ، تحدد 
الكتابة الأخيرة القيمة النهائية للحقل.في التكوين متعدد القادة ، لا يوجد ترتيب 
محدد للكتابة ، لذا فهو غير واضحما يجب أن تكون القيمة النهائية. في الشكل 5-7 عند 
القائد 1 ، يتم تحديث العنوان أولاً إلى Bثم إلى C ؛ في الزعيم 2 ، يتم تحديثه 
أولاً إلى C ثم إلى B. ولا يتم تحديث أي من الرتبتين"أصح" من الآخر.إذا كانت كل 
نسخة طبق الأصل تكتب بالترتيب الذي رأت فيه عمليات الكتابة ، فإن قاعدة 
البياناتسينتهي الأمر في حالة غير متسقة: ستكون القيمة النهائية C عند القائد 1 و B 
عندزعيم 2. هذا غير مقبول - يجب أن يضمن كل مخطط تكرار البياناتفي النهاية هو نفسه 
في جميع النسخ المتماثلة. وبالتالي ، يجب أن تحل قاعدة البيانات التعارض في 
ملفطريقة التقارب ، مما يعني أن جميع النسخ المتماثلة يجب أن تصل إلى نفس القيمة 
النهائيةعندما يتم تكرار جميع التغييرات.هناك طرق مختلفة لتحقيق حل متقارب للنزاع:• 
امنح كل كتابة معرفًا فريدًا (على سبيل المثال ، طابع زمني ، أو رقم عشوائي طويل ، 
أو UUID ،أو تجزئة المفتاح والقيمة) ، اختر الكتابة ذات الرقم التعريفي الأعلى 
باعتباره الفائز ،ورمي بعيدا يكتب الآخر. إذا تم استخدام الطابع الزمني ، فإن هذه 
التقنية معروفةكما انتصارات كتابة مشاركة (LWW). على الرغم من أن هذه التقنية شائعة 
، إلا أنها خطيرةعرضة لفقدان البيانات [ 30]. سنناقش LWW بمزيد من التفصيل في نهاية 
هذاالفصل ( "الكشف عن عمليات الكتابة المتزامنة" في الصفحة 178 ).• امنح كل نسخة 
معرّفًا فريدًا ، ودع عمليات الكتابة التي نشأت في مستوى أعلى-دائمًا ما يكون 
للنسخة المتماثلة المرقمة الأسبقية على الكتابات التي نشأت فينسخة مرقمة. هذا يعني 
أيضا فقدان البيانات.• دمج القيم معًا بطريقة ما ، على سبيل المثال ترتيبها أبجديًا 
ثماجمعهم (بتنسيق الشكل 5-7 ، قد يكون العنوان المدمج شيئًا مثل "B / C").• تسجيل 
التعارض في بنية بيانات صريحة تحافظ على جميع المعلومات ،وكتابة رمز التطبيق الذي 
يحل التعارض في وقت لاحق (per‐haps عن طريق مطالبة المستخدم).166 | الفصل 5: النسخ 
المتماثل

      الصفحة 189
منطق حل النزاع المخصصنظرًا لأن الطريقة الأنسب لحل التعارض قد تعتمد على التطبيق 
،تتيح لك معظم أدوات النسخ متعددة القادة كتابة منطق حل النزاع باستخدام appli‐كود 
الكاتيون. يمكن تنفيذ هذا الرمز عند الكتابة أو القراءة:عند الكتابةبمجرد أن يكتشف 
نظام قاعدة البيانات وجود تعارض في سجل التغييرات المنسوخة ،تستدعي معالج التعارض. 
على سبيل المثال ، يسمح لك بوكاردو بكتابة مقتطف منبيرل لهذا الغرض. لا يستطيع هذا 
المعالج عادةً مطالبة المستخدم - فهو يعمل في ملفعملية الخلفية ويجب أن يتم تنفيذها 
بسرعة.عند القراءةعند اكتشاف تعارض ، يتم تخزين جميع الكتابات المتضاربة. في المرة 
القادمةيتم قراءة البيانات ، يتم إرجاع هذه الإصدارات المتعددة من البيانات إلى 
التطبيقنشوئها. قد يطالب التطبيق المستخدم أو يحل التعارض تلقائيًا ،واكتب النتيجة 
مرة أخرى إلى قاعدة البيانات. يعمل CouchDB بهذه الطريقة ، على سبيل المثال.لاحظ أن 
حل التعارض ينطبق عادة على مستوى صف فردي أو docu‐منة ، ليس لمعاملة كاملة [31 ]. 
وبالتالي ، إذا كان لديك صفقة أن atomiكالي يكتب عدة كتابات مختلفة (انظر الفصل 7) 
، كل كتابة لا تزال تعتبربشكل منفصل لأغراض حل النزاعات.حل النزاع التلقائييمكن أن 
تصبح قواعد حل التعارض معقدة بسرعة ، ويمكن أن تكون التعليمات البرمجية المخصصة 
كذلكمعرض للخطأ. الأمازون هو مثال يُستشهد به كثيرًا للتأثيرات المفاجئة بسبب 
الخداعمعالج حل flict: لبعض الوقت ، منطق حل النزاع على التسوقستحتفظ عربة التسوق 
بالعناصر المضافة إلى العربة ، ولكن لا تحافظ على العناصر التي تمت إزالتها من 
السلة.وبالتالي ، قد يرى العملاء أحيانًا ظهور العناصر في سلة التسوق الخاصة بهم 
على الرغم من ذلكلقد تم إزالتهم من قبل [32].كانت هناك بعض الأبحاث المثيرة 
للاهتمام حول حل النزاعات تلقائيًابسبب تعديلات البيانات المتزامنة. هناك بضعة أسطر 
من البحث جديرة بالذكرعمل:• أنواع البيانات المنسوخة الخالية من التعارض (CRDTs) 
[33] هي عائلة من هياكل البيانات لـالمجموعات والخرائط والقوائم المرتبة والعدادات 
وما إلى ذلك والتي يمكن تحريرها بشكل متزامن بواسطة متعددple ، والتي تحل النزاعات 
تلقائيًا بطرق معقولة. بعضتم تنفيذ CRDTs في Riak 2.0 [34، 35 ].• هياكل البيانات 
الدائمة القابلة للدمج [ 36 ] تتبع التاريخ بشكل واضح ، على غراربوابة نظام التحكم 
في الإصدار ، واستخدام وظيفة دمج ثلاثية (بينما CRDTsاستخدام عمليات الدمج ثنائية 
الاتجاه).• التحول التشغيلي [37] هي خوارزمية حل النزاع وراء col‐تطبيقات التحرير 
المخبري مثل Etherpad [ 26 ] و Google Docs [ 27 ]. انهاالنسخ المتماثل متعدد 
القادة | 167

      الصفحة 190
مصمم خصيصًا للتحرير المتزامن لقائمة مرتبة من العناصر ، مثلقائمة الأحرف التي تشكل 
مستندًا نصيًا.لا تزال تطبيقات هذه الخوارزميات حديثة العهد ، ولكن من المحتمل أن 
تكون كذلكدمجها في أنظمة بيانات أكثر تكرارًا في المستقبل: حل النزاعات 
تلقائيًايمكن أن يجعل مزامنة البيانات متعددة القادة أبسط بكثير للتعامل مع 
التطبيقاتمع.ما هو الصراع؟بعض أنواع الصراع واضحة. في المثال في الشكل 5-7اثنان 
يكتب concur‐قام بتعديل نفس الحقل في نفس السجل بشكل متكرر ، مع تعيينه على قيمتين 
مختلفتين.ليس هناك شك في أن هذا صراع.يمكن أن تكون أنواع التعارض الأخرى أكثر دقة 
للكشف عنها. على سبيل المثال ، ضع في اعتبارك اجتماعًانظام حجز الغرف: يتتبع الغرفة 
المحجوزة من قبل أي مجموعة من الأشخاص فيمره واحده. يحتاج هذا التطبيق إلى التأكد 
من أن كل غرفة محجوزة بواحد فقطمجموعة من الأشخاص في وقت واحد (أي يجب ألا يكون 
هناك أي حجوزات متداخلة لـنفس الغرفة).في هذه الحالة ، قد ينشأ تعارض إذا تم إنشاء 
حجزين مختلفين لنفس الشيءغرفة في نفس الوقت. حتى إذا تحقق التطبيق من التوفر قبل 
السماح لـيقوم المستخدم بالحجز ، يمكن أن يكون هناك تعارض إذا تم إجراء الحجزين على 
اثنينقادة مختلفين.تم اقتراح حلول لهذه المشكلة [38 ] ، ولكن قد يكون من الصعب 
تنفيذها فيهممارسة. في الوقت الحالي ، يعد اكتشاف التعارضات سؤالاً يجب التفكير فيه 
عند تصميم ملفنظام مكرر ، ولكن لا توجد إجابة سريعة جاهزة.طبولوجيا النسخ المتماثل 
متعدد القادةA طوبولوجيا تكرار يصف مسارات الاتصالات جنبا إلى جنب الذي يكتب لتنتشر 
من عقدة إلى أخرى. إذا كان لديك قائدان ، كما في الشكل 5-7 ،لا يوجد سوى طوبولوجيا 
واحدة معقولة: يجب على القائد 1 إرسال جميع كتاباته إلى القائد 2 ،والعكس صحيح. مع 
وجود أكثر من اثنين من القادة ، من الممكن وجود العديد من الهياكل المختلفة.بعض 
الأمثلة موضحة في الشكل 5-8.168 | الفصل 5: النسخ المتماثل

      الصفحة 191
v. عدم الخلط بينه وبين مخطط النجوم (انظر"النجوم والثلج: مخططات للتحليلات" في 
الصفحة 90) ،الذي يصف بنية نموذج البيانات ، وليس طوبولوجيا الاتصال بين العقد.(أ) 
الهيكل الدائري(ب) طوبولوجيا النجوم(ج) طوبولوجيا الكل للجميعالشكل 5-8. ثلاثة 
نماذج طبولوجيا يمكن فيها إعداد النسخ المتماثل متعدد القادة.الهيكل الأكثر عمومية 
هو الكل للجميع (الشكل 5-8 (ج)) ، حيث يرسل كل قائد ما لديهيكتب إلى كل زعيم آخر. 
ومع ذلك ، يتم أيضًا استخدام المزيد من الهياكل المقيدة: لـعلى سبيل المثال ، تدعم 
MySQL افتراضيًا الهيكل الدائري فقط [ 29] ، وفي كل منهاتستقبل العقدة عمليات 
الكتابة من عقدة واحدة ، وتقوم بإعادة توجيه تلك عمليات الكتابة (بالإضافة إلى أي 
عمليات كتابة منالخاصة) إلى عقدة أخرى. طوبولوجيا شائعة أخرى لها شكل نجمة : v one 
desig‐تقوم العقدة الجذرية المحددة بإعادة الكتابة إلى جميع العقد الأخرى. يمكن أن 
تكون طوبولوجيا النجوممعمم على الشجرة.في الهيكل الدائري والنجمي ، قد تحتاج 
الكتابة إلى المرور عبر عدة عقد من قبليصل إلى جميع النسخ المتماثلة. لذلك ، تحتاج 
العقد إلى إعادة توجيه تغييرات البيانات التي تتلقاهامن العقد الأخرى. لمنع حلقات 
النسخ المتماثل اللانهائية ، يتم إعطاء كل عقدة فريدةالمعرف ، وفي سجل النسخ 
المتماثل ، يتم تمييز كل عملية كتابة بمعرفات جميع ملفاتالعقدة التي مرت عبرها [ 
39]. عندما تتلقى عقدة تغيير البيانات التي تم وضع علامة عليهابمعرفها الخاص ، يتم 
تجاهل تغيير البيانات ، لأن العقدة تعرف ذلكتمت معالجته بالفعل.مشكلة في الهيكل 
الدائري والنجمي هي أنه إذا فشلت عقدة واحدة فقط ، يمكن أن تتداخل.تمزق تدفق رسائل 
النسخ المتماثل بين العقد الأخرى ، مما يجعلها غير قادرةللتواصل حتى يتم إصلاح 
العقدة. يمكن إعادة تشكيل الهيكل للعملحول العقدة الفاشلة ، ولكن في معظم عمليات 
النشر ، يجب أن يتم إعادة التكوين هذهيتم ذلك يدويًا. التسامح مع الخطأ لطوبولوجيا 
أكثر كثافة (مثلالكل إلى الكل) أفضل ، لأنه يسمح للرسائل بالانتقال عبر مسارات 
مختلفة ، وتجنبهانقطة واحدة من الفشل.من ناحية أخرى ، يمكن أن تواجه الهياكل 
الشاملة للجميع مشكلات أيضًا. على وجه الخصوص ، بعض net‐قد تكون روابط العمل أسرع 
من غيرها (على سبيل المثال بسبب ازدحام الشبكة) ، مع النتيجةأن بعض رسائل النسخ قد 
"تتجاوز" الآخرين ، كما هو موضح في الشكل 5-9 .النسخ المتماثل متعدد القادة | 169

      صفحة 192
العميل أالعميل بالقائد 1القائد 2القائد 3الوقتحسناإدراج…القيمة = 1تحديث…القيمة = 
2إدراج…القيمة = 1تحديث…القيمة = 2حسناأدخل في البيانات(مفتاح ، قيمة)القيم ('x'، 
1)تحديث البياناتتعيين القيمة = القيمة + 1حيث المفتاح = 'x'تحديث تابعيصل قبل 
الإدراجالشكل 5-9. مع النسخ المتماثل متعدد القادة ، قد تصل الكتابة بالترتيب 
الخاطئ للبعضالنسخ المتماثلة.في الشكل 5-9 ، يُدرج العميل A صفًا في جدول على 
القائد 1 ، ويقوم العميل B بتحديث ذلكصف على زعيم 3. ومع ذلك ، قد يتلقى الزعيم 2 
الكتابات بترتيب مختلف: يجوزتلقي التحديث أولاً (والذي يعتبر ، من وجهة نظره ، 
تحديثًا لصف يفعل ذلكغير موجود في قاعدة البيانات) ، ولا تتلقى إلا لاحقًا الملحق 
المقابل (الذييجب أن يسبق التحديث).هذه مشكلة سببية ، مشابهة لتلك التي رأيناها في 
"قراءة البادئة المتسقة"في الصفحة 159: التحديث يعتمد على الإدخال السابق ، لذلك 
نحن بحاجة للتأكد من ذلك كلهتقوم العقد بمعالجة الإدخال أولاً ، ثم التحديث. ما 
عليك سوى إرفاق طابع زمني بـكل كتابة غير كافية ، لأنه لا يمكن الوثوق بالساعات 
بحيث تكون متزامنة بشكل كافٍلترتيب هذه الأحداث بشكل صحيح في الزعيم 2 (انظر الفصل 
8).لترتيب هذه الأحداث بشكل صحيح ، يمكن استخدام تقنية تسمى متجهات الإصدار ، 
والتيسنناقش لاحقًا في هذا الفصل (انظر "الكشف عن عمليات الكتابة المتزامنة" في 
الصفحة 178).ومع ذلك ، يتم تنفيذ تقنيات الكشف عن الصراع بشكل سيئ في العديد من 
القادة المتعددينأنظمة النسخ المتماثل. على سبيل المثال ، في وقت كتابة هذا التقرير 
، لم يكن PostgreSQL BDR كذلكتقديم ترتيب سببي للكتابات [ 23] ، و Tungsten 
Replicator لـ MySQL لا يفعل ذلكحتى محاولة الكشف عن التعارضات [ 29].إذا كنت 
تستخدم نظامًا مع تكرار متعدد القادة ، فمن الجدير أن تكون على دراية بههذه 
المشكلات ، وقراءة الوثائق بعناية ، واختبار بياناتك بدقة‐قاعدة للتأكد من أنها 
توفر حقًا الضمانات التي تعتقد أنها تتمتع بها.170 | الفصل 5: النسخ المتماثل

      الصفحة 193
السادس. Dynamo غير متاح للمستخدمين خارج Amazon. بشكل محير ، تقدم AWS منتج قاعدة 
بيانات مستضافيسمى DynamoDB ، والذي يستخدم بنية مختلفة تمامًا: فهو يعتمد على نسخ 
القائد الفردي.النسخ المتماثل بلا زعيممناهج النسخ التي ناقشناها حتى الآن في هذا 
الفصل - القائد الفرديوالنسخ المتماثل متعدد القادة - تستند إلى فكرة أن العميل 
يرسل رسالة مكتوبةطلب إلى عقدة واحدة (القائد) ، ويهتم نظام قاعدة البيانات بنسخ 
ذلكالكتابة إلى النسخ المتماثلة الأخرى. يحدد القائد الترتيب الذي يجب أن تكون عليه 
الكتابةتتم معالجتها ، ويطبق المتابعون كتابات القائد بنفس الترتيب.تتخذ بعض أنظمة 
تخزين البيانات نهجًا مختلفًا ، متجاهلة مفهوم أالقائد ، والسماح لأي نسخة متماثلة 
بقبول ما يكتب من العملاء مباشرة. قليلا من الكانت أنظمة البيانات المكررة الأقدم 
بلا زعيم [ 1، 40 ] ، ولكن تم نسيان الفكرة في الغالبعشرة خلال عصر هيمنة قواعد 
البيانات العلائقية. مرة أخرى أصبح فاشاالعمارة المتأينة لقواعد البيانات بعد أن 
استخدمتها أمازون في Dynamo الداخليالنظام [32 ]. vi Riak و Cassandra و Voldemort 
هي مخازن بيانات مفتوحة المصدر مع القائد‐أقل من نماذج النسخ المستوحاة من Dynamo ، 
لذلك يُعرف هذا النوع من قواعد البيانات أيضًا باسمأسلوب دينامو .في بعض التطبيقات 
بدون قيادة ، يرسل العميل كتاباته مباشرة إلى عدة ممثلينLicas ، بينما في حالات 
أخرى ، تقوم عقدة المنسق بذلك نيابة عن العميل. ومع ذلك،على عكس قاعدة بيانات 
القائد ، لا يفرض هذا المنسق أمرًا معينًا لـيكتب. كما سنرى ، فإن لهذا عواقب وخيمة 
على طريقة قاعدة البياناتتستخدم.الكتابة إلى قاعدة البيانات عندما تكون العقدة 
معطلةتخيل أن لديك قاعدة بيانات بها ثلاث نسخ متماثلة ، وإحدى النسخ المتماثلة 
موجودة حاليًاغير متوفر - ربما يتم إعادة تشغيله لتثبيت تحديث النظام. في 
القائد-التكوين المعتمد ، إذا كنت ترغب في متابعة معالجة الكتابات ، فقد تحتاج 
إلىمن تجاوز الفشل (راجع "معالجة انقطاعات العقد" في الصفحة 150).من ناحية أخرى ، 
في تكوين بلا قيادة ، لا توجد تجاوز الفشل. الشكل 5-10يظهر ما يحدث: العميل 
(المستخدم 1234) يرسل الكتابة إلى جميع النسخ المتماثلة الثلاثة في par‐allel ، 
تقبل النسختان المتماثلتان المتوفرتان الكتابة ، لكن النسخة المتماثلة غير المتاحة 
تفتقد إلىاكتب. لنفترض أنه يكفي نسختين من أصل ثلاث نسخ متماثلة للإقرار 
بامتداداكتب: بعد أن يتلقى المستخدم 1234 ردين طيبين ، نعتبر أن الكتابة كانت 
ناجحة‐جبنة. يتجاهل العميل ببساطة حقيقة أن إحدى النسخ المتماثلة فاتتها 
الكتابة.النسخ المتماثل | 171

      صفحة 194
نسخة 1نسخة 2نسخة 3الوقتتعيين المفتاح = users.1234.picture_urlالقيمة = 
'me-new.jpg'ضبط القيمة = 'me-new.jpg'الإصدار = 7الحصول على المفتاح = 
users.1234.picture_urlحسناالقيمة = 'me-new.jpg'الإصدار = 7القيمة = 
'me-new.jpg'الإصدار = 7القيمة = 'me-old.jpg'الإصدار = 6حسناحسنامستخدم 1234مستخدم 
2345عقدة حالياالشكل 5-10. نصاب كتابة ، قراءة النصاب ، وقراءة الإصلاح بعد انقطاع 
العقدة.تخيل الآن أن العقدة غير المتاحة تعود إلى الاتصال بالإنترنت ، ويبدأ 
العملاء في القراءةمنه. أي عمليات كتابة حدثت أثناء تعطل العقدة مفقودة من 
ذلكالعقدة. وبالتالي ، إذا قرأت من تلك العقدة ، فقد تحصل على قيم قديمة (قديمة) 
مثلاستجابات.لحل هذه المشكلة ، عندما يقرأ العميل من قاعدة البيانات ، فإنه لا يرسل 
ملفاتطلب نسخة متماثلة واحدة: يتم إرسال طلبات القراءة أيضًا إلى عدة عقد بالتوازي 
. كليتشقد تحصل ent على استجابات مختلفة من عقد مختلفة ، على سبيل المثال القيمة 
المحدثة منعقدة واحدة وقيمة قديمة من أخرى. رقم الإصدار يستخدم لتحديدما هي القيمة 
الأحدث (راجع "الكشف عن عمليات الكتابة المتزامنة" في الصفحة 178).اقرأ الإصلاح 
ومكافحة الانتروبيايجب أن يضمن مخطط النسخ نسخ جميع البيانات في النهاية إلى كل 
منهانسخة مطابقة للأصل. بعد أن تعود العقدة غير المتاحة إلى الاتصال بالإنترنت مرة 
أخرى ، كيف يمكنها اللحاق ببرنامجيكتب أنه غاب؟غالبًا ما يتم استخدام آليتين في 
مخازن البيانات على غرار Dynamo:اقرأ الإصلاحعندما يقرأ العميل من عدة عقد بالتوازي 
، يمكنه اكتشاف أي شيء قديماستجابات. على سبيل المثال ، في الشكل 5-10، يحصل 
المستخدم 2345 على قيمة الإصدار 6 من Rep‐lica 3 ، وقيمة الإصدار 7 من النسخ 
المتماثلة 1 و 2. يرى العميل تلك النسخة المتماثلة 3لها قيمة قديمة ، وتعيد كتابة 
القيمة الأحدث إلى تلك النسخة المتماثلة. هذا يعمل بشكل جيدللقيم التي يتم قراءتها 
بشكل متكرر.172 | الفصل 5: النسخ المتماثل

      صفحة 195
السابع. في بعض الأحيان ، يُطلق على هذا النوع من النصاب أيضًا النصاب القانوني 
الصارم ، على عكس النصاب القانوني غير الصحيح (تمت مناقشته في"النصاب القانوني 
المهمل والتسليم الملمّح" في الصفحة 177).عملية مكافحة الانتروبيابالإضافة إلى ذلك 
، لدى بعض مخازن البيانات عملية خلفية تبحث عنها باستمرارالاختلافات في البيانات 
بين النسخ المتماثلة ، ونسخ أي بيانات مفقودة من واحدةنسخة طبق الأصل إلى آخر. على 
عكس سجل النسخ المتماثل في النسخ المتماثل المستند إلى القائد ، فإن هذاعملية 
مكافحة الانتروبيا لا تنسخ عمليات الكتابة بأي ترتيب معين ، وقد يكون هناكيكون 
تأخيرًا كبيرًا قبل نسخ البيانات.لا تقوم جميع الأنظمة بتنفيذ كلا الأمرين ؛ على 
سبيل المثال ، لا يفعل فولدمورت حاليًالديها عملية مكافحة الانتروبيا. لاحظ أنه 
بدون عملية مكافحة الانتروبيا ، تقدر قيمة ذلكنادرًا ما يتم قراءتها وقد تكون 
مفقودة من بعض النسخ المتماثلة وبالتالي تقلل من المتانة ،لأنه يتم تنفيذ إصلاح 
القراءة فقط عندما يقرأ التطبيق قيمة.نصاب القراءة والكتابةفي مثال الشكل 5-10 ، 
اعتبرنا أن الكتابة كانت ناجحة ، على الرغم من ذلكتمت معالجته فقط على نسختين من 
أصل ثلاث نسخ متماثلة. ماذا لو واحد فقط من كل ثلاثة رد؟قبلت كاس الكتابة؟ إلى أي 
مدى يمكننا دفع هذا؟إذا علمنا أن كل كتابة ناجحة مضمونة أن تكون حاضرة في اثنين على 
الأقلمن ثلاث نسخ متماثلة ، وهذا يعني أن نسخة متماثلة واحدة على الأكثر يمكن أن 
تكون قديمة. وهكذا ، إذا قرأنا من عندنسختان متماثلتان على الأقل ، يمكننا التأكد 
من تحديث أحدهما على الأقل. إذا كان الثالثالنسخة المتماثلة معطلة أو بطيئة 
الاستجابة ، يمكن للقراءات مع ذلك الاستمرار في إرجاع ما يصلقيمة حتى الآن.بشكل عام 
، إذا كان هناك n نسخ متماثلة ، فيجب تأكيد كل عملية كتابة بواسطة عقد w لـتعتبر 
ناجحة ، ويجب علينا الاستعلام على الأقل عن العقد r لكل قراءة. (في منطقتنامثال ، n 
= 3 ، w = 2 ، r = 2.) طالما أن w + r > n ، نتوقع الحصول على تحديثقيمة عند 
القراءة ، لأنه يجب أن تكون إحدى العقد r التي نقرأ منها على الأقلحتى الآن. يقرأ 
ويكتب أن الالتزام بقيم r و w تسمى قراءة النصابويكتب [ 40]. vii يمكنك التفكير في 
r و w على أنه الحد الأدنى لعدد الأصوات المطلوبةحتى تكون القراءة أو الكتابة 
صالحة.في قواعد البيانات ذات النمط الدينامو ، تكون المعلمات n و w و r قابلة 
للتكوين عادةً. أالاختيار الشائع هو جعل n عددًا فرديًا (عادةً 3 أو 5) ، وتعيين w 
= r =( ن + 1) / 2 (تقريب لأعلى). ومع ذلك ، يمكنك تغيير الأرقام كما تراه مناسبًا. 
إلى عن علىعلى سبيل المثال ، قد يستفيد عبء العمل مع عدد قليل من عمليات الكتابة 
والعديد من عمليات القراءة من إعداد w = nو r = 1. هذا يجعل القراءة أسرع ، ولكن له 
عيب يتمثل في وجود عقدة فاشلة واحدة فقطيؤدي إلى فشل جميع عمليات الكتابة في قاعدة 
البيانات.النسخ المتماثل | 173

      صفحة 196
قد يكون هناك أكثر من n من العقد في الكتلة ، ولكن أي قيمة معينةيتم تخزينه فقط على 
عدد n من العقد. هذا يسمح بتقسيم مجموعة البيانات ،بحيث يمكن أن تكون مجموعة 
البيانات أكبر مما يمكنك وضعه في عقدة واحدة. نحنسيعود إلى التقسيم الفصل السادس 
.شرط النصاب ، w + r > n ، يسمح للنظام بالتسامح مع العقد غير المتاحة مثليتبع:• 
إذا كانت w < n ، فلا يزال بإمكاننا معالجة عمليات الكتابة إذا كانت العقدة غير 
متوفرة.• إذا كانت r < n ، فلا يزال بإمكاننا معالجة القراءات إذا كانت العقدة غير 
متوفرة.• مع n = 3 ، w = 2 ، r = 2 يمكننا أن نتسامح مع عقدة واحدة غير متوفرة.• مع 
n = 5 ، w = 3 ، r = 3 يمكننا أن نتسامح مع عقدتين غير متاحتين. هذة الحالة 
خادعةtrated في الشكل 5-11 .• عادة ، يتم إرسال عمليات القراءة والكتابة دائمًا إلى 
جميع النسخ المتماثلة n بالتوازي. التحدد المعلمات w و r عدد العقد التي ننتظرها ، 
أي كم عددتحتاج العقد n إلى الإبلاغ عن النجاح قبل أن نعتبر القراءة أو الكتابة 
ناجحة‐فول.في حالة توفر عدد أقل من عقد w أو r المطلوب ، تؤدي عمليات الكتابة أو 
القراءة إلى إرجاع خطأ.قد تكون العقدة غير متاحة لأسباب عديدة: لأن العقدة معطلة 
(تعطلت ،إيقاف التشغيل) ، بسبب خطأ في تنفيذ العملية (لا يمكن الكتابة لأن 
القرصممتلئ) ، بسبب انقطاع الشبكة بين العميل والعقدة ، أو أي رقملأسباب أخرى. نحن 
نهتم فقط بما إذا كانت العقدة قد أعادت استجابة ناجحة ،ولا تحتاج إلى التمييز بين 
أنواع الخطأ المختلفة.نسخة 1نسخة 2نسخة 3نسخة 4نسخة 5اكتبقرأث = 3ناجحيكتبص = 
3ناجحيقرأن = 5 نسخ متماثلةالشكل 5-11. إذا كانت w + r> n ، فلا بد أن واحدة على 
الأقل من النسخ المتماثلة من r التي تقرأ منها قد شاهدت ملفأحدث كتابة ناجحة.174 | 
الفصل 5: النسخ المتماثل

      صفحة 197
حدود اتساق النصابإذا كان لديك n نسخ متماثلة ، واخترت w و r مثل w + r > n ، يمكنك 
ذلك بشكل عامتوقع أن تعرض كل قراءة أحدث قيمة مكتوبة لمفتاح. هذا لأن ملفمجموعة 
العقد التي كتبت عليها ومجموعة العقد التي قرأت منهايجب أن تتداخل ، أي يجب أن تكون 
هناك عقدة واحدة على الأقل بأحدث قيمة (موضحة فيالشكل 5-11). ومع ذلك ، كما سنرى ، 
هناك حالات متطرفة لا يكون فيها هذا صحيحًا.يمكنك أيضًا ضبط w و r على أعداد أصغر ، 
بحيث تكون w + r ≤ n . في هذه الحالة ، يقرأ وسيظل يتم إرسال عمليات الكتابة إلى 
العقد n ، ولكن عدد الردود الناجحة أقل هومطلوب لنجاح العملية.باستخدام w و r 
الأصغر ، من المرجح أن تقرأ القيم القديمة ، لأنه من المرجح أن تقرأهاأن قراءتك لم 
تتضمن العقدة بأحدث قيمة. على الجانب العلوي ، هذا يخدعيسمح التخصيص بوقت استجابة 
أقل وتوافر أعلى: إذا كان هناك مقاطعة للشبكة‐أصبحت العديد من النسخ المتماثلة غير 
قابلة للوصول ، وهناك فرصة أكبر لذلكمواصلة معالجة القراءة والكتابة. فقط بعد عدد 
النسخ المتماثلة التي يمكن الوصول إليهاتقع أقل من w أو r ، تصبح قاعدة البيانات 
غير متاحة للكتابة أو القراءة ، على الفوربهدوء.ومع ذلك ، حتى مع w + r > n ، من 
المحتمل أن تكون هناك حالات حافة عندما تكون القيم التي لا معنى لهاعاد. تعتمد هذه 
على التنفيذ ، لكن السيناريوهات المحتملة تشمل:• في حالة استخدام النصاب القانوني 
غير المنتظم (راجع " نصاب قانوني مهمل وتسليم تلميح" في الصفحة 177) ،و ث قد ينتهي 
يكتب حتى على العقد مختلفة من ص يقرأ، لذلك لم يعد هناكتداخل مضمون بين العقد r 
والعقد w [41 ].• في حالة حدوث كتابتين في نفس الوقت ، فليس من الواضح أيهما حدث 
أولاً. في هذاالحالة ، فإن الحل الآمن الوحيد هو دمج عمليات الكتابة المتزامنة 
(راجع "معالجةكتابة الصراعات "في الصفحة 164 ). إذا تم اختيار الفائز بناءً على 
الطابع الزمني ( الأخيرانتصارات الكتابة ) ، يمكن أن تضيع عمليات الكتابة بسبب 
انحراف الساعة [30 ]. سنعود إلى هذا الموضوعفي "الكشف عن عمليات الكتابة المتزامنة" 
في الصفحة 178 .• إذا حدثت الكتابة بشكل متزامن مع القراءة ، فقد تنعكس الكتابة فقط 
علىبعض النسخ المتماثلة. في هذه الحالة ، لم يتم تحديد ما إذا كانت القراءة تؤدي 
إلى إرجاعالقديمة أو الجديدة.• إذا نجحت الكتابة على بعض النسخ المتماثلة لكنها 
فشلت في البعض الآخر (على سبيل المثال بسببالأقراص على بعض العقد هي كاملة)، ونجحت 
عموما في أقل من ث النسخ المتماثلة،لا يتم التراجع عن النسخ المتماثلة حيث نجحت. 
هذا يعني أنه إذا كان يكتبتم الإبلاغ عنها على أنها فاشلة ، قد تؤدي القراءات 
اللاحقة إلى إرجاع القيمة منالتي تكتب [ 42].• إذا فشلت عقدة تحمل قيمة جديدة ، 
وتمت استعادة بياناتها من نسخة متماثلة تحملفي قيمة قديمة ، قد ينخفض ​​عدد النسخ 
المتماثلة التي تخزن القيمة الجديدة إلى أقل من w ،كسر شرط النصاب.النسخ المتماثل | 
175

      الصفحة 198
• حتى لو كان كل شيء يعمل بشكل صحيح ، فهناك حالات متطرفة يمكنك الحصول عليهاغير 
محظوظ بالتوقيت ، كما سنرى في "الخطية والنصاب القانوني" فيصفحة 324 .وبالتالي ، 
على الرغم من أن النصاب القانوني يبدو أنه يضمن أن تُرجع القراءة آخر ما تم 
كتابتهالقيمة ، في الممارسة العملية ليست بهذه البساطة. تم تحسين قواعد البيانات 
ذات النمط الدينامو بشكل عاملحالات الاستخدام التي يمكن أن تتسامح مع الاتساق 
النهائي. المعلمات w و r تسمح لكلضبط احتمالية قراءة القيم القديمة ، ولكن من 
الحكمة عدم أخذها على أنهاضمانات مطلقة.على وجه الخصوص ، عادة لا تحصل على الضمانات 
التي تمت مناقشتها في "مشاكل معتأخر النسخ المتماثل "في الصفحة 155 (قراءة كتاباتك 
أو قراءات رتيبة أو متسقةتقرأ البادئة) ، لذلك يمكن أن تحدث الحالات الشاذة 
المذكورة سابقًا في التطبيقات.تتطلب الضمانات الأقوى عمومًا معاملات أو إجماعًا. 
سوف نعود إلىهؤلاء في الفصل 7 و الفصل 9 .مراقبة الركودمن منظور تشغيلي ، من المهم 
أن تراقب ما إذا كانت بياناتكتقوم القواعد بإرجاع نتائج محدثة. حتى لو كان التطبيق 
الخاص بك يمكن أن يتسامح مع التي لا معنى لهايقرأ ، يجب أن تكون على دراية بصحة 
النسخ المتماثل الخاص بك. إذا تأخرت عن الدلالةبشكل متواصل ، يجب أن ينبهك حتى 
تتمكن من التحقيق في السبب (على سبيل المثال ، احتمالlem في الشبكة أو عقدة محملة 
بشكل زائد).بالنسبة للنسخ المتماثل المستند إلى القائد ، تعرض قاعدة البيانات عادةً 
مقاييس للنسخ المتماثلالتأخر ، والذي يمكنك إدخاله في نظام المراقبة. هذا ممكن لأن 
يكتبيتم تطبيقها على القائد والمتابعين بنفس الترتيب ، ولكل عقدة موقعفي سجل النسخ 
المتماثل (عدد عمليات الكتابة التي تم تطبيقها محليًا). بطرح أمنصب التابع الحالي 
من منصب القائد الحالي يمكنك قياسهمقدار تأخر النسخ المتماثل.ومع ذلك ، في الأنظمة 
ذات النسخ المتماثل بدون قائد ، لا يوجد ترتيب ثابت يتم فيهيكتب ، مما يجعل 
المراقبة أكثر صعوبة. علاوة على ذلك ، إذا كانت قاعدة البياناتيستخدم فقط إصلاح 
القراءة (لا يوجد مضاد إنتروبيا) ، ولا يوجد حد لمدى تقدم القيمة- إذا لم يتم قراءة 
القيمة إلا بشكل غير متكرر ، فقد تكون القيمة التي تم إرجاعها بواسطة نسخة متماثلة 
قديمةقديمة جدا.كانت هناك بعض الأبحاث حول قياس ثبات النسخ المتماثلة في قواعد 
البيانات باستخدام الرصاص‐النسخ المتماثل ، والتنبؤ بالنسبة المئوية المتوقعة 
للقراءات التي لا معنى لها اعتمادًا علىالمعلمات n و w و r [ 43]. هذه للأسف ليست 
ممارسة شائعة بعد ، لكنها كذلكسيكون من الجيد تضمين قياسات الركود في مجموعة 
المقاييس القياسية لـقواعد بيانات. الاتساق في نهاية المطاف هو ضمان غامض عن عمد ، 
ولكن للتشغيلمن المهم أن تكون قادرًا على تحديد "نهائي".176 | الفصل 5: النسخ 
المتماثل

      صفحة 199
نصاب قذر وتسليم ملمحيمكن لقواعد البيانات التي تحتوي على نصاب تم تكوينه بشكل 
مناسب أن تتسامح مع فشل الأفرادual العقد دون الحاجة إلى تجاوز الفشل. يمكنهم أيضًا 
تحمل العقد الفرديةإبطاء، لأن الطلبات لا تضطر إلى الانتظار لكل ن العقد إلى 
الاستجابة - يتمكنوا من العودةعندما استجابت العقد w أو r . هذه الخصائص تجعل قواعد 
البيانات مع القائد‐أقل جاذبية للنسخ المتماثل لحالات الاستخدام التي تتطلب توفرًا 
عاليًا وزمن انتقال منخفضًا ،ويمكن أن يتسامح مع القراءات التي لا معنى لها في بعض 
الأحيان.ومع ذلك ، فإن النصاب القانوني (كما تم وصفه حتى الآن) ليس متسامحًا مع 
الأخطاء بقدر ما يمكن أن يكون. أيمكن أن يؤدي انقطاع الشبكة إلى قطع العميل بسهولة 
عن عدد كبير من قواعد البياناتالعقد. على الرغم من أن هذه العقد لا تزال على قيد 
الحياة ، إلا أن عملاء آخرين قد يكونون قادرين على الاتصال بهابالنسبة للعميل الذي 
تم قطعه من عقد قاعدة البيانات ، فقد يكونون أيضًا ميتين. فيهذه الحالة، فمن المرجح 
أن عددا أقل من ث أو ص تبقى العقد يمكن الوصول إليها، وبالتالي فإن العميللم يعد 
بإمكانه بلوغ النصاب القانوني.في كتلة كبيرة (مع كبير أكثر من ن العقد) فمن المحتمل 
أن يمكن العميلالاتصال ببعض عقد قاعدة البيانات أثناء انقطاع الشبكة ، فقط ليس 
بـالعقد التي يحتاجها لتجميع النصاب لقيمة معينة. في هذه الحالة ، قاعدة 
البياناتيواجه المصممون مقايضة:• هل الأفضل إعادة الأخطاء إلى جميع الطلبات التي لا 
يمكننا الوصول إلى النصاب القانوني لهاالعقد ث أو ص ؟• أم ينبغي أن نقبل الكتابة 
على أي حال ، ونكتبها على بعض العقد الموجودةيمكن الوصول إليها ولكنها ليست من بين 
ن العقد الذي القيمة تعيش عادة؟يُعرف الأخير بالنصاب القانوني الضعيف [ 32]: 
الكتابة والقراءة لا تزال تتطلب w و rاستجابات ناجحة ، ولكن قد تشمل تلك العقد التي 
ليست من بين المعينينn العقد "الرئيسية" للحصول على قيمة. بالقياس ، إذا أغلقت نفسك 
خارج منزلك ، فأنتقد يطرق باب الجار ويسأل عما إذا كان بإمكانك البقاء على 
أريكتهم؟بشكل منفرد.بمجرد إصلاح انقطاع الشبكة ، يكتب أي عقدة واحدة مؤقتًاتم 
قبولها نيابة عن عقدة أخرى إلى العقد المناسبة "الرئيسية". هذا هويسمى التسليم 
التلميح . (بمجرد العثور على مفاتيح منزلك مرة أخرى ، جاركيطلب منك بأدب النزول عن 
الأريكة والعودة إلى المنزل.)النصاب قذرة مفيدة بشكل خاص لزيادة توافر الكتابة: ما 
دام أيتتوفر عقد w ، يمكن لقاعدة البيانات قبول عمليات الكتابة. ومع ذلك ، هذا يعني 
أنه حتىعندما w + r > n ، لا يمكنك التأكد من قراءة أحدث قيمة لمفتاح ، لأن ملفربما 
تمت كتابة أحدث قيمة مؤقتًا لبعض العقد خارج n [ 42 ].وبالتالي ، فإن النصاب 
القانوني غير الصحيح في الواقع ليس نصابًا قانونيًا على الإطلاق بالمعنى التقليدي. 
انه فقطضمان الاستمرارية ، أي أن البيانات يتم تخزينها على عقد w في مكان ما.النسخ 
المتماثل | 177

      صفحة 200
ليس هناك ما يضمن أن قراءة العقد r ستراها حتى يتم التلميح إلى التسليممنجز.النصاب 
القانوني غير المنتظم اختياري في جميع تطبيقات Dynamo الشائعة. في رياك هميتم 
تمكينها افتراضيًا ، ويتم تعطيلها افتراضيًا في Cassandra و Voldemort[41، 44، 45 
].عملية متعددة مراكز البياناتناقشنا سابقًا النسخ المتماثل عبر مراكز البيانات 
كحالة استخدام لقائد متعددالنسخ المتماثل (راجع " النسخ المتماثل متعدد القادة" في 
الصفحة 161 ). التكرار بلا زعيم هو أيضامناسب تمامًا لتشغيل مراكز البيانات 
المتعددة ، حيث إنه مصمم لتحمل التعارضعمليات الكتابة المتزامنة وانقطاعات الشبكة 
وارتفاعات زمن الوصول.تقوم كاساندرا وفولدمورت بتنفيذ دعمهما متعدد مراكز البيانات 
داخل النرويجنموذج بدون زعيم: يتضمن عدد النسخ المتماثلة n العقد في جميع مراكز 
البيانات ، وفي التكوين ، يمكنك تحديد عدد النسخ المتماثلة n التي تريد تضمينهاكل 
مركز بيانات. يتم إرسال كل عملية كتابة من العميل إلى جميع النسخ المتماثلة ، بغض 
النظر عن قاعدة البيانات‐ثالثًا ، لكن العميل عادة ما ينتظر فقط الإقرار من نصاب 
العقدداخل مركز البيانات المحلي الخاص به ، بحيث لا يتأثر بالتأخيرات والانقطاعات 
فيعبر ارتباط مركز البيانات. غالبًا ما يتم تكوين عمليات الكتابة ذات زمن الوصول 
العالي إلى مراكز البيانات الأخرىحدث حدوثه بشكل غير متزامن ، على الرغم من وجود 
بعض المرونة في التكويننشوئها [ 45، 46 ].تحافظ Riak على جميع الاتصالات بين 
العملاء وعقد قاعدة البيانات محلية لبيانات واحدة.مركز ، لذلك يصف n عدد النسخ 
المتماثلة داخل مركز بيانات واحد. عبر مركز البياناتيحدث النسخ المتماثل بين 
مجموعات قاعدة البيانات بشكل غير متزامن في الخلفية ، بتنسيقنمط مشابه للنسخ 
المتماثل متعدد القادة [ 47].الكشف عن عمليات الكتابة المتزامنةتسمح قواعد البيانات 
على نمط دينامو للعديد من العملاء بالكتابة في نفس الوقت إلى نفس المفتاح ،مما يعني 
حدوث تعارضات ، حتى لو تم استخدام نصاب قانوني صارم. الوضعيشبه النسخ المتماثل 
متعدد القادة (راجع "معالجة تعارضات الكتابة" في الصفحة 164) ،على الرغم من أنه في 
قواعد البيانات على نمط دينامو ، يمكن أن تنشأ التعارضات أيضًا أثناء إصلاح القراءة 
أوتم التلميح إلى التسليم.المشكلة هي أن الأحداث قد تصل بترتيب مختلف في العقد 
المختلفة ، بسببتأخيرات الشبكة المتغيرة والفشل الجزئي. على سبيل المثال ، يوضح 
الشكل 5-12 عنصرينالخطان ، A و B ، يكتبان في وقت واحد إلى مفتاح X في مخزن بيانات 
ثلاثي العقد:• تستقبل العقدة 1 الكتابة من A ، ولكنها لا تتلقى الكتابة من B بسبب 
aانقطاع عابر.• عقدة 2 أولا يحصل على الكتابة من A ، ثم الكتابة من B .178 | الفصل 
5: النسخ المتماثل

      صفحة 201
• عقدة 3 أولا يحصل على الكتابة من B ، ثم الكتابة من A .العميل أالعميل بالعقدة 
1العقدة 2العقدة 3الوقتعقدة لا تستجيبمجموعة X = A.مجموعة X = باحصل على Xأبأالشكل 
5-12. يكتب المتزامن في مخزن بيانات نمط دينامو: لا يوجد تعريف جيديأمر.إذا قامت كل 
عقدة بالكتابة فوق قيمة المفتاح كلما تلقت طلب كتابةمن العميل ، فإنها ستصبح غير 
متسقة بشكل دائم ، كما هو موضح في عملية الحصول النهائيةطلب في الشكل 5-12: العقدة 
2 تعتقد أن القيمة النهائية لـ X هي B ، بينما الأخرىتعتقد العقد أن القيمة هي أ 
.لكي تصبح متسقة في النهاية ، يجب أن تتقارب النسخ المتماثلة نحونفس القيمة. كيف 
يفعلون ذلك؟ قد يأمل المرء أن قواعد البيانات المنسوخة ستفعل ذلكتعامل مع هذا 
تلقائيًا ، ولكن للأسف معظم عمليات التنفيذ رديئة جدًا: إذاتريد تجنب فقدان 
البيانات ، فأنت - مطور التطبيق - بحاجة إلى معرفة الكثيرحول الأجزاء الداخلية 
لمعالجة النزاعات في قاعدة البيانات الخاصة بك.لقد تطرقنا بإيجاز إلى بعض تقنيات حل 
النزاعات في "معالجة الكتابةالصراعات "في الصفحة 164. قبل أن نختتم هذا الفصل ، 
دعنا نستكشف المشكلة قليلاًتفاصيل اكثر.مرات الكتابة الأخيرة (تجاهل عمليات الكتابة 
المتزامنة)يتمثل أحد الأساليب لتحقيق التقارب النهائي في إعلان أن كل نسخة متماثلة 
تحتاجقم بتخزين أحدث قيمة فقط ، واسمح بالكتابة فوق القيم "الأقدم" وإزالتهاممشط. 
ثم ، طالما لدينا طريقة ما لتحديد أي منها بشكل لا لبس فيهالكتابة هي "حديثة" ، 
ويتم نسخ كل عملية كتابة في النهاية إلى كل نسخة متماثلة ، ثم ملفستتقارب النسخ 
المتماثلة في النهاية إلى نفس القيمة.كما يتضح من الاقتباسات المرعبة حول "حديث" ، 
فإن هذه الفكرة في الواقع مضللة تمامًا.في مثال الشكل 5-12 ، لم يكن أي من العملاء 
على علم بالآخر عند إرسالهالنسخ المتماثل | 179

      صفحة 202
طلبات الكتابة الخاصة به إلى عقد قاعدة البيانات ، لذلك ليس من الواضح أي واحد حدث 
أولاً. فيالحقيقة ، ليس من المنطقي حقًا أن نقول إن إما حدث "أولاً": نقول يكتبهي 
المتزامنة ، لذلك ترتيبها غير معرف.على الرغم من أن الكتابات ليس لديها ترتيب طبيعي 
، يمكننا فرض أمر تعسفيعليهم. على سبيل المثال ، يمكننا إرفاق طابع زمني بكل كتابة 
واختيار الأكبرالطابع الزمني باعتباره "الأحدث" ، وتجاهل أي عمليات كتابة ذات طابع 
زمني أقل. هذهخوارزمية حل النزاع ، التي تسمى آخر فوز للكتابة (LWW) ، هي الوحيدة 
المدعومةطريقة حل النزاع في كاساندرا [ 48] ، وميزة اختيارية في رياك [ 30 ].يحقق 
LWW هدف التقارب النهائي ، ولكن على حساب المتانة: إذا كان هناكهي العديد من عمليات 
الكتابة المتزامنة على نفس المفتاح ، حتى لو تم الإبلاغ عنها جميعًا كـ SOOKجاد 
للعميل (لأنه تم كتابتها إلى نسخ متماثلة w ) ، يكتب واحد فقطستنجو وسيتم إهمال 
الآخرين بصمت. علاوة على ذلك ، قد ينخفض ​​LWWيكتب غير متزامن ، كما سنناقش في 
"الطوابع الزمنية للطلبالأحداث "في الصفحة 283 .هناك بعض المواقف ، مثل التخزين 
المؤقت ، التي قد تكون الكتابة المفقودة مقبولة فيها.بلي. إذا كان فقدان البيانات 
غير مقبول ، فإن LWW يعد خيارًا سيئًا لحل التعارض.الطريقة الآمنة الوحيدة لاستخدام 
قاعدة بيانات مع LWW هي التأكد من أن المفتاح مكتوب فقط.عشرة مرة واحدة ، وبعد ذلك 
تعامل على أنها غير قابلة للتغيير ، وبالتالي تجنب أي تحديثات متزامنةلنفس المفتاح. 
على سبيل المثال ، الطريقة الموصى بها لاستخدام Cassandra هي استخدام ملفUUID 
كمفتاح ، مما يمنح كل عملية كتابة مفتاحًا فريدًا [ 48].العلاقة والتزامن "يحدث 
قبل"كيف نقرر ما إذا كانت عمليتان متزامنتان أم لا؟ لتطويرحدس ، دعنا نلقي نظرة على 
بعض الأمثلة:• في الشكل 5-9، الكتابة غير متزامنة: إدخال أ يحدث قبل بالزيادة ، لأن 
القيمة التي تمت زيادتها بواسطة B هي القيمة التي تم إدخالها بواسطة A. Inبمعنى آخر 
، عملية B تعتمد على عملية A ، لذلك يجب أن تكون عملية B كذلكحدث لاحقا. نقول أيضًا 
أن B تعتمد سببيًا على A.• من ناحية أخرى ، فإن الكتابتين في الشكل 5-12 متزامنة: 
عندمايبدأ ent العملية ، ولا يعرف أن عميلاً آخر يؤدي أيضًاعملية على نفس المفتاح. 
وبالتالي ، لا يوجد تبعية سببية بينعملية.تحدث العملية "أ" قبل العملية "ب" الأخرى 
إذا كان "ب" يعرف شيئًا عن "أ" أو يتوقف عليهعلى أ ، أو يبني على أ بطريقة ما. ما 
إذا كانت هناك عملية واحدة تحدث قبل الأخرىالعملية هي المفتاح لتحديد معنى التزامن. 
في الواقع ، يمكننا القول ببساطةأن العمليتين متزامنتان إذا لم يحدث أي منهما قبل 
الأخرى ، أي لايعرف عن الآخر [ 49].180 | الفصل 5: النسخ المتماثل

      صفحة 203
وبالتالي ، عندما يكون لديك عمليتان A و B ، فهناك ثلاثة احتمالات: إماحدث A قبل B 
، أو B حدث قبل A ، أو A و B متزامن. ما كناneed عبارة عن خوارزمية لإخبارنا ما إذا 
كانت عمليتان متزامنتان أم لا. إذا كان أحدحدثت العملية قبل أخرى ، يجب أن تحل 
العملية اللاحقة محل السابقةالعملية ، ولكن إذا كانت العمليات متزامنة ، فلدينا 
تعارض يجب أن يكونتم الحل.التزامن والوقت والنسبيةقد يبدو أنه يجب تسمية عمليتين 
متزامنتين إذا حدثت "عندنفس الوقت "- ولكن في الواقع ، ليس من المهم ما إذا كانت 
تتداخل حرفياً مع الوقت.بسبب مشاكل الساعات في الأنظمة الموزعة ، من الصعب جدًا فعل 
ذلكأخبر ما إذا كان شيئان قد حدثا فعليًا في نفس الوقت - مشكلة سنناقشهابمزيد من 
التفصيل في الفصل الثامن .لتحديد التزامن ، لا يهم الوقت المحدد: نحن ببساطة نسمي 
عمليتينمتزامن إذا كان كلاهما غير مدركين لبعضهما البعض ، بغض النظر عن الوقت 
الفعلي فيالتي حدثت. يربط الناس أحيانًا بين هذا المبدأوالنظرية النسبية الخاصة في 
الفيزياء [ 49 ] التي أدخلت فكرة أنالمعلومات لا يمكن أن تنتقل أسرع من سرعة الضوء. 
وبالتالي ، حدثانالتي تحدث بعض المسافة لا يمكن أن تؤثر على بعضها البعض إذا كان 
الوقت بينهماالأحداث أقصر من الوقت الذي يستغرقه الضوء لقطع المسافة بينهما.في 
أنظمة الكمبيوتر ، قد تتزامن عمليتان على الرغم من سرعةكان الضوء من حيث المبدأ قد 
سمح لعملية واحدة أن تؤثر على الأخرى. فمثلا،إذا كانت الشبكة بطيئة أو متقطعة في 
ذلك الوقت ، يمكن أن تحدث عمليتانالوقت بعيدًا ولا يزال متزامنًا ، لأن مشاكل 
الشبكة حالت دون حدوث ذلكالعملية من القدرة على معرفة الآخر.يحدث التتبع قبل 
العلاقاتلنلقِ نظرة على خوارزمية تحدد ما إذا كانت عمليتان متزامنتان أم لاسواء حدث 
أحدهما قبل الآخر. لتبسيط الأمور ، لنبدأ بالبيانات‐قاعدة تحتوي على نسخة متماثلة 
واحدة فقط. بمجرد أن نتوصل إلى كيفية القيام بذلك على ملف واحدنسخة طبق الأصل ، 
يمكننا تعميم النهج على قاعدة بيانات بدون قائد مع نسخ متماثلة متعددة.يوضح الشكل 
5-13 عميلين يضيفان عناصر في نفس الوقت إلى عربة التسوق. بدءا،العربة فارغة. فيما 
بينها ، يقوم العملاء بكتابة خمس عمليات كتابة في قاعدة البيانات:1. يضيف العميل 1 
الحليب إلى العربة. هذه هي الكتابة الأولى لهذا المفتاح ، لذا نجح الخادميقوم 
بتخزينه بشكل مستمر ويعين له الإصدار 1. ويردد الخادم أيضًا القيمة مرة أخرىللعميل 
، مع رقم الإصدار.2. يضيف العميل 2 البيض إلى العربة ، دون أن يعرف أن العميل 1 
أضاف الحليب في نفس الوقت(اعتقد العميل 2 أن بيضه كان العنصر الوحيد في سلة 
التسوق). الخادم يعينالنسخ المتماثل | 181

      صفحة 204
الإصدار 2 إلى البيض ، ومخازن البيض و الحليب كما قيمتين منفصلة. بعد ذلكتُرجع كلا 
القيمتين إلى العميل ، جنبًا إلى جنب مع رقم الإصدار 2.3. العميل 1 ، غافلًا عن 
كتابة العميل 2 ، يريد إضافة دقيق إلى العربة ، لذلك يعتقديجب أن تكون محتويات عربة 
التسوق الحالية [الحليب ، الدقيق] . يرسل هذه القيمة إلىالخادم ، جنبًا إلى جنب مع 
رقم الإصدار 1 الذي قدمه الخادم للعميل 1 مسبقًا.يمكن للخادم أن يخبر من رقم 
الإصدار أن كتابة [لبن ، طحين]تحل محل القيمة السابقة لـ [الحليب] ، لكنها تتزامن 
مع [البيض] . هكذا،يقوم الخادم بتعيين الإصدار 3 إلى [لبن ، طحين] ، والكتابة فوق 
قيمة الإصدار 1[حليب] ، لكنه يحتفظ بقيمة الإصدار 2 [البيض] ويعيد القيمتين 
المتبقيتينإلى العميل.4. في غضون ذلك ، يريد العميل 2 إضافة لحم خنزير إلى عربة 
التسوق ، غير مدرك أن العميل 1 قد تمت إضافته للتودقيق . تلقى العميل 2 القيمتين 
[الحليب] و [البيض] من الخادم فيالرد الأخير ، لذلك يقوم العميل الآن بدمج هذه 
القيم وإضافة لحم خنزير لتشكيل ملفالقيمة [البيض والحليب ولحم الخنزير] . يرسل تلك 
القيمة إلى الخادم ، جنبًا إلى جنب مع السابقرقم إصدار نظام التشغيل الخاص 2. يكتشف 
الخادم أن الإصدار 2 يحل محل [البيض] ، لكنهيتزامن مع [الحليب ، الدقيق] ، لذا فإن 
القيمتين المتبقيتين هما [الحليب ،دقيق] بالإصدار 3 ، و [بيض ، حليب ، لحم خنزير] 
بالإصدار 4.5. أخيرًا ، يريد العميل 1 إضافة لحم الخنزير المقدد . كانت تلقت سابقا 
[الحليب والدقيق] و[بيض] من الخادم في الإصدار 3 ، لذلك يدمج هؤلاء ويضيف لحم 
الخنزير المقدد ويرسلالقيمة النهائية [الحليب ، والدقيق ، والبيض ، ولحم الخنزير 
المقدد] إلى الخادم ، جنبًا إلى جنب مع الإصدار السابقسيون 3. يؤدي هذا إلى الكتابة 
فوق [الحليب ، الدقيق] (لاحظ أن [البيض] قد تمت الكتابة فوقه بالفعلفي الخطوة 
الأخيرة) ، ولكنه متزامن مع [البيض ، والحليب ، ولحم الخنزير] ، لذلك يحتفظ 
الخادمهاتين القيمتين المتزامنتين.182 | الفصل 5: النسخ المتماثل

      صفحة 205
العميل 1العميل 2قاعدة البياناتالوقت+ حليب+ دقيق+ لحم مقدد+ بيض+ لحم الخنزيرضبط 
المفتاح: عربةالقيمة: [الحليب]حسناالنسخة 1القيمة: [الحليب]1ضبط المفتاح: 
عربةالقيمة: [لبن ، طحين]النسخة 1حسناالإصدار: 3القيمة: [لبن ، طحين]القيمة: 
[البيض]3ضبط المفتاح: عربةالقيمة: [الحليب والدقيق والبيض ولحم الخنزير 
المقدد]الإصدار: 3حسناالإصدار: 5القيمة: [لبن ، طحين ،البيض ولحم الخنزير 
المقدد]القيمة: [بيض ، حليب ، لحم خنزير]5ضبط المفتاح: عربةالقيمة: 
[البيض]حسناالإصدار 2القيمة: [الحليب]القيمة: [البيض]2ضبط المفتاح: عربةالقيمة: 
[بيض ، حليب ، لحم خنزير]الإصدار 2حسناالإصدار: 4القيمة: [بيض ، حليب ، لحم 
خنزير]القيمة: [لبن ، طحين]4الشكل 5-13. تتبع التبعيات السببية بين عميلين في نفس 
الوقت بتحرير أعربة التسوق.+ حليب+ دقيق+ لحم مقدد+ بيض+ لحم الخنزير[حليب][لبن ، 
طحين][حليب ، طحين ،البيض ولحم الخنزير المقدد][بيض][بيض ، حليب ، لحم 
خنزير]فارغةالشكل 5-14. رسم بياني للتبعيات السببية في الشكل 5-13 .يتم توضيح تدفق 
البيانات بين العمليات في الشكل 5-13 بيانياً فيالشكل 5-14 . تشير الأسهم إلى 
العملية التي حدثت قبل أي عملية أخرىation ، بمعنى أن العملية اللاحقة علمت 
بالعملية السابقة أو اعتمدت عليها .في هذا المثال ، لا يكون العملاء مطلعين بشكل 
كامل على البيانات الموجودة على الخادم ،نظرًا لوجود عملية أخرى دائمًا في نفس 
الوقت. لكن الإصدارات القديمة منيتم الكتابة فوق القيمة في النهاية ، ولا يتم فقد 
أي عمليات كتابة.لاحظ أن الخادم يمكنه تحديد ما إذا كانت عمليتان متزامنتان أم لا 
من خلال البحثفي أرقام الإصدارات - لا يحتاج إلى تفسير القيمة نفسها (وبالتالي فإن 
القيمةيمكن أن يكون أي بنية بيانات). تعمل الخوارزمية على النحو التالي:النسخ 
المتماثل | 183

      الصفحة 206
• يحتفظ الخادم برقم إصدار لكل مفتاح يعمل على زيادة الإصداررقم في كل مرة تتم فيها 
كتابة هذا المفتاح ، ويخزن رقم الإصدار الجديد معهبالقيمة المكتوبة.• عندما يقرأ 
العميل مفتاحًا ، يقوم الخادم بإرجاع جميع القيم التي لم تنته بعدمكتوب ، بالإضافة 
إلى رقم الإصدار الأخير. يجب على العميل قراءة المفتاح قبل الكتابة‐عمل.• عندما 
يكتب العميل مفتاحًا ، يجب أن يتضمن رقم الإصدار من السابقاقرأ ، ويجب أن يدمج معًا 
جميع القيم التي تلقاها في القراءة السابقة. (اليمكن أن يكون الرد من طلب الكتابة 
مثل القراءة ، مع إرجاع جميع القيم الحالية ،مما يسمح لنا بربط العديد من الكتابات 
كما في المثال أعلاه.)• عندما يتلقى الخادم كتابة برقم إصدار معين ، يمكن 
تجاوزهااكتب جميع القيم برقم الإصدار هذا أو أقل (لأنه يعلم أن لديهمتم دمجه في 
القيمة الجديدة) ، ولكن يجب أن يحتفظ بجميع القيم ذات الإصدار الأعلىرقم sion (لأن 
هذه القيم متزامنة مع الكتابة الواردة).عندما تتضمن الكتابة رقم الإصدار من قراءة 
سابقة ، فهذا يخبرنا ما هو ما قبلالحالة الخبيثة التي تستند إليها الكتابة. إذا قمت 
بعمل كتابة بدون تضمين نسخةرقم ، فهو متزامن مع جميع عمليات الكتابة الأخرى ، لذلك 
لن يقوم بالكتابة فوق أي شيء - سوف يقوم بذلكيتم إرجاعها كواحدة من الإصدارات في 
القراءات اللاحقة.دمج القيم المكتوبة بشكل متزامنتضمن هذه الخوارزمية عدم إسقاط أي 
بيانات بصمت ، لكنها تتطلب ذلك للأسفأن يقوم العملاء ببعض الأعمال الإضافية: إذا 
حدثت عدة عمليات في وقت واحد ، فعليك cli‐يجب أن يتم التنظيف بعد ذلك عن طريق دمج 
القيم المكتوبة في نفس الوقت. رياكيدعو هذه القيم المتزامنة الأشقاء .يعد دمج قيم 
الأخوة في الأساس نفس مشكلة حل النزاعات فيتكرار القائد ، والذي ناقشناه سابقًا 
(راجع "معالجة تعارض الكتابة" فيصفحة 164). تتمثل الطريقة البسيطة في اختيار إحدى 
القيم بناءً على الإصدارالرقم أو الطابع الزمني (آخر عملية تفوز بالكتابة) ، ولكن 
هذا يعني فقدان البيانات. لذلك قد تحتاجللقيام بشيء أكثر ذكاءً في كود التطبيق.مع 
مثال عربة التسوق ، فإن الطريقة المعقولة لدمج الأشقاء هيفقط خذ الاتحاد. في الشكل 
5-14 ، الأخوان الأخيران هما [الحليب ، الدقيق ، البيض ،لحم الخنزير المقدد] و 
[البيض والحليب ولحم الخنزير] تلك المذكرة - الحليب و البيض تظهر في كليهما، حتىعلى 
الرغم من أنها كتبت مرة واحدة فقط. قد تكون القيمة المدمجة شيئًا مثل[لبن ، طحين ، 
بيض ، لحم مقدد ، لحم خنزير] ، بدون نسخ.ومع ذلك ، إذا كنت تريد السماح للأشخاص 
أيضًا بإزالة الأشياء من سلة التسوق الخاصة بهم ، وليسفقط أضف أشياء ، فإن أخذ 
اتحاد الأشقاء قد لا يؤدي إلى النتيجة الصحيحة: إذا كنتادمج عربتين شقيقتين ، وتمت 
إزالة أحد العناصر في عربة واحدة فقط ، ثم ملفستظهر المادة المحذوفة مرة أخرى في 
اتحاد الأشقاء [ 32].184 | الفصل 5: النسخ المتماثل

      الصفحة 207
لمنع هذا ، لا يمكن ببساطة حذف عنصر من قاعدة البيانات عندما يكون كذلكإزالة؛ بدلاً 
من ذلك ، يجب أن يترك النظام علامة بإصدار مناسب numberber للإشارة إلى أنه قد تمت 
إزالة العنصر عند دمج الأشقاء. مثل هذا dele‐تُعرف علامة نشوئها باسم شاهد القبر 
.نظرًا لأن دمج الأشقاء في كود التطبيق أمر معقد وعرضة للخطأ ، فهناك بعضالجهود 
المبذولة لتصميم هياكل البيانات التي يمكن أن تؤدي هذا الدمج تلقائيًا ، مثل 
dis‐لعن في "حل النزاع التلقائي" في الصفحة 167 . على سبيل المثال ، نوع بيانات 
Riakيستخدم الدعم عائلة من هياكل البيانات تسمى CRDTs [ 33، 34، 50] يمكن أن يكون 
آلي‐دمج الأشقاء بطرق معقولة ، بما في ذلك الحفاظ على عمليات الحذف.ناقلات 
الإصداراستخدم المثال في الشكل 5-13 نسخة متماثلة واحدة فقط. كيف الخوارزميةالتغيير 
عندما يكون هناك نسخ متماثلة متعددة ، ولكن لا يوجد قائد؟يستخدم الشكل 5-13 رقم 
إصدار واحد لتتبع التبعيات بين العمليات ،لكن هذا لا يكفي عندما يكون هناك العديد 
من النسخ المتماثلة التي تقبل الكتابة المتوافقة‐بوقاحة. بدلاً من ذلك ، نحتاج إلى 
استخدام رقم إصدار لكل نسخة طبق الأصل وكذلك لكل مفتاح. كلتقوم النسخة المتماثلة 
بزيادة رقم الإصدار الخاص بها عند معالجة الكتابة ، كما تحافظ أيضًا علىتتبع أرقام 
الإصدارات التي شاهدها من جميع النسخ المتماثلة الأخرى. يمكن بعد ذلك استخدام 
ملفاتتلك المعلومات لمعرفة القيم التي يجب استبدالها والقيم التي يجب الاحتفاظ 
بهاأخوة.تسمى مجموعة أرقام الإصدارات من كافة النسخ المتماثلة ناقل الإصدار [ 
51].هناك عدد قليل من المتغيرات لهذه الفكرة قيد الاستخدام ، ولكن الأكثر إثارة 
للاهتمام هو على الأرجح النقطة المنقطةناقلات الإصدار [52 ] ، والذي يستخدم في Riak 
2.0 [53، 54 ]. لن ندخل في التفاصيل ،لكن الطريقة التي تعمل بها مشابهة تمامًا لما 
رأيناه في المثال أعلاه.مثل أرقام الإصدارات في الشكل 5-13 ، يتم إرسال متجهات 
الإصدار من قاعدة البياناتالنسخ المتماثلة للعملاء عند قراءة القيم ، وتحتاج إلى 
إعادتها إلى قاعدة البياناتعندما يتم كتابة القيمة لاحقًا. هذا يسمح لقاعدة 
البيانات بالتمييز بينبالكتابة والكتابة المتزامنة. أيضًا ، كما هو الحال في مثال 
النسخة المتماثلة المفردة ، فإن التطبيققد تحتاج الكاتيون إلى دمج الأشقاء. يضمن 
هيكل ناقل الإصدار أنه آمنللقراءة من نسخة متماثلة ثم الكتابة مرة أخرى إلى نسخة 
متماثلة أخرى: قد يكون هذاينتج عنه إنشاء الأشقاء ، ولكن لا يتم فقد أي بيانات 
طالما تم دمج الأشقاء معًا.بشكل مستقيم.ناقلات الإصدار والساعات المتجهةA ناقلات 
نسخة أحيانا يسمى أيضا على مدار الساعة ناقلات . الاختلافبين هياكل البيانات هذه 
دقيق - طريقة واحدة للبحثفي هذا هو أن ناقلات الإصدار هي لأنظمة خادم العميل ، 
والمتجهالساعات لأنظمة الند للند. يرجى الاطلاع على مراجعالتفاصيل [ 52 ،55، 56 
].النسخ المتماثل | 185

      الصفحة 208
ملخصفي هذا الفصل ، نظرنا في مسألة النسخ ، أي: الاحتفاظ بنسخة مننفس البيانات على 
عدة أجهزة. يمكن أن يخدم النسخ المتماثل عدة أغراض:• التوافر العالي : الحفاظ على 
النظام قيد التشغيل ، حتى عند وجود جهاز واحد (أو سبعة)الأجهزة الإلكترونية ، أو 
مركز البيانات بأكمله) تنخفض.• عملية غير متصلة : السماح للتطبيق بمواصلة العمل 
عندما يكون هناكهو انقطاع في الشبكة.• الكمون : وضع البيانات بالقرب من المستخدمين 
جغرافيًا ، بحيث يمكن للمستخدمين التفاعل معهاأسرع.• قابلية التوسع : القدرة على 
التعامل مع حجم أكبر من القراءات مقارنة بآلة واحدةيمكن التعامل معها ، عن طريق 
إجراء عمليات القراءة على النسخ المتماثلة.على الرغم من كونه هدفًا بسيطًا - نسخة 
من نفس البيانات على عدة أجهزة - نسخة طبق الأصلتبين أنها مشكلة صعبة بشكل ملحوظ. 
يتطلب التفكير بعنايةالتزامن وحول كل الأشياء التي يمكن أن تسوء والتعامل مع 
Conse‐تساؤلات من تلك العيوب. كحد أدنى ، نحتاج إلى التعامل مع العقد غير المتوفرة 
وانقطاعات الشبكة (وهذا لا يشمل حتى الأنواع الأكثر مكرًا منخطأ ، مثل تلف البيانات 
الصامت بسبب أخطاء البرامج).ناقشنا ثلاث طرق رئيسية للنسخ المتماثل:1. النسخ 
المتماثل للقائد الفردي : يرسل العملاء جميع عمليات الكتابة إلى عقدة واحدة 
(القائد) ،الذي يرسل دفقًا من أحداث تغيير البيانات إلى النسخ المتماثلة الأخرى 
(المتابعون).يمكن إجراء القراءات على أي نسخة متماثلة ، ولكن قد تكون القراءات من 
المتابعين قديمة.2. النسخ المتماثل متعدد القادة : يرسل العملاء كل رسالة إلى واحدة 
من عدة عقد رئيسية ،يمكن لأي منها أن يقبل عمليات الكتابة. يرسل القادة تيارات من 
أحداث تغيير البيانات إلىبعضها البعض ، وإلى أي عقد تابع.3. النسخ المتماثل بدون 
قائد : يرسل العملاء كل كتابة إلى عدة عقد ، والقراءة منهاعدة عقد بالتوازي من أجل 
اكتشاف وتصحيح العقد ذات البيانات التي لا معنى لها.لكل منها مزاياه وعيوبه. يعد 
النسخ المتماثل للقائد الفردي شائعًا لأنمن السهل فهمه ولا يوجد حل للنزاع يدعو 
للقلق.يمكن أن يكون النسخ المتماثل متعدد القادة وغير القيادي أكثر قوة في حالة 
وجود أخطاءالعقد وانقطاعات الشبكة والارتفاعات المفاجئة في زمن الوصول - على حساب 
صعوبة الوصول إليهاالابن ، وتقديم ضمانات تناسق ضعيفة للغاية.يمكن أن يكون النسخ 
المتماثل متزامنًا أو غير متزامن ، مما له تأثير عميق على ملفسلوك النظام عندما 
يكون هناك خطأ. على الرغم من أن النسخ المتماثل غير المتزامن يمكن أن يكون 
سريعًاعندما يعمل النظام بسلاسة ، من المهم معرفة ما يحدثعندما يزيد تأخر النسخ 
المتماثل وتفشل الخوادم. إذا فشل القائد ، وقمت بترقية ملف186 | الفصل 5: النسخ 
المتماثل

      الصفحة 209
المتابع المحدث بشكل غير متزامن ليكون القائد الجديد ، قد تكون البيانات الملتزمة 
مؤخرًاكن خاسرا.لقد نظرنا إلى بعض التأثيرات الغريبة التي يمكن أن تكون ناجمة عن 
تأخر النسخ المتماثل ، ونكتشفعن بعض نماذج التناسق التي تساعد في تحديد كيفية تطبيق 
مايجب أن تتصرف في ظل تأخر النسخ:• الاتساق في القراءة بعد الكتابة : يجب أن يرى 
المستخدم دائمًا البيانات التي أرسلهاأنفسهم.• قراءة رتيبة : بعد أن يرى المستخدم 
البيانات في وقت ما ، هملا ينبغي أن ترى البيانات لاحقًا من نقطة زمنية سابقة.• 
قراءة بادئة متسقة : يجب على المستخدمين رؤية البيانات في حالة تجعلها سببيةبمعنى ، 
على سبيل المثال رؤية السؤال والرد عليه بالترتيب الصحيح.أخيرًا ، ناقشنا مشكلات 
التوافق المتأصلة في تعدد القادة ومناهج النسخ المتماثل بلا قائد: لأنها تسمح بحدوث 
عمليات كتابة متعددةحاليًا ، قد تحدث تعارضات. قمنا بفحص خوارزمية قد تستخدمها 
قاعدة البياناتلتحديد ما إذا كانت إحدى العمليات قد حدثت قبل أخرى ، أو ما إذا كانت 
قد حدثت؟بيند في نفس الوقت. كما تطرقنا إلى طرق حل النزاعات عن طريق الدمجالتحديثات 
المتزامنة معًا.في الفصل التالي سنستمر في البحث في البيانات الموزعة عبر 
العديدآلات، من خلال النظير من النسخ المتماثل: تقسيم مجموعة بيانات كبيرة في 
parti-نشوئها .مراجع[1 ] بروس جي ليندسي وباتريشيا غريفيث سيلينجر وسي جاليتيري 
وآخرون: "ملاحظات على Dis‐قواعد البيانات ، "IBM Research ، Research Report RJ2571 
(33471) ، يوليو 1979.[2] " توفر الحماية في الوقت الفعلي للبيانات وتوفيرها من 
Oracle Active Data Guard ." وحيالكتاب الأبيض ، يونيو 2013.[3 ] "مجموعات التوفر 
AlwaysOn. " في كتب SQL Server Online ، Microsoft ، 2012.[4] لين تشياو ، وكابيل 
سورلاكر ، وشيرشانكا داس ، وآخرون: " حول تخمير الإسبريسو الطازج:منصة خدمة 
البيانات الموزعة على LinkedIn "، في مؤتمر ACM الدولي بتاريخإدارة البيانات 
(SIGMOD) ، يونيو 2013.[5] جون راو: " النسخ المتماثل داخل الكتلة لأباتشي كافكا " 
في ApacheCon Northأمريكا ، فبراير 2013.[6 ] "قوائم الانتظار المتوفرة بكثرة ". في 
وثائق خادم RabbitMQ ، البرامج المحورية ،، 2014.ملخص | 187

      الصفحة 210
[7] يوشينوري ماتسونوبو: " النسخ المتماثل شبه المتزامن في Facebook " ، 
yoshinori‐matsunobu.blogspot.co.uk ، ١ أبريل ٢٠١٤.[8 ] "Percona Xtrabackup - 
التوثيق ". شركة بيركونا المحدودة ، 2014.[9 ] جيسي نيولاند: "توافر جيثب هذا 
الأسبوع، "github.com ، 14 أيلول (سبتمبر) 2012.[10 ] مارك إمبرياكو: "وقت التوقف 
يوم السبت الماضي "، github.com ، 26 كانون الأول (ديسمبر) 2012.[11 ] جون هوج: 
"'الكل في' مع الحتمية للأداء والاختبار في disنظم تحية، "في Strange Loop ، أيلول 
(سبتمبر) 2015.[12] أميت كابيلا: " WAL Internals of PostgreSQL ،" في مؤتمر 
PostgreSQL(PGCon) ، مايو 2012.[13] دليل MySQL الداخلي . أوراكل ، 2014.[14] 
Yogeshwer Sharma و Philippe Ajoux و Petchean Ang وآخرون: " الثقب الدودي : 
موثوقPub-Sub لدعم خدمات الإنترنت التي يتم نسخها جغرافيًا ، "في ندوة USENIX 
الثانية عشرةبشأن تصميم وتنفيذ الأنظمة الشبكية (NSDI) ، مايو 2015.[15 ] "Oracle 
GoldenGate 12c: الوصول في الوقت الفعلي إلى المعلومات في الوقت الفعلي . " 
وحيمستند تقني ، أكتوبر 2013.[16 ] شيرشانكا داس ، شافدار بوتيف ، كابيل سورليكر 
وآخرون: "الكل على متن البيانات‐أوتوبيس! ، "في ندوة ACM حول الحوسبة السحابية 
(SoCC) ، تشرين الأول (أكتوبر) 2012.[17] جريج سابينو مولان: " الإصدار 5 من نظام 
نسخ قاعدة بيانات بوكاردو "blog.endpoint.com ، 23 يونيو 2014.[18] ويرنر فوجيلز: " 
اتساق في النهاية " ، قائمة انتظار ACM ، المجلد 6 ، العدد 6 ،الصفحات 14-19 ، 
أكتوبر 2008. دوى: 10.1145 / 1466443.1466448[19 ] دوغلاس بي تيري: "شرح تناسق 
البيانات المكرر من خلال لعبة البيسبول ، "أبحاث مايكروسوفت ، التقرير الفني 
MSR-TR-2011-137 ، أكتوبر 2011.[20] دوغلاس بي تيري وآلان جي ديمرز وكارين بيترسن 
وآخرون: " ضمانات الجلسة لـبيانات منسوخة ضعيفة الاتساق، "في المؤتمر الدولي الثالث 
على التوازي ونظم المعلومات الموزعة (PDIS) ، الصفحات 140-149 ، سبتمبر 1994. 
doi:10.1109 / PDIS.1994.331722[21] تيري براتشيت: ريبر مان: رواية عالم القرص . 
فيكتور جولانكز ، 1991. ISBN:0-575-04979-0[22] " Tungsten Replicator. " 
Continuent، Inc.، 2014.[23 ] "BDR 0.10.0 الوثائق، "مجموعة PostgreSQL Global 
Development Group ،bdr-project.org ، 2015.[24] روبرت هودجز: " إذا * كان عليك * 
نشر النسخ المتماثل متعدد الأساتذة ، فاقرأ هذاأولا، 
"scale-out-blog.blogspot.co.uk ، 30 آذار (مارس) 2012.188 | الفصل 5: النسخ 
المتماثل

      الصفحة 211
[25] جي كريس أندرسون ، وجان لينهاردت ، ونوح سلاتر: CouchDB: النهائيدليل . 
أورايلي ميديا ​​، يناير 2010. ISBN: 978-0-596-15589-6[26 ] شركة AppJet: "الدليل 
الفني لـ Etherpad و EasySync، "github.com ، 26 مارس2011.[27 ] جون داي ريختر:ما 
المختلف في محرر مستندات Google الجديد: التعاون‐خطبة سريعة "، 
googledrive.blogspot.com ، 23 أيلول (سبتمبر) 2010.[28] فريزر كليمنت: " الاتساق 
النهائي - اكتشاف التعارضات ،" messagepass‐ing.blogspot.co.uk ، 20 أكتوبر 
2011.[29 ] روبرت هودجز:حالة الفن لنسخ MySQL Multi-Master Replication ، "في 
Per‐كونا لايف: MySQL Conference & Expo ، أبريل 2013.[30] جون ديلي: " الساعات 
سيئة ، أو مرحبًا بك في عالم ديس الرائعtributed Systems "، basho.com ، 12 تشرين 
الثاني (نوفمبر) 2013.[31] رايلي بيرتون: " هل النسخ المتماثل ثنائي الاتجاه (BDR) 
في معاملات Postgres؟ ، "sdf.org ، 4 يناير 2016.[32] جوزيبي ديكانديا ، ودينيز 
هاستورون ، ومادان جامباني ، وآخرون: " دينامو: أماشمتجر القيمة الرئيسية المتوفر 
للغاية من zon "، في ندوة ACM الحادية والعشرين حول أنظمة التشغيل‐مبادئ tems 
(SOSP) ، أكتوبر 2007.[33] مارك شابيرو ، ونونو بريجويكا ، وكارلوس باكيرو ، وماريك 
زاويرسكي: " A compre‐دراسة مكثفة لأنواع البيانات المكررة المتقاربة والتبادلية، 
"INRIAتقرير بحثي لا. 7506 ، يناير 2011.[34 ] سام إليوت:CRDTs: تحديث (أو ربما 
مجرد وضع)، "في RICON West(RICON West) ، أكتوبر 2013.[35] راسل براون: " دليل 
المخادعين إلى CRDTs في Riak ،" gist.github.com ، 28 أكتوبربير 2013.[36] بنيامين 
Farinier، توماس Gazagnaire، وأنيل Madhavapeddy: " Mergeableهياكل البيانات 
الثابتة "، في 26es Journées Francophones des Langages Applicatifs(JFLA) ، يناير 
2015.[37 ] Chengzheng Sun و Clarence Ellis: "التحول التشغيلي في الوقت 
الحقيقيمحررو المجموعة: القضايا والخوارزميات والإنجازات "، في مؤتمر ACM على 
Comالعمل التعاوني المدعوم بالكمبيوتر (CSCW) ، نوفمبر 1998.[38] دوغلاس بي تيري 
ومارفن إم ثيمر وكارين بيترسن وآخرون: " إدارة التحديثالصراعات في Bayou ، وهو نظام 
تخزين مكرر ضعيف الاتصال "، في معرض ACM الخامس عشرposium on Operating Systems 
Principles (SOSP)، pages 172–182، December 1995. doi:10.1145 / 224056.224070[39] 
Lars Hofhansl: " HBASE-7709: الحلقة اللانهائية ممكنة في نسخة طبق الأصل / نسخة 
رئيسيةنشوئها، "issue.apache.org ، 29 كانون الثاني (يناير) 2013.ملخص | 189

      الصفحة 212
[40 ] ديفيد ك جيفورد: "التصويت المرجح للبيانات المكررة ، "في المؤتمر السابع لـ 
ACM Sympo‐سيوم حول مبادئ أنظمة التشغيل (SOSP) ، الصفحات 150-162 ، ديسمبر 1979. 
doi:10.1145 / 800215.806583[41] جوزيف بلومستيدت: " رد: الاتساق المطلق، "إرسال 
بريد إلكتروني إلى القائمة البريدية لمستخدمي riak ،lists.basho.com11 يناير 
2012.[42 ] جوزيف بلومستيدت: "جلب الاتساق إلى Riak "، في RICON West ، 
أكتوبر2012.[43] بيتر بيليس ، وشيفارام فينكاتارامان ، ومايكل جيه فرانكلين ، 
وجوزيف إم هيلرشتاين ،وإيون ستويكا: "قياس الاتساق النهائي مع برنامج السلوك 
الإيجابي، " اتصالاتACM ، المجلد 57 ، العدد 8 ، الصفحات 93-102 ، أغسطس 2014. doi: 
10.1145 / 2632792[44] جوناثان إليس: " تسليم تلميح حديث" ، datastax.com ، 11 
ديسمبر 2012.[45] “ Project Voldemort wiki، "github.com ، 2013.[46] " وثائق 
أباتشي كاساندرا 2.0، "DataStax، Inc. ، 2014.[47 ] "Riak Enterprise: النسخ 
المتماثل لمراكز البيانات المتعددة ". ورقة بيضاء تقنية ، باشوTechnologies Inc. ، 
سبتمبر 2014.[48] جوناثان إليس: " لماذا لا تحتاج كاساندرا لساعات متجهة، 
"datastax.com ، 2سبتمبر 2013.[49 ] ليزلي لامبورت: "الوقت والساعات وترتيب الأحداث 
في نظام موزع‐tem ، " Communications of the ACM ، المجلد 21 ، العدد 7 ، الصفحات 
558-565 ، يوليو 1978.دوى: 10.1145 / 359545.359563[50] جويل جاكوبسون: " Riak 2.0: 
Data Types " blog.joeljacobson.com ، 23 مارس 2014.[51] دي ستوت باركر جونيور ، 
جيرالد جيه بوبك ، جيرارد روديسين ، وآخرون: " Detection of Mutualعدم الاتساق في 
الأنظمة الموزعة، " IEEE Transactions on Software Engineering ،المجلد 9 ، العدد 3 
، الصفحات 240-247 ، مايو 1983. دوى: 10.1109 / TSE.1983.236733[52] نونو بريجويكا 
، وكارلوس باكيرو ، وباولو سيرجيو ألميدا ، وفيكتور فونتي ، وريكاردو غونسالفيس: 
"متجهات الإصدار المنقط: الساعات المنطقية للنسخ المتماثل المتفائل‐نشوئها، arxiv: 
1011.5808 ، 26 تشرين الثاني (نوفمبر) 2010.[53] شون كريبس: “ نبذة تاريخية عن 
الزمن في رياك، في RICON ، تشرين الأول (أكتوبر) 2014.[54] راسل براون: " إعادة 
النظر في الساعات المتجهة ، الجزء 2: متجهات الإصدار المنقط ،"basho.com ، 10 
نوفمبر 2015.[55] كارلوس باكيرو: " ناقلات الإصدار ليست ساعات متجهة، 
haslab.word‐press.com ، 8 يوليو 2011.[56 ] راينهارد شوارتز وفريدمان ماتيرن: "كشف 
العلاقات السببية فيالحسابات الموزعة: البحث عن الكأس المقدسة ، " الحوسبة الموزعة 
، المجلدume 7، number 3، pages 149–174، March 1994. دوى: 10.1007 / BF02277859190 
| الفصل 5: النسخ المتماثل

      صفحة 213
أنا. التقسيم ، كما تمت مناقشته في هذا الفصل ، هو طريقة لتقسيم قاعدة بيانات كبيرة 
عمداً إلىأصغر حجما. لا علاقة له بأقسام الشبكة (netsplits) ، وهو نوع من العطل في 
الشبكة بينهماالعقد. سنناقش مثل هذه الأخطاء فيالفصل 8.الفصل 6التقسيمبوضوح ، يجب 
الابتعاد عن التسلسل وعدم تقييد أجهزة الكمبيوتر. نحنيجب أن يذكر التعاريف وينص على 
أولويات وأوصاف البيانات. يجب عليناعلاقات الدولة ، وليس الإجراءات.—غريس موراي 
هوبر ، الإدارةوحاسوب المستقبل (1962)ناقشنا في الفصل الخامس النسخ المتماثل - أي 
امتلاك نسخ متعددة منهالبيانات على العقد المختلفة. بالنسبة لمجموعات البيانات 
الكبيرة جدًا ، أو الإنتاجية العالية جدًا للاستعلامات ، أيليس كافيًا: نحتاج أيضًا 
إلى تقسيم البيانات إلى أقسام . أناالارتباك المصطلحيما نسميه التقسيم هنا يسمى 
قشرة في MongoDB، Elas-ticsearch و SolrCloud ، وهي منطقة في HBase ، جهاز لوحي في 
BigTable ، أvnode في Cassandra و Riak ، و BBucket في Couchbase. كيف-على الإطلاق 
، يعتبر التقسيم هو المصطلح الأكثر رسوخًا ، لذلك سنلتزم بهالذي - التي.عادةً ، يتم 
تحديد الأقسام بطريقة تجعل كل جزء من البيانات (كل سجل ،صف أو مستند) ينتمي إلى قسم 
واحد بالضبط. هناك طرق مختلفة مختلفةلتحقيق هذا الأمر الذي نناقشه بعمق في هذا 
الفصل. في الواقع ، كل قسم هوقاعدة بيانات صغيرة خاصة بها ، على الرغم من أن قاعدة 
البيانات قد تدعم العمليات التي تمسأقسام متعددة في نفس الوقت.191

      الصفحة 214
السبب الرئيسي للرغبة في تقسيم البيانات هو قابلية التوسع . يمكن أقسام مختلفةيتم 
وضعها على عقد مختلفة في مجموعة لا شيء مشترك (انظر مقدمةالجزء الثاني لتعريف لا 
شيء مشترك ). وبالتالي ، يمكن توزيع مجموعة بيانات كبيرةعبر العديد من الأقراص ، 
ويمكن توزيع حمل الاستعلام عبر العديد من المعالجات.بالنسبة للاستعلامات الصغيرة 
التي تعمل على قسم واحد ، يمكن لكل عقدة exe‐ بشكل مستقلجذاب الاستعلامات الخاصة 
بالقسم الخاص به ، لذلك يمكن تحجيم معدل نقل الاستعلام عن طريق إضافةالمزيد من 
العقد. يمكن أن تكون الاستعلامات الكبيرة والمعقدة موازية عبر العديد من 
الاستعلاماتالعقد ، على الرغم من أن هذا يصبح أكثر صعوبة.كانت قواعد البيانات 
المقسمة رائدة في الثمانينيات من القرن الماضي بواسطة منتجات مثل Teradata وTandem 
NonStop SQL [ 1 ] ، وأعيد اكتشافه مؤخرًا بواسطة قواعد بيانات NoSQL ومستودعات 
البيانات المستندة إلى Hadoop. تم تصميم بعض الأنظمة لعمل المعاملات‐الأحمال وغيرها 
من التحليلات (راجع "معالجة المعاملات أم التحليلات؟" على الصفحة87 ): هذا الاختلاف 
يؤثر على كيفية ضبط النظام ، ولكن في أساسيات التقسيم‐جي تنطبق على كلا النوعين من 
عبء العمل.في هذا الفصل سننظر أولاً في الأساليب المختلفة لتقسيم البيانات 
الكبيرة.مجموعات ومراقبة كيفية تفاعل فهرسة البيانات مع التقسيم. ثم سنتحدثحول 
إعادة التوازن ، وهو أمر ضروري إذا كنت ترغب في إضافة أو إزالة العقد في 
ملفالعنقودية. أخيرًا ، سوف نحصل على نظرة عامة حول كيفية توجيه قواعد البيانات 
الطلبات إلى المستوى الصحيح‐tition وتنفيذ الاستعلامات.التقسيم والتكرارعادةً ما 
يتم دمج التقسيم مع النسخ المتماثل ، بحيث يتم نسخ كل قسممخزنة على عقد متعددة. هذا 
يعني أنه ، على الرغم من أن كل سجل ينتمي إلىقسم واحد بالضبط ، قد يظل مخزناً على 
عدة عقد مختلفة لتحمل الخطأ‐تعصب.قد تخزن العقدة أكثر من قسم واحد. إذا كان نموذج 
النسخ المتماثل بين القائد وأتباعهالمستخدمة ، يمكن أن تبدو مجموعة التقسيم والنسخ 
المتماثل كما في الشكل 6-1 .يتم تعيين قائد كل قسم لعقدة واحدة ، ويتم تعيين أتباعه 
إلى عقدة أخرىالعقد. قد تكون كل عقدة رائدة في بعض الأقسام ، وتتبع لأقسام 
أخرىtitions.كل شيء ناقشناه في الفصل 5 حول تكرار قواعد البيانات ينطبق 
بالتساويلتكرار الأقسام. اختيار نظام التقسيم مستقل في الغالبلاختيار نظام النسخ 
المتماثل ، لذلك سنبقي الأمور بسيطة ونتجاهل النسخة المتماثلةنشوئها في هذا 
الفصل.192 | الفصل السادس: التقسيم

      الصفحة 215
العقدة 1العقدة 2القسم 1زعيمالقسم 2تابعالقسم 3تابعالقسم 2تابعالقسم 3زعيمالقسم 
4تابعالعقدة 3العقدة 4القسم 1تابعالقسم 2زعيمالقسم 4تابعالقسم 1تابعالقسم 
3تابعالقسم 4زعيم= تيارات النسخ المتماثل (لكل قسم)الكتابة لالتقسيم 4الشكل 6-1. 
الجمع بين التكرار والتقسيم: تعمل كل عقدة كقائد للبعضالأقسام والمتابعين للأقسام 
الأخرى.تقسيم البيانات ذات القيمة الأساسيةلنفترض أن لديك كمية كبيرة من البيانات 
وتريد تقسيمها. كيف تقررما السجلات للتخزين على أي عقدة؟هدفنا من التقسيم هو نشر 
البيانات وتحميل الاستعلام بالتساوي عبرهاالعقد. إذا حصلت كل عقدة على حصة عادلة ، 
فعندئذ - من الناحية النظرية - يجب أن تكون عشر عقد قادرةللتعامل مع عشرة أضعاف 
البيانات وعشرة أضعاف سرعة القراءة والكتابة لملفعقدة واحدة (تجاهل النسخ المتماثل 
في الوقت الحالي).إذا كان التقسيم غير عادل ، بحيث تحتوي بعض الأقسام على بيانات أو 
استفسارات أكثر منالبعض الآخر ، نسميها منحرفة . هذا يجعل التقسيم أقل فعالية. فيفي 
الحالة القصوى ، يمكن أن ينتهي الحمل كله على قسم واحد - أي تسعة من أصل عشرة 
عقدخاملاً ، واختناقك هو العقدة المفردة المشغولة. قسم غير متناسب‐يُطلق على الحمل 
المرتفع تمامًا نقطة ساخنة .إن أبسط طريقة لتجنب النقاط الفعالة هو تعيين السجلات 
للعقد run‐دوملي. سيؤدي ذلك إلى توزيع البيانات بشكل متساوٍ عبر العقد ، لكن لها 
حجم كبيرالعيب: عند محاولتك قراءة مادة معينة ، فليس لديك طريقة لمعرفةجي عن العقدة 
التي تعمل عليها ، لذلك يجب عليك الاستعلام عن جميع العقد بالتوازي.يمكننا أن نفعل 
ما هو أفضل. لنفترض الآن أن لديك نموذجًا بسيطًا لبيانات القيمة الرئيسية ،حيث 
يمكنك دائمًا الوصول إلى سجل من خلال مفتاحه الأساسي. على سبيل المثال ، فيموسوعة 
ورقية حديثة ، تبحث عن إدخال من خلال عنوانه ؛ منذ كل الإدخالاتمرتبة أبجديًا حسب 
العنوان ، يمكنك العثور بسرعة على العنوان الذي تبحث عنه.تقسيم البيانات ذات القيمة 
الأساسية | 193

      الصفحة 216
هولدرنس - كrasnoje6Fريون - هولدرلين5اترتر - رإيثيمنون9مenage - Oتاوأ8صإتي - 
إسأولوالخامسets10سأولوالخامسذات - تثنية11تيرودو - Zذwiec12دالمراوغة - 
F.رينسن4جإيرا - دإيلوك3شراءالاتحاد الأوروبي - C.يانوثوس2أ-ak - 
خليجإس1كراسنوكأمسك - مإيندرا7الشكل 6-2. يتم تقسيم موسوعة الطباعة حسب النطاق 
الرئيسي.التقسيم حسب النطاق الرئيسيتتمثل إحدى طرق التقسيم في تعيين نطاق مستمر من 
المفاتيح (من بعض mini‐mum إلى حد أقصى) لكل قسم ، مثل مجلدات الموسوعة 
الورقية(الشكل 6-2 ). إذا كنت تعرف الحدود بين النطاقات ، فيمكنك بسهولة تحديدلي 
الذي يحتوي على قسم يحتوي على مفتاح معين. إذا كنت تعرف أيضًا أي قسم هوالمخصصة لأي 
عقدة ، ثم يمكنك تقديم طلبك مباشرة إلى العنوان المناسبالعقدة (أو ، في حالة 
الموسوعة ، اختر الكتاب الصحيح من الرف).ليس بالضرورة أن تكون نطاقات المفاتيح 
متباعدة بشكل متساوٍ ، لأن بياناتك قد لا تكون كذلكوزعت بالتساوي. على سبيل المثال 
، في الشكل 6-2، المجلد 1 يحتوي على كلمات تبدأ بـA و B ، لكن المجلد 12 يحتوي على 
كلمات تبدأ بـ T و U و V و X و Y و Z. ببساطةقد يؤدي وجود مجلد واحد لكل حرفين من 
الأحرف الأبجدية إلى وجود بعض المجلداتأكبر بكثير من غيرها. من أجل توزيع البيانات 
بالتساوي ، قسم التقسيمبرج الحمل بحاجة إلى التكيف مع البيانات.قد يتم اختيار حدود 
القسم يدويًا بواسطة المسؤول ، أو البيانات‐يمكن للقاعدة أن تختارهم تلقائيًا - 
سنصل إلى ذلك في "إعادة موازنة الأقسام"في الصفحة 201. يتم استخدام استراتيجية 
التقسيم هذه بواسطة BigTable ، مكافئها مفتوح المصدرHBase [ 2 ،3 ] و RethinkDB و 
MongoDB قبل الإصدار 2.4 [4].داخل كل قسم ، يمكننا الاحتفاظ بالمفاتيح بترتيب فرز 
(انظر "SSTables و LSM-الأشجار "في الصفحة 74 ). هذا له ميزة أن عمليات مسح النطاق 
سهلة ، ويمكنك معالجتهاالمفتاح كفهرس متسلسل لجلب العديد من السجلات ذات الصلة في 
استعلام واحد(راجع "الفهارس متعددة الأعمدة" في الصفحة 84). على سبيل المثال ، ضع 
في اعتبارك تطبيقًايخزن البيانات من شبكة من أجهزة الاستشعار ، حيث يكون المفتاح هو 
الطابع الزمني للقياس‐منة ( سنة - شهر - يوم - ساعة - دقيقة - ثانية ). عمليات مسح 
النطاق مفيدة جدًا في هذه الحالة ،لأنها تتيح لك أن تجلب بسهولة ، على سبيل المثال 
، جميع القراءات من شهر معين.ومع ذلك ، فإن الجانب السلبي لتقسيم النطاق الرئيسي هو 
أن بعض أنماط الوصول يمكن أن تفعل ذلكيؤدي إلى النقاط الساخنة. إذا كان المفتاح 
عبارة عن طابع زمني ، فإن الأقسام تتوافق مع النطاقاتمن الوقت ، على سبيل المثال 
قسم واحد في اليوم. لسوء الحظ ، لأننا نكتب البيانات من sen‐194 | الفصل السادس: 
التقسيم

      صفحة 217
ثانيا. لا تحتاج إلى أن تكون دالة تجزئة قوية من الناحية المشفرة. على سبيل المثال 
، تستخدم Cassandra و MongoDBMD5 ، ويستخدم فولدمورت وظيفة Fowler – Noll – Vo.sors 
إلى قاعدة البيانات فور حدوثها ، ينتهي الأمر بجميع عمليات الكتابة إلى نفس 
القسم(واحد اليوم) ، بحيث يمكن أن يثقل هذا القسم بالكتابة بينما يجلس الآخرونعاطل 
[5].لتجنب هذه المشكلة في قاعدة بيانات أجهزة الاستشعار ، تحتاج إلى استخدام شيء 
آخر غيرالطابع الزمني كعنصر أول من المفتاح. على سبيل المثال ، يمكنك إضافة بادئة 
لكل منهماtimestamp باسم المستشعر ، بحيث يكون التقسيم أولاً حسب اسم المستشعر وثم 
بمرور الوقت. بافتراض أن لديك العديد من المستشعرات النشطة في نفس الوقت ، 
اكتبسينتهي الحمل بتوزيع أكثر توازناً عبر الأقسام. الآن ، عندما تريد ذلكإحضار قيم 
أجهزة الاستشعار المتعددة في نطاق زمني ، فأنت بحاجة إلى إجراء عملية 
Sepa‐الاستعلام عن نطاق المعدل لكل اسم جهاز استشعار.التقسيم عن طريق تجزئة 
المفتاحنظرًا لخطر الانحراف والنقاط الساخنة ، تستخدم العديد من مخازن البيانات 
الموزعة التجزئةوظيفة لتحديد القسم لمفتاح معين.تأخذ وظيفة التجزئة الجيدة بيانات 
منحرفة وتجعلها موزعة بشكل موحد. تقوللها دالة تجزئة 32 بت تأخذ سلسلة. كلما أعطيته 
سلسلة جديدة ، فإنهإرجاع رقم يبدو عشوائيًا بين 0 و 2 32 - 1. حتى لو كانت سلاسل 
الإدخالمتشابهة جدًا ، يتم توزيع تجزئاتها بالتساوي عبر هذا النطاق من الأرقام. 
ثانياهذا موضح في الشكل 6-3 ."2014-04-19 17:08:10"7372"2014-04-19 
17:08:11"18805"2014-04-19 17:08:12"50537"2014-04-19 17:08:13"31،579"2014-04-19 
17:08:14"62253"2014-04-19 17:08:15"24.510065.535327671638349151ص 0ص 1ص 2ص 3ص 4ص 
5ص 6ص 7تجزئة(هنا: أول 2 بايتمن تجزئة MD5)الشكل 6-3. التقسيم عن طريق تجزئة 
المفتاح.يمكنك الآن تعيين نطاق من التجزئات (بدلاً من نطاق من المفاتيح) لكل قسم 
،وسيتم تخزين كل مفتاح يقع تجزئة ضمن نطاق القسم في هذا الجزءنشوئها. هذه التقنية 
جيدة في توزيع المفاتيح بشكل عادل بين الأقسام. على قدم المساواة-تقسيم البيانات 
ذات القيمة الأساسية | 195

      صفحة 218
يمكن أن تكون حدود tition متباعدة بشكل متساوٍ ، أو يمكن اختيارها عشوائيًا زائفًا 
(بتنسيقفي هذه الحالة ، تُعرف التقنية أحيانًا باسم التجزئة المتسقة ).تجزئة 
متسقةتجزئة متسقة ، على النحو المحدد بواسطة Karger et al. [6] ، هي طريقة لتوزيع 
الحمل بالتساويعبر نظام ذاكرات التخزين المؤقت على مستوى الإنترنت ، مثل شبكة توصيل 
المحتوى (CDN).يستخدم حدود التقسيم المختارة عشوائياً لتجنب الحاجة إلى التحكم 
المركزي أوالإجماع الموزع. لاحظ أن التناسق هنا لا علاقة له بالنسخة المتماثلةtency 
(انظر الفصل 5) أو تناسق الحمض (انظر الفصل 7 ) ، بل يصف أنهج خاص لإعادة التوازن. 
كما سنرى في "إعادة موازنة الأقسام" فيالصفحة 201 ، هذا النهج المعين لا يعمل بشكل 
جيد مع قواعد البيانات [ 7]، ولذلك نادرًا ما يتم استخدامه في الممارسة (لا يزال 
يشير توثيق بعض قواعد البيانات إلىتجزئة متسقة ، لكنها عادة ما تكون غير دقيقة). 
لأن هذا محير للغاية ، فمن الأفضللتجنب مصطلح التجزئة المتسقة ، وما عليك سوى 
تسميتها تقسيم التجزئة بدلاً من ذلك.لسوء الحظ ، باستخدام تجزئة المفتاح للتقسيم ، 
فقدنا أيضًا خاصية لطيفةerty of key-range التقسيم: القدرة على عمل استعلامات نطاق 
فعالة. المفاتيح التي كانتمرة واحدة المجاورة منتشرة الآن عبر جميع الأقسام ، لذلك 
يتم فقد ترتيب الفرز الخاص بهم. فيMongoDB ، إذا قمت بتمكين وضع التجزئة المستند 
إلى التجزئة ، فيجب أن يكون أي استعلام نطاقإرسالها إلى كافة الأقسام [4]. لا يدعم 
Riak استعلامات النطاق على المفتاح الأساسي[8] و Couchbase [ 9 ] و 
Voldemort.كاساندرا تحقق حل وسط بين استراتيجيتي التقسيم [10 ، 11 ،12 ]. يمكن 
الإعلان عن جدول في Cassandra باستخدام مفتاح أساسي مركب يتكون منعدة أعمدة. يتم 
تجزئة الجزء الأول فقط من هذا المفتاح لتحديد القسم ،لكن يتم استخدام الأعمدة 
الأخرى كفهرس متسلسل لفرز البيانات في Cas‐SSTables ساندرا.هذا يعني أن الاستعلام 
لا يمكنه البحث عن نطاق من القيم داخل العمود الأول منمفتاح مركب ، ولكن إذا حدد 
قيمة ثابتة للعمود الأول ، فيمكنه تنفيذهمسح نطاق فعال يعتمد على الأعمدة الأخرى 
للمفتاح.يسمح هذا بنموذج بيانات أنيق للعلاقات واحد إلى متعدد. على سبيل المثال ، 
في ملفموقع التواصل الاجتماعي ، يمكن لمستخدم واحد نشر العديد من التحديثات. إذا 
كان المفتاح الأساسي للتحديثات هوتم اختياره ليكون (user_id، update_timestamp) ثم 
يمكنك استرداد الكل بكفاءةالتحديثات التي تم إجراؤها بواسطة مستخدم معين خلال فترة 
زمنية معينة ، مرتبة حسب الطابع الزمني.قد يتم تخزين مستخدمين مختلفين على أقسام 
مختلفة ، ولكن داخل كل مستخدم ، ملفيتم تخزين التحديثات مرتبة حسب الطابع الزمني 
على قسم واحد.أعباء العمل المنحرفة وتخفيف النقاط الساخنةكما تمت مناقشته ، فإن 
تجزئة مفتاح لتحديد قسمه يمكن أن يساعد في تقليل النقاط الساخنة.ومع ذلك ، لا يمكن 
تجنبها تمامًا: في الحالة القصوى حيث يقرأ الجميع ويكتب196 | الفصل السادس: التقسيم

      الصفحة 219
هي لنفس المفتاح ، ما زلت ينتهي بك الأمر مع توجيه جميع الطلبات إلى نفس 
الطرفنشوئها.قد يكون هذا النوع من عبء العمل غير عادي ، ولكنه ليس مستحيلًا: على 
سبيل المثال ، في ملفموقع التواصل الاجتماعي ، قد يتسبب مستخدم مشهور لديه ملايين 
المتابعين في حدوث عاصفة منالنشاط عندما يفعلون شيئًا ما [13]. يمكن أن يؤدي هذا 
إلى عدد كبير من عمليات الكتابة إلىنفس المفتاح (حيث ربما يكون المفتاح هو معرف 
المستخدم الخاص بالشخصية ، أو معرفالإجراء الذي يعلق عليه الناس). تجزئة المفتاح لا 
تساعد ، مثل تجزئةمعرّفان متطابقان لا يزالان متماثلين.اليوم ، معظم أنظمة البيانات 
غير قادرة على التعويض تلقائيًا عن مثل هذه القيمة العاليةأعباء العمل المنحرفة ، 
لذلك تقع على عاتق التطبيق مسؤولية تقليل الانحراف. إلى عن علىعلى سبيل المثال ، 
إذا كان أحد المفاتيح معروفًا أنه ساخن جدًا ، فإن الأسلوب البسيط هو إضافة مفتاح 
عشوائيالرقم إلى بداية المفتاح أو نهايته. مجرد رقم عشوائي عشري مكون من رقمينسوف 
يقسم عمليات الكتابة على المفتاح بالتساوي عبر 100 مفتاح مختلف ، مما يسمح لتلك 
المفاتيحلتوزيعها على أقسام مختلفة.ومع ذلك ، بعد تقسيم الكتابة عبر مفاتيح مختلفة 
، يجب أن تقوم أي قراءات الآن بإضافةالعمل المؤقت ، حيث يتعين عليهم قراءة البيانات 
من جميع المفاتيح المائة ودمجها. هذه التقنية‐يتطلب nique أيضًا مسك دفاتر إضافي: 
من المنطقي فقط إلحاقرقم عشوائي لعدد صغير من مفاتيح التشغيل السريع ؛ بالنسبة 
للغالبية العظمى من المفاتيح ذاتمعدل نقل الكتابة المنخفض سيكون هذا عبئًا غير 
ضروري. وبالتالي ، تحتاج أيضًا إلى بعضطريقة لتتبع المفاتيح التي يتم تقسيمها.ربما 
في المستقبل ، ستكون أنظمة البيانات قادرة على الكشف والتعويض تلقائيًالأعباء العمل 
المنحرفة ، ولكن في الوقت الحالي ، تحتاج إلى التفكير في المفاضلات الخاصة 
بكالتطبيق الخاص.الفهارس التقسيمية والثانويةتعتمد مخططات التقسيم التي ناقشناها 
حتى الآن على نموذج بيانات القيمة الرئيسية. لولا يتم الوصول إلى السجلات إلا عبر 
مفتاحها الأساسي ، يمكننا تحديد القسممن هذا المفتاح ، واستخدمه لتوجيه طلبات 
القراءة والكتابة إلى القسم المسؤوللهذا المفتاح.يصبح الموقف أكثر تعقيدًا إذا تم 
تضمين الفهارس الثانوية (انظر أيضًا"هياكل الفهرسة الأخرى" في الصفحة 82 ). لا يحدد 
الفهرس الثانوي عادةً ملفالتسجيل بشكل فريد ، ولكنها طريقة للبحث عن تكرارات 
معينةالقيمة: البحث عن جميع الإجراءات التي يقوم بها المستخدم 123 ، والعثور على 
جميع المقالات التي تحتوي على كلمة hogwash ، والعثور علىكل السيارات التي لونها 
أحمر وهكذا.الفهارس الثانوية هي الخبز والزبدة لقواعد البيانات العلائقية ، وهي 
عبارة عنmon في قواعد بيانات المستند أيضًا. مخازن NoSQL ذات القيمة الرئيسية (مثل 
HBase و Volde‐mort) الفهارس الثانوية بسبب تطبيقها الإضافيلكن البعض (مثل Riak) 
بدأوا في إضافتهم لأنهم كذلكالفهارس التقسيمية والثانوية | 197

      الصفحة 220
ثالثا. إذا كانت قاعدة البيانات الخاصة بك تدعم نموذج قيمة المفتاح فقط ، فقد تميل 
إلى تطبيق فهرس ثانويبنفسك عن طريق إنشاء تعيين القيمة إلى معرف المستند في رمز 
التطبيق. إذا ذهبت في هذا الطريق ، فأنتتحتاج إلى عناية كبيرة للتأكد من أن الفهارس 
الخاصة بك تظل متسقة مع البيانات الأساسية. شروط السباقوفشل الكتابة المتقطع (حيث 
تم حفظ بعض التغييرات ولكن لم يتم حفظ البعض الآخر) يمكن أن يتسبب بسهولة بالغةخروج 
البيانات من المزامنة - راجع "الحاجة إلى معاملات متعددة الكائنات" في الصفحة 222 
.مفيد لنمذجة البيانات. وأخيرا، المؤشرات الثانوية هي علة وجود لخوادم البحث مثل 
Solr و Elasticsearch.تكمن مشكلة الفهارس الثانوية في أنها لا ترتبط بدقة 
بالأقسام.هناك طريقتان رئيسيتان لتقسيم قاعدة البيانات بفهارس ثانوية:التقسيم 
المستند إلى المستند والتقسيم المستند إلى المصطلح.191 {color: "red"، make: 
"Honda"، location: "Palo Alto"}214 {color: "black"، make: "Dodge"، الموقع: "San 
Jose"}306 {color: “red”، make: “Ford”، location: “Sunnyvale”}لون أسود[214]لون 
احمر[191 ، 306]اللون الأصفر[]يصنع: دودج[214]يصنع: فورد[306]يصنع: هوندا[191]القسم 
0مؤشر المفتاح الأساسيالفهارس الثانوية (مقسمة حسب الوثيقة)515 {color: “silver”، 
make: “Ford”، location: “Milpitas”}768 {color: "red"، make: "Volvo"، location: 
"Cupertino"}893 {color: “silver”، make: “Audi”، location: “Santa Clara”}لون 
أسود[]لون احمر[768]اللون الفضي[515 ، 893]يصنع: أودي[893]يصنع: فورد[515]يصنع: 
فولفو[768]القسم 1مؤشر المفتاح الأساسيالفهارس الثانوية (مقسمة حسب الوثيقة)"أنا 
أبحث عن سيارة حمراء"مبعثر / جمع القراءة من جميع الأقسامالشكل 6-4. تقسيم الفهارس 
الثانوية حسب المستند.تقسيم الفهارس الثانوية حسب المستندعلى سبيل المثال ، تخيل 
أنك تدير موقعًا لبيع السيارات المستعملة (موضَّح فيالشكل 6-4 ). تحتوي كل قائمة 
على معرف فريد - أطلق عليه معرف المستند - وقم بالتقسيمقاعدة البيانات حسب معرف 
المستند (على سبيل المثال ، المعرفات من 0 إلى 499 في القسم 0 ، من 500 إلى 999في 
القسم 1 ، إلخ).الآن تريد السماح للمستخدمين بالبحث عن السيارات ، مما يتيح لهم 
التصفية حسب اللون وحسبجعل، لذلك كنت في حاجة الى مؤشر الثانوي على اللون و جعل (في 
قاعدة بيانات وثيقةستكون هذه الحقول. في قاعدة البيانات العلائقية ستكون أعمدة). 
اذا كنت تمتلكأعلن الفهرس ، يمكن لقاعدة البيانات إجراء الفهرسة تلقائيًا. الثالث 
للامتحان‐ple ، كلما تمت إضافة سيارة حمراء إلى قاعدة البيانات ، يتم قسم قاعدة 
البيانات تلقائيًايضيفه إلى قائمة معرفات المستندات للون إدخال الفهرس : أحمر .198 
| الفصل السادس: التقسيم

      الصفحة 221
في نهج الفهرسة هذا ، يكون كل قسم منفصلًا تمامًا: كل قسم رئيسي‐يحتوي على فهارسه 
الثانوية الخاصة به ، والتي تغطي فقط المستندات الموجودة في هذا القسم. هو - هيلا 
يهتم بالبيانات المخزنة في أقسام أخرى. كلما احتجت إلى الكتابة إليهقاعدة البيانات 
- لإضافة مستند أو إزالته أو تحديثه - ما عليك سوى التعامل معهالقسم الذي يحتوي على 
معرف المستند الذي تكتبه. لهذا السبب ، أيُعرف الفهرس المقسم بالوثائق أيضًا 
بالفهرس المحلي (على عكس الفهرس العالميالفهرس ، الموضح في القسم التالي).ومع ذلك ، 
فإن القراءة من فهرس مقسم بالوثائق تتطلب عناية: ما لم يكن لديكالقيام بشيء خاص مع 
معرفات المستندات ، فلا يوجد سبب وراء قيام جميع السياراتمع لون معين أو صنع معين 
سيكون في نفس القسم. فيالشكل 6-4 ، تظهر السيارات الحمراء في كل من القسم 0 والقسم 
1. وبالتالي ، إذا كنت تريد ذلكابحث عن سيارات حمراء ، فأنت بحاجة إلى إرسال 
الاستعلام إلى جميع الأقسام ، والجمع بين جميع ملفاتالنتائج التي تحصل عليها.يُعرف 
هذا الأسلوب في الاستعلام عن قاعدة بيانات مقسمة أحيانًا باسم مبعثر /جمع ، وأنها 
يمكن أن تجعل الاستفسارات على قراءة المؤشرات الثانوية مكلفا للغاية. حتى لوتقوم 
بالاستعلام عن الأقسام بالتوازي ، يكون التشتت / التجميع عرضة لتضخيم زمن الوصول 
الذيل(راجع "النسب المئوية في الممارسة" في الصفحة 14 ). ومع ذلك ، فإنه يستخدم على 
نطاق واسع:goDB، Riak [ 14] ، كاساندرا [ 15] ، Elasticsearch [ 16] ، SolrCloud [ 
17] ، و VoltDB [ 18]جميعها تستخدم فهارس ثانوية مقسمة بالوثائق. يوصي معظم بائعي 
قواعد البياناتأن تقوم ببناء مخطط التقسيم الخاص بك بحيث يمكن أن تكون استعلامات 
الفهرس الثانويةيتم تقديمها من قسم واحد ، ولكن هذا ليس ممكنًا دائمًا ، خاصة عندما 
تكون كذلكاستخدام فهارس ثانوية متعددة في استعلام واحد (مثل تصفية السيارات حسب 
اللون وعن طريق تقديم في نفس الوقت).191 {color: "red"، make: "Honda"، location: 
"Palo Alto"}214 {color: "black"، make: "Dodge"، الموقع: "San Jose"}306 {color: 
“red”، make: “Ford”، location: “Sunnyvale”}لون أسود[214]لون احمر[191 ، 306 ، 
768]يصنع: أودي[893]يصنع: دودج[214]يصنع: فورد[306 ، 515]القسم 0مؤشر المفتاح 
الأساسيمؤشرات ثانوية (مقسمة حسب المصطلح)515 {color: “silver”، make: “Ford”، 
location: “Milpitas”}768 {color: "red"، make: "Volvo"، location: "Cupertino"}893 
{color: “silver”، make: “Audi”، location: “Santa Clara”}اللون الفضي[515 ، 
893]اللون الأصفر[]يصنع: هوندا[191]يصنع: فولفو[768]القسم 1مؤشر المفتاح 
الأساسيمؤشرات ثانوية (مقسمة حسب المصطلح)..."أنا أبحث عن سيارة حمراء"الشكل 6-5. 
تقسيم الفهارس الثانوية حسب المصطلح.الفهارس التقسيمية والثانوية | 199

      الصفحة 222
تقسيم الفهارس الثانوية حسب المصطلحبدلاً من أن يكون لكل قسم فهرس ثانوي خاص به ( 
فهرس محلي ) ، يمكننا ذلكإنشاء فهرس عالمي يغطي البيانات في جميع الأقسام. ومع ذلك 
، لا يمكننا تخزينها فقطهذا الفهرس على عقدة واحدة ، لأنه من المحتمل أن يصبح عنق 
الزجاجة ويهزم Purتشكل التقسيم. يجب أيضًا تقسيم الفهرس العام ، ولكن يمكن 
تقسيمهبشكل مختلف عن فهرس المفتاح الأساسي.يوضح الشكل 6-5 الشكل الذي يمكن أن يبدو 
عليه هذا: تظهر سيارات حمراء من جميع الأقسامتحت اللون: أحمر في الفهرس ، لكن 
الفهرس مقسم بحيث تبدأ الألوان بهتظهر الأحرف من a إلى r في القسم 0 ، وتظهر 
الألوان التي تبدأ من s إلى z في القسم 1.يتم تقسيم الفهرس الموجود على طراز 
السيارة بشكل مشابه (مع حدود القسمبين f و h ).نحن نسمي هذا التقسيم على أساس 
المصطلح ، لأن المصطلح الذي نبحث عنه يحددقسم الفهرس. هنا ، سيكون المصطلح هو 
اللون: الأحمر ، على سبيل المثال. الاسميأتي المصطلح من فهارس النص الكامل (نوع 
معين من الفهرس الثانوي) ، حيث يكونالمصطلحات هي كل الكلمات التي ترد في 
المستند.كما في السابق ، يمكننا تقسيم الفهرس من خلال المصطلح نفسه ، أو باستخدام 
تجزئة المصطلح.يمكن أن يكون التقسيم حسب المصطلح نفسه مفيدًا لعمليات مسح النطاق 
(على سبيل المثال على خاصية رقمية‐erty ، مثل سعر الطلب للسيارة) ، أثناء التقسيم 
على تجزئة المصطلحيعطي توزيعًا متساويًا للحمل.ميزة الفهرس العام (المقسم على أساس) 
على المستند المقسمالفهرس هو أنه يمكن أن يجعل القراءة أكثر كفاءة: بدلاً من القيام 
بالتشتت / التجميعجميع الأقسام ، يحتاج العميل فقط إلى تقديم طلب إلى القسم الذي 
يحتوي على الامتدادالمصطلح الذي يريده. ومع ذلك ، فإن الجانب السلبي للمؤشر العالمي 
هو أن يكتب الآنأبطأ وأكثر تعقيدًا ، لأن الكتابة إلى مستند واحد قد تؤثر الآنأقسام 
متعددة من الفهرس (قد يكون كل مصطلح في المستند على ملفعلى عقدة مختلفة).في عالم 
مثالي ، سيكون الفهرس محدثًا دائمًا ، وكل مستند مكتوبإلى قاعدة البيانات سوف تنعكس 
على الفور في الفهرس. ومع ذلك ، في فترة-فهرس مقسم ، قد يتطلب ذلك معاملة موزعة عبر 
جميع الأقساممتأثرًا بالكتابة ، وهو غير مدعوم في جميع قواعد البيانات (انظر الفصل 
7 و Chap‐ثالثًا 9 ).في الممارسة العملية ، غالبًا ما تكون تحديثات الفهارس 
الثانوية العامة غير متزامنة (أي ، إذاإذا قرأت الفهرس بعد وقت قصير من الكتابة ، 
فقد لا يكون التغيير الذي أجريته للتوينعكس في الفهرس). على سبيل المثال ، تذكر 
Amazon DynamoDB أن ثانيها العالمييتم تحديث فهارس داري في غضون جزء من الثانية في 
الظروف العادية ، ولكنقد تواجه تأخيرات أطول في الانتشار في حالة حدوث أعطال في 
البنية التحتية [19 ].تشمل الاستخدامات الأخرى للفهارس المقسمة حسب المصطلحات 
العالمية ميزة بحث Riak [ 20]، ومستودع بيانات Oracle ، والذي يتيح لك الاختيار بين 
الفهرسة المحلية والعالمية [ 21].200 | الفصل السادس: التقسيم

      صفحة 223
إعادة موازنة الأقسامبمرور الوقت ، تتغير الأشياء في قاعدة البيانات:• يزداد معدل 
نقل الاستعلام ، لذا فأنت تريد إضافة المزيد من وحدات المعالجة المركزية (CPUs) 
للتعامل معحمل.• يزداد حجم مجموعة البيانات ، لذا فأنت تريد إضافة المزيد من 
الأقراص وذاكرة الوصول العشوائي لتخزينها.• تعطل أحد الأجهزة ، وتحتاج الأجهزة 
الأخرى إلى تولي مهام الجهاز الفاشلالمسؤوليات.كل هذه تتطلب نقل البيانات من عقدة 
إلى أخرى. عملية mov‐تسمى البيانات الموجودة حول العقد في الكتلة إعادة التوازن 
.بغض النظر عن مخطط التقسيم المستخدم ، من المتوقع عادةً تلبية إعادة التوازنبعض 
المتطلبات الدنيا:• بعد إعادة التوازن ، يجب أن يكون الحمل (تخزين البيانات ، طلبات 
القراءة والكتابة)مشتركة بشكل عادل بين العقد في الكتلة.• أثناء إجراء إعادة 
التوازن ، يجب أن تستمر قاعدة البيانات في قبول القراءاتويكتب.• لا تنقل بيانات 
أكثر من اللازم بين العقد ، لتجنب التحميل الزائد علىشبكة الاتصال.استراتيجيات 
إعادة التوازنهناك عدة طرق مختلفة لتخصيص الأقسام للعقد [ 22]. دعونا نناقش 
بإيجازكل بدوره.كيف لا تفعل ذلك: hash mod Nقلنا سابقًا عندما تقوم بالتقسيم بواسطة 
تجزئة مفتاح (الشكل 6-3 ) أنه كذلكمن الأفضل تقسيم التجزئة الممكنة إلى نطاقات ، 
وتعيين كل نطاق إلى قسم(على سبيل المثال ، قم بتعيين مفتاح للقسم 0 إذا كان 0 ≤ 
تجزئة ( مفتاح ) < b 0 ، قم بتعيين مفتاح للقسم 1 إذاب 0 ≤ تجزئة ( مفتاح ) < ب 1 ، 
إلخ).ربما تساءلت عن سبب عدم استخدامنا فقط mod ( عامل ٪ في العديد من البرامج‐لغات 
مينغ). على سبيل المثال ، سيؤدي التجزئة ( مفتاح ) mod 10 إلى إرجاع رقم بين 0و 9 
(إذا كتبنا التجزئة كرقم عشري ، فإن التجزئة mod 10 ستكون الأخيرةرقم). إذا كان 
لدينا 10 عقد ، مرقمة من 0 إلى 9 ، فإن ذلك يبدو وكأنه طريقة سهلة للتعيينكل مفتاح 
للعقدة.تكمن مشكلة نهج mod N في أنه إذا تغير عدد العقد N ،سيتعين نقل معظم 
المفاتيح من عقدة إلى أخرى. فمثلا،إعادة موازنة الأقسام | 201

      الصفحة 224
قل التجزئة ( مفتاح ) = 123456. إذا كان لديك 10 عقد ، فسيبدأ هذا المفتاح في 
العقدة 6 (123456تعديل 10 = 6). عندما تنمو إلى 11 عقدة ، يجب أن ينتقل المفتاح إلى 
العقدة 3 (123456mod 11 = 3) ، وعندما تنمو إلى 12 عقدة ، فإنها تحتاج إلى الانتقال 
إلى العقدة 0 (123456mod 12 = 0). هذا يجعل إعادة التوازن مكلفة للغاية.وبالتالي ، 
نحتاج إلى نهج لا يحرك البيانات أكثر من اللازم.عدد ثابت من الأقساملحسن الحظ ، 
هناك حل بسيط إلى حد ما: إنشاء أقسام أكثر من تلك الموجودة هناكهي عقد ، وتقوم 
بتعيين عدة أقسام لكل عقدة. على سبيل المثال ، تشغيل قاعدة بياناتيمكن تقسيم ning 
على مجموعة من 10 عقد إلى 1000 قسم من البداية ، لذلكأنه تم تخصيص ما يقرب من 100 
قسم لكل عقدة.الآن ، إذا تمت إضافة عقدة إلى الكتلة ، يمكن للعقدة الجديدة سرقة بعض 
الأقسام منهاكل عقدة موجودة ، حتى يتم توزيع الأقسام بشكل عادل مرة أخرى. 
هههههههههههتيد في الشكل 6-6. إذا تمت إزالة عقدة من الكتلة ، يحدث نفس الشيء في 
الاتجاه المعاكس.يتم نقل أقسام كاملة فقط بين العقد. عدد الأقسام لالا يتغير ، ولا 
يتغير تخصيص مفاتيح الأقسام. الشيء الوحيد الذيالتغييرات هي تعيين الأقسام للعقد. 
هذا التغيير في التخصيص ليس كذلكفوري - يستغرق نقل كمية كبيرة من البيانات عبر 
الشبكة بعض الوقت- لذلك يتم استخدام التخصيص القديم للأقسام لأي عمليات قراءة 
وكتابة تحدثبينما يكون النقل قيد التقدم.من حيث المبدأ ، يمكنك حتى أن تأخذ في 
الاعتبار الأجهزة غير المتطابقة في مجموعتك: بواسطةتعيين المزيد من الأقسام للعقد 
الأكثر قوة ، يمكنك إجبار هذه العقدلأخذ نصيب أكبر من الحمل.تُستخدم هذه المقاربة 
لإعادة التوازن في رياك [14 ] ، كاساندرا منذ الإصدار 1.2 [ 23] ،Elasticsearch [ 
24] و Couchbase [ 9 ] و Voldemort [25 ].في هذا التكوين ، يتم عادةً إصلاح عدد 
الأقسام عندما تكون قاعدة البيانات ثابتةالإعداد الأول ، ولم يتغير بعد ذلك. على 
الرغم من أنه من الممكن الانقسام من حيث المبدأودمج الأقسام (انظر القسم التالي) ، 
يتم تشغيل عدد ثابت من الأقسامأبسط ، والعديد من قواعد بيانات القسم الثابت تختار 
عدم تنفيذ القسمشق. وبالتالي ، فإن عدد الأقسام التي تم تكوينها في البداية هو الحد 
الأقصىعدد العقد التي يمكنك الحصول عليها ، لذلك عليك أن تختارها عالية بما يكفي 
لاستيعابهاتاريخ النمو المستقبلي. ومع ذلك ، يحتوي كل قسم أيضًا على عبء إدارة ، 
لذا فهويؤدي اختيار رقم مرتفع جدًا إلى نتائج عكسية.202 | الفصل السادس: التقسيم

      الصفحة 225
p0 p4 p8 p12 p16ص 0ص 8 ص 12 ص 16ص 1ص 5 ص 13 ص 17ص 2ص 6 ص 10 ص 18ص 3ص 7 ص 11 ص 
15ص 4ص 9 ص 14 ص 19p1 p5 p9 p13 p17p2 p6 p10 p14 p18p3 p7 p11 p15 p19العقدة 0قبل 
إعادة التوازن (4 عقد في الكتلة)بعد إعادة التوازن (5 عقد في الكتلة)العقدة 1العقدة 
2العقدة 3العقدة 0العقدة 1العقدة 2العقدة 3أسطورة:العقدة 4يبقى التقسيم على نفس 
العقدةانتقل القسم إلى عقدة أخرىالشكل 6-6. إضافة عقدة جديدة إلى كتلة قاعدة بيانات 
مع أقسام متعددة لكل عقدة.التقسيم الديناميكييعمل عدد ثابت من الأقسام بشكل جيد مع 
تقسيم التجزئة ،لأن وظيفة التجزئة تضمن توزيع المفاتيح بشكل موحد عبر ملفمجموعة 
كاملة من التجزئة الممكنة.ومع ذلك ، بالنسبة لقواعد البيانات التي تستخدم تقسيم 
النطاق الرئيسي (راجع "التقسيم حسب المفتاحالنطاق "في الصفحة 194) ، ستكون حدود 
التقسيم الثابتة غير مريحة للغاية: إذا كنتإذا فهمت الحدود بشكل خاطئ ، فقد ينتهي 
بك الأمر بكافة البيانات في قسم واحد ، وجميع الأقسام الأخرى فارغة. إعادة تكوين 
حدود التقسيم man‐سيكون مملا جدا.لهذا السبب ، فإن قواعد البيانات المقسمة إلى نطاق 
رئيسي مثل HBase و RethinkDB cre‐أكل أقسام بشكل ديناميكي. عندما ينمو القسم 
ليتجاوز الحجم الذي تم تكوينه (علىHBase ، الافتراضي هو 10 جيجا بايت) ، يتم 
تقسيمها إلى قسمين بحيث نصفها تقريبًامن البيانات ينتهي على كل جانب من جوانب 
الانقسام [26 ]. على العكس من ذلك ، إذا تم حذف الكثير من البياناتويتقلص القسم إلى 
ما دون عتبة معينة ، يمكن دمجه مع جزء مجاور‐tition. هذا مشابه لما يحدث في المستوى 
العلوي للشجرة B (انظر "B- tree " علىالصفحة 77).يتم تعيين كل قسم إلى عقدة واحدة ، 
ويمكن لكل عقدة التعامل مع أقسام متعددة ،كما في الحالة السابقة. بعد تقسيم قسم 
كبير ، أحد نصفيهيمكن نقلها إلى عقدة أخرى من أجل موازنة الحمل. في حالة HBase 
،يحدث نقل ملفات الأقسام من خلال HDFS ، الملف الموزع الأساسيالنظام [3].إعادة 
موازنة الأقسام | 203

      الصفحة 226
تتمثل إحدى ميزات التقسيم الديناميكي في أن عدد الأقسام يتكيف مع ملفإجمالي حجم 
البيانات. إذا لم يكن هناك سوى كمية صغيرة من البيانات ، فإن عددًا صغيرًا من 
الأجزاءتكفي ، لذا فإن النفقات العامة صغيرة ؛ إذا كان هناك قدر هائل من البيانات ، 
فإن حجمكل قسم فردي محدد بحد أقصى قابل للتكوين [22 ].ومع ذلك ، فإن التحذير هو أن 
قاعدة البيانات الفارغة تبدأ بقسم واحد ، منذ ذلك الحينلا توجد معلومات مسبقة حول 
مكان رسم حدود القسم. بينمامجموعة البيانات صغيرة - حتى تصل إلى النقطة التي ينقسم 
عندها القسم الأول - الكليجب أن تتم معالجة عمليات الكتابة بواسطة عقدة واحدة بينما 
تبقى العقد الأخرى خامدة. إلى miti‐بوابة هذا ، HBase و MongoDB تسمح بتكوين مجموعة 
أولية من الأقسام علىقاعدة بيانات فارغة (يسمى هذا التقسيم المسبق ). في حالة تجزئة 
النطاق الرئيسي ،هذا يتطلب أن تعرف بالفعل كيف سيبدو توزيع المفتاح [26 ،4].لا 
يقتصر التقسيم الديناميكي على البيانات المقسمة إلى نطاق رئيسي فحسب ، بل يمكن أن 
يكون جيدًا أيضًايمكن استخدامها مع البيانات المقسمة. يدعم MongoDB منذ الإصدار 2.4 
كلا المفتاحين-النطاق والتجزئة ، ولكنه يقسم الأقسام ديناميكيًا في كلتا 
الحالتين.استراتيجيات إعادة التوازن الأخرىقبل الإصدار 1.2 ، استخدم Cassandra 
تجزئة متسقة مع قسم شبه عشوائيالحدود ، كما وصفها في الأصل Karger et al. [6] بدلا 
من إسناد عدةأقسام صغيرة لكل عقدة ، استخدم قسمًا كبيرًا واحدًا لكل عقدة ، ويغطي 
مساحة كبيرةنطاق ضئيل من التجزئة.ومع ذلك ، عانى هذا النهج من سوء توزيع الأحمال ، 
وجعل من الصعبإضافة عقد إلى الكتلة: يجب على العقدة الحالية تقسيم نطاقها لإعطاء 
نصف بياناتهاإلى عقدة جديدة. كانت هذه العملية باهظة الثمن صعبة التنفيذ في 
الخلفيةدون التأثير على أداء الاستعلام. لهذه الأسباب ، تقسيم كاساندراتم استبدال 
الاستراتيجية بنهج العدد الثابت للأقسام الموصوفة أعلاه[22].يمكن تجنب هذه المشكلات 
باستخدام دالة تجزئة أفضل [7] ولكن من الناحية العملية ، فإننماذج التقسيم الأكثر 
استخدامًا هي إما التجزئة مع عدد ثابت منtitions ، أو التقسيم الديناميكي حسب 
النطاق الرئيسي (عندما تكون استعلامات النطاق مطلوبة).العمليات: إعادة التوازن 
التلقائي أو اليدويهناك سؤال واحد مهم فيما يتعلق بإعادة التوازن قمنا بتغطيتهover: 
هل تتم إعادة الموازنة تلقائيًا أم يدويًا؟يوجد تدرج بين إعادة التوازن التلقائي 
بالكامل (يقرر النظام التشغيل التلقائي)عندما يتم نقل الأقسام من عقدة إلى أخرى ، 
دون أي مسؤولالتفاعل) ويدويًا بالكامل (تعيين الأقسام للعقد يتم بشكل صريحبرزت من 
قبل المسؤول ، ولا يتغير إلا عندما يكون المسؤول صراحةيعيد تشكيلها). على سبيل 
المثال ، تقوم Couchbase و Riak و Voldemort بإنشاء ملف204 | الفصل السادس: التقسيم

      الصفحة 227
تعيين القسم تلقائيًا ، ولكن يتطلب من المسؤول الالتزام به من قبليصبح ساري 
المفعول.يمكن أن تكون إعادة التوازن المؤتمتة بالكامل مريحة ، لأن هناك عمليات 
تشغيل أقلالعمل الذي يتعين القيام به للصيانة العادية. ومع ذلك ، يمكن أن يكون غير 
متوقع. إعادة التوازنعملية مكلفة لأنها تتطلب إعادة توجيه الطلبات ونقل ملفكمية 
البيانات من عقدة إلى أخرى. إذا لم يتم ذلك بعناية ، فقد يؤدي ذلك إلى زيادة 
التحميلالشبكة أو العقد ، وتسبب مشاكل في الأداء للأنظمة الأخرى.يمكن أن يكون هذا 
خطيرًا مع اكتشاف الأعطال التلقائي. فمثلا،لنفترض أن عقدة واحدة محملة بشكل زائد 
وأنها بطيئة مؤقتًا في الاستجابة للطلبات. الأخرىتستنتج العقد أن العقدة المحملة 
بشكل زائد قد ماتت ، وتعيد توازن ملفالكتلة لتحريك الحمل بعيدًا عنه. هذا يضع حملًا 
إضافيًا على العقد الأخرى والشبكة ، مما قد يؤدي إلى زيادة التحميل على المزيد من 
العقد والتسبب في فشل متتاليure.لهذا السبب ، قد يكون من الجيد وجود إنسان في حلقة 
إعادة التوازن.إنه أبطأ من القيام به تلقائيًا بالكامل ، ولكنه يمكن أن يساعد في 
منع التشغيلمفاجآت.طلب التوجيهلقد قمنا الآن بتقسيم مجموعة البيانات الخاصة بنا عبر 
عقد متعددة تعمل على عدة عقدالآلات. ولكن لا يزال هناك سؤال مفتوح: عندما يريد 
العميل إنشاء ملفطلب ، كيف تعرف العقدة التي تتصل بها؟ عند إعادة توازن الأقسام 
،تغيير احالة الأقسام للعقد. شخص ما يحتاج إلى البقاء على رأسهذه التغييرات ، من 
أجل الإجابة على السؤال: إذا كنت أرغب في قراءة أو كتابة المفتاح "foo" ،ما هو 
عنوان IP ورقم المنفذ الذي أحتاج إلى الاتصال به؟هذا مثال لمشكلة أكثر عمومية تسمى 
اكتشاف الخدمة ، وهي ليست كذلكيقتصر على قواعد البيانات فقط. أي جزء من البرامج 
يمكن الوصول إليه عبر الشبكة بههذه المشكلة ، خاصةً إذا كانت تهدف إلى إتاحة عالية 
(تعمل في ملفات زائدة عن الحاجةالتكوين على أجهزة متعددة). كتبت العديد من الشركات 
الخاصة بها في-أدوات اكتشاف الخدمة المنزلية ، وقد تم إصدار العديد منها كمصدر 
مفتوح[27].على مستوى عالٍ ، هناك عدة طرق مختلفة لهذه المشكلة (موضحة فيالشكل 6-7 
):1. اسمح للعملاء بالاتصال بأي عقدة (على سبيل المثال عبر موازن تحميل 
round-robin). لو كان ذلكتمتلك العقدة بالصدفة القسم الذي ينطبق عليه الطلب ، 
ويمكنها التعامل معهالطلب مباشرة وإلا فإنه يعيد توجيه الطلب إلى العقدة 
المناسبة.2. إرسال جميع الطلبات الواردة من العملاء إلى طبقة التوجيه أولاً ، والتي 
تحدد العقدةيجب أن يتعامل مع الطلب ويعيد توجيهه وفقًا لذلك. طبقة التوجيه هذهلا 
يتعامل بنفسه مع أي طلبات ، فهو يعمل فقط كموازن تحميل مدرك للقسم.طلب التوجيه | 
205

      صفحة 228
3. اطلب أن يكون العملاء على دراية بالتقسيم وتخصيص الأقسامإلى العقد. في هذه 
الحالة ، يمكن للعميل الاتصال مباشرة بالعقدة المناسبة ،بدون وسيط.العقدة 
0زبونالعقدة 1العقدة 2اختر العقدة 0بطريقة عشوائيةيعيش "foo" في العقدة 2يعيش "foo" 
في العقدة 2احصل على "foo"العقدة 0زبونطبقة التوجيهالعقدة 1العقدة 2احصل على 
"foo"العقدة 0زبونالعقدة 1العقدة 2احصل على "foo"الاتصال مباشرةإلى العقدة 2= معرفة 
القسم الذي تم تعيينه لأي عقدة123"فو""فو""فو"الشكل 6-7. ثلاث طرق مختلفة لتوجيه 
الطلب إلى العقدة الصحيحة.في جميع الحالات ، المشكلة الرئيسية هي: كيف يتخذ المكون 
قرار التوجيه(والتي قد تكون إحدى العقد ، أو طبقة التوجيه ، أو العميل) تعرف على 
التغييراتفي احالة الأقسام للعقد؟هذه مشكلة صعبة ، لأنه من المهم أن يتفق جميع 
المشاركين على -وإلا سيتم إرسال الطلبات إلى العقد الخاطئة ولن يتم التعامل معها 
بشكل صحيح.هناك بروتوكولات لتحقيق الإجماع في نظام موزع ، لكنها صعبةللتنفيذ بشكل 
صحيح (انظر الفصل 9 ).تعتمد العديد من أنظمة البيانات الموزعة على خدمة تنسيق 
منفصلة مثل Zoo‐يقوم Keeper بتتبع البيانات الوصفية للمجموعة ، كما هو موضح في 
الشكل 6-8. كل عقدةيسجل نفسه في ZooKeeper ، ويحتفظ ZooKeeper بالتخطيط الموثوق 
لـأقسام إلى عقد.يمكن للجهات الفاعلة الأخرى ، مثل طبقة التوجيه أو العميل المدرك 
للتقسيم ، الاشتراكلهذه المعلومات في ZooKeeper. كلما تغيرت ملكية القسم ، أو أتمت 
إضافة العقدة أو إزالتها ، يقوم ZooKeeper بإعلام طبقة التوجيه بحيث يمكنه الاحتفاظ 
بهامعلومات التوجيه محدثة.على سبيل المثال ، يستخدم Espresso من LinkedIn نظام 
Helix [ 28 ] لإدارة المجموعات (فيبدوره يعتمد على ZooKeeper) ، وتنفيذ طبقة 
التوجيه كما هو موضح في الشكل 6-8 . مونتمتلك goDB بنية مشابهة ، لكنها تعتمد على 
تطبيق خادم التكوين الخاص بهابدلاً من ZooKeeper ، و mongos daemons كطبقة توجيه. 
HBase و SolrCloud ويستخدم كافكا أيضًا ZooKeeper لتتبع تعيين القسم.206 | الفصل 
السادس: التقسيم

      الصفحة 229
العقدة 0زبونطبقة التوجيهالعقدة 1العقدة 2احصل على "الدانوب"نطاقات رئيسيةأقسام 
عناوين IPA-ak - بايزالتقسيم 0العقدة 010.20.30.100بايو - سيانوثوسالتقسيم 1العقدة 
110.20.30.101سيارا - ديلوكالتقسيم 2العقدة 210.20.30.102الوهم - فرينسنالتقسيم 
3العقدة 010.20.30.100فريون - هولدرلينالتقسيم 4العقدة 110.20.30.101هولدرنس - 
كراسنوجيالتقسيم 5العقدة 210.20.30.102كراسنوكامسك - قسم مينادرا 6العقدة 
010.20.30.100المنزل - أوتاواالتقسيم 7العقدة 110.20.30.101قضاعة - ريثيمنونالتقسيم 
8العقدة 210.20.30.102ريتي - سولوفيتسالتقسيم 9العقدة 010.20.30.100سولوفيوف - 
شاحنةالتقسيم 10العقدة 110.20.30.101ترودو - Zywiecالتقسيم 11العقدة 
210.20.30.102حارس حديقة الحيوان= معرفة القسم الذي تم تعيينه لأي عقدةالشكل 6-8. 
استخدام ZooKeeper لتتبع تعيين الأقسام للعقد.تتبع Cassandra و Riak نهجًا مختلفًا: 
يستخدمون بروتوكول القيل والقال بينالعقد للنشر والاتفاق على أي تغييرات في حالة 
الكتلة. يمكن إرسال الطلباتإلى أي عقدة ، وتلك العقدة تعيد توجيهها إلى العقدة 
المناسبة للمطلوبالتقسيم (النهج 1 في الشكل 6-7). هذا يضع المزيد من التعقيد في 
قاعدة البياناتالعقد ، ولكنه يتجنب الاعتماد على خدمة تنسيق خارجي مثل Zoo‐حارس.لا 
يقوم Couchbase بإعادة التوازن تلقائيًا ، مما يبسط الاتفاقية الأوليةالعمود بين 
العقد. عادةً ما يتم تكوين Couchbase بطبقة توجيه تسمى moxi ،الذي يتعلم حول توجيه 
التغييرات من خلال اتصال الإدارة إلى الكتلةالعقد [29].عند استخدام طبقة التوجيه أو 
عند إرسال الطلبات إلى عقدة عشوائية ، لا يزال العملاءبحاجة إلى العثور على عناوين 
IP للأجهزة للاتصال بها. ومع ذلك ، هؤلاءالعناوين ليست سريعة التغير مثل تخصيص 
الأقسام للعقد ، لذلك هو كذلكغالبًا ما يكون كافياً لاستخدام DNS لهذا الغرض.تنفيذ 
الاستعلام الموازيلقد ركزنا حتى الآن على الاستعلامات البسيطة جدًا التي تقرأ أو 
تكتب مفتاحًا واحدًا (plusاستعلامات التشتت / التجميع في حالة الفهارس الثانوية 
المقسمة بالوثائق). هذا هوحول مستوى الوصول الذي تدعمه معظم مخازن بيانات NoSQL 
الموزعة.ومع ذلك ، "المعالجة المتوازية على نطاق واسع" (MPP) منتجات قواعد البيانات 
العلائقية ، في كثير من الأحيانالمستخدمة للتحليلات ، أكثر تعقيدًا في أنواع 
الاستعلامات التي تدعمها.يحتوي استعلام مستودع البيانات النموذجي على العديد من 
الصلات والتصفية والتجميع والتجميع‐عمليات النوبة. يقوم مُحسِّن استعلام MPP بتقسيم 
هذا الاستعلام المعقد إلى عددمن مراحل التنفيذ وأقسامه ، والتي يمكن تنفيذ العديد 
منها بالتوازي علىطلب التوجيه | 207

      الصفحة 230
العقد المختلفة لمجموعة قاعدة البيانات. الاستعلامات التي تتضمن مسح أجزاء كبيرةمن 
مجموعة البيانات تستفيد بشكل خاص من هذا التنفيذ الموازي.يعد التنفيذ المتوازي 
السريع لاستعلامات مستودع البيانات موضوعًا متخصصًا ، نظرًا لامتدادأهمية التحليلات 
التجارية ، فهي تحظى باهتمام تجاري كبير. سوف نتطرقعلى بعض الأساليب لتنفيذ 
الاستعلام الموازي في الفصل 10 . لمزيد من التفاصيلنظرة عامة على التقنيات 
المستخدمة في قواعد البيانات الموازية ، يرجى الاطلاع على مراجع الأدبيات[1، 30 
].ملخصاستكشفنا في هذا الفصل طرقًا مختلفة لتقسيم مجموعة بيانات كبيرة إلى 
أصغرمجموعات فرعية. يعد هذا ضروريًا عندما يكون لديك الكثير من البيانات التي تقوم 
بتخزينها ومعالجتهاعلى جهاز واحد لم يعد ممكنًا.الهدف الرئيسي من التقسيم هو نشر 
البيانات وتحميل الاستعلام بالتساويآلات متعددة ، وتجنب النقاط الساخنة (العقد ذات 
الحمولة العالية بشكل غير متناسب).يتطلب هذا اختيار نظام التقسيم المناسب لبياناتك 
، وإعادة موازنة الأقسام من وقت لآخر حيث تتم إضافة العقد أو إزالتها 
منالعنقودية.ناقشنا طريقتين رئيسيتين للتقسيم:• تقسيم نطاق المفاتيح ، حيث يتم فرز 
المفاتيح ، ويمتلك القسم جميع المفاتيحمن حد أدنى إلى حد أقصى. هذا له ميزة أنهمن 
الممكن تقديم استعلامات نطاق cient ، ولكن هناك خطر وجود نقاط ساخنة إذا كان 
التطبيقغالبًا ما يصل إلى المفاتيح القريبة من بعضها بالترتيب المصنف.في هذا النهج 
، يتم عادةً إعادة توازن الأقسام ديناميكيًا ، عن طريق تقسيمالنطاق إلى نطاقين 
فرعيين عندما يصبح القسم كبيرًا جدًا.• تجزئة التجزئة ، حيث يتم تطبيق وظيفة 
التجزئة على كل مفتاح ، وقسممجموعة من التجزئات. يؤدي هذا إلى إتلاف ترتيب المفاتيح 
، وإجراء استعلامات النطاقغير فعال ، ولكن قد يوزع الحمل بالتساوي.عند التقسيم عن 
طريق التجزئة ، من الشائع إنشاء عدد ثابت من الأقساممقدمًا ، لتعيين عدة أقسام لكل 
عقدة ، ولتحريك جزء كاملمن عقدة إلى أخرى عند إضافة العقد أو إزالتها.الأساليب 
المختلطة ممكنة أيضًا ، على سبيل المثال باستخدام مفتاح مركب: باستخدام مفتاح 
واحدجزء من المفتاح لتحديد القسم وجزء آخر لترتيب الفرز.ناقشنا أيضًا التفاعل بين 
التقسيم والفهارس الثانوية. ثانيةيحتاج الفهرس ondary أيضًا إلى التقسيم ، وهناك 
احتمالان للقيام بهماهذه:208 | الفصل السادس: التقسيم

      صفحة 231
• فهرس مقسم بالوثائق : يتم تخزين الفهارس الثانوية في نفس الجزء.كمفتاح أساسي 
وقيمة. هذا يعني أن قسم واحد فقط يحتاجليتم تحديثه عند الكتابة ، لكن قراءة الفهرس 
الثانوي تتطلب مبعثر /يتجمعون عبر جميع الأقسام.• الفهرس المقسم حسب المدة (الفهرس 
العام): الفهارس الثانوية مقسمة إلى أجزاء منفصلةفي الواقع ، باستخدام القيم 
المفهرسة. قد يشمل الإدخال في الفهرس الثانويالسجلات من كافة أقسام المفتاح 
الأساسي. عندما يتم كتابة وثيقة ، سبعةيجب تحديث أقسام الفهرس الثانوي ؛ ومع ذلك ، 
يمكن أن تكون القراءةخدم من قسم واحد.أخيرًا ، ناقشنا تقنيات توجيه الاستعلامات إلى 
القسم المناسب ،والتي تتراوح من موازنة تحميل بسيطة مدركة للقسم إلى موازنة 
متطورةمحركات تنفيذ الاستعلام.حسب التصميم ، يعمل كل قسم بشكل مستقل في الغالب - 
وهذا ما يسمح بالمساواةقاعدة بيانات مختصرة لتوسيع نطاقها إلى أجهزة متعددة. ومع 
ذلك ، فإن العمليات التي تحتاج إلىقد يكون من الصعب التفكير في الكتابة إلى عدة 
أقسام: على سبيل المثال ، ما يحدثإذا نجحت الكتابة إلى أحد الأقسام وفشل قسم آخر؟ 
في الفصل التالي سنقوم بذلكانتقل إلى موضوع المعاملات ، والذي يمكن أن يجعل عمليات 
الكتابة المتعددة أسهل.ابن عنها.مراجع[1 ] ديفيد جي ديويت وجيم إن جراي: " أنظمة 
قواعد البيانات الموازية: مستقبل المرتفعاتأنظمة قواعد بيانات الأداء، اتصالات من 
ACM ، المجلد 35 ، العدد 6 ،الصفحات 85-98 ، يونيو 1992. دوى: 10.1145 / 
129888.129894[2 ] لارس جورج: "مقارنة بين HBase و BigTable "، larsgeorge.com ، 24 
نوفمبر2009.[3 ] "دليل أباتشي HBase المرجعي، "Apache Software Foundation 
،hbase.apache.org ، 2014.[4 ] شركة MongoDB: "ميزة التجزئة الجديدة المستندة إلى 
التجزئة في MongoDB 2.4 "blog.mongodb.org ، 10 أبريل 2013.[5 ] إيكاي لان: "نصيحة 
حول متجر بيانات App Engine: تعد القيم المتزايدة بشكل رتيب أمرًا سيئًا ، 
"ikaisays.com25 يناير 2011.[6] ديفيد كارجر وإريك ليمان وتوم لايتون وآخرون: " 
تجزئة متسقة ورانيdom الأشجار: بروتوكولات التخزين المؤقت الموزعة لتخفيف النقاط 
الساخنة في العالموايد ويب ، "في ندوة ACM السنوية التاسعة والعشرين حول نظرية 
الحوسبة (STOC) ،الصفحات 654-663 ، 1997. دوى: 10.1145 / 258533.258660ملخص | 209

      صفحة 232
[7 ] جون لامبينج وإريك فيتش: "ذاكرة صغيرة وسريعة وتجزئة متسقة‐rithm ، ”arxiv.org 
، حزيران (يونيو) 2014.[8] إريك ريدموند: " A Little Riak Book " ، الإصدار 1.4.0 ، 
Basho Technologies ، Septem‐بير 2013.[9 ] "دليل مسؤول Couchbase 2.5 ، 
"Couchbase، Inc. ، 2014.[10] أفيناش لاكشمان وبراشانت مالك: " كاساندرا - هيكل لا 
مركزيtured Storage System "، في ورشة العمل الدولية الثالثة لـ ACM SIGOPS على 
نطاق واسعالأنظمة الموزعة والبرمجيات الوسيطة (LADIS) ، أكتوبر 2009.[11 ] جوناثان 
إليس:ورقة كاساندرا على Facebook ، مشروحة ومقارنة بـApache Cassandra 2.0 ، 
"datastax.com ، 12 أيلول (سبتمبر) 2013.[12] " CQL for Cassandra 2.0 ،" DataStax، 
Inc.، 2014.[13 ] صموئيل أكسون:3٪ من خوادم تويتر مخصصة لجوستين بيبر "ماشاوble.com 
، 7 سبتمبر 2010.[14] “ Riak 1.4.8 Docs، "Basho Technologies، Inc. ، 2014.[15] 
ريتشارد لو: " المكان المناسب لفهرسة كاساندرا الثانوية " ، gonet.com ،21 أكتوبر 
2013.[16 ] زكاري تونج:تخصيص توجيه المستند الخاص بك، "elasticsearch.org ، 3 
يونيو2013.[17] " دليل مرجعي Apache Solr، "Apache Software Foundation ، 2014.[18 
] أندرو بافلو: "الأسئلة المتداولة حول H-Store ، "hstore.cs.brown.edu ،أكتوبر 
2013.[19] “ دليل مطور Amazon DynamoDB، "Amazon Web Services، Inc. ، 2014.[20] 
Rusty Klophaus: " الفرق بين 2I والبحث " ، بريد إلكتروني لمستخدمي 
riaklists.basho.com ، 25 أكتوبر 2011.[21] دونالد ك بورليسون: " تقسيم الكائنات في 
Oracle، "dba-oracle.com ، 8 تشرين الثاني (نوفمبر )‐بير 2000.[22 ] إريك إيفانز: 
"إعادة التفكير في الطوبولوجيا في كاساندرا ، "في ApacheCon Europe ، Novem‐بير 
2012.[23 ] براندون ويليامز: "العقد الافتراضية في Cassandra 1.2 ، "datastax.com ، 
4 ديسمبر2012.[24] رافاي كو: " شرح إعادة توجيه واجهة برمجة التطبيقات، 
"elasticsearchserverbook.com ، 30 سبتمبر2013.[25] “ وثائق مشروع فولدمورت، 
"project-voldemort.com.210 | الفصل السادس: التقسيم

      صفحة 233
[26 ] أنيس سوزتوتار: "تقسيم ودمج منطقة Apache HBase، "هورتون‐Works.com ، 1 
فبراير 2013.[27] جايسون وايلدر: " اكتشاف خدمة مفتوحة المصدر " ، jasonwilder.com 
، 4 فبراير2014.[28] Kishore Gopalakrishna و Shi Lu و Zhen Zhang وآخرون: " 
Untangling Cluster Manage‐منة مع اللولب، "في ندوة ACM حول الحوسبة السحابية 
(SoCC) ، تشرين الأول (أكتوبر) 2012.دوى: 10.1145 / 2391229.2391248[29] " Moxi 1.8 
Manual ،" Couchbase، Inc.، 2014.[30 ] شيفناث بابو وهيرودوتوس هيرودوتو:قواعد 
البيانات المتوازية بشكل كبير وMapReduce Systems ، " أسس واتجاهات قواعد البيانات 
، المجلد 5 ، العدد 1 ،الصفحات من 1 إلى 104 ، تشرين الثاني (نوفمبر) 2013. دوى: 
10.1561 / 1900000036ملخص | 211

      صفحة 234


      صفحة 235
الفصل 7المعاملاتزعم بعض المؤلفين أن الالتزام العام على مرحلتين مكلف للغاية بحيث 
لا يمكن دعمه.المنفذ ، بسبب مشاكل الأداء أو التوفر التي يجلبها. نعتقد أنه كذلكمن 
الأفضل أن يتعامل مبرمجو التطبيقات مع مشكلات الأداء بسبب الإفراط فياستخدام 
المعاملات عند ظهور الاختناقات ، بدلاً من الترميز دائمًا حول عدم 
وجودالمعاملات.—جيمس كوربيت وآخرون ، Spanner: Gooقاعدة بيانات gle الموزعة 
عالميًا(2012)في الواقع القاسي لأنظمة البيانات ، يمكن أن تسوء أشياء كثيرة:• قد 
يفشل برنامج أو جهاز قاعدة البيانات في أي وقت (بما في ذلك في الوسطلعملية الكتابة) 
،• قد يتعطل التطبيق في أي وقت (بما في ذلك منتصف الطريق من خلال سلسلة منعمليات)،• 
قد تؤدي الانقطاعات في الشبكة إلى قطع التطبيق بشكل غير متوقع عن ملفقاعدة بيانات ، 
أو عقدة قاعدة بيانات واحدة من أخرى ،• يمكن للعديد من العملاء الكتابة إلى قاعدة 
البيانات في نفس الوقت ، والكتابة فوق كل منهما.التغييرات ،• قد يقرأ العميل 
البيانات التي لا معنى لها لأنها كانت كذلك جزئيًامحدث،• ظروف السباق بين العملاء 
يمكن أن تسبب أخطاء مفاجئة.لكي يكون النظام موثوقًا به ، يجب أن يتعامل مع هذه 
الأخطاء ، والتأكد من أنهالا تسبب فشل ذريع للنظام بأكمله. ومع ذلك ، تنفيذ 
خطأ-آليات التسامح تتطلب الكثير من العمل. يتطلب الكثير من التفكير الدقيق في كل 
شيء213

      صفحة 236
الأشياء التي يمكن أن تسوء ، والكثير من الاختبارات للتأكد من أن الحل في 
الواقعيعمل.لعقود من الزمان ، كانت المعاملات هي الآلية المفضلة لتبسيطهامسائل. 
المعاملة هي طريقة لتطبيق ما لتجميع العديد من عمليات القراءة والكتابةمعًا في وحدة 
منطقية. من الناحية المفاهيمية ، فإن جميع عمليات القراءة والكتابة في المعاملة 
هييتم تنفيذها كعملية واحدة: إما أن تنجح المعاملة بأكملها ( الالتزام ) أو تفشل( 
إحباط ، تراجع ). إذا فشل ، يمكن للتطبيق إعادة المحاولة بأمان. هذا يجعل معالجة 
الخطأأبسط بكثير للتطبيق ، لأنه لا داعي للقلق بشأن الفشل الجزئي‐حقاً ، أي الحالة 
التي تنجح فيها بعض العمليات وبعضها يفشل (لأي سبب كان).إذا كنت قد أمضيت سنوات في 
العمل مع المعاملات ، فقد تبدو واضحة ، لكننا نحنلا ينبغي اعتبارها أمرا مفروغا 
منه. المعاملات ليست من قوانين الطبيعة ؛ كانوا كريوتهدف إلى تبسيط نموذج البرمجة 
للتطبيقالوصول إلى قاعدة البيانات. باستخدام المعاملات ، التطبيق مجاني للتجاهلبعض 
سيناريوهات الخطأ المحتملة ومشكلات التزامن ، لأن قاعدة البيانات تأخذالعناية بهم 
بدلاً من ذلك (نسمي ضمانات السلامة هذه ).لا يحتاج كل تطبيق إلى معاملات ، وفي بعض 
الأحيان تكون هناك مزايا لذلكإضعاف ضمانات المعاملات أو التخلي عنها تمامًا ، على 
سبيل المثال من أجل ach‐أنا أعلى أداء أو توافر أعلى. يمكن أن تكون بعض خصائص 
السلامةيتحقق بدون معاملات.كيف تعرف ما إذا كنت بحاجة إلى معاملات؟ من أجل الإجابة 
على هذا السؤال؟نشوئها ، نحتاج أولاً إلى فهم بالضبط ما يمكن أن تحققه معاملات 
ضمانات السلامةفيديو ، وما هي التكاليف المرتبطة بها. على الرغم من أن المعاملات 
تبدومباشرة للوهلة الأولى ، هناك في الواقع العديد من التفاصيل الدقيقة ولكنها 
مهمةالتي تدخل حيز التنفيذ.في هذا الفصل ، سنفحص العديد من الأمثلة للأشياء التي 
يمكن أن تسوء ، واستكشاف الخوارزميات التي تستخدمها قواعد البيانات للحماية من هذه 
المشكلات. سنذهبفي العمق بشكل خاص في مجال التحكم في التزامن ، ومناقشة مختلف 
الأنواع المختلفةحالة السباق التي يمكن أن تحدث ، وكيف تنفذ قواعد البيانات مستويات 
العزل مثلكما قرأت ارتكبت ، العزلة لقطة و serializability .ينطبق هذا الفصل على كل 
من قواعد البيانات ذات العقدة الواحدة والقواعد الموزعة ؛ في الفصل 8 نحنسيركز 
المناقشة على التحديات الخاصة التي تنشأ فقط في توزيعهاالأنظمة.المفهوم الزلق 
للصفقةتدعم جميع قواعد البيانات العلائقية تقريبًا اليوم ، وبعض قواعد البيانات غير 
العلائقيةالمعاملات. يتبع معظمهم الأسلوب الذي تم تقديمه في عام 1975 بواسطة IBM 
Sys‐tem R ، أول قاعدة بيانات SQL [ 1 ، 2 ، 3]. على الرغم من أن بعض تفاصيل 
التنفيذ لديهاتغيرت ، ظلت الفكرة العامة دون تغيير تقريبًا على مدار 40 عامًا:214 | 
الفصل السابع: المعاملات

      صفحة 237
دعم الإجراءات في MySQL و PostgreSQL و Oracle و SQL Server وما إلى ذلك مشابه بشكل 
غريبإلى نظام R.في أواخر العقد الأول من القرن الحادي والعشرين ، بدأت قواعد 
البيانات غير العلائقية (NoSQL) تكتسب شعبية. همتهدف إلى تحسين الوضع العلائقي 
الراهن من خلال تقديم مجموعة من البيانات الجديدةالنماذج (انظر الفصل 2) ، وبتضمين 
النسخ المتماثل ( الفصل الخامس ) والتقسيم(الفصل 6) بشكل افتراضي. كانت المعاملات 
هي الضحية الرئيسية لهذه الحركة: كثيرونمن هذا الجيل الجديد من قواعد البيانات ، 
تخلى عن المعاملات تمامًا ، أو أعاد تعريفكلمة لوصف مجموعة من الضمانات أضعف بكثير 
مما كانت عليه في السابقوقفت [ 4].مع الضجيج حول هذا المحصول الجديد من قواعد 
البيانات الموزعة ، ظهر جمهوركبير الاعتقاد بأن المعاملات كانت نقيض قابلية التوسع 
، وأن أي نطاق واسعسيتعين على النظام التخلي عن المعاملات من أجل الحفاظ على الأداء 
الجيدوتوافر عالي [5، 6]. من ناحية أخرى ، فإن ضمانات المعاملات هي بعضعدد المرات 
التي قدمها موردو قواعد البيانات كشرط أساسي "للتطبيقات الجادة""مع البيانات 
القيمة". كلا وجهتي النظر هي مبالغة خالصة.الحقيقة ليست بهذه البساطة: مثل أي خيار 
آخر للتصميم الفني ، المعاملاتلها مزايا وقيود. من أجل تفريغ تلك المقايضات ، دعنا 
ننتقل إلى ملفتفاصيل الضمانات التي يمكن أن توفرها المعاملات - سواء في التشغيل 
العادي ،وفي ظروف متطرفة مختلفة (لكنها واقعية).معنى حمضغالبًا ما يتم وصف ضمانات 
السلامة التي توفرها المعاملات من قبل البئر-المعروف اختصارًا باسم ACID ، والذي 
يرمز إلى Atomicity ، و Consistency ، و Isolation ، و Dura‐قدرة . صاغها ثيو هاردر 
وأندرياس رويتر في عام 1983 [ 7 ] في محاولة لوضع مصطلحات دقيقة لآليات التسامح مع 
الخطأ في قواعد البيانات.ومع ذلك ، من الناحية العملية ، فإن تنفيذ قاعدة بيانات 
واحدة لـ ACID لا يساويتنفيذ آخر. على سبيل المثال ، كما سنرى ، هناك الكثير من 
الغموضحول معنى العزلة [8]. الفكرة رفيعة المستوى سليمة ، لكن الشيطان 
موجودالتفاصيل. اليوم ، عندما يدعي النظام أنه "متوافق مع ACID" ، فمن غير الواضح 
ماذاضمانات يمكنك توقعها بالفعل. أصبح حمض الأسيد للأسف في الغالب مارومصطلح 
keting.( تسمى الأنظمة التي لا تستوفي معايير ACID أحيانًا BASE ، والتيلتقف على 
المتوفرة أساسا ، دولة لينة و الاتساق في نهاية المطاف [ 9 ]. هذا حتىأكثر غموضًا 
من تعريف الحمض . يبدو أن التعريف المعقول الوحيد لBASE هو "ليس حامضًا" ، أي أنه 
يمكن أن يعني أي شيء تريده تقريبًا.)دعونا نتعمق في تعريفات الذرية والاتساق 
والعزلة والمتانة ، على هذا النحوسيتيح لنا تحسين فكرتنا عن المعاملات.المفهوم 
الزلق للصفقة | 215

      صفحة 238
الذريةبشكل عام ، تشير الذرة إلى شيء لا يمكن تقسيمه إلى أجزاء أصغر.الكلمة تعني 
أشياء متشابهة ولكنها مختلفة بشكل دقيق في فروع مختلفة من الكمبيوتر‐عمل. على سبيل 
المثال ، في البرمجة متعددة مؤشرات الترابط ، إذا كان أحد الخيوط ينفذ قيمة 
ذريةالعملية ، هذا يعني أنه لا توجد طريقة يمكن أن يرى مؤشر ترابط آخر نصفها 
منتهيًانتيجة العملية. لا يمكن أن يكون النظام إلا بالحالة التي كان عليها قبل 
الأوبرا‐نشوئها ، أو بعد العملية ، ولكن لا يوجد شيء بينهما.على النقيض من ذلك ، في 
سياق ACID ، لا تتعلق الذرية بالتزامن. لم يحدث ذلكصف ما يحدث إذا حاولت عدة عمليات 
الوصول إلى نفس البيانات في نفس الوقتالوقت ، لأن ذلك مغطى تحت الحرف I للعزل (انظر 
"العزل" على الصفحة217).بدلاً من ذلك ، تصف ذرية الحمض النووي ما يحدث إذا أراد 
العميل عمل عدةيكتب ، ولكن يحدث خطأ بعد معالجة بعض عمليات الكتابة - على سبيل 
المثال ،تعطل العملية أو انقطاع الاتصال بالشبكة أو امتلاء القرص أو بعضهتم انتهاك 
قيود السلامة. إذا تم تجميع الكتابات معًا في ذريةالمعاملة ، ولا يمكن إتمام 
المعاملة ( الالتزام ) بسبب خطأ ، إذنتم إحباط المعاملة ويجب أن تتجاهل قاعدة 
البيانات أو تتراجع عن أي كتابات لديهاالتي تم إجراؤها حتى الآن في تلك 
المعاملة.بدون الذرية ، إذا حدث خطأ جزئيًا من خلال إجراء تغييرات متعددة ، فسيكون 
كذلكمن الصعب معرفة التغييرات التي تم تفعيلها والتي لم يتم تفعيلها. تطبيقيمكن 
المحاولة مرة أخرى ، ولكن هذا يخاطر بإجراء نفس التغيير مرتين ، مما يؤدي إلى تكرار 
أوبيانات خاطئة. تعمل Atomicity على تبسيط هذه المشكلة: إذا تم إحباط معاملة ، 
فسيتم إلغاءيمكن أن يتأكد التطبيق من أنه لم يغير أي شيء ، لذلك يمكن إعادة 
المحاولة بأمان.القدرة على إجهاض المعاملة عن طريق الخطأ ، والحصول على كل ما يكتب 
من تلك المعاملةتم التخلص منها ، هي السمة المميزة لذرية الحمض. ربما سيكون 
للإجهاضكان مصطلحًا أفضل من الذرية ، لكننا سنلتزم بالذرية لأن هذا هوكلمة 
عادية.التناسقتم تحميل كلمة التناسق بشكل رهيب:• ناقشنا في الفصل الخامس تناسق 
النسخ المتماثلة ومسألة الموافقة النهائيةالتوتر الذي ينشأ في الأنظمة المنسوخة 
بشكل غير متزامن (انظر "مشاكل الرد‐lication Lag "في الصفحة 155 ).• في نظرية CAP 
(انظر الفصل 9 ) ، تستخدم كلمة تناسق لتعني خطيizability (انظر"الخطية" في الصفحة 
314 ).• في سياق ACID ، يشير التناسق إلى مفهوم خاص بالتطبيق لـقاعدة البيانات في 
"حالة جيدة".216 | الفصل السابع: المعاملات

      صفحة 239
أنا. لاحظ Joe Hellerstein أن C في ACID " تم إلقاؤه لجعل الاختصار يعمل" في Härder 
وورقة رويتر ، ولم تكن تعتبر مهمة في ذلك الوقت.من المؤسف أن نفس الكلمة تستخدم 
بثلاثة معاني مختلفة على الأقل.فكرة تناسق حامض ACID هو أن لديك بيانات معينة حول 
بياناتك( الثوابت ) التي يجب أن تكون دائمًا صحيحة - على سبيل المثال ، في نظام 
المحاسبة ، الائتماناتيجب أن تكون دائمًا متوازنة بين جميع الحسابات والخصم. إذا 
بدأت المعاملة بـقاعدة بيانات صالحة وفقًا لهذه الثوابت وأي كتابات أثناء عملية 
النقلللحفاظ على الصلاحية ، يمكنك حينئذٍ التأكد من استيفاء الثوابت دائمًا.ومع ذلك 
، فإن فكرة الاتساق هذه تعتمد على فكرة التطبيق عن الثوابت ،وتقع على عاتق التطبيق 
مسؤولية تحديد معاملاته بشكل صحيح حتى يتم ذلكالحفاظ على التناسق. هذا ليس شيئًا 
يمكن أن تضمنه قاعدة البيانات: إذا كنتاكتب بيانات سيئة تنتهك ثوابتك ، لا يمكن 
لقاعدة البيانات إيقافك. (بعض spe‐يمكن التحقق من أنواع محددة من الثابت بواسطة 
قاعدة البيانات ، على سبيل المثال باستخدام مفتاح خارجيقيود أو قيود التفرد. ومع 
ذلك ، بشكل عام ، يحدد التطبيقما هي البيانات الصالحة أو غير الصالحة - قاعدة 
البيانات تخزنها فقط.)الذرية والعزلة والمتانة هي خصائص قاعدة البيانات ، في حين 
أنtency (بمعنى ACID) هو خاصية للتطبيق. قد يعتمد التطبيقعلى خصائص الذرية والعزل 
لقاعدة البيانات من أجل تحقيق الاتساق ،لكن الأمر لا يعود إلى قاعدة البيانات 
وحدها. وبالتالي فإن الحرف C لا ينتمي حقًا إلى ACID. أناعزليتم الوصول إلى معظم 
قواعد البيانات من قبل العديد من العملاء في نفس الوقت. هذه ليست مشكلة إذاإنهم 
يقرؤون ويكتبون أجزاء مختلفة من قاعدة البيانات ، ولكن إذا كانوا يصلون إليهانفس 
سجلات قاعدة البيانات ، يمكنك مواجهة مشاكل التزامن (ظروف السباق).الشكل 7-1 هو 
مثال بسيط لهذا النوع من المشاكل. لنفترض أن لديك عميلينزيادة العداد المخزن في 
قاعدة بيانات في نفس الوقت. يحتاج كل عميللقراءة القيمة الحالية ، أضف 1 ، واكتب 
القيمة الجديدة مرة أخرى (على افتراض عدم وجودزيادة عملية مضمنة في قاعدة 
البيانات). في الشكل 7-1 ، يجب أن يكون العدادزاد من 42 إلى 44 ، بسبب حدوث زيادتين 
، لكنه ذهب في الواقع فقطإلى 43 بسبب حالة السباق.العزلة بمعنى ACID تعني أن تنفيذ 
المعاملات في نفس الوقتمعزولون عن بعضهم البعض: لا يمكنهم أن يخطووا على أصابع 
بعضهم البعض. قاعدة البيانات الكلاسيكيةتضفي الكتب المدرسية الطابع الرسمي على 
العزلة باعتبارها قابلية للتسلسل ، مما يعني أن كل معاملة يمكن ذلكالتظاهر بأنها 
المعاملة الوحيدة التي تعمل على قاعدة البيانات بأكملها. قاعدة البياناتيضمن أنه 
عند تنفيذ المعاملات ، تكون النتيجة هي نفسها كما لو كانتركضوا بشكل متسلسل (واحدًا 
تلو الآخر) ، على الرغم من أنهم في الواقع قد يكونون قد ركضواحاليا [10 ].المفهوم 
الزلق للصفقة | 217

      صفحة 240
ومع ذلك ، من الناحية العملية ، نادرًا ما يتم استخدام العزل القابل للتسلسل ، لأنه 
يحمل ثغرةعقوبة مانس. بعض قواعد البيانات الشائعة مثل Oracle 11g لا تطبقها حتى.في 
Oracle ، يوجد مستوى عزل يسمى "قابل للتسلسل" ، ولكنه يتم تنفيذه بالفعلشيء يسمى 
عزل اللقطة وهو ضمان أضعف من التسلسل[8، 11 ]. سوف نستكشف مستويات العزلة هذه 
فيمستويات العزل الضعيفة في الصفحة 224.المستخدم 1قاعدة البياناتالمستخدم 
2الوقت4242حسناالحصول على العدادحسناضبط العداد = 43[42 + 1 = 43][42 + 1 = 
43]الحصول على العدادضبط العداد = 43الشكل 7-1. حالة سباق بين عميلين يزيدان العداد 
بشكل متزامن.متانةالغرض من نظام قاعدة البيانات هو توفير مكان آمن حيث يمكن تخزين 
البياناتدون خوف من فقدانها. المتانة هي الوعد بأنه بمجرد أن تأتي المعاملةإذا تم 
التقديم بنجاح ، فلن يتم نسيان أي بيانات كتبها ، حتى لو كان هناك ملفخطأ في 
الأجهزة أو تعطل قاعدة البيانات.في قاعدة بيانات أحادية العقدة ، يعني هذا عادةً 
أنه تمت كتابة البيانات إلىالتخزين المتطاير مثل القرص الصلب أو SSD. وعادةً ما 
يتضمن أيضًا سجل الكتابة المسبقةأو ما شابه (راجع "التحديث في المكان مقابل التسجيل 
بالإلحاق فقط" في الصفحة 80)، والذي يسمحالاسترداد في حالة تلف هياكل البيانات 
الموجودة على القرص. على قاعدة بيانات منسوخة ،قد تعني المتانة أنه تم نسخ البيانات 
بنجاح إلى عدد منالعقد. من أجل توفير ضمان المتانة ، يجب أن تنتظر قاعدة البيانات 
حتى يتم ذلكعمليات الكتابة أو التكرارات كاملة قبل الإبلاغ عن معاملة 
ناجحةملتزم.كما تمت مناقشته في "الموثوقية" في الصفحة 4، لا توجد متانة مثالية: إذا 
كان كل ما لديكيتم تدمير الأقراص الصلبة وجميع النسخ الاحتياطية الخاصة بك في نفس 
الوقت ، من الواضح أن هناكلا شيء يمكن أن تفعله قاعدة بياناتك لإنقاذك.النسخ 
المتماثل والمتانةتاريخيًا ، تعني المتانة الكتابة على شريط أرشيف. ثم تم فهمه على 
أنهالكتابة على القرص أو SSD. في الآونة الأخيرة ، تم تكييفها لتعني التكرار. 
أيالتنفيذ أفضل؟الحقيقة هي أنه لا يوجد شيء كامل:218 | الفصل السابع: المعاملات

      الصفحة 241
• إذا كنت تكتب على القرص وتموت الآلة ، حتى لو لم تضيع بياناتك ، فهي كذلكيتعذر 
الوصول إليها حتى تقوم إما بإصلاح الجهاز أو نقل الأقراص إلى جهاز آخرآلة. يمكن أن 
تظل الأنظمة المنسوخة متوفرة.• خطأ مترابط - انقطاع التيار الكهربائي أو خطأ يؤدي 
إلى تعطل كل عقدة على الجسيم‐الإدخال الأولي - يمكنه إخراج جميع النسخ المتماثلة 
مرة واحدة (انظر "الموثوقية" في الصفحة 4 ) ، los‐في أي بيانات موجودة فقط في 
الذاكرة. لذلك فإن الكتابة على القرص لا تزال ذات صلة بـقواعد البيانات في 
الذاكرة.• في نظام منسوخ بشكل غير متزامن ، قد تُفقد عمليات الكتابة الحديثة عندما 
يكون ملفيصبح القائد غير متاح (راجع "معالجة انقطاعات العقدة" في الصفحة 150 ).• 
عند انقطاع التيار الكهربائي فجأة ، يتم عرض محركات أقراص الحالة الصلبة على وجه 
الخصوص للبعضالأوقات تنتهك الضمانات التي من المفترض أن توفرها: حتى fsync ليست 
مضمونةانتيد للعمل بشكل صحيح [12]. يمكن أن تحتوي البرامج الثابتة للقرص على أخطاء 
، تمامًا مثل أي برامج أخرىنوع من البرامج [13، 14 ].• التفاعلات الدقيقة بين محرك 
التخزين وتنفيذ نظام الملفات أ‐يمكن أن يؤدي نشوئها إلى أخطاء يصعب تعقبها ، وقد 
تؤدي إلى الملفات الموجودة على القرصيفسد بعد وقوع حادث [ 15، 16 ].• يمكن أن تتلف 
البيانات الموجودة على القرص تدريجيًا دون أن يتم اكتشافها [ 17 ]. إذا كانت 
البياناتتلف لبعض الوقت ، قد تكون النسخ المتماثلة والنسخ الاحتياطية الحديثة صحيحة 
أيضًاتمزق. في هذه الحالة ، قد تحتاج إلى محاولة استعادته من نسخة احتياطية 
تاريخية.• إذا تم فصل SSD عن الطاقة ، فيمكن أن يبدأ فقدان البيانات في غضون أسابيع 
قليلة ،حسب درجة الحرارة [ 18 ].من الناحية العملية ، لا توجد تقنية واحدة يمكنها 
توفير ضمانات مطلقة. هناكفقط تقنيات مختلفة للحد من المخاطر ، بما في ذلك الكتابة 
على القرص ، والنسخ المتماثل إلىالآلات البعيدة والنسخ الاحتياطية - ويمكن ويجب 
استخدامها معًا. كمادائمًا ، من الحكمة أن تأخذ أي "ضمانات" نظرية مع حبة ملح 
صحية.عمليات الكائن الواحد والمتعددةللتلخيص ، في ACID ، تصف الذرية والعزلة ما يجب 
أن تفعله قاعدة البيانات إذا أيقوم العميل بالعديد من عمليات الكتابة في نفس 
المعاملة:الذريةفي حالة حدوث خطأ في منتصف الطريق خلال سلسلة من عمليات الكتابة ، 
يجب أن تتم المعاملةيتم إحباطها ، ويجب التخلص من الكتابات التي تم إنشاؤها حتى تلك 
النقطة. في أخرىكلمات ، قاعدة البيانات توفر عليك القلق بشأن الفشل الجزئي ، من 
خلال giv‐جي ضمان الكل أو لا شيء.عزليجب ألا تتداخل المعاملات الجارية في نفس الوقت 
مع بعضها البعض. إلى عن علىعلى سبيل المثال ، إذا كانت إحدى المعاملات تكتب عدة 
عمليات كتابة ، فيجب أن تكون هناك معاملة أخرىترى إما كل هؤلاء الكتابات أو لا ترى 
أيًا منها ، ولكن ليس بعض المجموعات الفرعية.المفهوم الزلق للصفقة | 219

      صفحة 242
ثانيا. يمكن القول إن العداد غير الصحيح في تطبيق البريد الإلكتروني ليس مشكلة حرجة 
بشكل خاص. بدلا من ذلك،فكر في رصيد حساب العميل بدلاً من عداد غير مقروء ، وحركة 
دفع بدلاً منالبريد الإلكتروني.تفترض هذه التعريفات أنك تريد تعديل عدة كائنات 
(صفوف ، مستندات ،السجلات) مرة واحدة. غالبًا ما تكون هناك حاجة إلى مثل هذه 
المعاملات متعددة الكائنات إذا كانت عدة أجزاء منيجب أن تظل البيانات متزامنة. يوضح 
الشكل 7-2 مثالاً من تطبيق بريد إلكتروني.لعرض عدد الرسائل غير المقروءة للمستخدم ، 
يمكنك الاستعلام عن شيء مامثل:COUNT SELECT ( * ) من رسائل البريد الإلكتروني WHERE 
recipient_id = 2 AND unread_flag = صحيحومع ذلك ، ربما وجدت هذا الاستعلام بطيئًا 
جدًا إذا كان هناك العديد من رسائل البريد الإلكتروني ، لذاتقوم الآن بتخزين عدد 
الرسائل غير المقروءة في حقل منفصل (نوع من denorm‐alization). الآن ، كلما ظهرت 
رسالة جديدة ، عليك زيادةعداد غير مقروء أيضًا ، وكلما تم وضع علامة على رسالة 
كمقروءة ، يجب عليك أيضًاإنقاص العداد غير المقروء.في الشكل 7-2 ، يواجه المستخدم 2 
حالة شاذة: تعرض قائمة صندوق البريد رسالة غير مقروءةرسالة ، لكن العداد لا يظهر أي 
رسائل غير مقروءة ، لأن العداد يتزايدمنة لم يحدث بعد. ii كان من الممكن أن تمنع 
العزلة هذه المشكلة من خلال ضمانهايرى ذلك المستخدم 2 إما البريد الإلكتروني 
المُدرج والعداد المحدث ، أو لا يرى أيًا منهما ،ولكنها ليست نقطة منتصف الطريق غير 
متسقة.يوضح الشكل 7-3 الحاجة إلى الذرية: إذا حدث خطأ في مكان ما فوقمسار المعاملة 
، يمكن أن محتويات صندوق البريد والعداد غير المقروءالخروج من المزامنة. في 
المعاملة الذرية ، إذا فشل التحديث إلى العداد ، فإن التحويلتم إحباط الإجراء 
والتراجع عن البريد الإلكتروني المدرج.المستخدم 1قاعدة البياناتالمستخدم 
2الوقتحسنا("مرحبًا" ، صحيح)0إدراج في رسائل البريد الإلكتروني(مُعرِّف_المستلم ، 
نص ، unread_flag)القيم (2 ، "مرحبًا" ، صحيح)حسناتحديث علب البريدمجموعة غير 
مقروءة = غير مقروءة + 1حيث المتلقي_id = 2حدد النص ، unread_flagمن رسائل البريد 
الإلكترونيحيث المتلقي_id = 2الحد 50حدد غير مقروءةمن علب البريدحيث المتلقي_id = 
2الشكل 7-2. انتهاك العزلة: قراءة معاملة ما لم تلتزم بمعاملة أخرىيكتب تيد.220 | 
الفصل السابع: المعاملات

      صفحة 243
ثالثا. هذا ليس مثاليا. إذا تم قطع اتصال TCP ، فيجب إحباط المعاملة. إذا كان 
الانقطاعيحدث بعد أن يطلب العميل الالتزام ، ولكن قبل أن يقر الخادم بحدوث الالتزام 
،لا يعرف العميل ما إذا كان قد تم ارتكابها أم لا. لحل هذه المشكلة ، يمكن لمدير 
المعاملات التجميععمليات بواسطة معرف معاملة فريد غير مرتبط باتصال TCP 
معين.المستخدم 1قاعدة البياناتالوقتحسناإدراج في رسائل البريد 
الإلكتروني(مُعرِّف_المستلم ، نص ، unread_flag)القيم (2 ، "مرحبًا" ، صحيح)خطأ أو 
مهلةتحديث علب البريدمجموعة غير مقروءة = غير مقروءة + 1حيث المتلقي_id = 2الشكل 
7-3. تضمن الذرية أنه في حالة حدوث خطأ ، فإن أي كتابات مسبقة من ذلك التحويلتم 
التراجع عن الإجراء لتجنب حالة عدم الاتساق.تتطلب المعاملات متعددة العناصر طريقة 
ما لتحديد القراءة والكتابةالعمليات تنتمي إلى نفس المعاملة. في قواعد البيانات 
العلائقية ، هذا هو عادةيتم ذلك بناءً على اتصال TCP الخاص بالعميل بخادم قاعدة 
البيانات: على أي شيء معيناتصال، كل شيء بين بدء المعاملة و ارتكاب البيانتعتبر 
جزءًا من نفس المعاملة. ثالثامن ناحية أخرى ، لا تمتلك العديد من قواعد البيانات 
غير العلائقية طريقة التجميع هذهالعمليات معًا. حتى إذا كانت هناك واجهة برمجة 
تطبيقات متعددة الكائنات (على سبيل المثال ، قيمة مفتاحstore قد يكون له عملية 
متعددة الوضع تقوم بتحديث عدة مفاتيح في عملية واحدة) ، ذلكلا يعني بالضرورة أنه 
يحتوي على دلالات معاملات: قد ينجح الأمر من أجلبعض المفاتيح وتفشل بالنسبة للآخرين 
، مما يترك قاعدة البيانات في حالة محدثة جزئيًا.يكتب كائن واحدتنطبق الذرية 
والعزلة أيضًا عند تغيير كائن واحد. من أجل الإختبار-ple ، تخيل أنك تكتب مستند 
JSON بحجم 20 كيلوبايت إلى قاعدة بيانات:• إذا انقطع اتصال الشبكة بعد إرسال أول 10 
كيلو بايت ، ففعلمخزن قاعدة البيانات ذلك الجزء غير القابل للتحليل 10 كيلو بايت من 
JSON؟• في حالة انقطاع التيار الكهربائي أثناء وجود قاعدة البيانات في منتصف عملية 
الكتابة فوق السابقةالقيمة الموجودة على القرص ، هل ينتهي بك الأمر مع تقسم القيمة 
القديمة والجديدة معًا؟• إذا قرأ عميل آخر ذلك المستند أثناء إجراء الكتابة ، فهل 
سيشاهد ملفالقيمة المحدثة جزئيا؟ستكون هذه المشكلات مربكة بشكل لا يصدق ، لذا فإن 
محركات التخزين عالمية تقريبًاتهدف إلى توفير الذرية والعزلة على مستوى كائن واحد 
(مثل مفتاح-المفهوم الزلق للصفقة | 221

      صفحة 244
رابعا. بالمعنى الدقيق للكلمة ، تستخدم الزيادة الذرية الكلمة الذرية بمعنى البرمجة 
متعددة مؤشرات الترابط. فيفي سياق ACID ، يجب أن يُطلق عليه في الواقع زيادة معزولة 
أو قابلة للتسلسل . لكن هذا أصبح صعب الإرضاء.زوج القيمة) على عقدة واحدة. يمكن 
تنفيذ الذرية باستخدام سجل لاسترداد الأعطالery (راجع "التحديث في المكان مقابل 
تسجيل الإلحاق فقط" في الصفحة 80) ، ويمكن أن تكون العزلةتم تنفيذه باستخدام قفل 
على كل كائن (السماح لخيط واحد فقط بالوصول إلى ملفكائن في أي وقت).توفر بعض قواعد 
البيانات أيضًا عمليات ذرية IV أكثر تعقيدًا ، مثل الزيادةالعملية ، التي تزيل 
الحاجة إلى دورة قراءة - تعديل - كتابة كما في الشكل 7-1 .تحظى عملية المقارنة 
والتعيين بشعبية مماثلة ، والتي تسمح بحدوث الكتابةفقط إذا لم يتم تغيير القيمة 
بشكل متزامن بواسطة شخص آخر.هذه العمليات أحادية الكائن مفيدة ، لأنها يمكن أن تمنع 
فقد التحديثات عندمايحاول العملاء الإلكترونيون الكتابة إلى نفس الكائن بشكل متزامن 
(راجع "منع التحديثات المفقودة"في الصفحة 233 ). ومع ذلك ، فهي ليست معاملات 
بالمعنى المعتاد للكلمة.لسوء الحظ ، تم استخدام عمليات المقارنة والتعيين وغيرها من 
العمليات أحادية الكائن.سرير "معاملات خفيفة" أو حتى "حمض" لأغراض التسويق [ 19، 20 
، 21] ،لكن هذا المصطلح مضلل. عادة ما تُفهم المعاملة على أنها mecha‐nism لتجميع 
عمليات متعددة على كائنات متعددة في وحدة تنفيذ واحدة.الحاجة إلى معاملات متعددة 
الأغراضتخلت العديد من مخازن البيانات الموزعة عن المعاملات متعددة العناصر 
لأنهايصعب تنفيذها عبر الأقسام ، ويمكن أن تعترض طريق بعض الأقسامnarios التي تتطلب 
توافرًا أو أداءً عاليًا جدًا. ومع ذلك ، هناكلا شيء يمنع بشكل أساسي المعاملات في 
قاعدة بيانات موزعة ، ونحنسيناقش تنفيذ المعاملات الموزعة في الفصل 9.لكن هل نحتاج 
إلى معاملات متعددة العناصر على الإطلاق؟ هل من الممكن أن تنفذأي تطبيق يحتوي فقط 
على نموذج بيانات ذي قيمة رئيسية وعمليات كائن واحد؟هناك بعض حالات الاستخدام التي 
تكون فيها عمليات إدراج الكائن الواحد والتحديثات والحذف كافيةسيئ. ومع ذلك ، في 
كثير من الحالات الأخرى ، تحتاج إلى كتابة العديد من الأشياء المختلفةليتم 
تنسيقها:• في نموذج البيانات العلائقية ، غالبًا ما يحتوي صف في جدول واحد على مرجع 
مفتاح خارجي إليهصف في جدول آخر. (وبالمثل ، في نموذج بيانات يشبه الرسم البياني ، 
يكون للرأس حوافإلى رؤوس أخرى.) تتيح لك المعاملات متعددة العناصر التأكد من أن هذه 
تشيرتظل ences صالحة: عند إدراج عدة سجلات تشير إلى بعضها البعض ، فإن ملفيجب أن 
تكون المفاتيح الخارجية صحيحة ومحدثة ، وإلا تصبح البيانات غيرحساس.• في نموذج 
بيانات المستند ، غالبًا ما تكون الحقول التي تحتاج إلى تحديث معًاداخل نفس المستند 
، والذي يتم التعامل معه ككائن واحد - بدون كائن متعدد222 | الفصل السابع: 
المعاملات

      صفحة 245
المعاملات مطلوبة عند تحديث مستند واحد. ومع ذلك ، وثيقةقواعد البيانات التي تفتقر 
إلى وظيفة الانضمام تشجع أيضًا على عدم التطابق (راجع "مقارنة بين قواعد بيانات 
الوثائق اليوم "في الصفحة 38). عند إلغاء تسويات المعلوماتتحتاج إلى تحديث ، كما في 
مثال الشكل 7-2 ، تحتاج إلى التحديثعدة مستندات دفعة واحدة. المعاملات مفيدة جدا في 
هذه الحالة ، لمنع البيانات غير المنسقة من الخروج عن المزامنة.• في قاعدة بيانات 
مع فهارس ثانوية (تقريبا كل شيء باستثناء مفتاح القيمة الصافية) ، يجب أيضًا تحديث 
الفهارس في كل مرة تقوم فيها بتغيير قيمة. هؤلاءالفهارس هي كائنات قاعدة بيانات 
مختلفة من وجهة نظر المعاملة: للاختبار‐ple ، بدون عزل المعاملة ، من الممكن أن 
يظهر سجل في فهرس واحدوليس آخر ، لأن التحديث إلى الفهرس الثاني لم يحدث بعد.لا 
يزال من الممكن تنفيذ مثل هذه التطبيقات بدون معاملات. ومع ذلك ، خطأ هان‐يصبح 
dling أكثر تعقيدًا بدون الذرية ، ونقص العزلةيمكن أن يسبب مشاكل التزامن. سنناقش 
هؤلاء في "مستويات العزلة الضعيفة" علىالصفحة 224 .معالجة الأخطاء والإحباطالميزة 
الرئيسية للمعاملة هي أنه في حالة وجود مشكلة ، يمكن إجهاضها وأعاد المحاولة. تستند 
قواعد بيانات ACID على هذه الفلسفة: إذا كانت قاعدة البيانات في خطرمنتهكة ضمانها 
للذرية أو العزلة أو الاستمرارية ، فإنها تفضل التخلي عنهاالمعاملة بالكامل من 
السماح لها بالاستمرار.لا تتبع كل الأنظمة تلك الفلسفة: خاصة مخازن البيانات ذات 
النسخ المتماثلة بدون قائد‐نشوئها (انظر "النسخ بلا قائد" في الصفحة 171) يعمل 
كثيرًا على "أفضل جهد"، والتي يمكن تلخيصها على أنها "قاعدة البيانات ستفعل كل ما 
في وسعها ، وإذا كانت كذلكيقع في خطأ ، فلن يؤدي إلى التراجع عن شيء قام به بالفعل 
" - لذا فهو التطبيقمسئولية التعافي من الأخطاء.ستحدث الأخطاء حتمًا ، لكن العديد 
من مطوري البرامج يفضلون التفكير فقطحول المسار السعيد بدلاً من تعقيدات معالجة 
الأخطاء. على سبيل المثال ، pop‐أطر عمل تخطيط الكائنات العلائقية (ORM) مثل Rails 
'ActiveRecord ولا تعيد Django محاولة المعاملات التي تم إحباطها - عادة ما ينتج عن 
الخطأ استثناءتظهر الفقاعات في المكدس ، بحيث يتم التخلص من أي إدخال للمستخدم 
ويتلقى المستخدم خطأرسالة. هذا عار ، لأن الهدف الكامل من عمليات الإحباط هو تمكين 
عمليات إعادة المحاولة الآمنة.على الرغم من أن إعادة محاولة معاملة تم إحباطها هي 
معالجة بسيطة وفعالة للأخطاءآلية ، ليست مثالية:• إذا نجحت المعاملة بالفعل ، لكن 
الشبكة فشلت أثناء محاولة الخادمللاعتراف بالالتزام الناجح تجاه العميل (لذلك يعتقد 
العميل أنه فشل) ،ثم تؤدي إعادة محاولة المعاملة إلى إجرائها مرتين - ما لم يكن 
لديكتوجد آلية إضافية لإلغاء البيانات المكررة على مستوى التطبيق.المفهوم الزلق 
للصفقة | 223

      صفحة 246
• إذا كان الخطأ بسبب الحمل الزائد ، فإن إعادة محاولة المعاملة ستؤدي إلى حدوث 
المشكلةأسوأ وليس أفضل. لتجنب دورات التغذية الراجعة ، والحد من عدد مرات إعادة 
المحاولة ،استخدام التراجع الأسي ، والتعامل مع الأخطاء المتعلقة بالحمل الزائد 
بشكل مختلف عنأخطاء أخرى (إن أمكن).• أخطاء عابرة فقط (على سبيل المثال بسبب الجمود 
وانتهاك العزل والإيقاع‐الانقطاعات المتكررة للشبكة وتجاوز الفشل) تستحق إعادة 
المحاولة ؛ إعادة محاولة بيرماnent error (مثل انتهاك القيد) سيكون بلا فائدة.• إذا 
كانت المعاملة لها أيضًا آثار جانبية خارج قاعدة البيانات ، فهذه الآثار الجانبيةقد 
تحدث حتى إذا تم إحباط المعاملة. على سبيل المثال ، إذا كنت ترسل ملفالبريد 
الإلكتروني ، فلن ترغب في إرسال البريد الإلكتروني مرة أخرى في كل مرة تحاول فيها 
إعادة التحويل‐عمل. إذا كنت تريد التأكد من أن عدة أنظمة مختلفة إما تلتزم أو 
تلتزمإجهاض معًا ، يمكن أن يساعد الالتزام على مرحلتين (وهو ما سنناقشه في "Atomic 
com‐التخفيف والالتزام على مرحلتين (2PC) "في الصفحة 344 ).• إذا فشلت عملية العميل 
أثناء إعادة المحاولة ، يتم فقد البيانات.مستويات العزلة الضعيفةإذا لم تلمس 
معاملتان نفس البيانات ، فيمكن تشغيلهما بأمان بالتوازي ،لأن أيا منهما لا يعتمد 
على الآخر. قضايا التزامن (ظروف السباق) فقطتدخل حيز التنفيذ عندما تقرأ معاملة 
واحدة البيانات التي يتم تعديلها بشكل متزامن بواسطةمعاملة أخرى ، أو عندما تحاول 
معاملتان تعديل نفس الشيء في نفس الوقتبيانات.يصعب العثور على أخطاء التزامن عن 
طريق الاختبار ، لأنه لا يتم تشغيل الأخطاء إلا عندماأنت غير محظوظ بالتوقيت. قد 
يحدث هذا نادرًا جدًا ، وعادة ما يكون صعبًالإعادة إنتاج. من الصعب أيضًا التفكير 
في التزامن ، خاصةً في نطاق كبيرتطبيق لا تعرف فيه بالضرورة أجزاء الكود الأخرى 
التي يمكن الوصول إليها‐جي قاعدة البيانات. يعد تطوير التطبيق صعبًا بما يكفي إذا 
كان لديك واحد فقطمستخدم في وقت واحد وجود العديد من المستخدمين المتزامنين يجعل 
الأمر أكثر صعوبة ، لأن أيًا منهاقد يتغير جزء من البيانات بشكل غير متوقع في أي 
وقت.لهذا السبب ، حاولت قواعد البيانات منذ فترة طويلة إخفاء مشكلات التزامن من 
التطبيقمطوري نشوئها من خلال توفير عزل المعاملات . من الناحية النظرية ، يجب أن 
يكون هذا ملفالحياة أسهل من خلال السماح لك بالتظاهر بعدم حدوث التزامن: isolaable 
قابلة للتسلسلنشوئها يعني أن قاعدة البيانات تضمن أن المعاملات لها نفس التأثير كما 
لوركضوا بشكل متسلسل ، أي واحدًا تلو الآخر ، دون أي التزامن.من الناحية العملية ، 
فإن العزلة للأسف ليست بهذه البساطة. تتميز العزلة القابلة للتسلسل بخاصيةتكلفة 
Formance ، والعديد من قواعد البيانات لا تريد دفع هذا الثمن [ 8 ]. لذلك هومن 
الشائع أن تستخدم الأنظمة مستويات أضعف من العزل ، والتي تحمي من بعضمشاكل التزامن 
، ولكن ليس كلها. مستويات العزلة هذه أصعب بكثير224 | الفصل السابع: المعاملات

      صفحة 247
v. تدعم بعض قواعد البيانات مستوى عزل أضعف يسمى قراءة غير ملتزمة . يمنع الكتابة 
القذرة ،لكنه لا يمنع القراءات القذرة.يمكن أن تؤدي إلى أخطاء خفية ، لكنها مع ذلك 
تستخدم في الممارسة[22].أخطاء التزامن الناتجة عن ضعف عزل المعاملة ليست مجرد 
نظريةمشكلة. لقد تسببوا في خسارة كبيرة للمال [ 23، 24] ، أدت إلى التحقيقمن قبل 
المراجعين الماليين [25] وتسبب في إتلاف بيانات العميل [ 26 ]. بوبوالتعليق الأول 
على ارتباطات مثل هذه المشاكل هو "استخدام قاعدة بيانات ACID إذا كنتالتعامل مع 
البيانات المالية! "، لكن هذا يخطئ الهدف. حتى العديد من العلائقية الشعبيةتستخدم 
أنظمة قواعد البيانات (التي تُعتبر عادةً "ACID") عزلًا ضعيفًا ، لذا فهيلن تمنع 
بالضرورة حدوث هذه الأخطاء.بدلاً من الاعتماد الأعمى على الأدوات ، نحتاج إلى تطوير 
فهم جيد لـأنواع مشاكل التزامن الموجودة وكيفية منعها. إذا نحن نستطيعبناء تطبيقات 
موثوقة وصحيحة ، باستخدام الأدوات المتاحة لنا.في هذا القسم سنلقي نظرة على عدة 
مستويات عزل ضعيفة (غير قابلة للتسلسل)المستخدمة في الممارسة ، وناقش بالتفصيل 
أنواع ظروف العرق التي يمكن وما لا يمكنحتى تتمكن من تحديد ما هو مناسب لتطبيقك. 
بمجرد أن نقوم بذلكعند القيام بذلك ، سنناقش القابلية للتسلسل بالتفصيل في القسم 
التالي ("تسلسل"في الصفحة 242). سنناقش مستويات العزلة بشكل غير رسمي باستخدام 
الأمثلة. إن أردتتعريفات وتحليلات صارمة لخصائصها ، يمكنك العثور عليها في ACAالأدب 
demic [ 27، 28، 29 ].قراءة ملتزمةيتم قراءة الالتزام بالمستوى الأساسي لعزل 
المعاملة . v يجعل اثنين من الغوارانيالمحملات:1. عند القراءة من قاعدة البيانات ، 
سترى فقط البيانات التي تم الالتزام بها(لا قراءات قذرة ).2. عند الكتابة إلى قاعدة 
البيانات ، ستقوم فقط بالكتابة فوق البيانات التي تم الوصول إليهاميتيد (لا يكتب 
قذرة ).دعونا نناقش هذين الضمانتين بمزيد من التفصيل.لا قراءات قذرةتخيل أن إحدى 
المعاملات قد كتبت بعض البيانات إلى قاعدة البيانات ، لكنها لم تصل بعدمقلد أو 
أجهض. هل يمكن لمعاملة أخرى رؤية تلك البيانات غير الملتزم بها؟ إذا كانت الإجابة 
بنعم ، هذا هويسمى قراءة قذرة [ 2 ].مستويات عزل ضعيفة | 225

      صفحة 248
يجب أن تمنع المعاملات التي يتم تشغيلها على مستوى العزل الملتزم بالقراءة القراءات 
المتسخة. هذهيعني أن أي كتابات من خلال معاملة تصبح مرئية للآخرين فقط عندما يتم 
ذلك عبريرتكب الإجراء (وبعد ذلك ، تصبح جميع كتاباته مرئية في وقت واحد). هذا 
موضحفي الشكل 7-4 ، حيث قام المستخدم 1 بتعيين x = 3 ، ولكن لا يزال الحصول على x 
للمستخدم 2 يُرجع القيمة القديمة2 بينما لم يلتزم المستخدم 1 بعد.هناك عدة أسباب 
تجعل من المفيد منع القراءات القذرة:• إذا احتاجت معاملة ما إلى تحديث كائنات 
متعددة ، فإن القراءة المتسخة تعني أن هناك كائنات أخرىالمعاملة قد ترى بعض 
التحديثات ولكن ليس البعض الآخر. على سبيل المثال ، فيالشكل 7-2، يرى المستخدم 
البريد الإلكتروني الجديد غير المقروء وليس العداد المحدث. هذههي قراءة قذرة للبريد 
الإلكتروني. رؤية قاعدة البيانات في حالة محدثة جزئيًا أمر خاطئالانصهار للمستخدمين 
، وقد يتسبب في اتخاذ معاملات أخرى قرارات غير صحيحة.• إذا تم إحباط معاملة ، فيجب 
التراجع عن أي كتابات تم إجراؤها (كما هو الحال فيالشكل 7-3 ). إذا كانت قاعدة 
البيانات تسمح بالقراءات القذرة ، فهذا يعني أن المعاملة قد تظهرالبيانات التي تم 
التراجع عنها لاحقًا ، أي التي لم يتم الالتزام بها فعليًا بـقاعدة البيانات. سرعان 
ما يصبح التفكير في العواقب محيرًا للعقل.المستخدم 1قاعدة البياناتالمستخدم 
2الوقت223حسناحسناضبط x = 3مجموعة ص = 3الحصول على xالحصول على xالحصول على 
xيقترفالشكل 7-4. لا توجد قراءات قذرة: يرى المستخدم 2 القيمة الجديدة لـ x فقط بعد 
معاملة المستخدم 1لديها التزام.لا يكتب قذرةماذا يحدث إذا حاولت معاملتان في وقت 
واحد تحديث نفس الكائن في ملفقاعدة البيانات؟ لا نعرف بأي ترتيب ستحدث عمليات 
الكتابة ، لكننا عادةافترض أن الكتابة اللاحقة تحل محل الكتابة السابقة.ومع ذلك ، 
ماذا يحدث إذا كانت الكتابة السابقة جزءًا من معاملة لم تتم بعدملتزم ، لذا فإن 
الكتابة اللاحقة تستبدل قيمة غير ملتزمة؟ هذا يسمى قذراكتب [27 ]. يجب أن 
تمنعالمعاملات التي يتم تشغيلها علىمستوى العزل الملتزم بالقراءة اتساخهايكتب ، 
عادةً عن طريق تأخير الكتابة الثانية حتى تتم معاملة الكتابة الأولىارتكبت أو 
أجهضت.من خلال منع عمليات الكتابة القذرة ، يتجنب مستوى العزل هذا بعض أنواع 
التزامنمشاكل:226 | الفصل السابع: المعاملات

      صفحة 249
• في حالة تحديث المعاملات كائنات متعددة ، يمكن أن تؤدي عمليات الكتابة القذرة إلى 
نتيجة سيئة.على سبيل المثال ، ضع في اعتبارك الشكل 7-5، والذي يوضح موقع ويب لبيع 
السيارات المستعملة علىحيث يحاول شخصان ، أليس وبوب ، شراء نفس السيارة في نفس 
الوقت.شراء سيارة يتطلب اثنين من قواعد البيانات يكتب: القائمة على الموقع يجب أن 
تكونتم تحديثها لتعكس المشتري ، ويجب إرسال فاتورة المبيعات إلى المشتري.في حالة 
الشكل 7-5، يتم منح البيع إلى Bob (لأنه يؤديالفوز بتحديث جدول القوائم) ، ولكن يتم 
إرسال الفاتورة إلى Alice (لأنهاإجراء التحديث الفائز لجدول الفواتير). قراءة 
ملتزمة يمنعمثل هذه الحوادث المؤسفة.• ومع ذلك، قراءة ارتكبت لم يكن منع حالة تعارض 
بين اثنينزيادات العداد في الشكل 7-1. في هذه الحالة ، تحدث الكتابة الثانية بعدأول 
معاملة تم ارتكابها ، لذا فهي ليست كتابة قذرة. لا يزال غير صحيح ، ولكنسبب مختلف - 
في "منع فقد التحديثات" في الصفحة 233 ، سنناقش كيفية القيام بذلكلجعل هذه الزيادات 
العداد آمنة.بوبأليسالقوائمالفواتيرالوقتتحديث القوائمتعيين المشتري = "أليس"حيث 
المعرف = 1234تحديث القوائمتعيين المشتري = "بوب"حيث المعرف = 1234تحديث 
الفواتيرتعيين المستلم = "أليس"حيث List_id = 1234تحديث الفواتيرتعيين المستلم = 
'بوب'حيث List_id = 1234يقترف(الآن المشتري = "بوب")(المتلقي الآن = 
"أليس")حسناحسناحسناحسنايقترفالشكل 7-5. مع عمليات الكتابة القذرة ، يمكن أن تكون 
عمليات الكتابة المتضاربة من معاملات مختلفةمختلط.تنفيذ قراءة ملتزمةالقراءة 
الملتزمة هي مستوى عزلة شائع جدًا. هذا هو الإعداد الافتراضي في Oracle11g و 
PostgreSQL و SQL Server 2012 و MemSQL والعديد من قواعد البيانات الأخرى [ 8].في 
أغلب الأحيان ، تمنع قواعد البيانات عمليات الكتابة غير النظيفة باستخدام أقفال على 
مستوى الصف: عندما يكون ملفتريد المعاملة تعديل كائن معين (صف أو مستند) ، يجب 
أولاًالحصول على قفل على هذا الكائن. يجب بعد ذلك الضغط على هذا القفل حتى تنتهي 
المعاملةمقلد أو أجهض. يمكن لمعاملة واحدة فقط الاحتفاظ بالقفل لأي كائن معين ؛ 
لومعاملة أخرى تريد أن تكتب لنفس الكائن ، يجب أن تنتظر حتى الأولتم تنفيذ المعاملة 
أو إحباطها قبل أن تتمكن من الحصول على القفل والمتابعة. هذهمستويات عزل ضعيفة | 
227

      صفحة 250
السادس. في وقت كتابة هذا التقرير ، كانت قواعد البيانات السائدة الوحيدة التي 
تستخدم الأقفال لعزل الالتزام بالقراءة هي IBMDB2 و Microsoft SQL Server في 
read_committed_snapshot = إيقاف التكوين [ 22 ، 35 ].يتم القفل تلقائيًا بواسطة 
قواعد البيانات في وضع الالتزام بالقراءة (أو iso stronger أقوىمستويات lation).كيف 
نمنع القراءات القذرة؟ سيكون أحد الخيارات هو استخدام نفس القفل وتتطلب أي معاملة 
تريد قراءة كائن للحصول على القفل لفترة وجيزة ، وثم حررها مرة أخرى بعد القراءة 
مباشرة. هذا من شأنه أن يضمن أن قراءةلا يمكن أن يحدث عندما يكون للكائن قيمة قذرة 
وغير ملتزمة (لأنه أثناء ذلكالوقت الذي سيحتجزه القفل بواسطة المعاملة التي قامت 
بالكتابة).ومع ذلك ، فإن نهج طلب أقفال القراءة لا يعمل بشكل جيد في الممارسة ،لأن 
معاملة كتابة واحدة طويلة الأمد يمكن أن تفرض العديد من المعاملات للقراءة فقطانتظر 
حتى تكتمل المعاملة طويلة الأمد. هذا يضر بوقت الاستجابةالمعاملات للقراءة فقط ، 
وهو أمر سيء للتشغيل: تباطؤ في جزء واحد من ملفيمكن أن يكون للتطبيق تأثير غير 
مباشر في جزء مختلف تمامًا من التطبيقنشوئها ، بسبب انتظار الأقفال.لهذا السبب، فإن 
معظم قواعد البيانات السادس منع القذرة يقرأ باستخدام النهج هو موضح فيالشكل 7-4 : 
لكل عنصر مكتوب ، تتذكر قاعدة البيانات كلا من com القديمالقيمة المنقولة ، وكذلك 
القيمة الجديدة التي حددتها المعاملة التي تحتفظ حاليًا بامتدادكتابة القفل. أثناء 
استمرار المعاملة ، فإن أي معاملات أخرى تقرأيتم إعطاء الكائن ببساطة القيمة 
القديمة. فقط عندما يتم الالتزام بالقيمة الجديدة ، عبرقم بالتبديل إلى قراءة 
القيمة الجديدة.عزل لقطة وقراءة قابلة للتكرارإذا نظرت بشكل سطحي إلى قراءة العزلة 
الملتزمة ، فستغفر لكمعتقدًا أنها تفعل كل ما تحتاجه المعاملة: فهي تسمح 
بالإجهاض(مطلوب للذرية) ، يمنع قراءة النتائج غير المكتملة للمعاملات ،ويمنع 
الكتابة المتزامنة من الاختلاط. في الواقع ، هذه مفيدةالميزات ، وضمانات أقوى بكثير 
مما يمكنك الحصول عليه من نظام لا يحتوي علىالمعاملات.ومع ذلك ، لا يزال هناك 
الكثير من الطرق التي يمكنك من خلالها الحصول على أخطاء التزامنباستخدام قراءة 
ملتزمة. على سبيل المثال ، يوضح الشكل 7-6 مشكلة يمكن أن تحدثمع الالتزام 
بالقراءة.لنفترض أن أليس لديها مدخرات قدرها 1000 دولار في أحد البنوك ، مقسمة على 
حسابين بقيمة 500 دولار لكل منهما.الآن تقوم إحدى المعاملات بتحويل 100 دولار من 
أحد حساباتها إلى حساب آخر. إذا كانتمن المؤسف أن ألقي نظرة على قائمة أرصدة 
الحسابات الخاصة بها في نفس اللحظة مثل تلك transac‐قيد المعالجة ، فقد ترى رصيد 
حساب واحدًا في كل مرة قبل الدخل‐جي الدفعة (برصيد 500 دولار) ، والحساب الآخر 
بعدتم إجراء تحويل صادر (الرصيد الجديد 400 دولار). إلى أليس الآن228 | الفصل 
السابع: المعاملات

      الصفحة 251
يبدو أن لديها إجمالي 900 دولار فقط في حساباتها - يبدو أن 100 دولاراختفت في 
الهواء.تسمى هذه الحالة الشاذة بانحراف القراءة أو القراءة غير القابل للتكرار : 
إذا كانت أليس ستقرأ ملفرصيد الحساب 1 مرة أخرى في نهاية المعاملة ، سترى 
مختلفًاالقيمة (600 دولار) مما رأته في طلب البحث السابق. يعتبر انحراف القراءة 
مقبولاًقيد القراءة ، تم الالتزام بالعزل: أرصدة الحسابات التي شاهدتها أليس كانت 
بالفعلارتكبت في وقت قراءتها.إذا أعادت أليس تحميل موقع الخدمات المصرفية عبر 
الإنترنت بعد بضع ثوانٍ ، فإن 100 دولار ستكون أكثرمن المحتمل أن تكون قد عاودت 
الظهور ، لذا فهي ليست مشكلة دائمة. ومع ذلك ، لا يمكن لبعض المواقفتحمل مثل هذا 
التناقض المؤقت:النسخ الاحتياطيةيتطلب أخذ نسخة احتياطية عمل نسخة من قاعدة 
البيانات بأكملها ، الأمر الذي قد يستغرقساعات على قاعدة بيانات كبيرة. أثناء وقت 
تشغيل عملية النسخ الاحتياطي ،يكتب سيستمر إلى قاعدة البيانات. وهكذا ، يمكن أن 
ينتهي بك الأمر معبعض أجزاء النسخة الاحتياطية التي تحتوي على نسخة قديمة من 
البيانات وأجزاء أخرىتحتوي على إصدار أحدث. إذا كنت بحاجة إلى الاستعادة من هذه 
النسخة الاحتياطية ، فإن ملفالتناقضات (مثل اختفاء الأموال) تصبح دائمة.الاستفسارات 
التحليلية وفحوصات النزاهةفي بعض الأحيان ، قد ترغب في تشغيل استعلام يقوم بمسح 
أجزاء كبيرة من البيانات‐قاعدة. هذه الاستعلامات شائعة في التحليلات (راجع "معالجة 
المعاملات أو Ana‐lytics؟ " في الصفحة 87 ) ، أو قد يكون جزءًا من تكامل دوري 
للتحقق من أن كل شيءهو بالترتيب (مراقبة لتلف البيانات). من المرجح أن تعود مثل هذه 
الاستفساراتنتائج غير منطقية إذا لاحظوا أجزاء من قاعدة البيانات في نقاط مختلفة 
فيالوقت.تحويلأليسالحساب 1الحساب 2الوقتحدد التوازنمن الحساباتحيث المعرف = 1تحديث 
الحساباتضبط الرصيد = الرصيد + 100حيث المعرف = 1حدد التوازنمن الحساباتحيث المعرف 
= 2تحديث الحساباتضبط الرصيد = الرصيد - 100حيث المعرف = 2يقترفالآن الرصيد = 
600الرصيد = 500500الرصيد الآن = 400الرصيد = 500400يقترفالشكل 7-6. قراءة 
الانحراف: تلاحظ أليس قاعدة البيانات في حالة غير متسقة.مستويات عزل ضعيفة | 229

      صفحة 252
السابع. لكي نكون دقيقين ، فإن معرّفات المعاملات عبارة عن أعداد صحيحة 32 بت ، لذا 
فهي تتدفق بعد حوالي 4 مليارات transac‐نشوئها. تقوم عملية الفراغ في PostgreSQL 
بالتنظيف الذي يضمن عدم تأثير التدفق الزائد على البيانات.عزل اللقطة ، المعروف 
أيضًا باسم التحكم في التزامن متعدد الإرسال (MVCC) ، هوالحل الأكثر شيوعًا لهذه 
المشكلة [ 27]. الفكرة هي أن كل معاملة تقرأمن لقطة متسقة لقاعدة البيانات ، أي 
جميع البيانات التي تم الالتزام بهاقاعدة البيانات في وقت معين. حتى إذا تم تغيير 
البيانات لاحقًا بواسطةمعاملة أخرى ، كل معاملة ترى البيانات القديمة من وقت ذلك 
النقل‐بدأ العمل.عزل اللقطة هو نعمة للاستعلامات طويلة المدى والقراءة فقط مثل 
النسخ الاحتياطية وملفاتالتحليلات. من الصعب جدًا التفكير في معنى الاستعلام إذا 
كانت البيانات على أساسهايتغير في نفس الوقت الذي يتم فيه تنفيذ الاستعلام. عندما 
تكون الصفقةيمكن رؤية لقطة متسقة لقاعدة البيانات ، مجمدة في وقت معين ، فهي 
كذلكأسهل بكثير في الفهم.تنفيذ عزل اللقطةيعد عزل اللقطة ميزة شائعة: فهي مدعومة من 
قبل PostgreSQL و MySQL معمحرك التخزين InnoDB و Oracle و SQL Server والمزيد [22 
،30، 31].مثل تنفيذ القراءة ، تستخدم تطبيقات عزل اللقطة عادةً أقفال الكتابةلمنع 
عمليات الكتابة القذرة (راجع "تنفيذ القراءة الملتزمة" في الصفحة 227 ) ، والتييعني 
أن المعاملة التي تقوم بالكتابة يمكن أن تمنع تقدم عملية تحويل أخرىالعمل الذي يكتب 
لنفس الشيء. ومع ذلك ، الأقفال ليست مطلوبة للقراءات. منمن وجهة نظر الأداء ، فإن 
المبدأ الأساسي لعزل اللقطة هو أن القراء أبدًايحظر الكتاب ، والكتاب لا يمنعون 
القراء أبدًا . يسمح هذا لقاعدة البيانات بالتعامل معتشغيل استعلامات القراءة على 
لقطة متسقة في نفس الوقت الذي تتم فيه معالجة عمليات الكتابةعادة ، دون أي خلاف بين 
القفل.يتم تنفيذ هذا كتعميم للآلية التي رأيناها للمنعقراءات قذرة في الشكل 7-4. من 
أجل منع القراءات المتسخة ، تحتاج قاعدة البيانات إلى الاحتفاظ بهافي نسختين على 
الأكثر من كائن: الإصدار المخصص ، والنسخة التي تم استبدالها - ولكن-نسخة غير 
ملتزمة. لعزل اللقطة ، يجب أن تكون قاعدة البياناتالاحتفاظ بعدة إصدارات مختلفة 
ملتزمة من كائن ، لأن العديد منها قيد التقدمقد تحتاج المعاملات إلى رؤية حالة 
قاعدة البيانات في نقاط زمنية مختلفة.ومن ثم يُعرف عزل اللقطة أيضًا باسم تقنية 
التحويل المتعدد .يوضح الشكل 7-7 كيفية تنفيذ عزل اللقطة في PostgreSQL 
[30](تطبيقات أخرى متشابهة). عند بدء المعاملة ، يتم منحهامعرف المعاملة vii الفريد 
والمتزايد دائمًا . كلما كتبت معاملة أي شيءإلى قاعدة البيانات ، يتم تمييز 
البيانات التي تكتبها بمعرف المعاملة الخاص بالكاتب.يحتوي كل صف في الجدول على حقل 
تم إنشاؤه بواسطة ، يحتوي على معرف المعاملة التيأدخل هذا الصف في الجدول. علاوة 
على ذلك ، يحتوي كل صف على حقل محذوف حسب ، وهو230 | الفصل السابع: المعاملات

      صفحة 253
في البداية فارغة. إذا حذفت إحدى المعاملات صفًا ، فلن يتم حذف الصف فعليًا من 
ملفقاعدة البيانات ، ولكن تم تمييزها للحذف عن طريق تعيين الحقل المحذوف بواسطة 
معرّفالمعاملة التي طلبت الحذف. في وقت لاحق ، عندما يكون من المؤكد أن لايمكن 
للمعاملة الوصول إلى البيانات المحذوفة بعد الآن ، وهي عملية جمع البيانات المهملة 
فيتزيل قاعدة البيانات أي صفوف تم وضع علامة عليها للحذف وتحرر مساحتها.يتم ترجمة 
التحديث داخليًا إلى حذف وإنشاء. على سبيل المثال ، فيالشكل 7-7، تستقطع المعاملة 
13 100 دولار من الحساب 2 ، مع تغيير الرصيد منمن 500 دولار إلى 400 دولار. يحتوي 
جدول الحسابات الآن بالفعل على صفين للحساب 2: صفبرصيد 500 دولار تم تمييزه على أنه 
محذوف بالمعاملة 13 ، وصف واحدبرصيد 400 دولار تم إنشاؤه بواسطة المعاملة 
13.عمليةtxid = 13عمليةtxid = 12الحساب 1الحساب 2الوقتحدد التوازنمن الحساباتحيث 
المعرف = 1تحديث الحساباتضبط التوازن =الرصيد + 100حيث المعرف = 1حدد التوازنمن 
الحساباتحيث المعرف = 2تحديث الحساباتضبط التوازن =التوازن - 100حيث المعرف = 
2يقترفتم إنشاؤها بواسطة = 3تم الحذف بواسطة = 13معرف = 1الرصيد = 500تم إنشاؤها 
بواسطة = 13تم الحذف بواسطة = لا شيءمعرف = 1الرصيد = 600500تم إنشاؤها بواسطة = 
3تم الحذف بواسطة = لا شيءمعرف = 1الرصيد = 500تم إنشاؤها بواسطة = 5تم الحذف 
بواسطة = لا شيءالمعرف = 2الرصيد = 500تم إنشاؤها بواسطة = 5تم الحذف بواسطة = 
13المعرف = 2الرصيد = 500تم إنشاؤها بواسطة = 13تم الحذف بواسطة = لا شيءالمعرف = 
2الرصيد = 400حسنا500حسنايقترفالشكل 7-7. تنفيذ عزل اللقطة باستخدام كائنات متعددة 
التحويل.قواعد الرؤية لمراقبة لقطة متسقةعندما تقرأ معاملة من قاعدة البيانات ، يتم 
استخدام معرفات المعاملة لاتخاذ القرارالأشياء التي يمكن للمعاملة رؤيتها وأيها غير 
مرئية. من خلال تحديد vis بعنايةقواعد ibility ، يمكن لقاعدة البيانات تقديم لقطة 
متسقة من قاعدة البيانات إلىطلب. هذا يعمل على النحو التالي:مستويات عزل ضعيفة | 
231

      صفحة 254
1. في بداية كل معاملة ، تُنشئ قاعدة البيانات قائمة بجميع المعاملات الأخرىالتي 
كانت قيد التنفيذ (لم يتم الالتزام بها أو تم إحباطها) في ذلك الوقت. أييتم تجاهل 
عمليات الكتابة التي تم إجراؤها بواسطة إحدى تلك المعاملات ، حتى لو كانت المعاملة 
الفرعيةبالتتابع.2. يتم تجاهل أي عمليات كتابة تم إجراؤها عن طريق المعاملات 
المجهضة.3. أي كتابات تم إجراؤها عن طريق المعاملات بمعرف معاملة لاحق (أي التي 
بدأتبعد بدء المعاملة الحالية) ، بغض النظر عما إذا كان ذلكارتكبت الصفقة.4. جميع 
عمليات الكتابة الأخرى مرئية لاستعلامات التطبيق.تنطبق هذه القواعد على كل من إنشاء 
وحذف الكائنات. في الشكل 7-7 ، عند العبوريقرأ الإجراء 12 من الحساب 2 ، ويرى 
رصيدًا قدره 500 دولار نظرًا لحذف ملفتم إجراء رصيد بقيمة 500 دولار من خلال 
المعاملة 13 (وفقًا للقاعدة 3 ، لا يمكن للمعاملة 12انظر الحذف الذي تم بواسطة 
المعاملة 13) ، ولم يتم إنشاء رصيد بقيمة 400 دولار بعدمرئي (بنفس القاعدة).بعبارة 
أخرى ، يكون الكائن مرئيًا إذا:• في الوقت الذي بدأت فيه معاملة القارئ ، المعاملة 
التي تم إنشاؤهاالكائن قد ارتكب بالفعل ، و• لم يتم وضع علامة على الكائن للحذف - 
أو إذا كان كذلك ، فإن المعاملة التي تتطلبلم يتم الالتزام بحذف ted في الوقت الذي 
كانت فيه معاملة القارئبدأت.قد تستمر المعاملة طويلة الأمد في استخدام لقطة لفترة 
طويلة ، مستمرة‐جي لقراءة القيم التي لطالما كانت (من وجهة نظر المعاملات 
الأخرى)الكتابة فوقه أو حذفه. من خلال عدم تحديث القيم المطبقة مطلقًا ، ولكن بدلاً 
من ذلك إنشاء ملفالإصدار في كل مرة يتم فيها تغيير القيمة ، يمكن أن توفر قاعدة 
البيانات لقطة متسقةبينما لا تتكبد سوى مقدار ضئيل من النفقات العامة.الفهارس وعزل 
اللقطةكيف تعمل الفهارس في قاعدة بيانات متعددة النسخ؟ أحد الخيارات هو الحصول على 
الفهرسأشر ببساطة إلى جميع إصدارات الكائن ، وسيحتاج استعلام الفهرس إلى تصفية أي 
منهاإصدارات الكائن غير المرئية للمعاملة الحالية. عندما تجمع القمامةيزيل نشوئها 
إصدارات الكائن القديمة التي لم تعد مرئية لأي معاملة ،يمكن أيضًا إزالة إدخالات 
فهرس الاستجابة.في الممارسة العملية ، تحدد العديد من تفاصيل التنفيذ أداء التحويل 
المتعددالتحكم التزامني. على سبيل المثال ، تمتلك PostgreSQL تحسينات لتجنب 
الفهرسالتحديثات إذا كان بالإمكان احتواء إصدارات مختلفة من نفس الكائن في نفس 
الصفحة [30 ].يتم استخدام نهج آخر في CouchDB و Datomic و LMDB. على الرغم من أنها 
تستخدم أيضاأشجار ب (انظر "أشجار ب" في الصفحة 77) ، يستخدمون متغير الإلحاق فقط / 
النسخ عند الكتابة232 | الفصل السابع: المعاملات

      الصفحة 255
التي لا تقوم بالكتابة فوق صفحات الشجرة عند تحديثها ، ولكنها تُنشئ بدلاً من 
ذلكنسخة جديدة من كل صفحة معدلة. يتم نسخ الصفحات الأصلية ، حتى جذر الشجرةوتم 
تحديثه للإشارة إلى الإصدار الجديد من الصفحات الفرعية الخاصة بهم. أي صفحات ليست 
كذلكمتأثرًا بالكتابة لا يلزم نسخه ، ويظل ثابتًا [32 ،33 ، 34].باستخدام إلحاق 
أشجار B فقط ، تُنشئ كل معاملة كتابة (أو مجموعة حركات) ملفجذر B-tree الجديد ، 
وجذر معين هو لقطة متسقة لقاعدة البيانات فينقطة زمنية عندما تم إنشاؤه. ليست هناك 
حاجة لتصفية الكائنات على أساسمعرفات المعاملة لأن عمليات الكتابة اللاحقة لا 
يمكنها تعديل شجرة B الموجودة ، فقطخلق جذور شجرة جديدة. ومع ذلك ، يتطلب هذا النهج 
أيضًا عملية خلفية لـالضغط وجمع القمامة.تكرار الارتباك في القراءة والتسميةعزل 
اللقطة هو مستوى عزل مفيد ، خاصة بالنسبة لمعاملات القراءة فقط.ومع ذلك ، فإن 
العديد من قواعد البيانات التي تطبقها تسميها بأسماء مختلفة. في Oracle هو 
عليهيُسمى التسلسل ، وفي PostgreSQL و MySQL يُطلق عليه اسم قراءة قابلة للتكرار 
[22 ].سبب هذا الالتباس في التسمية هو أن معيار SQL لا يحتوي على المحتوىcept لعزل 
اللقطة ، لأن المعيار يعتمد على تعريف System R لعام 1975مستويات العزلة [2] ولقطة 
العزل لم يتم اختراعها بعد.بدلاً من ذلك ، فإنه يحدد القراءة القابلة للتكرار ، 
والتي تبدو مشابهة بشكل سطحي للقطة isola‐نشوئها. تستدعي PostgreSQL و MySQL مستوى 
عزل اللقطة القابل للتكرارلأنه يفي بمتطلبات المعيار ، وبالتالي يمكنهم المطالبة 
بالمعاييرامتثال.لسوء الحظ ، فإن تعريف معيار SQL لمستويات العزل معيب - إنه 
كذلكغامضة وغير دقيقة وليست مستقلة عن التنفيذ كما ينبغي للمعياريكون [ 27]. على 
الرغم من تطبيق العديد من قواعد البيانات للقراءة القابلة للتكرار ، إلا أن هناك 
صعوبة كبيرةأسوار في الضمانات التي يقدمونها بالفعل ، على الرغم من كونها قياسية 
ظاهريًا‐مكعّب [22 ]. كان هناك تعريف رسمي للقراءة القابلة للتكرار في البحثالأدب [ 
28، 29 ] لكن معظم التطبيقات لا تفي بهذا التعريف الرسمي. ووفوق ذلك ، يستخدم IBM 
DB2 قراءة قابلة للتكرار للإشارة إلى قابلية التسلسل [ 8 ].نتيجة لذلك ، لا أحد 
يعرف حقًا ما تعنيه القراءة القابلة للتكرار .منع التحديثات المفقودةاقرأ العزلة 
الملتزمة واللقطات ، كما تمت مناقشته حتى الآن ، في المقام الأولحول ضمانات ما يمكن 
أن تراه معاملة القراءة فقط في وجود كونيكتب الحالية. لقد تجاهلنا في الغالب مسألة 
كتابة معاملتين اتفاقبوقاحة - لقد ناقشنا فقط الكتابات القذرة (انظر "لا توجد 
عمليات كتابة قذرة" في الصفحة 226)، واحدنوع معين من التعارض بين الكتابة والكتابة 
الذي يمكن أن يحدث.مستويات عزل ضعيفة | 233

      الصفحة 256
ثامنا. من الممكن ، وإن كان معقدًا إلى حد ما ، التعبير عن تحرير مستند نصي كتيار 
ذريالطفرات. يرى"حل التعارض التلقائي" في الصفحة 167 لبعض المؤشرات.هناك عدة أنواع 
أخرى مثيرة للاهتمام من الصراع التي يمكن أن تحدث بين concurبحنان كتابة المعاملات. 
أشهرها مشكلة التحديث المفقودة ،هو موضح في الشكل 7-1.يمكن أن تحدث مشكلة التحديث 
المفقود إذا قرأ أحد التطبيقات بعض القيمة من البيانات‐base وتعديلها وإعادة كتابة 
القيمة المعدلة (دورة قراءة - تعديل - كتابة ). لوتقوم معاملتان بهذا في وقت واحد ، 
يمكن فقد أحد التعديلات ، لأنالكتابة الثانية لا تتضمن التعديل الأول. (نقول 
أحيانًا أن ملفاكتب لاحقًا clobbers الكتابة السابقة.) يحدث هذا النمط في 
سيناريوهات مختلفة مختلفة‐دائرة الرقابة الداخلية:• زيادة العداد أو تحديث رصيد 
الحساب (يتطلب قراءةالقيمة الحالية ، وحساب القيمة الجديدة ، وإعادة كتابة القيمة 
المحدثة).• إجراء تغيير محلي على قيمة معقدة ، على سبيل المثال إضافة عنصر إلى 
قائمة بداخلهامستند JSON (يتطلب تحليل المستند وإجراء التغيير والكتابة‐رجوع 
الوثيقة المعدلة).• يقوم مستخدمان بتحرير صفحة wiki في نفس الوقت ، حيث يقوم كل 
مستخدم بحفظ ملفهيتغير عن طريق إرسال محتويات الصفحة بالكامل إلى الخادم ، والكتابة 
فوق أي شيءموجود حاليًا في قاعدة البيانات.نظرًا لأن هذه مشكلة شائعة ، فقد تم 
تطوير العديد من الحلول المختلفةافتتح.عمليات الكتابة الذريةتوفر العديد من قواعد 
البيانات عمليات التحديث الذري ، والتي تتجنب تنفيذ أدورة القراءة والتعديل 
والكتابة في كود التطبيق. هم عادة أفضل حل إذا كان لديكيمكن التعبير عن الكود من 
حيث تلك العمليات. على سبيل المثال ، ما يلي آمنفي معظم قواعد البيانات 
العلائقية:عدادات التحديث SET value = value + 1 WHERE key = 'foo' ؛وبالمثل ، توفر 
قواعد بيانات المستندات مثل MongoDB العمليات الذرية لـإجراء تعديلات محلية على جزء 
من وثيقة JSON ، ويقدم Redis ذريًاعمليات لتعديل هياكل البيانات مثل قوائم الانتظار 
ذات الأولوية. ليس كل ما يكتبيمكن التعبير عنها بسهولة من حيث العمليات الذرية - 
على سبيل المثال ، تحديثات wikiتتضمن الصفحة تحريرًا تعسفيًا للنص الثامن - ولكن في 
المواقف التي يمكن فيها للعمليات الذريةيتم استخدامها ، فهي عادة ما تكون الخيار 
الأفضل.عادة ما يتم تنفيذ العمليات الذرية عن طريق وضع قفل خاص على الكائنعند 
قراءتها ، بحيث لا يمكن لأي معاملة أخرى قراءتها حتى يتم التحديث234 | الفصل 
السابع: المعاملات

      صفحة 257
مطبق. تُعرف هذه التقنية أحيانًا باسم استقرار المؤشر [35 ، 36]. اخرالخيار هو 
ببساطة إجبار جميع العمليات الذرية ليتم تنفيذها على مؤشر ترابط واحد.لسوء الحظ ، 
فإن أطر رسم الخرائط العلائقية للكائنات تجعل من السهل القيام بذلك عن طريق 
الخطأكتابة التعليمات البرمجية التي تؤدي دورات القراءة والتعديل والكتابة غير 
الآمنة بدلاً من استخدام atomicالعمليات التي توفرها قاعدة البيانات [37 ]. هذه 
ليست مشكلة إذا كنت تعرف ما أنتتقوم به ، ولكن من المحتمل أن يكون مصدرًا للأخطاء 
الدقيقة التي يصعب العثور عليها عن طريق الاختبار‐عمل.قفل صريحخيار آخر لمنع فقد 
التحديثات ، إذا كانت العملية الذرية المضمنة في قاعدة البياناتلا توفر الوظائف 
الضرورية ، بل يتم قفل التطبيق بشكل صريحالكائنات التي سيتم تحديثها. ثم يمكن 
للتطبيق إجراء قراءة-دورة التعديل والكتابة ، وإذا حاولت أي معاملة أخرى قراءتها في 
نفس الوقتالكائن ، يتم إجباره على الانتظار حتى تكتمل دورة القراءة-التعديل-الكتابة 
الأولى.على سبيل المثال ، ضع في اعتبارك لعبة متعددة اللاعبين حيث يمكن للعديد من 
اللاعبين تحريك ملفنفس الرقم في نفس الوقت. في هذه الحالة ، قد لا تكون العملية 
الذرية كافية ،لأن التطبيق يحتاج أيضًا إلى التأكد من أن حركة اللاعب تلتزم 
بالقواعداللعبة ، والتي تتضمن بعض المنطق الذي لا يمكنك تنفيذه بشكل معقول 
كبياناتالاستعلام الأساسي. بدلاً من ذلك ، يمكنك استخدام قفل لمنع لاعبين من اللعب 
في نفس الوقتتحريك نفس القطعة:مثال 7-1. قفل الصفوف بشكل صريح لمنع فقد 
التحديثات.بدء المعاملة ؛حدد * من الأرقامأين الاسم = 'الروبوت' AND game_id = 
222للتحديث ؛- تحقق مما إذا كانت النقلة صحيحة ، ثم قم بتحديث الوضع- من القطعة 
التي تم إرجاعها بواسطة التحديد السابق.تحديث الأرقام SET position = 'c4' حيث 
المعرف = 1234 ؛الالتزام ؛تشير عبارة FOR UPDATE إلى أن قاعدة البيانات يجب أن تأخذ 
قفلًا على كافة الصفوفتم إرجاعها بواسطة هذا الاستعلام.يعمل هذا ، ولكن للحصول على 
ذلك بشكل صحيح ، عليك التفكير بعناية في طلبكمنطق. من السهل أن تنسى إضافة قفل 
ضروري في مكان ما في الكود ، وبالتاليإدخال حالة السباق.مستويات عزل ضعيفة | 235

      صفحة 258
الكشف التلقائي عن التحديثات المفقودةالعمليات الذرية والأقفال هي طرق لمنع فقد 
التحديثات عن طريق إجبار القراءة على-دورات التعديل والكتابة لتحدث بالتتابع. 
البديل هو السماح لهم بالتنفيذبالتوازي ، وإذا اكتشف مدير المعاملات حدوث تحديث 
مفقود ، فإنتم إحباط المعاملة ويجب إعادة محاولة دورة القراءة والتعديل 
والكتابة.ميزة هذا النهج هي أن قواعد البيانات يمكنها إجراء هذا الفحص بكفاءة 
فيبالتزامن مع عزل اللقطة. في الواقع ، يمكن تكرار قراءة PostgreSQL ، أوراكلقابل 
للتسلسل ومستويات عزل لقطة SQL Server تلقائيًا عندما يكتشف ملفحدث التحديث المفقود 
، وإلغاء المعاملات المخالفة. ومع ذلك ، MySQL /قراءة InnoDB القابلة للتكرار لا 
تكتشف التحديثات المفقودة [ 22]. بعض المؤلفين [ 27 ، 29]يجادل بأن قاعدة البيانات 
يجب أن تمنع التحديثات المفقودة من أجل التأهل على أنها توفر snap‐عزل اللقطة ، 
لذلك لا توفر MySQL عزل اللقطة بموجب هذا التعريف.يعد الكشف عن التحديث المفقود 
ميزة رائعة ، لأنه لا يتطلب رمز التطبيقاستخدم أي ميزات قاعدة بيانات خاصة - قد 
تنسى استخدام قفل أو أوبرا ذرية‐نشوئها وبالتالي إدخال خطأ ، ولكن الكشف عن التحديث 
المفقود يحدث تلقائيًا وهووبالتالي أقل عرضة للخطأ.قارن وضبطفي قواعد البيانات التي 
لا تقدم معاملات ، تجد أحيانًا مقارنة ذرية-وضبط العملية (المذكورة سابقًا في "يكتب 
كائن واحد" في الصفحة 221). الالغرض من هذه العملية هو تجنب فقد التحديثات من خلال 
السماح بالتحديث لـ hap‐ فقطقلم إذا لم تتغير القيمة منذ آخر مرة قرأتها. إذا كانت 
القيمة الحالية لاتطابق ما قرأته سابقًا ، ليس للتحديث أي تأثير ، والقراءة 
والتعديل والكتابةيجب إعادة محاولة الدورة.على سبيل المثال ، لمنع اثنين من 
المستخدمين من تحديث نفس صفحة wiki بشكل متزامن ، يمكنكقد تحاول شيئًا كهذا ، مع 
توقع حدوث التحديث فقط إذا كان محتوى ملفلم تتغير الصفحة منذ أن بدأ المستخدم في 
تحريرها:- قد يكون هذا آمنًا وقد لا يكون ، اعتمادًا على تنفيذ قاعدة 
البياناتUPDATE wiki_pages SET content = "محتوى جديد"حيث المعرف = 1234 AND 
content = "المحتوى القديم" ؛إذا تم تغيير المحتوى ولم يعد يطابق "المحتوى القديم" 
، فسيتم تغيير هذا التحديثليس لها أي تأثير ، لذلك تحتاج إلى التحقق مما إذا كان 
التحديث ساري المفعول وإعادة المحاولة إذا لزم الأمرساري. ومع ذلك ، إذا كانت قاعدة 
البيانات تسمح بعبارة WHERE للقراءة من لقطة قديمة ،قد لا يمنع هذا البيان فقدان 
التحديثات ، لأن الحالة قد تكون صحيحة حتىعلى الرغم من حدوث كتابة متزامنة أخرى. 
تحقق مما إذا كانت قاعدة البيانات الخاصة بكعملية المقارنة والتعيين آمنة قبل 
الاعتماد عليها.236 | الفصل السابع: المعاملات

      صفحة 259
حل الصراع والنسخ المتماثلفي قواعد البيانات المنسوخة (انظر الفصل 5 ) ، يؤدي منع 
فقدان التحديثات إلى شيء آخرالبعد: نظرًا لأن لديهم نسخة من البيانات على عقد 
متعددة ، ويمكن للبياناتمن المحتمل أن يتم تعديلها بشكل متزامن على عقد مختلفة ، 
تحتاج بعض الخطوات الإضافيةيجب اتخاذها لمنع فقدان التحديثات.تفترض عمليات التأمين 
والمقارنة والتعيين أن هناك نسخة واحدة محدثةمن البيانات. ومع ذلك ، عادة ما تكون 
قواعد البيانات ذات النسخ المتماثل متعدد القادة أو بدون قائدالسماح بإجراء العديد 
من عمليات الكتابة بشكل متزامن وتكرارها بشكل غير متزامن ، لذلكلا يمكنهم ضمان وجود 
نسخة واحدة محدثة من البيانات. وهكذا ، تكنيتشلا تنطبق الأسئلة المستندة إلى 
الأقفال أو المقارنة والمجموعة في هذا السياق. (سنعودهذه المسألة بمزيد من التفصيل 
في “Linearizability” في الصفحة 314. )بدلاً من ذلك ، كما تمت مناقشته في "الكشف عن 
عمليات الكتابة المتزامنة" في الصفحة 178، مشتركالنهج في قواعد البيانات المنسوخة 
مثل السماح للكتابات المتزامنة لإنشاء العديدإصدارات متضاربة من القيمة (المعروفة 
أيضًا باسم الأشقاء ) ، ولاستخدام رمز التطبيق أوهياكل بيانات خاصة لحل هذه 
الإصدارات ودمجها بعد وقوعها.يمكن أن تعمل العمليات الذرية بشكل جيد في سياق متكرر 
، خاصة إذا كانت متكررة.متحولة (أي يمكنك تطبيقها بترتيب مختلف على نسخ متماثلة 
مختلفة ، ولا يزالالحصول على نفس النتيجة). على سبيل المثال ، زيادة عداد أو إضافة 
عنصر إلى ملفالمجموعة هي عمليات تبادلية. هذه هي الفكرة وراء أنواع بيانات Riak 2.0 
، والتيمنع التحديثات المفقودة عبر النسخ المتماثلة. عندما يتم تحديث القيمة بشكل 
متزامن باختلافent ، يقوم Riak تلقائيًا بدمج التحديثات معًا بطريقة لاتم فقد 
التحديثات [38 ].من ناحية أخرى ، فإن طريقة حل النزاع الأخيرة (LWW) تكون عرضة 
لذلكالتحديثات المفقودة ، كما تمت مناقشته في "آخر فوز للكتابة (تجاهل عمليات 
الكتابة المتزامنة)" على الصفحة179. لسوء الحظ ، LWW هو الإعداد الافتراضي في 
العديد من قواعد البيانات المنسوخة.منع الانحراف والكتابة الخياليةفي المقاطع 
السابقة رأينا يكتب القذرة و التحديثات المفقودة ، ونوعين من condi- سباقالتي يمكن 
أن تحدث عندما تحاول المعاملات المختلفة في نفس الوقت الكتابة إلى نفس الشيءشاء. من 
أجل تجنب تلف البيانات ، يجب منع ظروف السباق هذه- إما تلقائيًا عن طريق قاعدة 
البيانات ، أو عن طريق الضمانات اليدوية مثل استخدام الأقفالأو عمليات الكتابة 
الذرية.ومع ذلك ، فهذه ليست نهاية قائمة شروط السباق المحتملة التي يمكن أن تحدثبين 
عمليات الكتابة المتزامنة. في هذا القسم ، سنرى بعض الأمثلة الأكثر دقة 
عنالصراعات.للبدء ، تخيل هذا المثال: أنت تكتب تطبيقًا ليديره الأطباءنوبات عملهم 
عند الطلب في المستشفى. يحاول المستشفى عادة أن يكون لديه العديد من الأطباءاتصل في 
أي وقت ، ولكن يجب أن يكون هناك طبيب واحد على الأقل تحت الطلب. الأطباءمستويات عزل 
ضعيفة | 237

      الصفحة 260
يمكن أن يتخلوا عن مناوبتهم (على سبيل المثال إذا كانوا مرضى) بشرط أن يكون هناك 
كولون واحد على الأقلالدوري لا يزال تحت الطلب في هذا التحول [39 ، 40].تخيل الآن 
أن أليس وبوب هما الطبيبان قيد الطلب في نوبة معينة.كلاهما يشعران بتوعك ، لذلك قرر 
كلاهما طلب الإجازة. لسوء الحظ ، هميحدث النقر فوق الزر لإيقاف المكالمة في نفس 
الوقت تقريبًا. ما الذي يحدث-الأقلام التالية موضحة في الشكل 7-8 .في كل معاملة ، 
يتحقق طلبك أولاً من وجود طبيبين أو أكثر.بهدوء عند الطلب ؛ إذا كانت الإجابة بنعم 
، فنحن نعتقد أنه من الآمن لطبيب واحد أن يتوقف عن الاتصال. منذ قاعدة 
البياناتيستخدم عزل اللقطة ، ويعود كلا الشيكين إلى 2 ، لذلك تنتقل كلتا الحركتين 
إلىالمرحلة المقبلة. تقوم Alice بتحديث سجلها الخاص لتخرج نفسها من المكالمة ، 
ويقوم بوب بتحديث رقمهالسجل الخاص بالمثل. كلتا المعاملتين تلتزمان ، والآن لا يوجد 
طبيب تحت الطلب. لكتم انتهاك شرط وجود طبيب واحد على الأقل تحت الطلب.اسمفي 
مكالمةأليسحقيقيةبوبحقيقيةكارولخاطئةأليسخاطئةبوبخاطئةالآن now_on_call = 2الآن 
now_on_call = 2اسمفي مكالمةأليسخاطئةبوبخاطئةكارولخاطئةابدأ الصفقةcurrent_on_call 
= (حدد العد (*) من الأطباءحيث on_call = صحيحو shift_id = 1234)إذا 
(current_on_call> = 2) {تحديث الأطباءتعيين on_call = خطأحيث الاسم = "أليس"و 
shift_id = 1234}إتمام الصفقةابدأ الصفقةcurrent_on_call = (حدد العد (*) من 
الأطباءحيث on_call = صحيحو shift_id = 1234)إذا (current_on_call> = 2) {تحديث 
الأطباءتعيين on_call = خطأحيث الاسم = "بوب"و shift_id = 1234}إتمام 
الصفقةأليس:بوب:الشكل 7-8. مثال على الكتابة المنحرفة التي تسبب خطأ في 
التطبيق.تميز الكتابة المنحرفةهذا الشذوذ يسمى الكتابة الانحراف [27 ]. إنها ليست 
كتابة قذرة ولا تحديث ضائع ،لأن المعاملتين تعملان على تحديث كائنين مختلفين (Alice 
and Bob's on-سجل المكالمات ، على التوالي). من غير الواضح أن هناك صراعًا قد حدث ، 
لكنه أمر صعببلطف شرط سباق: إذا تم تشغيل المعاملتين واحدة تلو الأخرى ، الثانية238 
| الفصل السابع: المعاملات

      الصفحة 261
كان من الممكن منع الطبيب من الخروج عن المكالمة. كان السلوك الشاذممكن فقط لأن 
المعاملات تجري بشكل متزامن.يمكنك التفكير في كتابة الانحراف كتعميم للتحديث 
المفقود. يمكن أن يحدث الانحراف في الكتابةإذا قرأت معاملتان نفس العناصر ، ثم حدث 
بعض هذه العناصر (قد تقوم المعاملات الفيرنت بتحديث كائنات مختلفة). في حالة خاصة 
حيث تختلفالمعاملات تحديث نفس الكائن ، تحصل على كتابة قذرة أو فقدان التحديث 
الشاذ(حسب التوقيت).لقد رأينا أن هناك طرقًا مختلفة مختلفة لمنع فقد التحديثات. مع 
الكتابةانحراف ، خياراتنا محدودة أكثر:• العمليات الذرية أحادية الجسم لا تساعد ، 
لأن كائنات متعددة مفيدةالمعنيين.• الكشف التلقائي عن التحديثات المفقودة التي 
تجدها في بعض التطبيقاتمن عزل اللقطة للأسف لا يساعد أيضًا: الكتابة المنحرفة ليست 
تلقائية‐الكشف عن matically في كيو في قراءة للتكرار ، ماي / ك InnoDB ل 
تكرارهاقراءة ، أوراكل للتسلسل أو SQL Server ل قطة مستوى العزل [ 22]. آلي‐يتطلب 
منع انحراف الكتابة cally عزلًا حقيقيًا قابل للتسلسل (راجع "Serializabil‐ity "في 
الصفحة 242).• تسمح لك بعض قواعد البيانات بتكوين القيود ، والتي يتم فرضها بعد ذلك 
بواسطةقاعدة البيانات (على سبيل المثال ، التفرد أو قيود المفتاح الخارجي أو القيود 
المفروضة على أحد العناصر)قيمة كبيرة). ومع ذلك ، من أجل تحديد وجوب وجود طبيب واحد 
على الأقل تحت الطلب ،ستحتاج إلى قيد يتضمن كائنات متعددة. معظم قواعد البيانات 
تفعل ذلكلم يكن لديك دعم مدمج لمثل هذه القيود. قد تكون قادرًا على التنفيذلهم 
محفزات أو وجهات نظر محسوسة ، لكن النتيجة يمكن أن تنتهي إلى حد كبير[41].• إذا لم 
تتمكن من استخدام مستوى عزل قابل للتسلسل ، فإن الخيار الثاني الأفضل في هذه الحالة 
هومن المحتمل أن يتم قفل الصفوف التي تعتمد عليها المعاملة بشكل صريح. في 
الوثيقةعلى سبيل المثال ، يمكنك كتابة شيء مثل ما يلي:بدء المعاملة ؛حدد * من 
الأطباءأين on_call = صحيحو shift_id = 1234 FOR UPDATE .تحديث الأطباءSET on_call 
= كاذبةأين الاسم = "أليس"AND shift_id = 1234 ؛الالتزام ؛مستويات عزل ضعيفة | 239

      صفحة 262
التاسع. في PostgreSQL ، يمكنك القيام بذلك بشكل أكثر أناقة باستخدام أنواع 
النطاقات ، لكنها غير مدعومة على نطاق واسع فيقواعد البيانات الأخرى.كما كان من قبل 
، يخبر FOR UPDATE قاعدة البيانات بتأمين جميع الصفوف التي تم إرجاعها بواسطة 
هذااستفسار.المزيد من الأمثلة على الكتابة المنحرفةقد يبدو الانحراف في الكتابة 
كمشكلة مقصورة على فئة معينة في البداية ، ولكن بمجرد أن تدرك ذلك ، فأنتقد تلاحظ 
المزيد من المواقف التي يمكن أن تحدث فيها. وفيما يلي بعض الأمثلة أكثر:نظام حجز 
غرف الاجتماعاتلنفترض أنك تريد فرض أنه لا يمكن أن يكون هناك حجزان للاجتماع 
نفسهغرفة في نفس الوقت [ 42 ]. عندما يريد شخص ما إجراء حجز ، فأنت أولاًتحقق من 
وجود أي حجوزات متضاربة (مثل الحجوزات لنفس الغرفة بامتدادنطاق زمني متداخل) ، وإذا 
لم يتم العثور على أي منها ، يمكنك إنشاء الاجتماع: ixالمثال 7-2. يحاول نظام حجز 
غرفة الاجتماعات تجنب الحجز المزدوج (لاآمن تحت عزل اللقطة).بدء المعاملة ؛- تحقق 
من أي حجوزات حالية تتداخل مع فترة الظهيرة الواحدة ظهرًاحدد العدد ( * ) من 
الحجوزاتحيث room_id = 123 ANDend_time > '2015-04-01 12:00' AND start_time < 
'2015-04-01 13:00' ؛- ... إذا أرجع الاستعلام السابق صفرًا:أدخل في الحجوزات( 
room_id ، start_time ، end_time ، user_id )VALUES ( 123 ، '2015-04-01 12:00' ، 
'2015-04-01 13:00' ، 666 ) ؛الالتزام ؛لسوء الحظ ، لا يمنع عزل اللقطة مستخدمًا 
آخر في نفس الوقتإدراج اجتماع متضارب. من أجل ضمان أنك لن تحصل على جدولةالصراعات ، 
تحتاج مرة أخرى إلى عزل تسلسلي.لعبة متعددة اللاعبينفي المثال 7-1 ، استخدمنا قفلًا 
لمنع فقد التحديثات (أي التأكد من ذلكلا يمكن للاعبين تحريك نفس الرقم في نفس 
الوقت). ومع ذلك ، فإن القفللا يمنع نقل شخصين مختلفين إلى نفس الموضع فيمجلس 
الإدارة ، أو ربما القيام بخطوة أخرى تنتهك قواعد240 | الفصل السابع: المعاملات

      صفحة 263
لعبه. اعتمادًا على نوع القاعدة التي تطبقها ، قد تتمكن من استخدامهاقيدًا فريدًا ، 
ولكن بخلاف ذلك تكون عرضة لكتابة الانحراف.ادعاء اسم مستخدمعلى موقع ويب حيث يكون 
لكل مستخدم اسم مستخدم فريد ، قد يحاول مستخدمان إنشاء اسم مستخدم فريدحسابات بنفس 
اسم المستخدم في نفس الوقت. يمكنك استخدام معاملة لتحقق مما إذا كان الاسم مأخوذًا 
، وإذا لم يكن كذلك ، فقم بإنشاء حساب بهذا الاسم.ومع ذلك ، كما في الأمثلة السابقة 
، هذا ليس آمنًا في ظل عزل اللقطة.لحسن الحظ ، القيد الفريد هو حل بسيط هنا 
(المعاملة الثانيةالذي يحاول تسجيل اسم مستخدم سيتم إحباطه بسبب انتهاك القيد).منع 
الازدواجية في الإنفاقالخدمة التي تسمح للمستخدمين بإنفاق الأموال أو النقاط تحتاج 
إلى التحقق من ذلك المستخدملا تنفق أكثر مما أنفقوا. يمكنك تنفيذ هذا عن طريق إدخال 
عشرةعنصر الإنفاق المبدئي في حساب المستخدم ، مع سرد كافة العناصر الموجودة في 
الحساب ، والتحقق من أن المجموع موجب [43 ]. مع انحراف الكتابة ، يمكن أن يحدث 
ذلكيتم إدخال عناصر الإنفاق بشكل متزامن ، مما يؤدي معًا إلى اختزال الرصيدسلبي ، 
ولكن لا تلاحظ أي معاملة أخرى.الأشباح تسبب انحراف الكتابةكل هذه الأمثلة تتبع 
نمطًا مشابهًا (على الرغم من أن الخطوات قد تحدث بطريقة مختلفة.أمر صعب):1. استعلام 
SELECT الذي يتحقق من استيفاء بعض المتطلبات من خلال البحثللصفوف التي تطابق بعض 
شروط البحث (هناك طبيبان على الأقل تحت الطلب ،لا توجد حجوزات حالية لتلك الغرفة في 
ذلك الوقت ، الموقف علىاللوحة لا تحتوي بالفعل على رقم آخر ، اسم المستخدم الذي 
تريده ليس كذلكمأخوذ بالفعل ، لا يزال هناك أموال في الحساب).2. اعتمادًا على نتيجة 
الاستعلام الأول ، يقرر رمز التطبيق كيفية القيام بذلكتواصل (ربما للمضي قدما في 
العملية ، أو ربما الإبلاغ عن خطأللمستخدم والإجهاض).3. إذا قرر تطبيق على المضي 
قدما، فإنه يجعل الكتابة ( INSERT ، UPDATE أوDELETE ) إلى قاعدة البيانات وتنفيذ 
المعاملة.4. إذا كنت ستكرر استعلام التحديد من الخطوة 1 الآن ، فستحصل الآن على 
ملفنتيجة مختلفة ، لأن الكتابة في الخطوة 3 غيرت مجموعة الصفوف المطابقة لـحالة 
البحث (يوجد الآن أقل من طبيب تحت الطلب ، غرفة الاجتماعات الآنتم حجزه في ذلك 
الوقت ، يتم اتخاذ الموقف على السبورة الآن من خلال الرقم الذيتم نقل اسم المستخدم 
الآن ، وهناك الآن أموال أقل في الحساب).في حالة مثال الطبيب عند الطلب ، كان الصف 
الذي يتم تعديله في الخطوة 3 واحدًا منتم إرجاع الصفوف في الخطوة 1 ، حتى نتمكن من 
جعل المعاملة آمنة وتجنب الكتابةالانحراف عن طريق قفل الصفوف في الخطوة 1 ( حدد 
للتحديث ). ومع ذلك ، فإن الأربعة الآخرينمستويات عزل ضعيفة | 241

      صفحة 264
الأمثلة مختلفة: فهي تتحقق من عدم وجود صفوف تطابق بعض عمليات البحثdition ، وتضيف 
الكتابة صفًا يطابق نفس الشرط. إذا كان الاستعلام في الخطوة 1لا يُرجع أي صفوف ، لا 
يمكن لـ SELECT FOR UPDATE إرفاق أقفال بأي شيء.هذا التأثير ، حيث تؤدي الكتابة في 
معاملة واحدة إلى تغيير نتيجة استعلام البحث بتنسيقصفقة أخرى تسمى فانتوم [ 3 ]. 
عزل اللقطة يتجنب الأشباح فياستعلامات للقراءة فقط ، ولكن في معاملات القراءة 
والكتابة مثل الأمثلة التي ناقشناها ،يمكن أن تؤدي الأشباح إلى حالات صعبة بشكل خاص 
من انحراف الكتابة.تجسيد الصراعاتإذا كانت مشكلة الأشباح هي أنه لا يوجد كائن 
يمكننا ربط الأقفال به ،ربما يمكننا إدخال كائن قفل بشكل مصطنع في قاعدة 
البيانات؟على سبيل المثال ، في حالة حجز غرفة الاجتماعات ، يمكنك تخيل إنشاء جدول 
لـالفترات الزمنية والغرف. يتوافق كل صف في هذا الجدول مع غرفة معينة لـفترة زمنية 
معينة (على سبيل المثال ، 15 دقيقة). تقوم بإنشاء صفوف لجميع المجموعات الممكنة‐عدد 
الغرف والفترات الزمنية في وقت مبكر ، على سبيل المثال للأشهر الستة القادمة.الآن 
يمكن للمعاملة التي تريد إنشاء حجز قفل ( SELECT FOR UPDATE )الصفوف في الجدول التي 
تتوافق مع الغرفة والفترة الزمنية المطلوبة. بعد ذلكحصل على الأقفال ، يمكنه التحقق 
من الحجوزات المتداخلة وإدراج حجز جديد باسمقبل. لاحظ أن الجدول الإضافي لا يُستخدم 
لتخزين معلومات حول الكتاب‐جي - إنها مجرد مجموعة من الأقفال التي تستخدم لمنع 
الحجوزات على نفس الشيءتتراوح الغرفة والوقت من أن يتم تعديلها بشكل متزامن.يُطلق 
على هذا النهج تجسيد الصراعات ، لأنه يأخذ شبحًا ويقلبهفي تعارض تأمين على مجموعة 
محددة من الصفوف الموجودة في قاعدة البيانات [11 ]. مؤسففي الآونة الأخيرة ، قد 
يكون من الصعب والمعرض للخطأ معرفة كيفية تجسيد الخلافات ، ومن القبيح ترك آلية 
تحكم في التزامن تتسرب إلى نموذج بيانات التطبيق.ولهذه الأسباب ، فإن تجسيد 
الخلافات ينبغي اعتباره الملاذ الأخير إذا لم يكن كذلكبديل ممكن. يُفضل كثيرًا 
مستوى العزل القابل للتسلسل في معظم الحالات.تسلسللقد رأينا في هذا الفصل العديد من 
الأمثلة على المعاملات المعرضة للعرقشروط. ومنعت بعض شروط السباق قبل قراءة ارتكبت 
و قطةمستويات العزلة ، لكن البعض الآخر ليس كذلك. لقد واجهنا بعض الأمثلة الصعبة 
بشكل خاصمع كتابة الانحراف والأوهام. إنه وضع محزن:• يصعب فهم مستويات العزلة ، 
وتنفيذها بشكل غير متسق باختلافقواعد بيانات ent (على سبيل المثال ، تعني القراءة 
القابلة للتكرار أشياء مختلفة تمامًا عن الأشخاص المختلفين)ple).242 | الفصل 
السابع: المعاملات

      الصفحة 265
• إذا نظرت إلى رمز التطبيق الخاص بك ، فمن الصعب معرفة ما إذا كان التشغيل 
آمنًامستوى عزل معين - خاصة في التطبيقات الكبيرة ، حيث يمكنك ذلكلا تكون على دراية 
بكل الأشياء التي قد تحدث بشكل متزامن.• لا توجد أدوات جيدة تساعدنا في الكشف عن 
ظروف السباق. من حيث المبدأ ، ثابتقد يساعد التحليل [25] لكن تقنيات البحث لم تجد 
طريقها إلىالاستخدام العملي. يعد الاختبار الآلي لمشكلات التزامن أمرًا صعبًا ، 
لأنها كذلكعادةً ما تكون غير حتمية - تحدث المشكلات فقط إذا لم يحالفك الحظ 
معتوقيت.هذه ليست مشكلة جديدة - لقد كانت على هذا النحو منذ السبعينيات ، عندما 
كانت العزلة ضعيفةتم تقديم المستويات لأول مرة [ 2 ]. طوال الوقت ، كانت إجابة 
الباحثين بسيطة.التنوير القائل: استخدام العزلة التسلسلية !عادةً ما يُنظر إلى 
العزلة القابلة للتسلسل على أنها أقوى مستوى عزل. إنها تضمنأنه على الرغم من 
إمكانية تنفيذ المعاملات بالتوازي ، فإن النتيجة النهائية هي نفسها كما لولقد نفذوا 
واحدًا تلو الآخر ، بشكل متسلسل ، دون أي التزامن. وهكذا ، قاعدة البياناتيضمن أنه 
إذا كانت المعاملات تتصرف بشكل صحيح عند تشغيلها بشكل فردي ، فإنها تكونيجب أن يكون 
صحيحًا عند التشغيل بشكل متزامن - بمعنى آخر ، تمنع قاعدة البيانات كل شيءظروف 
السباق الممكنة.ولكن إذا كانت العزلة القابلة للتسلسل أفضل بكثير من فوضى مستويات 
العزلة الضعيفة ،فلماذا لا يستخدمه الجميع؟ لفهم هذا ، نحتاج إلى النظر في 
الخياراتلتنفيذ التسلسل وكيفية أدائها. معظم قواعد البيانات التي توفرتستخدم 
القابلية للتسلسل اليوم واحدة من ثلاث تقنيات سنستكشفها في بقيةهذا الفصل:1. تنفيذ 
المعاملات فعليًا بترتيب تسلسلي (راجع "التنفيذ التسلسلي الفعلي" فيالصفحة 243 ).2. 
قفل مرحلتين (انظر "قفل مرحلتين (2PL)" في الصفحة 248) ، والتي لعدةعقود كانت 
الخيار الوحيد القابل للتطبيق.3. تقنيات التحكم في التزامن المتفائل مثل عزل اللقطة 
القابل للتسلسل(يرى "عزل اللقطة التسلسلية (SSI)" في الصفحة 252).في الوقت الحالي ، 
سنناقش هذه التقنيات بشكل أساسي في سياق العقدة الواحدةقواعد بيانات؛ في الفصل 9 
سوف ندرس كيف يمكن تعميمها على المعاملاتالتي تتضمن عقدًا متعددة في نظام 
موزع.تنفيذ تسلسلي فعليإن أبسط طريقة لتجنب أي مشاكل في التزامن هي إزالة 
concurrency بالكامل: لتنفيذ معاملة واحدة فقط في كل مرة ، بترتيب تسلسلي ، على 
واحدةمسلك. هذا يتجنب تماما مشكلة اكتشاف ومنع التعارضاتبين المعاملات. العزل 
الناتج بالتعريف قابل للتسلسل.التسلسل | 243

      صفحة 266
على الرغم من أن هذه تبدو فكرة واضحة ، إلا أن مصممي قواعد البيانات مؤخرًا فقط- في 
حوالي عام 2007 - قررت أن حلقة الخيوط المفردة لتنفيذ المعاملات كانتممكن [ 44]. 
إذا تم اعتبار التزامن متعدد مؤشرات الترابط ضروريًا للحصول على الخيرالأداء خلال 
الثلاثين عامًا الماضية ، ما الذي تغير ليصبح مؤشر ترابط واحدالتنفيذ ممكن؟تسببت 
تغييران في إعادة التفكير هذه:• أصبحت ذاكرة الوصول العشوائي (RAM) رخيصة بما يكفي 
لدرجة أنه أصبح من الممكن القيام بها في العديد من حالات الاستخداماحتفظ بمجموعة 
البيانات النشطة بالكامل في الذاكرة (راجع "الاحتفاظ بكل شيء في الذاكرة"في الصفحة 
85 ). عندما تكون جميع البيانات التي تحتاج إلى الوصول إليها في الذاكرة ، قم 
بالترجمةيمكن تنفيذ الإجراءات بشكل أسرع مما لو كان يتعين عليهم انتظار تحميل 
البياناتمن القرص.• أدرك مصممو قواعد البيانات أن معاملات OLTP عادة ما تكون قصيرة 
وفقطقم بإجراء عدد قليل من عمليات القراءة والكتابة (راجع "معالجة المعاملات أو 
Ana‐lytics؟ " في الصفحة 87 ). على النقيض من ذلك ، عادةً ما تكون استعلامات 
التحليلات طويلة المدىللقراءة فقط ، بحيث يمكن تشغيلها على لقطة متسقة (باستخدام 
عزل اللقطة)خارج حلقة التنفيذ التسلسلي.يتم تنفيذ نهج تنفيذ المعاملات بشكل متسلسل 
في VoltDB / H-Store ،ريديس وداتوميك [45 ، 46 ، 47 ]. يمكن لنظام مصمم للتنفيذ 
أحادي الخيوطأحيانًا يكون أداء أفضل من نظام يدعم التزامن ، لأنه يمكن ذلكتجنب 
تحميل تنسيق القفل. ومع ذلك ، فإن إنتاجيته يقتصر علىأن نواة وحدة معالجة مركزية 
واحدة. من أجل تحقيق أقصى استفادة من هذا الخيط الفردي ،يجب أن يتم تنظيمها بشكل 
مختلف عن شكلها التقليدي.تغليف المعاملات في الإجراءات المخزنةفي الأيام الأولى 
لقواعد البيانات ، كان القصد هو إمكانية إجراء معاملة قاعدة البياناتيشمل تدفقًا 
كاملاً لنشاط المستخدم. على سبيل المثال ، حجز تذكرة طيران هو أعملية متعددة 
المراحل (البحث عن المسارات والأسعار والمقاعد المتاحة ؛ يقرر العميلعلى خط سير 
الرحلة حجز المقاعد في كل من رحلات خط سير الرحلة ؛ الراكب الداخلتفاصيل؛ جعل 
الدفع). يعتقد مصممو قواعد البيانات أنه سيكون أنيقًا إذا كان ذلكالعملية برمتها 
كانت معاملة واحدة ، بحيث يمكن تنفيذها بشكل ذري.لسوء الحظ ، فإن البشر بطيئون جدًا 
في اتخاذ قراراتهم والاستجابة. إذا كانت البياناتتحتاج المعاملة الأساسية إلى 
انتظار إدخال من المستخدم ، وتحتاج قاعدة البيانات إلى دعم أيحتمل أن يكون عددًا 
كبيرًا من المعاملات المتزامنة ، ومعظمها خامل. معظم البيانات‐لا يمكن للقواعد 
القيام بذلك بكفاءة ، ولذا فإن جميع تطبيقات OLTP تقريبًا تحافظ على 
transac‐باختصار من خلال تجنب الانتظار التفاعلي للمستخدم داخل المعاملة. على 
الالويب ، هذا يعني أن المعاملة يتم تنفيذها ضمن نفس طلب HTTP - أالمعاملة لا تغطي 
طلبات متعددة. طلب HTTP جديد يبدأ عملية تحويل جديدة‐عمل.244 | الفصل السابع: 
المعاملات

      صفحة 267
على الرغم من إخراج الإنسان من المسار الحرج ، إلا أن المعاملات قد فعلتاستمر في 
التنفيذ بأسلوب خادم عميل تفاعلي ، بيان واحد في كل مرة.يقوم التطبيق بعمل استعلام 
، ويقرأ النتيجة ، وربما يقوم بعمل استعلام آخربناءً على نتيجة الاستعلام الأول ، 
وما إلى ذلك. يتم إرسال الاستفسارات والنتائجذهابًا وإيابًا بين كود التطبيق الخاص 
بك (يعمل على جهاز واحد) وخادم قاعدة البيانات (على جهاز آخر).في هذا النمط 
التفاعلي للمعاملات ، يتم قضاء الكثير من الوقت في التواصل عبر الشبكة‐بين التطبيق 
وقاعدة البيانات. إذا كنت تريد عدم السماح بالتزامن فيقاعدة البيانات ، ومعالجة 
معاملة واحدة فقط في كل مرة ، ستكون الإنتاجيةمروع ، لأن قاعدة البيانات ستقضي معظم 
وقتها في انتظار التطبيقلإصدار الاستعلام التالي للمعاملة الحالية. في هذا النوع من 
قواعد البيانات ، يكونضروري لمعالجة العديد من المعاملات في وقت واحد من أجل الحصول 
على معقولأداء.لهذا السبب ، فإن الأنظمة ذات المعالجة التسلسلية أحادية السلسلة لا 
تفعل ذلكالسماح بمعاملات تفاعلية متعددة كشوف الحساب. بدلا من ذلك ، يجب تقديم 
الطلبرمز المعاملة بالكامل إلى قاعدة البيانات مسبقًا ، كإجراء مخزن . الالاختلافات 
بين هذه الأساليب موضحة في الشكل 7-9.الإجراء المخزن بشرط أن تكون جميع البيانات 
المطلوبة من خلال المعاملة في الذاكرةيمكن أن ينفذ بسرعة كبيرة ، دون انتظار أي 
شبكة أو قرص I / O.حدد العدد (*)من الأطباءحيث on_call = صحيحو shift_id = 
1234تحديث الأطباءتعيين on_call = خطأحيث الاسم = "بوب"و shift_id = 1234إذا (في 
الوقت الحالي_on_call ≥ 2) {...}طلبمعاملة تفاعلية:معالج 
الاستعلامتخزينالوقت2حسناتنفيذ الإجراء المخزنtake_doctor_off_call_if_safeبالاسم = 
'بوب' ، shift_id = 1234طلبالإجراء المخزن:معالج 
الاستعلامتخزينالوقت2حسناحسناانتحارر ...لو (…)…تحديث...networkقفزnetworkقفزالشكل 
7-9. الفرق بين معاملة تفاعلية وإجراء مخزن(باستخدام مثال المعاملة في الشكل 7-8 
).التسلسل | 245

      صفحة 268
إيجابيات وسلبيات الإجراءات المخزنةكانت الإجراءات المخزنة موجودة لبعض الوقت في 
قواعد البيانات العلائقية ، وهي موجودة بالفعلجزء من معيار SQL (SQL / PSM) منذ عام 
1999. وقد اكتسبوا إلى حد ماسمعة سيئة لأسباب مختلفة:• لكل مورد قاعدة بيانات لغته 
الخاصة للإجراءات المخزنة (Oracle hasPL / SQL ، SQL Server به T-SQL ، PostgreSQL 
به PL / pgSQL ، إلخ.). هذه lanلم تواكب الأدلة التطورات في البرمجة للأغراض العامة 
lan‐إنها تبدو قبيحة وعفا عليها الزمن من وجهة نظر اليوم ، وهي كذلكتفتقر إلى نظام 
المكتبات الذي تجده مع معظم لغات البرمجة.• من الصعب إدارة التعليمات البرمجية التي 
تعمل في قاعدة بيانات: مقارنة بالتطبيقالخادم ، من الصعب تصحيح الأخطاء ، وأكثر 
صعوبة الحفاظ على التحكم في الإصدار ونشره ،أصعب للاختبار ، ويصعب دمجه مع نظام جمع 
المقاييسيراقب.• غالبًا ما تكون قاعدة البيانات أكثر حساسية للأداء من خادم التطبيق 
،لأنه غالبًا ما تتم مشاركة طبعة قاعدة بيانات واحدة بواسطة العديد من خوادم 
التطبيقات. أإجراء مخزن مكتوب بشكل سيئ (على سبيل المثال استخدام الكثير من الذاكرة 
أو وقت وحدة المعالجة المركزية) في ملفيمكن أن تتسبب قاعدة البيانات في حدوث مشكلات 
أكثر بكثير من التعليمات البرمجية المكتوبة بشكل سيئ في ملفخادم التطبيق.ومع ذلك ، 
يمكن التغلب على هذه القضايا. التطبيقات الحديثة للعمليات المخزنةتخلت الأزمان عن 
PL / SQL ، واستخدمت لغات البرمجة العامة الحاليةأدلة بدلاً من ذلك: يستخدم VoltDB 
Java أو Groovy ، ويستخدم Datomic جافا أو Clojure و Redisيستخدم لوا.من خلال 
الإجراءات المخزنة والبيانات الموجودة في الذاكرة ، يتم تنفيذ جميع المعاملات على 
ملفيصبح الموضوع ممكنا. نظرًا لأنهم لا يحتاجون إلى انتظار الإدخال / الإخراج ، 
وتجنب النفقات العامةمن آليات التحكم في التزامن الأخرى ، يمكنهم تحقيق إنتاجية 
جيدة جدًاعلى موضوع واحد.يستخدم VoltDB أيضًا الإجراءات المخزنة للنسخ المتماثل: 
بدلاً من نسخ المعاملاتيكتب من عقدة إلى أخرى ، وينفذ نفس الإجراء المخزن في كل 
مندوبليكا. لذلك يتطلب VoltDB أن تكون الإجراءات المخزنة حتمية (عند التشغيل 
علىالعقد المختلفة ، يجب أن تنتج نفس النتيجة). إذا كانت هناك معاملة تحتاج إلى 
استخدامالتاريخ والوقت الحاليين ، على سبيل المثال ، يجب أن يتم ذلك من خلال واجهات 
برمجة التطبيقات الحتمية الخاصة.التقسيميؤدي تنفيذ جميع المعاملات بشكل متسلسل إلى 
جعل التحكم في التزامن أبسط بكثير ، ولكنه محدودإنه معدل نقل البيانات لقاعدة 
البيانات إلى سرعة نواة وحدة معالجة مركزية واحدة على أآلة واحدة. يمكن تنفيذ 
معاملات القراءة فقط في مكان آخر ، باستخدام لقطة isola‐نشوئها ، ولكن بالنسبة 
للتطبيقات ذات الإنتاجية العالية للكتابة ، تكون المعاملة ذات الخيوط 
الواحدةالمعالج يمكن أن يصبح عنق زجاجة خطير.246 | الفصل السابع: المعاملات

      الصفحة 269
x. إذا احتاجت معاملة ما إلى الوصول إلى بيانات ليست في الذاكرة ، فقد يكون الحل 
الأفضل هو إجهاض التحويل.لجلب البيانات بشكل غير متزامن إلى الذاكرة مع الاستمرار 
في معالجة المعاملات الأخرى ، ثمإعادة المعاملة عندما يتم تحميل البيانات. يُعرف 
هذا باسم مكافحة التخزين المؤقت ، كما ذكرنا سابقًافي "حفظ كل شيء في الذاكرة" في 
الصفحة 85. إنه يعمل فقط إذا كان إجمالي كمية البيانات التي يحتاجها الاستعلاميمكن 
الاحتفاظ بالوصول في الذاكرة.من أجل التوسع في أنوية وحدة المعالجة المركزية 
المتعددة ، وعقد متعددة ، يمكنك تحسيناختبر بياناتك (انظر الفصل 6) ، وهو مدعوم في 
VoltDB. إذا كنت تستطيع أن تجد طريقةلتقسيم مجموعة البيانات الخاصة بك بحيث تحتاج 
كل معاملة فقط إلى قراءة البيانات وكتابتهاداخل قسم واحد ، يمكن أن يكون لكل قسم 
معالجة معاملات خاصة بهالخيط ، يعمل بشكل مستقل عن الآخرين. في هذه الحالة ، يمكنك 
إعطاء كل وحدة المعالجة المركزيةجوهر القسم الخاص به ، والذي يسمح بتوسيع نطاق 
إنتاجية معاملتك خطيًامع عدد نوى وحدة المعالجة المركزية [46 ].ومع ذلك ، بالنسبة 
للمعاملات التي تحتاج إلى الوصول إلى أقسام متعددة ، فإن قاعدة البياناتيجب تنسيق 
المعاملة عبر جميع الأقسام التي تم لمسها بواسطةعملية تجارية. يجب تنفيذ الإجراء 
المخزن في خطوة قفل عبر جميع الأطراف.لضمان قابلية التسلسل عبر النظام بأكمله.نظرًا 
لأن معاملات التقسيم المتقاطعة لها نفقات تنسيق إضافية ، فهي كذلكأبطأ بكثير من 
المعاملات أحادية القسم: يبلغ VoltDB عن إنتاجية تبلغحوالي 1000 يكتب عبر التقسيم 
في الثانية. هذه هي أوامر من حيث الحجم أقل منمعدل نقل المعاملات أحادي القسم ، ولا 
يمكن زيادته بإضافة المزيدآلات [48 ].يعتمد ما إذا كانت المعاملات يمكن أن تكون 
قسمًا منفردًا إلى حد كبير على بنيةالبيانات التي يستخدمها التطبيق. غالبًا ما يمكن 
تقسيم بيانات قيمة المفتاح البسيطة بشكل كبيربسهولة ، ولكن من المحتمل أن تتطلب 
البيانات ذات الفهارس الثانوية المتعددة الكثير منتنسيق التقسيم (انظر "الفهارس 
التقسيمية والثانوية" في الصفحة 197 ).ملخص تنفيذ المسلسلأصبح التنفيذ التسلسلي 
للمعاملات طريقة قابلة للتطبيق لتحقيق iso‐ القابل للتسلسلضمن قيود معينة:• يجب أن 
تكون كل معاملة صغيرة وسريعة ، لأنها تستغرق عملية تحويل بطيئة واحدة فقط.لإيقاف 
جميع عمليات المعالجة.• يقتصر على استخدام الحالات حيث يمكن احتواء مجموعة البيانات 
النشطة في الذاكرة. نادرا-من المحتمل أن يتم نقل البيانات التي تم الوصول إليها إلى 
القرص ، ولكن إذا لزم الوصول إليهافي معاملة مترابطة واحدة ، سيصبح النظام بطيئًا 
جدًا. x• يجب أن تكون سرعة الكتابة إما منخفضة بما يكفي ليتم التعامل معها على وحدة 
معالجة مركزية واحدةالأساسية ، أو يجب تقسيم المعاملات دون الحاجة إلى تقسيم 
مشتركتنسيق.التسلسل | 247

      الصفحة 270
الحادي عشر. يُطلق عليه أحيانًا قفل قوي صارم ثنائي الطور (SS2PL) لتمييزه عن 
المتغيرات الأخرى لـ 2PL.• المعاملات عبر التقسيم ممكنة ، ولكن هناك حد صارم إلى 
حدالتي يمكن استخدامها.قفل مرحلتين (2PL)لمدة 30 عامًا تقريبًا ، لم يكن هناك سوى 
خوارزمية واحدة مستخدمة على نطاق واسع للتسلسل فيقواعد البيانات ، وهذا هو القفل 
على مرحلتين (2PL). الحادي عشر2PL ليس 2 قطعةلاحظ أن القفل على مرحلتين (2PL) يبدو 
مشابهًا جدًا لمرحلتينالتزام المرحلة (2PC) ، لكنها أشياء مختلفة تمامًا. نحنسوف 
يناقش 2PC في الفصل 9.رأينا سابقًا أن الأقفال تُستخدم غالبًا لمنع الكتابة المتسخة 
(انظر: "لا توجد مشكلةيكتب "في الصفحة 226 ): إذا حاولت معاملتان في نفس الوقت 
الكتابة إلى نفس الكائن ،يضمن القفل أن على الكاتب الثاني الانتظار حتى ينتهي 
الأولالمعاملة (التي تم إجهاضها أو ارتكابها) قبل أن تستمر.يتشابه القفل ثنائي 
الطور ، لكنه يجعل متطلبات القفل أقوى بكثير. سيفويُسمح للمعاملات الإلكترونية 
بقراءة نفس الكائن في نفس الوقت طالما لا أحديكتب لها. ولكن بمجرد أن يرغب أي شخص 
في كتابة (تعديل أو حذف) كائن ،الوصول الحصري مطلوب:• إذا كانت المعاملة "أ" قد 
قرأت عنصرًا ، وأرادت المعاملة "ب" الكتابة إليه، يجب على B الانتظار حتى يقوم A 
بتنفيذ أو إحباط قبل أن يتمكن من المتابعة. (هذهيضمن أن B لا يمكنه تغيير الكائن 
بشكل غير متوقع خلف ظهر A.)• إذا كانت المعاملة "أ" قد كتبت شيئًا ، وتريد المعاملة 
"ب" قراءة ذلك الشيء، يجب على B الانتظار حتى يقوم A بتنفيذ أو إحباط قبل أن يتمكن 
من المتابعة. (قراءةالإصدار القديم من الكائن ، كما في الشكل 7-1، غير مقبول بموجب 
2PL.)في 2PL ، لا يحظر الكتاب الكتاب الآخرين فحسب ، بل يجب على القارئ أيضًا حظر 
الكاتب ،والعكس صحيح. عزل اللقطة يجعل قراء المانترا لا يمنعون الكتاب أبدًا ، 
والكتاب لا يحظرون القراء أبدًا (انظر "تنفيذ عزل اللقطة" في الصفحة 230) ،الذي 
يلتقط هذا الاختلاف الرئيسي بين عزل اللقطة والقفل ثنائي الطور.من ناحية أخرى ، 
نظرًا لأن 2PL توفر إمكانية التسلسل ، فهي تحمي من كل الأعراقالشروط التي تمت 
مناقشتها أعلاه ، بما في ذلك التحديثات المفقودة وكتابة الانحراف.248 | الفصل 
السابع: المعاملات

      الصفحة 271
تنفيذ قفل مرحلتينيتم استخدام 2PL بواسطة مستوى العزل القابل للتسلسل في MySQL 
(InnoDB) و SQL Server ،و تكرار للقراءة مستوى العزل في DB2 [22 ، 35].يتم تنفيذ 
حظر القراء والكتاب عن طريق قفل كل كائنفي قاعدة البيانات. يمكن أن يكون القفل إما 
في الوضع المشترك أو في الوضع الخاص . القفليستخدم على النحو التالي:• إذا أرادت 
إحدى المعاملات قراءة عنصر ما ، فيجب أن تحصل أولاً على القفل المشتركوضع. يُسمح 
بالعديد من المعاملات لعقد القفل في الوضع المشترك في وقت واحدبجدية ، ولكن إذا 
كانت هناك معاملة أخرى لديها بالفعل قفل خاص على الكائن ،يجب أن تنتظر المعاملة.• 
إذا كانت هناك معاملة تريد الكتابة إلى عنصر ما ، فيجب أولاً الحصول على القفل 
باستثناءوضع sive. لا يجوز لأي معاملة أخرى الاحتفاظ بالقفل في نفس الوقت (لا 
فيمشترك ولا في الوضع الحصري) ، لذلك إذا كان هناك أي قفل موجود على الكائن ، 
فإنيجب أن تنتظر المعاملة.• إذا قرأت المعاملة أولاً ثم كتبت شيئًا ، فقد تقوم 
بترقية العنصر المشتركقفل لقفل خاص. تعمل الترقية مثل الحصول على نسخة حصريةقفل 
مباشرة.• بعد حصول المعاملة على القفل ، يجب أن تستمر في الإمساك بالقفل حتىنهاية 
المعاملة (الالتزام أو الغاء). هذا هو المكان الذي يظهر فيه اسم "two-المرحلة "تأتي 
من: المرحلة الأولى (أثناء تنفيذ المعاملة) هي متىيتم الحصول على الأقفال ، 
والمرحلة الثانية (في نهاية الصفقة) هيعندما يتم تحرير جميع الأقفال.نظرًا لوجود 
العديد من الأقفال قيد الاستخدام ، يمكن أن يحدث بسهولة تامة أن تكون المعاملة A 
عالقةانتظار المعاملة B لتحرير القفل الخاص بها ، والعكس صحيح. وهذا ما يسمى الجمود 
.تقوم قاعدة البيانات تلقائيًا بالكشف عن حالة الجمود بين المعاملات وإحباط 
أحدهاحتى يتمكن الآخرون من إحراز تقدم. الصفقة المجهضة يجب أن تكونتمت إعادة 
المحاولة من خلال التطبيق.أداء قفل مرحلتينالجانب السلبي الكبير للقفل على مرحلتين 
، وسبب عدم استخدامه من قبلالجميع منذ السبعينيات هو الأداء: معدل نقل المعاملات 
والاستجابةتكون أوقات الاستعلامات أسوأ بشكل ملحوظ في حالة الإغلاق على مرحلتين 
مقارنة بالأوقات الضعيفةعزل.هذا يرجع جزئيًا إلى النفقات العامة للحصول على كل تلك 
الأقفال وإطلاقها ، ولكن أكثر من ذلكالأهم من ذلك ، بسبب انخفاض التزامن. حسب 
التصميم ، إذا كانت هناك معاملتان متزامنتانحاول أن تفعل أي شيء قد يؤدي بأي شكل من 
الأشكال إلى حالة السباق ، على المرء أن ينتظرللآخر ليكمل.التسلسل | 249

      الصفحة 272
قواعد البيانات العلائقية التقليدية لا تحد من مدة المعاملة ، لأنوهي مصممة 
للتطبيقات التفاعلية التي تنتظر المدخلات البشرية. كونسيبهدوء ، عندما تضطر إحدى 
المعاملات إلى الانتظار لمعاملة أخرى ، فلا يوجد حد لمدتهاقد تضطر إلى الانتظار. 
حتى لو تأكدت من اختصار جميع معاملاتك ، فإن aقد تتشكل قائمة الانتظار إذا أرادت 
عدة معاملات الوصول إلى نفس الكائن ، لذلكقد تضطر إلى الانتظار حتى يكتمل العديد من 
الأشخاص الآخرين قبل أن يتمكن من فعل أي شيء.لهذا السبب ، يمكن أن تحتوي قواعد 
البيانات التي تعمل بنظام 2PL على فترات انتقال غير مستقرة تمامًا ، ويمكن أن تكون 
كذلكبطيء جدًا عند النسب المئوية العالية (راجع "وصف الأداء" في الصفحة 11) إذا كان 
هناكالخلاف في عبء العمل. قد يستغرق الأمر معاملة بطيئة واحدة فقط ، أو معاملة 
واحدةيقوم بالوصول إلى الكثير من البيانات ويكتسب العديد من الأقفال ، مما يتسبب في 
قيام بقية النظام بذلكتطحن إلى توقف. يمثل عدم الاستقرار هذا مشكلة عند الحاجة إلى 
عملية قوية.على الرغم من أن الجمود يمكن أن يحدث حتى مع الالتزام بالقراءة القائمة 
على القفل ، إلا أن الجمودتحدث بشكل متكرر أكثر تحت 2PL القابل للتسلسل (اعتمادًا 
على باترة الوصول‐الخرشنة من معاملتك). يمكن أن يكون هذا مشكلة إضافية في الأداء: 
عندما أتم إحباط المعاملة بسبب الجمود وإعادة المحاولة ، يجب أن تقوم بعملها في كل 
مكانتكرارا. إذا تكررت حالات الجمود ، فقد يعني ذلك إهدار جهد كبير.أقفال المسندفي 
وصف الأقفال ، قمنا بتغطية تفاصيل دقيقة ولكنها مهمة. في "Phan‐toms التي تسبب 
انحراف الكتابة "في الصفحة 241 ناقشنا مشكلة الأشباح ، أيعملية واحدة تغير نتائج 
استعلام البحث الخاص بمعاملة أخرى. بيانات‐القاعدة ذات العزل القابل للتسلسل يجب أن 
تمنع الأشباح.في مثال حجز غرفة الاجتماعات ، هذا يعني: إذا تم البحث عن معاملة 
واحدةالحجوزات الموجودة لغرفة خلال فترة زمنية معينة (انظر المثال 7-2) ،لا يُسمح 
لمعاملة أخرى بإدخال أو تحديث حجز آخر بشكل متزامنلنفس الغرفة ونطاق الوقت. (لا بأس 
في إدراج حجوزات أخرى في نفس الوقتغرف ، أو لنفس الغرفة في وقت مختلف مما لا يؤثر 
على المقترحالحجز.)كيف ننفذ هذا؟ من الناحية المفاهيمية ، نحتاج إلى قفل المسند [ 3 
]. يعمل بشكل بسيطوبالمثل إلى القفل المشترك / الحصري الموضح أعلاه ، ولكن بدلاً من 
الانتماء إلىكائن معين (على سبيل المثال صف واحد في جدول) ، ينتمي إلى جميع 
الكائنات التي تتطابق مع بعضهاشرط البحث ، مثل:حدد * من الحجوزاتحيث room_id = 123 
ANDوقت النهاية> '2015-04-01 12:00' ANDstart_time < '2015-04-01 13:00' ؛يقيد قفل 
المسند الوصول على النحو التالي:• إذا أرادت المعاملة A قراءة العناصر المطابقة 
لشرط ما ، مثل ذلكاستعلام SELECT ، يجب أن يحصل على قفل مسند الوضع المشترك على 
شروط250 | الفصل السابع: المعاملات

      الصفحة 273
الاستعلام. إذا كانت هناك معاملة أخرى B تحتوي حاليًا على قفل خاص على أي 
كائنلمطابقة هذه الشروط ، يجب أن ينتظر A حتى يحرر B قفله قبل أن يتميسمح لجعل 
الاستعلام الخاص به.• إذا أرادت المعاملة "أ" إدراج أي عنصر أو تحديثه أو حذفه ، 
فيجب التحقق أولاًما إذا كانت القيمة القديمة أو الجديدة تتطابق مع أي قفل أصلي 
موجود. إذا كان هناكتم الاحتفاظ بقفل المسند المطابق بواسطة المعاملة B ، ثم يجب أن 
ينتظر A حتى ينتهي Bارتكبت أو أجهضت قبل أن تتمكن من الاستمرار.الفكرة الأساسية هنا 
هي أن قفل المسند ينطبق حتى على الأشياء التي لم يتم تطبيقها بعدموجودة في قاعدة 
البيانات ، ولكن يمكن إضافتها في المستقبل (الأشباح). إذا كان قفل مرحلتينيتضمن 
أقفال المسند ، وتمنع قاعدة البيانات جميع أشكال انحراف الكتابة والعرق الآخرالشروط 
، وبالتالي يصبح عزلها قابلاً للتسلسل.أقفال نطاق الفهرسلسوء الحظ ، لا تعمل أقفال 
المسند بشكل جيد: إذا كان هناك العديد من الأقفال حسب النشاطالمعاملات ، يصبح 
التحقق من الأقفال المطابقة مستهلكًا للوقت. لهذا السبب،تقوم معظم قواعد البيانات 
التي تحتوي على 2PL فعليًا بتطبيق قفل نطاق الفهرس (المعروف أيضًا باسم التالي-key 
locking ) ، وهو تقريب مبسط لقفل المسند [ 40، 49 ].من الآمن تبسيط المسند بجعله 
يتطابق مع مجموعة أكبر من الكائنات. من أجل الإختبار-ple ، إذا كان لديك قفل أصلي 
لحجوزات الغرفة 123 بين الظهر والساعة 1 مساءً ،يمكنك تقريبه عن طريق قفل حجوزات 
الغرفة 123 في أي وقت. أو يمكنك ذلكقم بتقريبها عن طريق قفل جميع الغرف (وليس فقط 
الغرفة 123) بين الظهر والساعة 1 مساءً. هذهآمن ، لأن أي كتابة تطابق المسند الأصلي 
سيتطابق أيضًا بالتأكيدالتقريبات.في قاعدة بيانات حجوزات الغرف ، من المحتمل أن 
يكون لديك فهرس على room_idعمود، و / أو مؤشرات على START_TIME و حتى END_TIME 
(وإلا الاستعلام فوقسيكون بطيئًا جدًا على قاعدة بيانات كبيرة).• لنفترض أن الفهرس 
موجود على room_id ، وأن قاعدة البيانات تستخدم هذا الفهرس للعثور على الفهرس 
الموجودحجوزات الغرفة 123. الآن يمكن لقاعدة البيانات ببساطة إرفاق قفل مشترك 
بهذاإدخال فهرس ، يشير إلى أن معاملة ما قد بحثت عن حجوزات غرفة 123.• وبدلاً من 
ذلك ، إذا كانت قاعدة البيانات تستخدم فهرسًا زمنيًا للعثور على الحجوزات الحالية ، 
فإنها تقوم بذلكيمكن إرفاق قفل مشترك بمجموعة من القيم في هذا الفهرس ، مما يشير 
إلى أنقام الإجراء بالبحث عن الحجوزات التي تتداخل مع الفترة الزمنية من الظهر إلى1 
ظهرًا في 1 يناير 2015.وفي كلتا الحالتين ، يتم إرفاق تقريب لشرط البحث بأحدفهارس. 
الآن ، إذا كانت هناك معاملة أخرى تريد إدراج حجز أو تحديثه أو حذفهنفس الغرفة و / 
أو فترة زمنية متداخلة ، فسيتعين عليها تحديثهاجزء من الفهرس. أثناء القيام بذلك ، 
سيواجه القفل المشترك ، وسيضطر إلى الانتظار حتى يتم تحرير القفل.التسلسل | 251

      الصفحة 274
يوفر هذا حماية فعالة ضد الأشباح والانحراف في الكتابة. نطاق الفهرسالأقفال ليست 
دقيقة كما ستكون الأقفال الأصلية (أي أنها قد تغلق نطاقًا أكبرمن العناصر من 
الضرورة القصوى للحفاظ على قابلية التسلسل) ، ولكن منذ ذلك الحين لديهمأقل بكثير من 
النفقات العامة ، فهي حل وسط جيد.إذا لم يكن هناك فهرس مناسب حيث يمكن إرفاق قفل 
النطاق ، فقد تسقط قاعدة البياناتالعودة إلى القفل المشترك على الجدول بأكمله. لن 
يكون هذا جيدًا للأداء ،لأنه سيوقف جميع المعاملات الأخرى عن الكتابة على الطاولة ، 
ولكنه احتياطي آمنوضع.عزل اللقطة التسلسلية (SSI)رسم هذا الفصل صورة قاتمة للتحكم 
في التزامن في قواعد البيانات. على المن ناحية ، لدينا تطبيقات للتسلسل لا تعمل 
بشكل جيد (اثنان-قفل الطور) أو عدم القياس جيدًا (التنفيذ التسلسلي). من ناحية أخرى 
، لدينا ضعفمستويات العزلة التي تتمتع بأداء جيد ، ولكنها عرضة لظروف عرقية 
مختلفةنشوئها (تحديثات مفقودة ، كتابة انحراف ، أشباح ، إلخ). هي عزلة متسلسلة 
وجيدةيتعارض الأداء بشكل أساسي مع بعضهما البعض؟ربما لا: خوارزمية تسمى عزل اللقطة 
المتسلسلة (SSI) هي طريقة واعدة للغاية‐عمل. إنه يوفر إمكانية تسلسل كاملة ، ولكن 
لديه عقوبة أداء صغيرة فقط.قلص لأخذ لقطة للعزلة. مباحث أمن الدولة جديدة إلى حد 
ما: تم وصفها لأول مرة في عام 2008 [ 39] وهوموضوع أطروحة الدكتوراه لمايكل كاهيل 
[50 ].يتم استخدام SSI اليوم في قواعد البيانات أحادية العقدة ( مستوى العزل القابل 
للتسلسل فيPostgreSQL منذ الإصدار 9.1 [40 ]) وقواعد البيانات الموزعة 
(FoundationDB يستخدم أخوارزمية مماثلة [51 ]). مثل مباحث أمن الدولة صغيرة جدًا 
مقارنة بغيرها من عناصر التحكم في التزامنآليات ، لا تزال تثبت أدائها في الممارسة 
العملية ، ولكن لديها فرصةأن تكون سريعًا بما يكفي لتصبح الافتراضي الجديد في 
المستقبل.التشاؤم مقابل التحكم المتفائل في التزامنالقفل على مرحلتين هو ما يسمى 
بآلية التحكم في التزامن المتشائم : إنه كذلكاستنادًا إلى مبدأ أنه إذا حدث خطأ ما 
(كما هو موضح بواسطة aتم تعليقه بواسطة معاملة أخرى) ، من الأفضل الانتظار حتى يصبح 
الوضع آمنًا مرة أخرىقبل فعل أي شيء. إنه مثل الاستبعاد المتبادل ، والذي يستخدم 
لحماية هيكل البياناتtures في البرمجة متعددة مؤشرات الترابط.التنفيذ المتسلسل ، 
إلى حد ما ، متشائم إلى أقصى الحدود: إنه مكافئ أساسًا لـكل معاملة لها قفل خاص على 
قاعدة البيانات بأكملها (أو قسم واحد منقاعدة البيانات) طوال مدة المعاملة. نعوض 
التشاؤممن خلال تنفيذ كل معاملة بسرعة كبيرة ، لذلك تحتاج فقط إلى الاحتفاظ بـ 
"القفل" من أجلوقت قصير.على النقيض من ذلك ، فإن عزل اللقطة القابل للتسلسل هو 
تقنية تحكم متزامنة متفائلة.أنيق. التفاؤل في هذا السياق يعني أنه بدلاً من الحجب 
إذا كان هناك شيء ممكن252 | الفصل السابع: المعاملات

      صفحة 275
يحدث خطرا ، تستمر المعاملات على أي حال ، على أمل أن كل شيءسوف تتحول بخير. عندما 
تريد المعاملة الالتزام ، تتحقق قاعدة البياناتما إذا حدث أي شيء سيئ (أي ما إذا 
كان قد تم انتهاك العزلة) ؛ إذا كان الأمر كذلك ، فإن العابرتم إحباط الإجراء ويجب 
إعادة المحاولة. فقط المعاملات التي يتم تنفيذها بشكل تسلسلييسمح لها 
بالالتزام.التحكم في التزامن المتفائل فكرة قديمة [52 ] ، ومزاياها و disadvan‐تمت 
مناقشة الخبيرات لفترة طويلة [53 ]. يكون أداؤه سيئًا إذا كان هناك ارتفاعtention 
(العديد من المعاملات تحاول الوصول إلى نفس الكائنات) ، لأن هذا يؤدي إلى 
ارتفاعنسبة المعاملات التي تحتاج إلى إجهاض. إذا كان النظام بالفعل قريبًا من الحد 
الأقصىmum ، يمكن تحميل المعاملات الإضافية من المعاملات المعاد المحاولةأداء 
أسوأ.ومع ذلك ، إذا كان هناك طاقة احتياطية كافية ، وإذا كان هناك خلاف بين 
المعاملاتليست عالية جدًا ، تميل تقنيات التحكم في التزامن المتفائلة إلى أداء أفضل 
منالمتشائمون. يمكن تقليل الخلاف باستخدام العمليات الذرية التبادلية:على سبيل 
المثال ، إذا كانت هناك عدة معاملات تريد في نفس الوقت زيادة العداد ، فسيتم ذلكلا 
يهم ترتيب تطبيق الزيادات (طالما أن العداد ليس كذلكقراءة في نفس المعاملة) ، لذلك 
يمكن تطبيق جميع الزيادات المتزامنةدون تعارض.كما يوحي الاسم ، يعتمد SSI على عزل 
اللقطة - أي ، كل ما يقرأ داخل ملفتتم المعاملة من لقطة متسقة لقاعدة البيانات 
(انظر "لقطة ايزولا‐وقراءة قابلة للتكرار "في الصفحة 228 ). هذا هو الفرق الرئيسي 
مقارنة بالأذن‐تقنيات التحكم في التزامن المتفائل. علاوة على عزل اللقطة ، تضيف 
مباحث أمن الدولةخوارزمية للكشف عن تعارض التسلسل بين الكتابات وتحديدالمعاملات 
المراد إجهاضها.قرارات تستند إلى فرضية عفا عليها الزمنعندما ناقشنا سابقًا كتابة 
الانحراف في عزل اللقطة (انظر "منعكتابة الانحراف والأشباح "في الصفحة 237 ) ، 
لاحظنا نمطًا متكررًا:يقرأ بعض البيانات من قاعدة البيانات ويفحص نتيجة الاستعلام 
ويقررلاتخاذ بعض الإجراءات (الكتابة إلى قاعدة البيانات) بناءً على النتيجة التي 
شاهدتها. ومع ذلك،تحت عزل اللقطة ، قد لا تكون النتيجة من الاستعلام الأصلي تصل 
إلى-التاريخ بالوقت الذي تلتزم فيه المعاملة ، لأن البيانات ربما تم تعديلهافي هذه 
الأثناء.بعبارة أخرى: المعاملة تتخذ إجراءً قائمًا على فرضية (حقيقة أنكان صحيحًا 
في بداية المعاملة ، على سبيل المثال "يوجد حاليًا طبيبان يعملانمكالمة"). في وقت 
لاحق ، عندما تريد المعاملة الالتزام ، قد تحتوي البيانات الأصليةتم تغييره - على 
سبيل المثال ، قد لا تكون الفرضية صحيحة.عندما يقوم التطبيق بإجراء استعلام (على 
سبيل المثال ، "كم عدد الأطباء المتصلين حاليًا؟") ،قاعدة البيانات لا تعرف كيف 
يستخدم منطق التطبيق نتيجة هذا الاستعلام. لكن آمنًا ، يجب أن تفترض قاعدة البيانات 
أن أي تغيير في نتيجة الاستعلام (العرض الأولالتسلسل | 253

      الصفحة 276
ise) يعني أن عمليات الكتابة في تلك المعاملة قد تكون غير صالحة. من أجل توفير 
المسلسل‐عزل قادر ، يجب أن تكتشف قاعدة البيانات المواقف التي قد تكون فيها 
المعاملةتصرف على أساس عفا عليه الزمن ، وأوقف الصفقة في هذه الحالة.كيف تعرف قاعدة 
البيانات ما إذا كانت نتيجة الاستعلام قد تغيرت؟ هنالك اثنانالحالات التي يجب 
مراعاتها:1. الكشف عن قراءات MVCC التي لا معنى لها (حدثت الكتابة غير الملتزمة قبل 
القراءة) ؛2. كشف الكتابات التي تؤثر على القراءات السابقة (تحدث الكتابة بعد 
القراءة).الكشف عن قراءات MVCC التي لا معنى لهاالحالة الأولى موضحة في الشكل 7-10. 
عندما تقرأ معاملة من ملف متسقلقطة في قاعدة بيانات MVCC ، فإنه يتجاهل عمليات 
الكتابة التي تم إجراؤها بواسطة transac آخرالتي لم تكن قد ارتكبت بعد وقت التقاط 
الصورة. فيالشكل 7-10، ترى المعاملة 43 أن أليس لديها on_call = true ، لأن 
المعاملة42 (الذي عدل حالة Alice عند الطلب) غير ملتزم.ومع ذلك ، بحلول الوقت الذي 
تريد فيه المعاملة 43 الالتزام ، تكون المعاملة 42 قد نفذت بالفعلملتزم. هذا يعني 
أن الكتابة التي تم تجاهلها عند القراءة من con‐أصبحت لقطة ثابتة الآن سارية 
المفعول ، ولم تعد فرضية المعاملة 43 صحيحة.من أجل منع ذلك ، تحتاج قاعدة البيانات 
إلى تتبع وقت تجاهل المعاملةتتم كتابة معاملة أخرى وفقًا لقواعد رؤية MVCC. عندما 
الصفقةيريد الالتزام ، تتحقق قاعدة البيانات مما إذا كان أي من عمليات الكتابة التي 
تم تجاهلها قد تمت الآنتم ارتكابها. إذا كانت الإجابة بنعم ، فيجب إلغاء 
المعاملة.لماذا الانتظار حتى الالتزام؟ لماذا لا تُجهض المعاملة 43 فورًا عندما 
يكون ملفتم الكشف عن قراءة لا معنى لها؟ حسنًا ، إذا كانت المعاملة 43 معاملة 
للقراءة فقط ، فلن تكون كذلكيجب إحباطها ، لأنه لا يوجد خطر انحراف الكتابة. في 
الوقت الذي كان فيه ترانساكويتم قراءتها 43 ، قاعدة البيانات لا تعرف حتى الآن ما 
إذا كانت هذه المعاملةسأقوم في وقت لاحق بأداء الكتابة. يحتاج عزل اللقطة القابل 
للتسلسل إلى دعم طويلتشغيل القراءات من لقطة متسقة ، تمامًا مثل عزل اللقطة العادي 
،بدون إجهاض غير ضروري.254 | الفصل السابع: المعاملات

      الصفحة 277
42- إخلاء السبيلقاعدة البيانات43- إبراء الذمةالوقت22حسناحسناحسناحدد العدد (*)من 
الأطباءحيث on_call = صحيحو shift_id = 1234حدد العدد (*)من الأطباءحيث on_call = 
صحيحو shift_id = 1234تحديث الأطباءتعيين on_call = خطأحيث الاسم = "بوب"و shift_id 
= 1234إحباطيقترفأعد المحاولة ...تحديث الأطباءتعيين on_call = خطأحيث الاسم = 
"أليس"و shift_id = 1234الصفقة 42 لم تلتزم بعد ،لذلك ترى المعاملة 43 أن أليس لا 
تزاليجري تحت الطلب. ومع ذلك ، فإن الصفقةيلاحظ المدير أن هذه القيمة لايعد 
حداثة.اسم shift_id عند_ إنشاء المكالمة_بواسطة 
المحذوفة1234أليسحقيقية1421234أليسخاطئة42-1234بوبحقيقية1-1234كارول 
كاذبة1-يقترفالشكل 7-10. الكشف عن وقت قراءة المعاملة لقيم قديمة من أداة 
MVCCطلقة.كشف الكتابات التي تؤثر على القراءات السابقةالحالة الثانية التي يجب 
مراعاتها هي عندما تقوم معاملة أخرى بتعديل البيانات بعد ذلكتمت قراءتها. هذه 
الحالة موضحة فيالشكل 7-11.في سياق القفل على مرحلتين ، ناقشنا أقفال نطاق الفهرس 
(انظر "نطاق الفهرسأقفال "في الصفحة 251) ، مما يسمح لقاعدة البيانات بتأمين الوصول 
إلى جميع الصفوف المطابقةبعض استعلامات البحث ، مثل WHERE shift_id = 1234 . يمكننا 
استخدام تقنية مماثلةهنا ، باستثناء أن أقفال SSI لا تمنع المعاملات الأخرى.في 
الشكل 7-11 ، تبحث المعاملة 42 و 43 عن أطباء تحت الطلب أثناء المناوبة1234. إذا 
كان هناك فهرس في shift_id ، يمكن لقاعدة البيانات استخدام مُدخل الفهرس 1234 
إلىسجل حقيقة أن المعاملات 42 و 43 قرأت هذه البيانات. (إذا لم يكن هناك فهرس ، 
فهذايمكن تتبع المعلومات على مستوى الجدول.) هذه المعلومات تحتاج فقط إلى الاحتفاظ 
بهالفترة من الوقت: بعد انتهاء المعاملة (تم ارتكابها أو إجهاضها) ، واتفق 
الجميعانتهت معاملات الإيجار ، يمكن لقاعدة البيانات أن تنسى البيانات التي 
تقرأها.عندما تكتب معاملة ما إلى قاعدة البيانات ، يجب أن تبحث في الفهارس عن أي 
معاملة أخرىالمعاملات التي قرأت البيانات المتأثرة مؤخرًا. هذا يشبه الحصول علىاكتب 
القفل على نطاق المفتاح المتأثر ، ولكن بدلاً من الحظر حتى يتم حظر القراءملتزم ، 
يعمل القفل كسلك tripwire: إنه ببساطة يخطر المعاملات بأن البياناتلم يعد يقرؤوا 
محدثين.التسلسل | 255

      الصفحة 278
في الشكل 7-11، تُعلم المعاملة 43 المعاملة 42 بأن قراءتها السابقة قديمة ،والعكس 
صحيح. المعاملة 42 هي الأولى التي تلتزم ، وهي ناجحة: على الرغم منكتابة الإجراء 43 
تأثرت 42 ، 43 لم تلتزم بعد ، لذا لم يتم تنفيذ الكتابة بعدتأثير. ومع ذلك ، عندما 
تريد المعاملة 43 الالتزام ، يكتب المتضارب من 42قد تم بالفعل ، لذلك يجب إجهاض 
43.42- إخلاء السبيلقاعدة البيانات43- إبراء الذمةالوقت22حسناحسناحسناحدد العدد 
(*)من الأطباءحيث on_call = صحيحو shift_id = 1234حدد العدد (*)من الأطباءحيث 
on_call = صحيحو shift_id = 1234تحديث الأطباءتعيين on_call = خطأحيث الاسم = 
"بوب"و shift_id = 1234إحباطيقترفأعد المحاولة ...تحديث الأطباءتعيين on_call = 
خطأحيث الاسم = "أليس"و shift_id = 1234يتم تشغيل أقفال نطاق 
الفهرسindex.shift_idمعلومات النطاق الرئيسي1234قراءة بالمعاملة 421234قراءة 
بالمعاملة 43ملاحظة: التحديث بالمعاملة 42يؤثر على القراءة بالمعاملة 43shift_idعمر 
او قديم1234الجديد1234اسمأليسأليسفي مكالمةحقيقيةخاطئةيقترفالشكل 7-11. في عزل 
اللقطة القابلة للتسلسل ، الكشف عن تعديل معاملة واحدةيقرأ معاملة أخرى.أداء عزل 
اللقطة القابلة للتسلسلكما هو الحال دائمًا ، تؤثر العديد من التفاصيل الهندسية على 
كيفية عمل الخوارزمية بشكل جيد في الممارسة العملية.على سبيل المثال ، إحدى 
المقايضة هي الدقة التي تتم بها قراءة وكتابة المعاملاتيتم تعقبها. إذا كانت قاعدة 
البيانات تتعقب نشاط كل معاملة بتفصيل كبير ، فإنها تقوم بذلكيمكن أن يكون دقيقًا 
بشأن المعاملات التي يجب إجهاضها ، ولكن النفقات العامة لمسك الدفاتريمكن أن تصبح 
كبيرة. التتبع الأقل تفصيلاً يكون أسرع ، لكنه قد يؤدي إلى مزيد من النقل.تم 
إجهاضها من الضرورة القصوى.في بعض الحالات ، لا بأس في أن تقرأ المعاملة المعلومات 
التي تم استبدالها بواسطةمعاملة أخرى: اعتمادًا على ما حدث أيضًا ، من الممكن في 
بعض الأحيانإثبات أن نتيجة الإعدام قابلة للتسلسل مع ذلك. تستخدم PostgreSQL 
هذانظرية لتقليل عدد عمليات الإجهاض غير الضرورية [11 ،40 ].بالمقارنة مع القفل 
ثنائي الطور ، فإن الميزة الكبيرة لعزل اللقطة القابل للتسلسلهو أن معاملة واحدة لا 
تحتاج إلى حظر انتظار الأقفال التي يحتفظ بها ترانس آخرعمل. كما هو الحال في حالة 
عزل اللقطة ، لا يحظر الكتاب القراء ، والعكس صحيح. هذه256 | الفصل السابع: 
المعاملات

      الصفحة 279
يجعل وقت استجابة الاستعلام أكثر قابلية للتنبؤ وأقل تغيرًا. على وجه الخصوص ، 
اقرأ-يمكن تشغيل الاستعلامات فقط على لقطة متسقة دون الحاجة إلى أي أقفالجذابة 
للغاية لأعباء العمل المليئة بالقراءة.مقارنة بالتنفيذ التسلسلي ، لا يقتصر عزل 
اللقطة القابلة للتسلسل على ملفمعدل نقل نواة وحدة معالجة مركزية واحدة: يوزع 
FoundationDB الكشف عن المسلسل ‐تتعارض zation عبر أجهزة متعددة ، مما يسمح لها 
بالتوسع إلى مستوى عالٍ جدًا من خلالوضع. على الرغم من إمكانية تقسيم البيانات عبر 
أجهزة متعددة ، يمكن للمعاملاتقراءة وكتابة البيانات في أقسام متعددة ، مع الحفاظ 
على العزل القابل للتسلسل[54].يؤثر معدل حالات الإجهاض بشكل كبير على الأداء العام 
لـ SSI. على سبيل المثال ، أالمعاملة التي تقرأ وتكتب البيانات على مدى فترة زمنية 
طويلة من المرجح أن يتم تنفيذهاالتعارضات والإجهاض ، لذلك تتطلب مباحث أمن الدولة 
أن تكون معاملات القراءة والكتابة قصيرة إلى حد ما (طويلة-قد يكون تشغيل المعاملات 
للقراءة فقط على ما يرام ، اعتمادًا على التنفيذ). كيف-على الإطلاق ، من المحتمل أن 
يكون SSI أقل حساسية للمعاملات البطيئة من قفل مرحلتين أوتنفيذ 
تسلسلي.ملخصالمعاملات هي طبقة تجريدية تسمح للتطبيق بالتظاهر بهذا اليقينلا توجد 
مشاكل التزامن وأنواع معينة من أخطاء الأجهزة والبرامج. أيتم تقليل فئة كبيرة من 
الأخطاء وصولاً إلى إحباط معاملة بسيطة ، والتطبيقيحتاج نشوئها فقط إلى المحاولة 
مرة أخرى.في هذا الفصل رأينا العديد من الأمثلة على المشكلات التي تساعد المعاملات 
في منعها.ليست كل التطبيقات عرضة لكل هذه المشاكل: تطبيق مع جدامن المحتمل أن تكون 
أنماط الوصول البسيطة ، مثل قراءة وكتابة سجل واحد فقطإدارة بدون معاملات. ومع ذلك 
، بالنسبة لأنماط الوصول الأكثر تعقيدًا ، فإن Transac‐يمكن أن تقلل بشكل كبير من 
عدد حالات الخطأ المحتملة التي تحتاج إلى التفكير فيها.تخلت العديد من أنظمة NoSQL 
عن المعاملات باسم قابلية التوسع والتوافروالأداء. لسوء الحظ ، هذا يعني أن 
التطبيقات التي تستخدم أنظمة البيانات هذهيحتاج إما إلى تنفيذ إدارة المعاملات 
الخاصة بهم - وهو أمر غير محتمل ،لأنه من الصعب التنفيذ بشكل صحيح - أو قبول أن 
بياناتهم تقريبية.بدون معاملات ، سيناريوهات خطأ مختلفة (تعطل العمليات ، مقاطعة 
الشبكة‐يعني انقطاع التيار الكهربائي ، والقرص ممتلئ ، والتزامن غير المتوقع ، وما 
إلى ذلك) أن البيانات يمكنتصبح غير متسقة بطرق مختلفة. على سبيل المثال ، يمكن أن 
تذهب البيانات غير المنسقة بسهولةغير متزامن مع بيانات المصدر. بدون معاملات ، يصبح 
من الصعب جدًا القيام بذلكسبب حول التأثير الذي يمكن أن تحدثه عمليات الوصول 
التفاعلية المعقدة على قاعدة البيانات.في هذا الفصل ، تعمقنا بشكل خاص في موضوع 
التحكم في التزامن. نحنناقش عدة مستويات العزل على نطاق واسع المستخدمة، ولا سيما 
قراءة ارتكبت ، لقطةملخص | 257

      الصفحة 280
العزلة (تسمى أحيانًا قراءة قابلة للتكرار ) وقابلة للتسلسل . ميزنا هؤلاءمستويات 
العزلة من خلال مناقشة أمثلة مختلفة لظروف السباق:قراءات قذرةيقرأ أحد العملاء 
كتابات عميل آخر قبل الالتزام بها. القراءة مستوى عزل ملتزم ومستويات أقوى تمنع 
القراءات القذرة.يكتب القذرةيقوم أحد العملاء بالكتابة فوق البيانات التي كتبها 
عميل آخر ، ولكن لم يلتزم بها بعد.تمنع جميع عمليات تنفيذ المعاملات تقريبًا عمليات 
الكتابة غير الصحيحة.قراءة الانحراف (قراءات غير قابلة للتكرار)يرى العميل أجزاء 
مختلفة من قاعدة البيانات في أوقات مختلفة. هذا هوالأكثر شيوعًا التي يتم منعها من 
خلال عزل اللقطة ، مما يسمح للمعاملة بـاقرأ من لقطة ثابتة في وقت واحد. عادة ما 
يتم تنفيذهمع التحكم في التزامن متعدد الإصدارات (MVCC).تحديثات مفقودةيقوم عميلان 
في نفس الوقت بإجراء دورة القراءة والتعديل والكتابة. يقوم أحدهم بالكتابة فوق 
ملفيكتب الآخرون دون دمج تغييراته ، لذلك يتم فقد البيانات. بعض التنفيسنقاط عزل 
اللقطة تمنع هذا.اكتب انحرافتقرأ المعاملة شيئًا ما ، وتتخذ قرارًا بناءً على 
القيمة التي رأتها ، ويكتب القرار إلى قاعدة البيانات. ومع ذلك ، بحلول الوقت الذي 
تتم فيه الكتابة ، يكون ملففرضية القرار لم تعد صحيحة. فقط العزل القابل للتسلسل 
يمنع ذلك.يقرأ الوهميةتقرأ المعاملة العناصر التي تطابق بعض شروط البحث. عميل 
آخريكتب ما يؤثر على نتائج هذا البحث. منع عزل اللقطةيقرأ الشبح المباشر ، لكن 
الأشباح في سياق الكتابة المنحرفةتتطلب معالجة خاصة ، مثل أقفال نطاق 
الفهرس.مستويات العزلة الضعيفة تحمي من بعض هذه الحالات الشاذة ، وتتركك أنتمطور 
التطبيق ، للتعامل مع الآخرين يدويًا (على سبيل المثال ، استخدام القفل الصريح). 
فقطيحمي العزل القابل للتسلسل من كل هذه المشكلات. ناقشنا ثلاثة مختلفةطرق تنفيذ 
المعاملات القابلة للتسلسل:1. تنفيذ المعاملات حرفيًا بترتيب تسلسلي. إذا كان يمكنك 
عمل كل ترانساكسريع جدًا في التنفيذ ، كما أن معدل نقل المعاملات منخفض بما يكفي 
للمعالجةعلى وحدة معالجة مركزية واحدة ، يعد هذا خيارًا بسيطًا وفعالًا.2. قفل 
مرحلتين. لعقود من الزمان كانت هذه هي الطريقة القياسية للتنفيذقابلية التسلسل ، 
لكن العديد من التطبيقات تتجنب استخدامه بسبب أدائهمميزات.258 | الفصل السابع: 
المعاملات

      الصفحة 281
3. عزل لقطة قابلة للتسلسل ، وهي خوارزمية جديدة إلى حد ما تتجنب معظمسلبيات 
الأساليب السابقة. يستخدم نهج متفائل ، يسمحالمعاملات للمضي قدما دون حظر. عندما 
تريد معاملة ما ،يتم فحصه وإحباطه إذا لم يكن التنفيذ قابلاً للتسلسل.استخدمت 
الأمثلة في هذا الفصل نموذج البيانات العلائقية. ومع ذلك ، كما تمت مناقشته 
في"الحاجة إلى معاملات متعددة العناصر" في الصفحة 222 ، تعتبر المعاملات ذات 
قيمةميزة قاعدة البيانات ، بغض النظر عن نموذج البيانات المستخدم.تنطبق معظم 
الأفكار والخوارزميات الواردة في هذا الفصل بغض النظر عما إذا كانت البيانات أم 
لاالقاعدة تعمل على جهاز واحد ، أو يتم نسخها وتقسيمها عبر أجهزة متعددةالآلات. ومع 
ذلك ، هناك مجموعة إضافية من التحديات الصعبة التي تنشأ إذا كنتمحاولة تنفيذ 
المعاملات في قواعد البيانات الموزعة. سنناقش هؤلاء في اليوم التاليفصلين.مراجع[1 ] 
دونالد دي تشامبرلين ومورتون إم أستراهان ومايكل دبليو بلاسين وآخرون: "صاحبtory 
and Evaluation of System R ، ” Communications of the ACM ، vol 24، number10 ، 
الصفحات 632-646 ، أكتوبر 1981. دوى: 10.1145 / 358769.358784[2 ] جيم إن جراي ، 
وريموند أ لوري ، وجيانفرانكو آر بوتزولو ، وإيرفينغ إل ترايجر:"تقسيمات الأقفال 
ودرجات التناسق في قاعدة بيانات مشتركة، "في النموذج‐ling in Data Base Management 
Systems: وقائع مؤتمر عمل IFIPحول النمذجة في أنظمة إدارة قواعد البيانات ، تم 
تحريره بواسطة GM Nijssen ، Elsevier /شمال هولندا للنشر ، الصفحات 364-394 ، 1976. 
أيضًا في قراءات في قاعدة البيانات Sys‐تيمس ، حرره جوزيف م. هيلرشتاين ومايكل 
ستونبراكر ، الطبعة الرابعة ، معهد ماساتشوستس للتكنولوجياالصحافة ، 2005. ISBN: 
978-0-262-69314-1[3 ] Kapali P Eswaran و Jim N Gray و Raymond A Lorie و Irving L 
Traiger: "المفاهيم الاتساق والأقفال الأصلية في نظام قاعدة البيانات، " 
الاتصالاتمن ACM ، المجلد 19 ، العدد 11 ، الصفحات 624-633 ، نوفمبر 1976.[4 ] 
"معاملات الحمض النووي مفيدة للغاية ". FoundationDB ، LLC ، 2013.[5] جون دي كوك: 
“ ACID مقابل BASE لمعاملات قاعدة البيانات، "johndcook.com ، 6يوليو 2009.[6 ] 
جافين كلارك: " منتهكي نظرية CAP في NoSQL: نحن لا نتخلص من الحمض، "ter.co.uk ، 22 
نوفمبر 2012.[7ثيو هاردر وأندرياس رويتر: " مبادئ قاعدة البيانات الموجهة 
للمعاملاتالاسترداد ، " ACM Computing Surveys ، المجلد 15 ، العدد 4 ، الصفحات 
287-317 ، ديسمبربير 1983. دوى: 10.1145 / 289.291ملخص | 259

      الصفحة 282
[8] بيتر بيليس ، وآلان فيكيتي ، وعلي قدسي ، وجوزيف إم هيلرشتاين ، وإيون ستويكا: 
" HAT ،ليس CAP: نحو معاملات متاحة للغاية، "في ورشة عمل USENIX الرابعة عشر 
بتاريخموضوعات ساخنة في أنظمة التشغيل (HotOS) ، مايو 2013.[9 ] أرماندو فوكس ، 
وستيفن دي غريبل ، وياتين تشواثي ، وإريك إيه بروير ، وبولGauthier: " خدمات شبكة 
قابلة للتطوير قائمة على الكتلة، "في ندوة ACM السادسة عشرة بتاريخمبادئ أنظمة 
التشغيل (SOSP) ، أكتوبر 1997.[10] فيليب أ بيرنشتاين وفاسوس هادزيلاكوس وناثان 
جودمان: التزامنالتحكم والاستعادة في أنظمة قواعد البيانات. أديسون ويسلي ، 1987. 
متاح على الإنترنت فيResearch.microsoft.com. رقم ال ISBN: 0201107155[11] آلان 
فيكيتي وديمتريوس ليروكابيس وإليزابيث أونيل وباتريك أونيل ودينيسشاشا: "جعل عزل 
اللقطة قابلاً للتسلسل، " معاملات ACM على قاعدة البياناتالأنظمة ، المجلد 30 ، 
العدد 2 ، الصفحات 492-528 ، يونيو 2005. دوى:10.1145 / 1071610.1071615[12] ماي 
تشنغ ، وجوزيف توسيك ، وفنغ تشين ، ومارك ليليبريدج: " فهممتانة محركات الأقراص ذات 
الحالة الثابتة في حالة حدوث خلل في الطاقة ، "في مؤتمر USENIX الحادي عشر حول 
الملفات والتخزين‐age Technologies (FAST) ، فبراير 2013.[13] لوري دينيس: " محركات 
أقراص الحالة الصلبة: هدية ونقمة، laur.ie ، 2 حزيران (يونيو) 2015.[14] آدم سوراك: 
" عندما لا تكون محركات الأقراص ذات الحالة الصلبة بهذه القوة ،" blog.algolia.com 
، 15يونيو 2015.[15] ثانومالايان سانكارانارايانا بيلاي ، فيجاي تشيدامبارام ، 
رامناتان عليغابان وآخرون: "لم يتم إنشاء جميع أنظمة الملفات على قدم المساواة: حول 
تعقيد الحرف‐التطبيقات المتوافقة مع الأعطال " ، في ندوة USENIX الحادية عشرة حول 
التشغيلتصميم النظم وتنفيذها (OSDI) ، أكتوبر 2014.[16] كريس سيبنمان: " مشكلة 
متانة ملف Unix " ، utcc.utoronto.ca ، 14 أبريل2016.[17] لاكشمي إن 
بايرافاسوندارام ، غارث آر جودسون ، بيانكا شرودر ، أندريا سيArpaci-Dusseau و 
Remzi H Arpaci-Dusseau: "تحليل فساد البيانات فيthe Storage Stack "، في المؤتمر 
السادس USENIX حول تقنيات الملفات والتخزين(FAST) فبراير 2008.[18] دون أليسون: " 
تخزين SSD - الجهل بالتكنولوجيا ليس عذرا ،"blog.korelogic.com ، 24 مارس 2015.[19] 
ديف شيرير: " هذه ليست معاملات (كاساندرا 2.0)، blog.founda‐tiondb.com ، 6 سبتمبر 
2013.[20 ] كايل كينجسبري: "اتصل بي ربما: كاساندرا، "aphyr.com ، 24 سبتمبر 
2013.[21] “ ACID Support in Aerospike، "Aerospike، Inc. ، حزيران (يونيو) 
2014.260 | الفصل السابع: المعاملات

      صفحة 283
[22] مارتن كليبمان: " هيرميتاج: اختبار" أنا "في حمض، martin.klepp‐mann.com ، 25 
نوفمبر 2014.[23 ] تريستان داجوستا: "سرقة BTC من Poloniex "، bitcointalk.org ، 4 
مارس 2014.[24 ] bitcointhief2: "كيف سرقت ما يقرب من 100 BTC من البورصة وكيف 
يمكنني ذلكلقد سرقوا أكثر! ، ”reddit.com ، 2 شباط (فبراير) 2014.[25 ] Sudhir 
Jorwekar و Alan Fekete و Krithi Ramamritham و S Sudarshan: "آلي-التزاوج الكشف عن 
شذوذ عزل اللقطة، في المؤتمر الدولي الثالث والثلاثينعلى قواعد البيانات الكبيرة 
جدًا (VLDB) ، الصفحات 1263-1274 ، سبتمبر 2007.[26] مايكل ميلانسون: " المعاملات: 
حدود العزلة " ، michaelmelanson.net ،20 مارس 2014.[27] هال بيرينسون ، فيليب أ 
بيرنشتاين ، جيم إن جراي وآخرون: " نقد ANSI SQLمستويات العزل، "في مؤتمر ACM 
الدولي حول إدارة البيانات (SIG‐MOD) ، المجلد 24 ، العدد 2 ، مايو 1995. doi: 
10.1145 / 568271.223785[28] أتول أديا: " الاتساق الضعيف: نظرية معممة ومضمون 
متفائل‐الإرشاد عن المعاملات الموزعة ، "رسالة دكتوراه ، معهد 
ماساتشوستسالتكنولوجيا ، كامبريدج ، ماساتشوستس ، الولايات المتحدة الأمريكية ، 
مارس 1999.[29 ] بيتر بيليس وآرون ديفيدسون وآلان فيكيتي وآخرون: "المعاملات 
المتاحة للغاية:الفضائل والقيود (النسخة الموسعة) ، "في المؤتمر الدولي الأربعين 
فيقواعد بيانات كبيرة جدًا (VLDB) ، سبتمبر 2014.[30 ] بروس مومجيان:MVCC Unmasked 
، "momjian.us ، تموز (يوليو) 2014.[31 ] Annamalai Gurusami: "مستوى عزل القراءة 
المتكرر في InnoDB - How Con‐أعمال عرض القراءة الثابتة، blogs.oracle.com ، 15 
كانون الثاني (يناير) 2013.[32 ] نيكيتا بروكوبوف:دليل غير رسمي لأجزاء البيانات 
الداخلية، "tonky.me ، 6 مايو2014.[33 ] بارون شوارتز: "الثبات ، MVCC ، وجمع 
القمامة، "xaprb.com ، 28نوفمبر 2013.[34] جي كريس أندرسون ، وجان لينهاردت ، ونوح 
سلاتر: CouchDB: النهائيدليل . أورايلي ميديا ​​، يناير 2010. ISBN: 
978-0-596-15589-6[35 ] ريكديب مخرجي:العزلة في DB2 (قراءة قابلة للتكرار ، قراءة 
الاستقرار ، حالة المؤشرقراءة غير ملتزمة) مع أمثلة، "mframes.blogspot.co.uk ، 4 
تموز (يوليو) 2013.[36 ] ستيف هيلكر:استقرار المؤشر (CS) - مجتمع IBM DB2، 
"toadworld.com ،14 مارس 2013.[37 ] نيت ويغر: "An Atomic Rant "، nateware.com ، 
18 فبراير 2010.[38] جويل جاكوبسون: " Riak 2.0: Data Types " 
blog.joeljacobson.com ، 23 مارس 2014.ملخص | 261

      صفحة 284
[39 ] مايكل جيه كاهيل وأوي روم وآلان فيكيتي: "عزل قابل للتسلسل لـ Snap‐قواعد 
بيانات النار، "في مؤتمر ACM الدولي حول إدارة البيانات (SIG‐MOD) ، الصفحات 
729-738 ، يونيو 2008. دوى: 10.1145 / 1376616.1376690[40 ] دان آر كيه بورتس وكيفن 
جريتنر: "عزل لقطة قابلة للتسلسل في PostgreSQL، "في المؤتمر الدولي الثامن 
والثلاثين لقواعد البيانات الكبيرة جدًا (VLDB) ، المجلد5 ، العدد 12 ، الصفحات 
1850-1861 ، آب (أغسطس) 2012.[41] توني أندروز: " فرض القيود المعقدة في Oracle " ، 
tonyandrews.blog‐spot.co.uk ، 15 أكتوبر 2004.[42] دوغلاس بي تيري ومارفن إم ثيمر 
وكارين بيترسن وآخرون: " إدارة التحديثالصراعات في Bayou ، وهو نظام تخزين مكرر 
ضعيف الاتصال "، في معرض ACM الخامس عشرposium on Operating Systems Principles 
(SOSP)، pages 172–182، December 1995. doi:10.1145 / 224056.224070[43 ] جاري 
فريدريكس:خطأ قابلية تسلسل Postgres، "github.com ، أيلول (سبتمبر) 2015.[44] مايكل 
ستونبراكر ، صموئيل مادن ، دانيال جيه آبادي ، وآخرون: “ The End of anالعصر 
المعماري (حان الوقت لإعادة كتابة كاملة)، في المؤتمر الدولي الثالث والثلاثينبعد 
ذلك على قواعد البيانات الكبيرة جدًا (VLDB) ، الصفحات 1150-1160 ، سبتمبر 
2007.[45] جون هوج: " H-Store / VoltDB architecture مقابل أنظمة CEP والتدفق 
الأحدثمعماريات، "في DataScale Boston ، تشرين الثاني (نوفمبر) 2014.[46 ] روبرت 
كالمان وهيدياكي كيمورا وجوناثان ناتكينز وآخرون: "H- مخزن: عالية-الأداء ، نظام 
معالجة معاملات الذاكرة الرئيسية الموزعة ، " متابعةings of the VLDB Endowment ، 
المجلد 1 ، العدد 2 ، الصفحات 1496-1499 ، أغسطس 2008.[47 ] ريتش هيكي: "عمارة 
داتوميك، ”infoq.com ، 2 تشرين الثاني (نوفمبر) 2012.[48] جون هوج: " كشف الخرافات 
حول قاعدة بيانات VoltDB في الذاكرة ،"voltdb.com ، 12 مايو 2014.[49 ] جوزيف إم 
هيلرشتاين ومايكل ستونبراكر وجيمس هاميلتون: "هندسة عامةمن نظام قاعدة البيانات، " 
أسس واتجاهات قواعد البيانات ، المجلد 1 ، العدد 2 ،الصفحات 141-259 ، نوفمبر 2007. 
دوى: 10.1561 / 1900000002[50] مايكل جيه كاهيل: " عزل تسلسلي لقواعد بيانات 
اللقطات " ، أطروحة دكتوراه ،جامعة سيدني ، يوليو 2009.[51] FoundationDB: التزامن 
مع FoundationDB (Python). Foundationdb.com ،يوليو 2014.[52] DZ Badal: "صحة 
التحكم في التزامن والآثار في التوزيعقواعد البيانات ، "في المؤتمر الدولي الثالث 
لبرامج الكمبيوتر والتطبيقات IEEE(COMPSAC) ، الصفحات 588-593 ، تشرين الثاني 
(نوفمبر) 1979. دوى: 10.1109 / CMPSAC.1979.762563[53] راكيش أغراوال ومايكل جي 
كاري وميرون ليفني: " Concurrency Control Per‐نمذجة Formance: البدائل والآثار ، " 
معاملات ACM على قاعدة البيانات262 | الفصل السابع: المعاملات

      الصفحة 285
Systems (TODS) ، المجلد 12 ، العدد 4 ، الصفحات 609-654 ، ديسمبر 1987. 
دوى:10.1145 / 32204.32220[54 ] ديف روزنتال: "قواعد البيانات بسرعة 14.4 ميجا هرتز 
، blog.foundationdb.com ، 10 ديسمبر2014.ملخص | 263

      صفحة 286


      الصفحة 287
أنا. باستثناء واحد: سنفترض أن العيوب ليست بيزنطية - انظر "العيوب البيزنطية" في 
الصفحة 295.الفصل 8مشكلة الأنظمة الموزعةمرحبا، قابلتك للتوضعف الشبكةلكن ها هي 
بياناتيلذا احفظه ربما—Kyle Kingsbury و Carly Rae Jepsen وأخطار الشبكة 
parti‐(2013)كان أحد الموضوعات المتكررة في الفصول القليلة الماضية هو مناقشة كيفية 
تعامل الأنظمةالأمور تسير بشكل خاطئ. على سبيل المثال ، ناقشنا تجاوز فشل النسخ 
المتماثلة ("التعامل مع عقدة الخروج‐الأعمار "في الصفحة 150 ) ، تأخر النسخ ("مشاكل 
مع تأخر النسخ المتماثل" في الصفحة 155)والتحكم في التزامن في المعاملات ("مستويات 
العزل الضعيفة" في الصفحة 224 ). كمانتوصل إلى فهم حالات الحافة المختلفة التي يمكن 
أن تحدث في أنظمة حقيقية ، فنحن نراهنثالثًا في التعامل معها.ومع ذلك ، على الرغم 
من أننا تحدثنا كثيرًا عن العيوب ، إلا أن الفصول القليلة الماضية قد تحدثت عن 
ذلكلا يزال متفائلا جدا. الحقيقة أكثر قتامة. سننتقل الآن إلى تشاؤمناإلى أقصى حد ، 
وافترض أن أي شيء يمكن أن يحدث بشكل خاطئ سوف يسوء. أنا (Expe‐سيخبرك مشغلو الأنظمة 
المتمرسون أن هذا افتراض معقول. إذا سألتبشكل جيد ، قد يخبروك ببعض القصص المخيفة 
أثناء علاج ندوب الماضيالمعارك.)يختلف العمل مع الأنظمة الموزعة اختلافًا جوهريًا 
عن برامج الكتابةعلى جهاز كمبيوتر واحد - والفرق الرئيسي هو أن هناك الكثير من 
ملفاتطرق مثيرة لسوء الأمور [1، 2]. في هذا الفصل ، سوف نتذوق265

      صفحة 288
المشاكل التي تنشأ في الممارسة ، وفهم الأشياء التي نستطيع ويمكننالا تعتمد على.في 
النهاية ، مهمتنا كمهندسين هي بناء الأنظمة التي تؤدي وظيفتها (أي تلبيةيضمن أن 
المستخدمين يتوقعون) ، على الرغم من حدوث كل شيء بشكل خاطئ. في الفصل 9 ،سننظر في 
بعض أمثلة الخوارزميات التي يمكن أن توفر مثل هذه الضمانات فيتوزيع منفصل. لكن 
أولاً ، في هذا الفصل ، يجب أن نفهم ما هي التحديات التي نواجههاضد.هذا الفصل هو 
نظرة عامة متشائمة ومحبطة تمامًا للأشياء التي قد تكونتسوء في النظام الموزع. سننظر 
في مشاكل الشبكات (”Unre‐الشبكات المسؤولة "في الصفحة 269 ) ، مشكلات الساعات 
والتوقيت ( " الساعات غير الموثوقة "على الصفحة278) ، وسنناقش إلى أي درجة يمكن 
تجنبها. عواقب كل هذاالمشكلات مربكة ، لذلك سنستكشف كيفية التفكير في حالة 
ملفالنظام وكيفية التفكير في الأشياء التي حدثت ("المعرفة والحقيقة والأكاذيب"في 
الصفحة 291).العيوب والفشل الجزئيعندما تكتب برنامجًا على جهاز كمبيوتر واحد ، فإنه 
عادة ما يتصرف بشكل عادلطريقة ( حتمية ) يمكن التنبؤ بها: إما أنها تعمل أو لا 
تعمل. قد يعطي برنامج عربات التي تجرها الدوابيبدو أن الكمبيوتر يمر أحيانًا "بيوم 
سيء" (وهي مشكلةغالبًا ما يتم إصلاحه عن طريق إعادة التشغيل) ، ولكن هذا في الغالب 
مجرد نتيجة ل soft written مكتوب بشكل سيءوير.لا يوجد سبب أساسي يجعل البرامج 
الموجودة على جهاز كمبيوتر واحد غير مستقر:عندما يعمل الجهاز بشكل صحيح ، فإن نفس 
العملية تنتج دائمًا ملفنفس النتيجة. إذا كانت هناك مشكلة في الجهاز (مثل تلف 
الذاكرة أو اتصال غير محكم)tor) ، تكون النتيجة عادةً فشل نظام كامل (على سبيل 
المثال ، kernel panic ، "شاشة زرقاءالموت "، الفشل في البدء). عادة ما يكون 
الكمبيوتر الفردي المزود ببرنامج جيدإما تعمل بكامل طاقتها أو معطلة تمامًا ، ولكن 
ليس شيئًا بينهما.هذا اختيار متعمد في تصميم أجهزة الكمبيوتر: إذا حدث خطأ داخلي ، 
فنحنتفضل أن يتعطل الكمبيوتر تمامًا ، بدلاً من إرجاع نتيجة خاطئة ، لأنالنتائج 
الخاطئة صعبة ومربكة للتعامل معها. وهكذا ، فإن أجهزة الكمبيوتر تخفي الغموضالواقع 
المادي الذي يتم تنفيذه عليه ، ويقدم نظامًا مثاليًانموذج يعمل بإتقان رياضي: 
تعليمات وحدة المعالجة المركزية تقوم دائمًا بامتدادنفس الشيء؛ إذا قمت بكتابة بعض 
البيانات على الذاكرة أو القرص ، فإن تلك البيانات تظل سليمة ولا يتلف بشكل عشوائي. 
يذهب هدف التصميم هذا للحساب الصحيح دائمًاوصولا إلى أول كمبيوتر رقمي [ 3 ].عند 
كتابة برنامج يعمل على عدة أجهزة كمبيوتر متصلة بشبكةالعمل ، يختلف الوضع اختلافًا 
جوهريًا. في الأنظمة الموزعة ، نحن لاتعد تعمل في نموذج نظام مثالي - ليس لدينا 
خيار سوى المواجهة266 | الفصل الثامن: مشكلة الأنظمة الموزعة

      الصفحة 289
الحقيقة الفوضوية للعالم المادي. وفي العالم المادي ، واسعة بشكل ملحوظمجموعة من 
الأشياء يمكن أن تسوء ، كما هو موضح في هذه الحكاية [ 4 ]:من خلال تجربتي المحدودة 
، تعاملت مع أقسام الشبكة طويلة العمر في بيانات واحدةمركز (DC) ، PDU [وحدة توزيع 
الطاقة] أعطال ، أعطال التبديل ، طاقة عرضيةدورات من الرفوف الكاملة ، وفشل العمود 
الفقري للتيار المستمر بالكامل ، وفشل طاقة التيار المستمر بالكامل ، وسائق سكر 
الدم يحطم شاحنته البيك أب Ford في HVAC في DC [تدفئة ، ven‐نظام التبريد وتكييف 
الهواء. وأنا لست حتى رجل عمليات.- كودا هيلفي النظام الموزع ، قد يكون هناك بعض 
أجزاء النظام التي تم كسرهابطريقة غير متوقعة ، على الرغم من أن أجزاء أخرى من 
النظام تعمل بشكل جيد. هذهيُعرف بالفشل الجزئي . وتكمن الصعوبة في أن الفشل الجزئي 
هي غيرحتمية : إذا حاولت القيام بأي شيء يتعلق بالعقد المتعددة والشبكة ، فسيتم 
ذلكقد تنجح أحيانًا وأحيانًا تفشل بشكل غير متوقع. كما سنرى ، لا يجوز لكحتى تعرف 
ما إذا كان شيء ما قد نجح أم لا!هذا اللاحتمية وإمكانية الفشل الجزئي هو ما يجعل 
التوزيعأنظمة يصعب العمل معها [5].الحوسبة السحابية والحوسبة الفائقةهناك مجموعة 
متنوعة من الفلسفات حول كيفية بناء أنظمة حوسبة واسعة النطاق:• في أحد طرفي المقياس 
يوجد مجال الحوسبة عالية الأداء (HPC). ممتاز-عادةً ما تُستخدم أجهزة الكمبيوتر 
المزودة بآلاف وحدات المعالجة المركزية في العمليات الحسابية المكثفةمهام الحوسبة 
العلمية sive ، مثل التنبؤ بالطقس أو الجزيئيةديناميات (محاكاة حركة الذرات 
والجزيئات).• في الطرف الآخر توجد الحوسبة السحابية ، وهي غير محددة جيدًا [ 6]، 
لكن هوغالبًا ما ترتبط بمراكز بيانات متعددة المستأجرين ، وأجهزة كمبيوتر سلعة 
متصلةمع شبكة IP (غالبًا Ethernet) ، وتخصيص موارد مرن / حسب الطلب ، والفواتير 
المقننة.• تقع مراكز بيانات المؤسسات التقليدية في مكان ما بين هذين النقيضين.مع 
هذه الفلسفات تأتي مناهج مختلفة جدًا للتعامل مع الأخطاء. فيالكمبيوتر العملاق ، 
وظيفة عادة ما تحقق من حالة حسابها إلى دائمالتخزين من وقت لآخر. إذا فشلت عقدة 
واحدة ، فإن الحل الشائع هو ببساطة إيقافعبء عمل الكتلة بأكمله. بعد إصلاح العقدة 
المعيبة ، تتم إعادة الحسابمن آخر نقطة تفتيش [7، 8]. وبالتالي ، فإن الكمبيوتر 
العملاق يشبه إلى حد كبير عقدة واحدةالكمبيوتر من نظام موزع: يتعامل مع الفشل 
الجزئي عن طريق السماح له بالتصعيدفي حالة فشل تام - إذا فشل أي جزء من النظام ، 
فقط دع كل شيء يتعطل (مثل ker‐nel الذعر على جهاز واحد).أجهزة الكمبيوتر العملاقة 
مبنية من أجهزة متخصصة ، حيث تكون كل عقدة وثيقة الصلة تمامًا.بلي ، وتتواصل العقد 
من خلال الذاكرة المشتركة والذاكرة المباشرة البعيدةالعيوب والفشل الجزئي | 267

      الصفحة 290
الوصول (RDMA). غالبًا ما يستخدمون طبولوجيا الشبكة المتخصصة ، مثل الوسائط 
المتعددةشبكات وحواف دائرية [9]. هذه التقنيات تسفر عن أداء جيد جدا وموثوقية كافية 
لحالات استخدام HPC.في هذا الكتاب نركز على أنظمة تنفيذ خدمات الإنترنت والتي 
عادةتبدو مختلفة جدًا عن أجهزة الكمبيوتر العملاقة:• العديد من التطبيقات المتصلة 
بالإنترنت هي على الانترنت ، بمعنى أنها تحتاج إلى أن تكونقادر على خدمة المستخدمين 
بوقت استجابة منخفض في أي وقت. جعل الخدمة غير متاحة ،على سبيل المثال ، إيقاف 
الكتلة للإصلاح ، أمر غير مقبول. هذا مختلفمن وظائف غير متصلة بالإنترنت (مجمعة) 
مثل محاكاة الطقس ، والتي يمكن إيقافها وإعادة التشغيل بتأثير منخفض نسبيًا.• نفترض 
أن العقد مبنية من آلات سلعية يمكنها توفيرهاأداء مكافئ بتكلفة أقل من الأجهزة 
المتخصصة (بسبب econo‐mies من الحجم) ، ولكن لديها أيضًا معدلات فشل أعلى.• غالبًا 
ما تعتمد شبكات مراكز البيانات الكبيرة على IP و Ethernet ، مرتبة في Closطبولوجيا 
لتوفير نطاق ترددي عالي التنصيف [10].• كلما زاد حجم النظام ، زاد احتمال أن يكون 
أحد مكوناته هو bro‐كين. بمرور الوقت ، يتم إصلاح الأشياء المعطلة وتنكسر الأشياء 
الجديدة ، ولكن في نظاممع الآلاف من العقد ، فمن المعقول أن نفترض أن هناك شيئًا ما 
دائمًاكين [7 ]. إذا كانت إستراتيجية معالجة الأخطاء تتكون من الاستسلام ببساطة ، 
فسيكون هذا الحجم كبيرًالن يعمل النظام أبدًا.• إذا كان النظام يمكن أن يتسامح مع 
العقد الفاشلة ، ولا يزال يعمل بشكل كامل ، فهذه ملفميزة مفيدة جدًا للعمليات 
والصيانة: على سبيل المثال ، يمكنكشكل ترقية متجددة (انظر الفصل 4) ، إعادة تشغيل 
عقدة واحدة في كل مرة ، بينماتواصل الخدمة خدمة المستخدمين دون انقطاع. في البيئات 
السحابية ، إذاجهاز ظاهري واحد لا يعمل بشكل جيد ، يمكنك فقط القضاء عليه وطلب 
ملفواحد (على أمل أن يكون الجديد أسرع).• في عملية نشر موزعة جغرافياً (إبقاء 
البيانات قريبة جغرافياً منلتقليل وقت استجابة المستخدمين) ، فمن المرجح أن يتجاوز 
الاتصالالإنترنت ، وهو بطيء وغير موثوق به مقارنة بالشبكات المحلية.إذا أردنا أن 
نجعل الأنظمة الموزعة تعمل ، يجب أن نقبل إمكانية الجزئيةالفشل ، وبناء آليات 
التسامح مع الخطأ في البرنامج. بعبارة أخرى ، نحنبحاجة إلى بناء نظام موثوق به من 
مكونات غير موثوقة. (كما تمت مناقشته في "Relia‐bility "في الصفحة 4، لا يوجد شيء 
مثل الموثوقية الكاملة ، لذلك سنحتاج إلى التقليل منتحمل حدود ما يمكننا أن نعد به 
بشكل واقعي.)حتى في الأنظمة الأصغر ، التي تتكون من عدد قليل من العقد ، من المهم 
التفكير فيهافشل جزئي. في نظام صغير ، من المحتمل جدًا أن تكون معظم المكوناتتعمل 
بشكل صحيح في معظم الأوقات. ومع ذلك ، عاجلاً أم آجلاً ، جزء من النظامسوف تصبح 
خلل، ويقوم البرنامج أن التعامل معها بطريقة أو بأخرى. خطأ هانو268 | الفصل الثامن: 
مشكلة الأنظمة الموزعة

      الصفحة 291
يجب أن تكون dling جزءًا من تصميم البرنامج ، وأنت (كمشغل للبرنامج) بحاجةلمعرفة 
السلوك المتوقع من البرنامج في حالة حدوث خطأ.سيكون من غير الحكمة افتراض أن العيوب 
نادرة ، ونأمل ببساطة في الأفضل. أنهمن المهم النظر في مجموعة واسعة من الأخطاء 
المحتملة - حتى العيوب غير المحتملة إلى حد ما -ولإنشاء مثل هذه المواقف بشكل مصطنع 
في بيئة الاختبار الخاصة بك ، لمعرفة ما يحدثأقلام. في الأنظمة الموزعة ، الريبة 
والتشاؤم والبارانويا تؤتي ثمارها.بناء نظام موثوق به من مكونات غير موثوقةقد 
تتساءل عما إذا كان هذا منطقيًا - قد يبدو بديهيًا وكأنه نظاميمكن أن يكون tem 
موثوقًا فقط مثل أقل مكوناته موثوقية ( الحلقة الأضعف ). هذا هوليس هذا هو الحال: 
في الواقع ، إنها فكرة قديمة في مجال الحوسبة لبناء نظام أكثر موثوقيةمن قاعدة 
أساسية أقل موثوقية [ 11 ]. فمثلا:• تسمح رموز تصحيح الأخطاء بنقل البيانات الرقمية 
بدقة عبر أقناة اتصال تتسبب أحيانًا في خطأ بعض البتات ، على سبيل المثال 
بسببللتداخل اللاسلكي على شبكة لاسلكية [ 12 ].• IP (بروتوكول الإنترنت) غير موثوق 
به ، أي أنه قد يسقط أو يؤخر أو يكرر أو يعيدحزم دير. يوفر TCP (بروتوكول التحكم في 
الإرسال) أكثر موثوقيةطبقة النقل أعلى IP: تضمن إعادة إرسال الحزم المفقودة ،يتم 
التخلص من النسخ المكررة ، ويتم إعادة تجميع الحزم بالترتيب الذيتم إرسالها.على 
الرغم من أن النظام يمكن أن يكون أكثر موثوقية من أجزائه الأساسية ، إلا أنه يوجد 
دائمًا ملفحد لمدى يمكن أن يكون أكثر موثوقية. على سبيل المثال ، يمكن لرموز تصحيح 
الأخطاءتعامل مع عدد صغير من الأخطاء أحادية البت ، ولكن إذا تم إغراق إشارتك 
بواسطة interference ، هناك حد أساسي لمقدار البيانات التي يمكنك الحصول عليها من 
خلالقناة اتصال [ 13 ]. يمكن لـ TCP إخفاء فقدان الحزم والازدواجية وإعادة 
الترتيبمنك ، لكنه لا يمكنه إزالة التأخيرات في الشبكة بطريقة سحرية.على الرغم من 
أن نظام المستوى الأعلى الأكثر موثوقية ليس مثاليًا ، إلا أنه لا يزال مفيدًا ، 
لأنهإنه يعتني ببعض الأخطاء الصعبة ذات المستوى المنخفض ، وبالتالي فإن العيوب 
المتبقية تكون معتادةحليف أسهل في التفكير والتعامل معه.شبكات غير موثوقةالأنظمة 
الموزعة التي نركز عليها في هذا الكتاب هي أنظمة لا شيء مشترك ، أي أمجموعة من 
الآلات متصلة بشبكة. الشبكة هي الطريقة الوحيدة كيف هؤلاءيمكن للآلات التواصل - 
نفترض أن لكل جهاز ذاكرته الخاصةوالقرص ، ولا يمكن لجهاز واحد الوصول إلى ذاكرة أو 
قرص جهاز آخر (باستثناءمن خلال تقديم طلبات إلى خدمة عبر الشبكة).شبكات غير موثوقة 
| 269

      الصفحة 292
الإنترنت ، ومعظم الشبكات الداخلية في مراكز البيانات (غالبًا إيثرنت) ، غير 
متزامنشبكات الحزم المزمنة . في هذا النوع من الشبكات ، يمكن لعقدة واحدة إرسال 
رسالة (apacket) إلى عقدة أخرى ، لكن الشبكة لا تقدم أي ضمانات بشأن موعد وصولها 
،أو ما إذا كان سيصل أصلاً. إذا أرسلت طلبًا وتوقعت ردًا ، فالكثيريمكن أن تسوء 
الأمور (بعضها موضَّح في الشكل 8-1):1. قد يكون طلبك قد فُقد (ربما بسبب فصل شخص ما 
للشبكة‐كابل العمل) ؛2. قد يكون طلبك قيد الانتظار في قائمة انتظار وسيتم تسليمه 
لاحقًا (ربما يكون مستحقًاللشبكة أو المتلقي مثقل) ؛3. قد تكون العقدة البعيدة قد 
فشلت (ربما بسبب تعطلها أو تشغيلهاأسفل)؛4. ربما توقفت العقدة البعيدة عن الاستجابة 
مؤقتًا (ربما لأنها كذلكتواجه توقفًا مؤقتًا طويلاً لجمع البيانات المهملة ، راجع 
"توقف العملية مؤقتًا" في الصفحة 287) ،لكنها ستبدأ في الاستجابة مرة أخرى لاحقًا 
؛5. قد تكون العقدة البعيدة قد عالجت طلبك ، ولكن تم فقد الاستجابةعلى الشبكة (ربما 
بسبب تبديل غير صحيح) ؛6. قد تكون العقدة البعيدة قد عالجت طلبك ، لكن الاستجابة 
كانت كذلكمتأخر وسيتم تسليمه لاحقًا (ربما بسبب الشبكة أو الشبكة الخاصة بكالآلة 
محملة فوق طاقتها).عميلشبكةخدمةالوقتحسنا؟؟؟(أ)(ب)(ج)؟؟؟؟؟؟عقدة لا تستجيبالشكل 
8-1. إذا أرسلت طلبًا ولم تحصل على رد ، فلا يمكن التمييزسواء (أ) فُقد الطلب ، (ب) 
كانت العقدة البعيدة معطلة ، أو (ج) كانت الاستجابةضائع.لا يستطيع المرسل حتى معرفة 
ما إذا تم تسليم الحزمة: الطريقة الوحيدة لمعرفة ذلكما إذا كان قد وصل إلى المستلم 
لإرسال رسالة رد ، والتي قد بدورهاتضيع أو تتأخر. لا يمكن التمييز بين جميع 
المشكلات المذكورة أعلاه في ملفالشبكة: المعلومات الوحيدة التي لديك هي أنك لم تتلق 
ردًا بعد. لوترسل طلبًا إلى عقدة أخرى ولا تتلقى ردًا ، فمن المستحيل أن تفعل 
ذلكاقول لماذا.270 | الفصل الثامن: مشكلة الأنظمة الموزعة

      الصفحة 293
الطريقة المعتادة للتعامل مع هذا هي مهلة : بعد بعض الوقت تتخلى عن الانتظار وافترض 
أن الرد لن يصل. ومع ذلك ، عند حدوث مهلة ، أنتما زلت لا تعرف ما إذا كانت العقدة 
البعيدة قد حصلت على طلبك أم لا (وإذا كان الطلبلا يزال في قائمة الانتظار في مكان 
ما ، ربما لا يزال يتم تسليمه إلى المستلم ، حتى لو كان المرسلتخلى عنها).أخطاء 
الشبكة في الممارسةلقد قمنا ببناء شبكات الكمبيوتر لعقود - قد يأمل المرء في 
ذلكالآن كنا قد اكتشفنا كيفية جعلها موثوقة. ومع ذلك ، يبدو أنلم ننجح بعد.هناك بعض 
الدراسات المنهجية والكثير من الأدلة القصصية التي توضح ذلكيمكن أن تكون مشاكل 
الشبكة شائعة بشكل مدهش ، حتى في البيئات الخاضعة للرقابة مثلمركز بيانات تديره 
شركة واحدة [14]. دراسة واحدة في مركز بيانات متوسط ​​الحجموجدت حوالي 12 عطلًا في 
الشبكة شهريًا ، نصفها مقطوعًا واحدًاآلة ، ونصف رف كامل مفصول [ 15]. دراسة أخرى 
قياس الفشل‐المعدلات الحالية للمكونات مثل المفاتيح العلوية للرف ومفاتيح التجميع 
وحزمة التحميلالسلف [16 ]. وجدت أن إضافة معدات الشبكات الزائدة عن الحاجة لا تقلل 
من الأخطاء كما هو الحالبقدر ما تتمنى ، لأنه لا يحمي من الخطأ البشري (على سبيل 
المثال ، خطأ في التكوينمفاتيح) ، وهو سبب رئيسي لانقطاع التيار.على سبيل المثال ، 
تشتهر الخدمات السحابية العامة مثل EC2 بتكرارهايمكن أن تكون مواطن الخلل المؤقتة 
في الشبكة [ 14 ] وشبكات مراكز البيانات الخاصة المُدارة جيدًابيئة أكثر استقرارًا. 
ومع ذلك ، لا أحد محصن من مشاكل الشبكةlems: على سبيل المثال ، قد تؤدي مشكلة أثناء 
ترقية برنامج التبديل إلى تشغيل net‐إعادة تكوين طوبولوجيا العمل ، والتي يمكن 
خلالها تأخير حزم الشبكة من أجلأكثر من دقيقة [17]. تشمل الأخطاء المدهشة الأخرى 
واجهة الشبكة التييسقط أحيانًا جميع الحزم الواردة ، لكنه يرسل الحزم الصادرة بنجاح 
[ 18]:فقط لأن ارتباط الشبكة يعمل في اتجاه واحد لا يضمن أنه يعمل أيضًافي الاتجاه 
المعاكس.أقسام الشبكةعندما ينقطع جزء من الشبكة عن الباقي بسبب الشبكة‐خطأ في العمل 
، يسمى أحيانًا قسم الشبكة أو netsplit .في هذا الكتاب ، سنلتزم بالمصطلح الأكثر 
عمومية لخطأ الشبكة ، إلىتجنب الالتباس مع أقسام (شظايا) نظام التخزين ، مثل 
dis‐لعن في الفصل 6.حتى لو كانت أعطال الشبكة نادرة في بيئتك ، فإن حقيقة حدوث 
أعطال يمكن أن تحدثيعني أن برنامجك يحتاج إلى أن يكون قادرًا على التعامل معها. 
كلما حدث أي اجتماعيحدث الكاتيون عبر شبكة ، وقد يفشل - لا توجد طريقة للتغلب 
عليه.شبكات غير موثوقة | 271

      الصفحة 294
إذا لم يتم تحديد معالجة الخطأ لأخطاء الشبكة واختبارها ، فهناك أشياء سيئة بشكل 
تعسفييمكن أن يحدث: على سبيل المثال ، يمكن أن تصبح الكتلة في طريق مسدود ودائمغير 
قادر على خدمة الطلبات ، حتى عندما تتعافى الشبكة [19 ] ، أو حتى حذفهاجميع بياناتك 
[ 20]. إذا تم وضع البرنامج في موقف غير متوقع ، فقد يفعل ذلك.أشياء غير متوقعة غير 
متوقعة.لا يعني التعامل مع أخطاء الشبكة بالضرورة تحملها : إذا كانت شبكتك كذلكعادة 
ما تكون موثوقة إلى حد ما ، قد يكون الأسلوب الصحيح هو إظهار رسالة خطأ 
إلىالمستخدمين بينما تواجه شبكتك مشاكل. ومع ذلك ، أنت بحاجة إلى معرفةكيف يتفاعل 
برنامجك مع مشاكل الشبكة ، والتأكد من قدرة النظام على ذلكالتعافي منهم. قد يكون من 
المنطقي تشغيل مشاكل الشبكة عمدًا واختبر استجابة النظام ( قرد الفوضى ، راجع 
"الموثوقية" في الصفحة 4).كشف الأعطالتحتاج العديد من الأنظمة إلى اكتشاف العقد 
المعيبة تلقائيًا ، على سبيل المثال:• موازن تحميل يحتاج إلى التوقف عن إرسال 
الطلبات إلى العقدة التي مات (أعتبر خارجمن التناوب ) ؛• في قاعدة بيانات موزعة مع 
تكرار القائد الفردي ، إذا فشل القائد ، واحد منيحتاج المتابعون إلى الترقية 
ليكونوا القائد الجديد (راجع "عقدة المناولةالانقطاع "في الصفحة 150).لسوء الحظ ، 
فإن عدم اليقين بشأن الشبكة يجعل من الصعب معرفة ما إذا كان ملفالعقدة تعمل أم لا. 
في بعض الظروف المحددة قد تحصل على بعض الملاحظاتلإخبارك صراحة أن هناك شيئًا ما لا 
يعمل:• إذا كان بإمكانك الوصول إلى الجهاز الذي يجب أن تعمل العقدة عليه ، ولكن 
بدون احترافcess يستمع إلى منفذ الوجهة (على سبيل المثال بسبب تعطل العملية) ، فإن 
ملفسيقوم نظام التشغيل بشكل مفيد بإغلاق أو رفض اتصالات TCP عن طريق إرسال RSTأو 
حزمة FIN ردًا. ومع ذلك ، إذا تعطلت العقدة أثناء تعاملها مع ملفطلب ، ليس لديك 
طريقة لمعرفة مقدار البيانات التي تمت معالجتها بالفعلالعقدة البعيدة [ 21].• إذا 
تعطلت عملية العقدة (أو قُتل من قبل المسؤول) ، لكن العقدةنظام التشغيل لا يزال قيد 
التشغيل ، يمكن للبرنامج النصي إخطار العقد الأخرى عن التعطل ،بحيث يمكن لعقدة أخرى 
تولي زمام الأمور بسرعة دون الحاجة إلى انتظار انتهاء المهلةلتنتهي. على سبيل 
المثال ، يقوم HBase بهذا [22].• إذا كان لديك حق الوصول إلى واجهة إدارة محولات 
الشبكة في الخاص بكمركز البيانات ، يمكنك الاستعلام عنها لاكتشاف حالات فشل 
الارتباط على مستوى الأجهزة (على سبيل المثال ، ifيتم إيقاف تشغيل الجهاز البعيد). 
هذا الخيار مستبعد إذا كنتnecting عبر الإنترنت ، أو إذا كنت في مركز بيانات مشترك 
بدون وصول إلىيبدلون أنفسهم ، أو إذا لم تتمكن من الوصول إلى واجهة الإدارة بسبب 
الشبكة‐مشكلة العمل.272 | الفصل الثامن: مشكلة الأنظمة الموزعة

      الصفحة 295
• إذا كان جهاز التوجيه متأكدًا من أن عنوان IP الذي تحاول الاتصال به لا يمكن 
الوصول إليه ، فإنهقد يرد عليك بحزمة ICMP Destination Unreachable. ومع ذلك ، 
فإنلا يمتلك جهاز التوجيه أيضًا قدرة سحرية على اكتشاف الفشل - فهو يخضع لذلكنفس 
القيود المفروضة على المشاركين الآخرين في الشبكة.التعليقات السريعة حول تعطل 
العقدة البعيدة مفيدة ، لكن لا يمكنك الاعتماد عليها.حتى إذا اعترف TCP بتسليم حزمة 
، فقد يكون لدى التطبيقتحطمت قبل التعامل معها. إذا كنت تريد التأكد من نجاح الطلب 
، فأنتبحاجة إلى استجابة إيجابية من التطبيق نفسه [ 23].على العكس من ذلك ، إذا حدث 
خطأ ما ، فقد تحصل على استجابة خطأ في البعضمستوى المكدس ، ولكن بشكل عام عليك أن 
تفترض أنك لن تحصل على أي استجابة عندالكل. يمكنك إعادة المحاولة عدة مرات (يعيد 
TCP المحاولة بشفافية ، ولكن يمكنك أيضًا إعادة المحاولة فيمستوى التطبيق) ، وانتظر 
انقضاء المهلة ، وأخيراً أعلن أن العقدة ميتة إذالم تسمع رد خلال المهلة.المهلات 
والتأخيرات غير المحدودةإذا كانت المهلة هي الطريقة الوحيدة المؤكدة لاكتشاف الخطأ 
، فما المدة التي يجب أن يستغرقها الوقت؟يكون خارج؟ لا توجد إجابة بسيطة للأسف.تعني 
المهلة الطويلة الانتظار طويلاً حتى يتم إعلان موت العقدة (وخلال هذا الوقت ،قد 
يضطر المستخدمون إلى الانتظار أو رؤية رسائل الخطأ). مهلة قصيرة تكتشف الأعطال بشكل 
أسرع ،ولكنها تنطوي على مخاطر أعلى عندما تعلن خطأً أن العقدة ميتة ، بينما في 
الحقيقة هي فقط suf‐تسبب في حدوث تباطؤ مؤقت (على سبيل المثال بسبب ارتفاع الحمل 
على العقدة أو الشبكة).إعلان موت العقدة قبل الأوان يمثل مشكلة: حيث أن مسؤولياته 
هي نقلباللون الأحمر للعقد الأخرى ، يتم وضع حمل إضافي على العقد الأخرى والشبكة. 
إذا كانيعاني النظام بالفعل من الحمل الكبير ، معلناً أن العقد ميتة قبل الأوانتجعل 
المشكلة أسوأ ، بل وتسبب فشلًا متتاليًا (في الحالة القصوى ، كل شيءقد تعلن العقد 
عن موت بعضها البعض ، ويتوقف كل شيء عن العمل).تخيل نظامًا وهميًا بشبكة تضمن أقصى 
تأخير لـالحزم - إما تسليم كل علبة داخل بعض الوقت د ، أو فقدانها، ولكن أبدايستغرق 
وقتًا أطول من د . علاوة على ذلك ، افترض أنه يمكنك ضمان عدم فشل ملفالعقدة تتعامل 
دائمًا مع الطلب في غضون بعض الوقت r . في هذه الحالة ، يمكنك أن تضمنأن كل طلب 
ناجح يتلقى ردًا في غضون الوقت 2 d + r - وإذا كنتلا تتلقى ردًا في غضون ذلك الوقت 
، فأنت تعلم أن إما الشبكة أوالعقدة البعيدة لا تعمل. إذا كان هذا صحيحًا ، فسيكون 
2 d + r مهلة معقولة لـاستعمال.لسوء الحظ ، فإن معظم الأنظمة التي نعمل معها ليس 
لديها أي من هذه الضمانات:الشبكات المزمنة لها تأخيرات غير محدودة (أي أنها تحاول 
تسليم الحزم كـبأسرع ما يمكن ، ولكن لا يوجد حد أقصى للوقت الذي قد تستغرقه الحزمة) 
، ولا يمكن أن تضمن معظم تطبيقات الخادم أنها تستطيع معالجة الطلبات بداخلهاشبكات 
غير موثوقة | 273

      الصفحة 296
بعض الوقت الأقصى (راجع "ضمانات وقت الاستجابة" في الصفحة 289). للكشف عن الفشللن 
يكون كافيًا أن يكون النظام سريعًا معظم الوقت: إذا كانت مهلة لديكمنخفضة ، لا 
يتطلب الأمر سوى ارتفاعًا عابرًا في أوقات الذهاب والإياب لإيقاف تشغيل 
النظام-الرصيد.ازدحام الشبكة والاصطفافعند قيادة السيارة ، غالبًا ما تختلف أوقات 
السفر على شبكات الطرق بسبب ضوابط حركة المرور.لفتة. وبالمثل ، غالبًا ما يكون تنوع 
تأخيرات الحزم على شبكات الكمبيوتربسبب الاصطفاف [ 24]:• إذا حاولت عدة عقد مختلفة 
في وقت واحد إرسال حزم إلى نفس المصير‐نشوئها ، يجب أن يقوم مفتاح الشبكة بوضعهم في 
قائمة الانتظار وإدخالهم في الوجهةربط الشبكة واحدًا تلو الآخر (كما هو موضح في 
الشكل 8-2). على ارتباط شبكة مشغول ، أقد تضطر الحزمة إلى الانتظار بعض الوقت حتى 
تحصل على فتحة (وهذا ما يسمى بربط الشبكة)لفتة ). إذا كان هناك الكثير من البيانات 
الواردة بحيث تملأ قائمة انتظار التبديل ، فإن ملفتم إسقاط الحزمة ، لذا يجب إعادة 
إرسالها - على الرغم من أن الشبكة تعملtioning غرامة.• عندما تصل الحزمة إلى الجهاز 
الوجهة ، إذا كانت جميع نوى وحدة المعالجة المركزية حاليًامشغول ، يتم وضع الطلب 
الوارد من الشبكة في قائمة الانتظار بواسطة نظام التشغيلحتى يصبح التطبيق جاهزًا 
للتعامل معه. اعتمادًا على الحمل على الجهاز ،قد يستغرق هذا وقتًا تعسفيًا.• في 
البيئات الافتراضية ، غالبًا ما يتم إيقاف نظام التشغيل قيد التشغيل مؤقتًا لعشرات 
السنينملي ثانية بينما يستخدم جهاز ظاهري آخر نواة وحدة المعالجة المركزية. خلال 
هذه المده،لا يمكن للجهاز الظاهري استهلاك أي بيانات من الشبكة ، وبالتالي فإن 
البيانات الواردة هيفي قائمة الانتظار (مخزنة) بواسطة شاشة الجهاز الظاهري [ 25]. 
هذا يزيد منتقلب تأخيرات الشبكة.• يقوم بروتوكول التحكم في الإرسال ( TCP) بالتحكم 
في التدفق (تجنب الازدحام) ، حيث تقوم العقدة بتحديد نطاقهامعدل الإرسال الخاص 
لتجنب التحميل الزائد على ارتباط الشبكة أو المستلمعقدة [ 26]. هذا يعني طابور 
إضافي عند المرسل ، قبل حتى البياناتيدخل الشبكة.• يعتبر TCP الحزمة مفقودة إذا لم 
يتم الاعتراف بها خلال مهلة معينة(والتي يتم حسابها من أوقات الذهاب والإياب 
الملحوظة) ، والحزم المفقودة تلقائيةأعيد إرسالها تلقائيًا. على الرغم من أن 
التطبيق لا يرى فقدان الحزمةوإعادة الإرسال ، فإنه يرى التأخير الناتج (انتظار 
المهلة إلىتنتهي صلاحيتها ، ثم تنتظر استلام الحزمة المعاد إرسالها).274 | الفصل 
الثامن: مشكلة الأنظمة الموزعة

      الصفحة 297
مبدل الشبكةروابط الإخراجروابط الإدخالالمنفذ 1المنفذ 2المنفذ 3المنفذ 4المنفذ 
1المنفذ 2المنفذ 3المنفذ 4قوائم الإخراجتبديل النسيجالشكل 8-2. إذا قامت عدة أجهزة 
بإرسال حركة مرور الشبكة إلى نفس الوجهة ، فسيتم تبديلهايمكن أن تملأ قائمة 
الانتظار. هنا ، تحاول المنافذ 1 و 2 و 4 إرسال حزم إلى المنفذ 3.TCP مقابل UDPبعض 
التطبيقات الحساسة لزمن الانتقال ، مثل مؤتمرات الفيديو والصوت عبر بروتوكول 
الإنترنت ،استخدم UDP بدلاً من TCP. إنها مفاضلة بين الموثوقية وتنوع 
التأخيرات:نظرًا لأن UDP لا يقوم بالتحكم في التدفق ولا يعيد إرسال الحزم المفقودة 
، فإنه يتجنبهابعض أسباب تأخيرات الشبكة المتغيرة (على الرغم من أنها لا تزال عرضة 
لتبديل قوائم الانتظار وجدولة التأخيرات).يعد UDP اختيارًا جيدًا في المواقف التي 
لا قيمة فيها للبيانات المتأخرة. على سبيل المثال ، في ملفمكالمة هاتفية عبر 
بروتوكول الإنترنت الصوتي ، ربما لا يوجد وقت كافٍ لإعادة إرسال حزمة مفقودةقبل أن 
يتم تشغيل بياناتها عبر مكبرات الصوت. في هذه الحالة ، لا فائدة من ذلكفي إعادة 
إرسال الحزمة - يجب أن يملأ التطبيق الحزمة المفقودة بدلاً من ذلكالفتحة الزمنية مع 
الصمت (تسبب مقاطعة وجيزة في الصوت) ، والمضي قدمًا فيمجرى.تساهم كل هذه العوامل في 
تباين تأخيرات الشبكة. التأخيرات في قائمة الانتظارلها نطاق واسع بشكل خاص عندما 
يكون النظام قريبًا من سعته القصوى: نظاميمكن أن يؤدي tem مع الكثير من السعة 
الاحتياطية بسهولة إلى استنزاف قوائم الانتظار ، بينما يتم استخدامها بشكل 
كبيرالنظام ، يمكن أن تتراكم قوائم الانتظار الطويلة بسرعة كبيرة.في السحابة العامة 
ومراكز البيانات متعددة المستأجرين ، تتم مشاركة الموارد بين العديد من 
العملاءtomers: روابط ومفاتيح الشبكة ، وحتى واجهة شبكة كل جهازووحدات المعالجة 
المركزية (عند التشغيل على الأجهزة الافتراضية) مشتركة. أعباء العمل المجمعة 
مثليمكن لـ MapReduce (انظر الفصل 10 ) تشبع روابط الشبكة بسهولة. لأنك ليس لديك 
كونترويل أو نظرة ثاقبة على استخدام العملاء الآخرين للموارد المشتركة ، وتأخيرات 
الشبكةيمكن أن يكون متغيرًا بدرجة كبيرة إذا كان شخص ما بالقرب منك ( جار مزعج ) 
يستخدم الكثير من الموارد‐سيس [27 ،28].شبكات غير موثوقة | 275

      الصفحة 298
في مثل هذه البيئات ، يمكنك فقط اختيار المهلات بشكل تجريبي: قم بقياستوزيع مرات 
الشبكة ذهابًا وإيابًا على مدى فترة ممتدة وعلى مدى عدة مراتالآلات ، لتحديد 
التباين المتوقع للتأخيرات. ثم مع الأخذ بعين الاعتبارخصائص التطبيق الخاص بك ، 
يمكنك تحديد المقايضة المناسبةبين تأخير اكتشاف الفشل وخطر انتهاء المهلة 
المبكرة.والأفضل من ذلك ، بدلاً من استخدام المهلات الثابتة المكونة ، يمكن للأنظمة 
الاستمرارقياس أوقات الاستجابة وتغيرها ( الارتعاش ) ، وضبط الوقت تلقائيًا‐الرافضة 
وفقًا لتوزيع وقت الاستجابة المرصود. يمكن القيام بذلك باستخدام ملفكاشف الفشل Phi 
Accrual [ 29 ] ، والذي يستخدم على سبيل المثال في عكا وكاساندرا[30]. تعمل مهلات 
إعادة الإرسال TCP بشكل مشابه [ 26 ].الشبكات المتزامنة مقابل الشبكات غير 
المتزامنةستكون الأنظمة الموزعة أبسط كثيرًا إذا استطعنا الاعتماد على الشبكة 
لتقديمهاالحزم مع بعض التأخير الأقصى الثابت ، وعدم إسقاط الحزم. لماذا لا نستطيعحل 
هذا على مستوى الأجهزة ، وجعل الشبكة موثوقة بحيث البرنامجلا داعي للقلق بشأن 
ذلك؟للإجابة على هذا ، من المثير للاهتمام مقارنة شبكات مراكز البيانات بالشبكات 
التقليديةشبكة الهاتف الثابت (غير الخلوية وغير الصوتية عبر بروتوكول الإنترنت) ، 
وهو أمر بالغ الأهميةموثوق: إطارات الصوت المتأخرة والمكالمات المفقودة نادرة جدًا. 
تتطلب المكالمة الصوتية أانخفاض زمن الانتقال من طرف إلى طرف باستمرار ، ونطاق 
ترددي كافٍ لنقل sam الصوتيمن فضلك من صوتك. ألن يكون من الجيد أن يكون لديك نفس 
الموثوقية والقدرة على التنبؤ فيشبكات الحاسب؟عندما تجري مكالمة عبر شبكة الهاتف ، 
فإنها تنشئ دائرة : ثابتة ،يتم تخصيص مقدار مضمون من النطاق الترددي للمكالمة ، على 
طول المسار بالكاملبين المتصلين. تظل هذه الدائرة في مكانها حتى تنتهي المكالمة [ 
31]. إلى عن علىعلى سبيل المثال ، تعمل شبكة ISDN بمعدل ثابت يبلغ 4000 إطار في 
الثانية. عندماتم إنشاء النداء ، يتم تخصيص 16 بتة من الفضاء داخل كل رتل (في كل 
اتجاه).وبالتالي ، طوال مدة المكالمة ، يضمن كل جانب أن يتمكن من إرسال 16 بالضبطبت 
من البيانات الصوتية كل 250 ميكروثانية [ 32، 33 ]هذا النوع من الشبكات متزامن : 
حتى عندما تمر البيانات عبر العديد من أجهزة التوجيه ، فإنهالا يعاني من الانتظار 
في قائمة الانتظار ، لأن مساحة 16 بت للمكالمة موجودة بالفعلتم حجزه في القفزة 
التالية من الشبكة. ولأنه لا يوجد طابور ، فإن ملفتم إصلاح أقصى زمن انتقال من طرف 
إلى طرف للشبكة. نسمي هذا تأخيرًا محدودًا .لا يمكننا ببساطة أن نجعل تأخيرات 
الشبكة متوقعة؟لاحظ أن الدائرة في شبكة الهاتف مختلفة تمامًا عن اتصال TCP: 
أالدائرة هي مقدار ثابت من عرض النطاق الترددي المحجوز الذي لا يمكن لأي شخص آخر 
استخدامه أثناءيتم إنشاء الدائرة ، في حين تستخدم حزم اتصال TCP بشكل انتهازيأي عرض 
النطاق الترددي للشبكة متاح. يمكنك إعطاء TCP كتلة متغيرة الحجم من276 | الفصل 
الثامن: مشكلة الأنظمة الموزعة

      الصفحة 299
ثانيا. ربما باستثناء حزمة Keepalive عرضية ، إذا تم تمكين TCP keepalive.ثالثا. 
كان وضع النقل غير المتزامن (ATM) منافسًا لشبكة إيثرنت في الثمانينيات [ 31 ] ، 
لكنه لم يكسبالكثير من الاعتماد خارج المحولات الأساسية لشبكة الهاتف. لا علاقة له 
بالصراف الآليالآلات (المعروفة أيضًا باسم ماكينات النقد) ، على الرغم من مشاركة 
الاختصار. ربما ، في بعض الكون الموازي ، فإنيعتمد الإنترنت على شيء مثل ATM - في 
هذا الكون ، من المحتمل أن تكون مكالمات الفيديو عبر الإنترنت أكثر موثوقيةأكثر مما 
هي عليه في بلدنا ، لأنهم لا يعانون من الحزم الساقطة والمتأخرة.رابعا. اتفاقيات 
التناظرية بين مزودي خدمة الإنترنت ، وإنشاء طرق عبر BGP ،تحمل تشابهًا أوثق مع 
تبديل الدائرة من IP نفسه. في هذا المستوى ، من الممكن شراء فرقة مخصصة‐العرض. ومع 
ذلك ، يعمل توجيه الإنترنت على مستوى الشبكات ، وليس الاتصالات الفردية بين 
المضيفين ،وعلى نطاق زمني أطول بكثير.البيانات (مثل صفحة الويب) ، وسيحاول نقلها في 
أقصر وقت ممكن. بينمااتصال TCP خامل ، ولا يستخدم أي نطاق ترددي. ثانياإذا كانت 
شبكات مراكز البيانات والإنترنت عبارة عن شبكات بتبديل الدارات ، فستكون كذلكمن 
الممكن إنشاء حد أقصى مضمون للرحلة ذهابًا وإيابًا عند ضبط الدائرةأعلى. ومع ذلك ، 
فهي ليست كذلك: Ethernet و IP بروتوكولات مبدلة معبأة ، والتيمن الاصطفاف وبالتالي 
التأخيرات غير المحدودة في الشبكة.لماذا تستخدم شبكات مراكز البيانات والإنترنت 
تبديل الحزم؟ الجواب هوأنها مُحسَّنة لحركة المرور السريعة . الدائرة جيدة لإجراء 
مكالمة صوتية أو مكالمة فيديو ،الذي يحتاج إلى نقل عدد ثابت إلى حد ما من البتات في 
الثانية طوال المدةمن المكالمة. من ناحية أخرى ، طلب صفحة ويب أو إرسال بريد 
إلكتروني أو تحويل‐ring a file ليس له أي متطلبات نطاق ترددي معين - نحن نريده 
فقطأكمل في أسرع وقت ممكن.إذا كنت تريد نقل ملف عبر دائرة ، فسيتعين عليك تخمين 
النطاق التردديتوزيع. إذا كنت تخمن مستوى منخفضًا جدًا ، فسيكون النقل بطيئًا بشكل 
غير ضروري ، مما يؤدي إلى ترك الشبكةالقدرة غير المستخدمة. إذا كنت تخمن ارتفاعًا 
كبيرًا ، فلا يمكن إعداد الدائرة (لأن الشبكة‐لا يمكن أن يسمح العمل بإنشاء دائرة 
إذا كان تخصيص النطاق الترددي لا يمكن ضمانهانتيد). وبالتالي ، فإن استخدام الدوائر 
لنقل البيانات المتدفقة يهدر سعة الشبكة ويجعل عمليات النقل بطيئة بلا داع. على 
النقيض من ذلك ، يتكيف TCP ديناميكيًا مع معدلنقل البيانات إلى سعة الشبكة 
المتاحة.كانت هناك بعض المحاولات لبناء شبكات هجينة تدعم كلا الدائرتين-التبديل 
وتبديل الحزم ، على سبيل المثال أجهزة الصراف الآلي. iii يوجد لدى InfiniBand بعض 
أوجه التشابه [34 ]: عليهتنفذ التحكم في التدفق من طرف إلى طرف في طبقة الارتباط ، 
مما يقلل من الحاجة إلىقائمة الانتظار في الشبكة ، على الرغم من أنها لا تزال تعاني 
من التأخير بسبب وصلات الارتباط‐نشوئها [ 35]. مع الاستخدام الدقيق لجودة الخدمة 
(QoS ، تحديد الأولويات وجدولةالحزم) والتحكم في الدخول (المرسلون المقيّدون للسعر) 
، فمن الممكن محاكاتهاتبديل الدارات على شبكات الرزم ، أو توفير تأخير محدد 
إحصائيًا [ 24، 31 ].ومع ذلك ، فإن جودة الخدمة هذه غير ممكّنة حاليًا في مراكز 
البيانات متعددة المؤسساتوالسحب العامة ، أو عند الاتصال عبر الإنترنت. iv المنتشرة 
حاليالا تسمح لنا التكنولوجيا بتقديم أي ضمانات حول التأخير أو موثوقيةشبكات غير 
موثوقة | 277

      صفحة 300
الشبكة: علينا أن نفترض أن ازدحام الشبكة والاصطفاف وغير المحدودسيحدث تأخير. 
وبالتالي ، لا توجد قيمة "صحيحة" للمهلة - إنهاتحتاج إلى تحديد تجريبيا.الكمون 
واستخدام المواردبشكل عام ، يمكنك التفكير في التأخيرات المتغيرة كنتيجة 
للديناميكيةتقسيم الموارد.لنفترض أن لديك سلكًا بين مفتاحي هاتف يمكن أن يحمل ما 
يصل إلى 10000مكالمات متزامنة. كل دائرة يتم تبديلها عبر هذا السلك تحتل واحدة من 
هؤلاءفتحات المكالمات. وبالتالي يمكنك التفكير في السلك كمورد يمكن مشاركته 
حتى10000 مستخدم في وقت واحد. يتم تقسيم المورد بطريقة ثابتة : حتى لو كنتالمكالمة 
الوحيدة على السلك الآن ، وجميع الفتحات 9999 الأخرى غير مستخدمة ، دائرتك هيلا 
يزال يتم تخصيص نفس المقدار الثابت من عرض النطاق الترددي كما هو الحال عند استخدام 
السلك بالكامل.على النقيض من ذلك ، يشارك الإنترنت عرض النطاق الترددي للشبكة 
ديناميكيًا . المرسلون يدفعون ويتزاحم مع بعضهم البعض للحصول على حزمهم عبر السلك 
في أسرع وقت ممكن ، وتحدد محولات الشبكة الحزمة التي سيتم إرسالها (أي تخصيص عرض 
النطاق الترددي) منهامن لحظة إلى أخرى. هذا له الجانب السلبي في قائمة الانتظار ، 
ولكن الميزة هي ذلكيزيد من الاستفادة من السلك. السلك له تكلفة ثابتة ، لذلك إذا 
كنت تستخدمه رهانًاثالثًا ، كل بايت ترسله عبر السلك أرخص.ينشأ موقف مماثل مع وحدات 
المعالجة المركزية: إذا كنت تشارك كل نواة وحدة معالجة مركزية ديناميكيًابين عدة 
خيوط ، يجب أن ينتظر مؤشر ترابط واحد في نظام التشغيلقم بتشغيل قائمة الانتظار 
أثناء تشغيل مؤشر ترابط آخر ، لذلك يمكن إيقاف مؤشر ترابط مؤقتًا لتغييرهأطوال 
الوقت. ومع ذلك ، فإن هذا يستخدم الجهاز بشكل أفضل مما لو قمت بتخصيص ملفعدد ثابت 
من دورات وحدة المعالجة المركزية لكل مؤشر ترابط. يعد الاستخدام الأفضل للأجهزة 
أيضًا بمثابة إشارةدافع جيد لاستخدام الأجهزة الافتراضية.ضمانات زمن الوصول قابلة 
للتحقيق في بيئات معينة ، إذا كانت الموارد ثابتةمقسم (على سبيل المثال أجهزة مخصصة 
وتخصيصات حصرية لعرض النطاق). ومع ذلك،يأتي على حساب الاستخدام المنخفض - بعبارة 
أخرى ، يكون أكثر تكلفة. علىمن ناحية أخرى ، توفر الشركات المتعددة مع التقسيم 
الديناميكي للموارد استخدامًا أفضلlization ، لذلك فهو أرخص ، ولكن له جانب سلبي من 
التأخيرات المتغيرة.التأخيرات المتغيرة في الشبكات ليست قانونًا طبيعيًا ، ولكنها 
ببساطة نتيجة للتكلفة-فوائد المقايضة.ساعات غير موثوقةالساعات والوقت مهمان. 
تطبيقات تعتمد على الساعات في مختلفطرق ، على سبيل المثال:• هل انتهت مهلة هذا 
الطلب حتى الآن؟278 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 301
v. على الرغم من أن الساعة تسمى الوقت الفعلي ، إلا أنها لا علاقة لها بأنظمة 
التشغيل في الوقت الفعلي ، كما تمت مناقشتهفي "ضمانات وقت الاستجابة" في الصفحة 
289.• ما هو وقت الاستجابة المئوية 99 لهذه الخدمة؟• كم عدد الاستعلامات في الثانية 
التي قامت هذه الخدمة بمعالجتها في المتوسط ​​في آخر خمسةدقائق؟• في أي تاريخ ووقت 
ينبغي إرسال البريد الإلكتروني للتذكير؟• متى تنتهي صلاحية إدخال ذاكرة التخزين 
المؤقت هذا؟• ما هو الطابع الزمني على رسالة الخطأ هذه في ملف السجل؟تقيس الأمثلة 
الثلاثة الأولى المدة (على سبيل المثال ، الفاصل الزمني بين الطلبيتم إرسالها 
واستلام الرد) ، بينما تصف الثلاثة الأخيرة نقطة فيtime (حدث يقع في تاريخ معين ، 
في وقت معين).في النظام الموزع ، يعتبر الوقت عملًا صعبًا ، لأن التواصل ليس 
كذلكلحظية: يستغرق الأمر وقتًا حتى تنتقل رسالة عبر الشبكة من رسالة واحدةآلة لآخر. 
دائمًا ما يكون وقت استلام الرسالة متأخرًا عنالوقت الذي يتم إرساله فيه ، ولكن 
بسبب التأخيرات المتغيرة في الشبكة ، لا نعرف كيففي وقت لاحق من ذلك بكثير. هذه 
الحقيقة تجعل من الصعب أحيانًا تحديد الترتيب الذيحدثت الأشياء عندما تشترك آلات 
متعددة.علاوة على ذلك ، كل جهاز على الشبكة له ساعته الخاصة ، وهي ساعة صلبة 
فعلية‐جهاز وير: عادة مذبذب بلوري الكوارتز. هذه الأجهزة ليست دقيقة تمامًامعدل ، 
لذلك كل آلة لديها مفهومها الخاص عن الوقت ، والذي قد يكون أسرع قليلاً أوأبطأ من 
الأجهزة الأخرى. من الممكن مزامنة الساعات إلى حد ما:الأكثر استخدامًا هو بروتوكول 
وقت الشبكة (NTP) ، والذي يسمح لـيتم ضبط ساعة الكمبيوتر وفقًا للوقت الذي تم 
الإبلاغ عنه بواسطة مجموعة من الخوادم [ 36].تحصل الخوادم بدورها على وقتها من مصدر 
زمني أكثر دقة ، مثل GPSالمتلقي.الساعات الرتيبة مقابل الساعات الزمنيةتحتوي أجهزة 
الكمبيوتر الحديثة على نوعين مختلفين على الأقل من الساعات: ساعة الوقت من اليوم 
وعلى مدار الساعة رتيب . على الرغم من أن كلاهما يقيس الوقت ، فمن المهم 
التمييزكلاهما ، لأنهما يخدمان أغراضًا مختلفة.ساعات الوقت من اليومتعمل ساعة الوقت 
من اليوم على ما تتوقعه بشكل حدسي من الساعة: فهي تعيد التيارالتاريخ والوقت وفقًا 
لبعض التقويمات (يُعرف أيضًا باسم وقت ساعة الحائط ). من أجل الإختبار-ple و 
clock_gettime (CLOCK_REALTIME) على Linux v و System.currentTimeMillis ()في Java 
تُرجع عدد الثواني (أو المللي ثانية) منذ العصر : منتصف الليلساعات غير موثوقة | 
279

      صفحة 302
التوقيت العالمي المنسق في 1 يناير 1970 ، وفقًا للتقويم الغريغوري ، دون احتساب 
قفزة ثانيةonds. تستخدم بعض الأنظمة تواريخ أخرى كنقطة مرجعية لها.عادة ما تتم 
مزامنة الساعات الزمنية من اليوم مع NTP ، مما يعني أن الوقتختم من آلة (بشكل 
مثالي) يعني نفس الطابع الزمني على آخرآلة. ومع ذلك ، تحتوي الساعات الزمنية أيضًا 
على شذوذ مختلفة ، كما هو موضح فيالقسم التالي. على وجه الخصوص ، إذا كانت الساعة 
المحلية متقدمًا جدًا على خادم NTP ، فقد يحدث ذلكإعادة الضبط بالقوة ويبدو أنها 
تقفز مرة أخرى إلى نقطة سابقة في الوقت المناسب. هؤلاءيقفز ، بالإضافة إلى حقيقة 
أنهم غالبًا ما يتجاهلون الثواني الكبيسة ، يصنعون ساعات على مدار اليومغير مناسب 
لقياس الوقت المنقضي.لقد كان للساعات الزمنية من اليوم أيضًا دقة عالية في الحبيبات 
، على سبيل المثالالمضي قدمًا بخطوات مقدارها 10 مللي ثانية على أنظمة Windows 
الأقدم [37 ]. في النظام الأخير‐تيمس ، هذه مشكلة أقل.ساعات رتيبةالساعة الرتيبة 
مناسبة لقياس المدة (الفاصل الزمني) ، مثل aمهلة أو وقت استجابة الخدمة. على سبيل 
المثال ، clock_gettime (CLOCK_MONOTONIC) في Linux و System.nanoTime () في جافا 
هي ساعات رتيبة. الاسمتأتي من حقيقة أنها مضمونة للتحرك إلى الأمام دائمًا (في حين 
أن أقد تقفز ساعة الوقت من اليوم إلى الوراء في الوقت المناسب).يمكنك التحقق من 
قيمة الساعة الرتيبة في وقت واحد ، افعل شيئًا ،ثم تحقق من الساعة مرة أخرى في وقت 
لاحق. و الفرق بين القيمتينيخبرك مقدار الوقت المنقضي بين الشيكين. ومع ذلك ، 
المطلققيمة الساعة لا معنى لها: قد يكون عدد النانو ثانية منذتم بدء تشغيل 
الكمبيوتر ، أو شيء تعسفي بالمثل. على وجه الخصوص ، فإنه لا يجعلمعنى لمقارنة قيم 
الساعة الرتيبة من جهازي كمبيوتر مختلفين ، لأنهالا تعني نفس الشيء.على خادم به 
مآخذ متعددة لوحدة المعالجة المركزية ، قد يكون هناك مؤقت منفصل لكل وحدة معالجة 
مركزية ،التي لا تتم مزامنتها بالضرورة مع وحدات المعالجة المركزية الأخرى. أنظمة 
التشغيل المركبةترقب ذلك ، وحاول تقديم عرض رتيب للساعة إلى مؤشرات الترابط 
التطبيقية ،حتى عند جدولتها عبر وحدات المعالجة المركزية المختلفة. ومع ذلك ، فمن 
الحكمة أن تأخذ هذاضمان رتابة مع قليل من الملح [ 38].قد يقوم NTP بضبط التردد الذي 
تتحرك عنده الساعة الرتيبة للأمام (هذا هوالمعروف باسم الدوران على مدار الساعة) 
إذا اكتشف أن الكوارتز المحلي للكمبيوتر يتحركأسرع أو أبطأ من خادم NTP. بشكل 
افتراضي ، يسمح NTP أن يكون معدل الساعة سريعًااستبعد أو تباطأ بنسبة تصل إلى 0.05٪ 
، لكن NTP لا يمكن أن يسبب الساعة الرتيبةللقفز للأمام أو للخلف. عادة ما يكون دقة 
الساعات الرتيبة تمامًاجيد: في معظم الأنظمة يمكنهم قياس الفترات الزمنية 
بالميكروثانية أو أقل.280 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 303
في نظام موزع ، باستخدام ساعة رتيبة لقياس الوقت المنقضي (على سبيل المثالtimeouts) 
عادةً ما يكون جيدًا ، لأنه لا يفترض وجود أي مزامنة بينساعات العقد القاسية ، 
وليست حساسة لأخطاء القياس الطفيفة.تزامن الساعة ودقتهالا تحتاج الساعات الرتيبة 
إلى التزامن ، ولكن يجب ضبط الساعات الزمنيةوفقًا لبرنامج NTP أو أي مصدر زمني 
موثوق آخر حتى تكون مفيدة. مؤسففي الآونة الأخيرة ، هذا ليس موثوقًا أو دقيقًا 
تقريبًا كما قد تأمل - ساعات الأجهزةو NTP يمكن أن يكونا وحوشًا متقلبة. لإعطاء بعض 
الأمثلة فقط:• ساعة الكوارتز في الكمبيوتر ليست دقيقة للغاية: فهي تنجرف (تعمل بشكل 
أسرع أوأبطأ مما ينبغي). يختلف انجراف الساعة حسب درجة حرارةآلة. تفترض Google وجود 
انجراف على مدار الساعة يبلغ 200 جزء في المليون (أجزاء في المليون) 
لمجموعتهاالخوادم [39 ] ، وهو ما يعادل انجراف 6 مللي ثانية لساعة تمت إعادة 
مزامنتهامع خادم كل 30 ثانية ، أو 17 ثانية انجراف لساعة تتم إعادة مزامنتها‐ized 
مرة واحدة في اليوم. هذا يحد من أفضل دقة ممكنة يمكنك تحقيقها ، حتى لوكل شيء يعمل 
بشكل صحيح.• إذا كانت ساعة الكمبيوتر تختلف كثيرًا عن خادم NTP ، فقد يرفض 
المزامنة‐كرونيز ، أو ستتم إعادة ضبط الساعة المحلية بالقوة [ 36 ]. أي تطبيقات 
مراقبةقد يرى الوقت قبل إعادة الضبط هذه وبعدها أن الوقت يعود إلى الوراء أو يقفز 
فجأةإلى الأمام.• إذا تم إيقاف تشغيل جدار حماية عقدة عن طريق الخطأ من خادم NTP ، 
فإن التهيئة الخاطئةقد تمر مرور الكرام لبعض الوقت. تشير الأدلة القصصية إلى أن هذا 
لا يحدث.القلم في الممارسة.• يمكن أن تكون مزامنة NTP جيدة فقط مثل تأخير الشبكة ، 
لذلك هناك حدلدقتها عندما تكون على شبكة مزدحمة مع تأخيرات متغيرة للحزم.أظهرت إحدى 
التجارب أنه يمكن تحقيق خطأ لا يقل عن 35 مللي ثانية عند المزامنة.التسلسل الزمني 
عبر الإنترنت [ 40] ، على الرغم من حدوث طفرات عرضية في تأخير الشبكةلأخطاء من 
حوالي ثانية. اعتمادا على التكوين ، شبكة كبيرةيمكن أن تتسبب التأخيرات في تخلي 
عميل NTP تمامًا.• بعض خوادم NTP خاطئة أو تم تكوينها بشكل خاطئ ، والإبلاغ عن 
الوقت الذي توقفساعات [41 ، 42]. عملاء NTP قويون للغاية ، لأنهم يستعلمون عن عدة 
خوادموتجاهل القيم المتطرفة. ومع ذلك ، من المقلق إلى حد ما المراهنة على الصحةمن 
أنظمتك في الوقت الذي أخبرك فيه شخص غريب على الإنترنت.• الثواني الكبيسة تؤدي إلى 
دقيقة تبلغ 59 ثانية أو 61 ثانية ، أييعبث بافتراضات التوقيت في الأنظمة غير 
المصممة بالثواني الكبيسةفي الاعتبار [ 43]. حقيقة أن الثواني الكبيسة قد تحطمت 
العديد من الأنظمة الكبيرة [ 44]يوضح مدى سهولة تسلل الافتراضات غير الصحيحة حول 
الساعات إلى نظامتيم. قد تكون أفضل طريقة للتعامل مع الثواني الكبيسة هي جعل خوادم 
NTP "تكذب"ساعات غير موثوقة | 281

      صفحة 304
إجراء تعديل الثانية الكبيسة تدريجيًا على مدار اليوم (هذاالمعروف باسم التلطيخ ) [ 
45 ،46 ].• في الأجهزة الافتراضية ، تكون ساعة الأجهزة افتراضية ، مما يزيد من عدد 
الساعات الإضافيةتحديات للتطبيقات التي تحتاج إلى ضبط دقيق للوقت [47 ]. عندما وحدة 
المعالجة المركزيةيتم مشاركة النواة بين الأجهزة الافتراضية ، ويتم إيقاف كل جهاز 
افتراضي مؤقتًا لعشرات المليثواني أثناء تشغيل جهاز VM آخر. هذا يتجلى على أنه 
الساعة فجأةالقفز إلى الأمام [ 25].• إذا قمت بتشغيل برنامج على أجهزة لا تتحكم 
فيها بالكامل (مثل الهاتف المحمول أو التضمين‐ded) ، ربما لا يمكنك الوثوق بساعة 
الجهاز على الإطلاق. بعضعمد المستخدمون إلى ضبط ساعة أجهزتهم على تاريخ ووقت غير 
صحيحين ، لـمثال للتحايل على قيود التوقيت في الألعاب. نتيجة لذلك ، قد تكون 
الساعةيتم ضبطه على وقت بشكل كبير في الماضي أو المستقبل.من الممكن تحقيق دقة ساعة 
جيدة جدًا إذا كنت تهتم بها بشكل كافٍاستثمار موارد كبيرة. على سبيل المثال ، مشروع 
MiFID II التنظيم الأوروبي لتتطلب المؤسسات المالية جميع صناديق التداول عالية 
التردد لمزامنةالساعات في نطاق 100 ميكروثانية من التوقيت العالمي المنسق للمساعدة 
في تصحيح أخطاء السوق الشاذةمثل "أعطال الفلاش" ، وللمساعدة في اكتشاف التلاعب 
بالسوق [ 48 ].يمكن تحقيق هذه الدقة باستخدام مستقبلات GPS ، بروتوكول الوقت الدقيق 
[49]والنشر الدقيق والمراقبة. ومع ذلك ، فإنه يتطلب جهدا كبيرا والخبرة ، وهناك 
العديد من الطرق التي يمكن أن تؤدي إلى حدوث خطأ في مزامنة الساعة. لوتم تكوين 
البرنامج الخفي NTP الخاص بك بشكل خاطئ ، أو أن جدار الحماية يحظر حركة مرور NTP ، 
أو الساعةيمكن أن يصبح الخطأ الناتج عن الانجراف كبيرًا بسرعة.الاعتماد على الساعات 
المتزامنةتكمن مشكلة الساعات في أنها تبدو بسيطة وسهلة الاستخدام ، إلا أنها تتمتع 
بملحقعدد مذهل من المزالق: قد لا يحتوي اليوم بالضبط على 86400 ثانية ، وقت اليومقد 
تتحرك الساعات إلى الوراء في الوقت المناسب ، وقد يكون الوقت على عقدة واحدة 
مختلفًا تمامًامن ذلك الوقت على عقدة أخرى.ناقشنا في وقت سابق من هذا الفصل إسقاط 
الشبكات وتأخيرها بشكل تعسفي‐ets. على الرغم من أن الشبكات تعمل بشكل جيد في معظم 
الأوقات ، يجب أن تكون البرامج كذلكتم تصميمه على افتراض أن الشبكة ستكون خاطئة في 
بعض الأحيان ، وأنيجب أن تتعامل الأدوات مع مثل هذه الأخطاء بأمان. وينطبق الشيء 
نفسه على الساعات: على الرغم من أنهاتعمل بشكل جيد في معظم الأوقات ، تحتاج البرامج 
القوية إلى الاستعداد للتعامل معهاساعات غير صحيحة.جزء من المشكلة هو أن الساعات 
غير الصحيحة تمر بسهولة دون أن يلاحظها أحد. إذا كانت وحدة المعالجة المركزية 
للجهازمعيبة أو تم تكوين شبكتها بشكل خاطئ ، فمن المرجح ألا تعمل على الإطلاق ، 
لذلك ستفعليتم ملاحظتها بسرعة وتثبيتها. من ناحية أخرى ، إذا كانت ساعة الكوارتز 
معيبة أو بهاتم تكوين عميل NTP بشكل خاطئ ، ويبدو أن معظم الأشياء تعمل بشكل جيد ، 
على الرغم من ساعتهايبتعد تدريجياً عن الواقع أكثر فأكثر. إذا كان هناك جزء من 
البرنامج282 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 305
بالاعتماد على ساعة متزامنة بدقة ، من المرجح أن تكون النتيجة صامتة وفقدان 
البيانات الدقيق من الانهيار الدراماتيكي [50، 51].وبالتالي ، إذا كنت تستخدم 
برنامجًا يتطلب ساعات متزامنة ، فمن الضروري أن تقوم بذلكتراقب أيضًا بدقة إزاحة 
الساعة بين جميع الأجهزة. أي العقد التييجب الإعلان عن انجرافات الساعة بعيدًا جدًا 
عن الآخرين وإزالتها منالعنقودية. هذا يضمن لك ملاحظة الساعات المكسورة قبل أن 
تتسبب أيضًاالكثير من الضرر.الطوابع الزمنية لطلب الأحداثلنفكر في موقف معين يكون 
الاعتماد عليه أمرًا مغريًا ولكنه خطيرفي الساعات: ترتيب الأحداث عبر عقد متعددة. 
على سبيل المثال ، إذا كتب اثنان من العملاءإلى قاعدة بيانات موزعة ، من الذي وصل 
إلى هناك أولاً؟ أي كتابة هي الأحدث؟يوضح الشكل 8-3 الاستخدام الخطير لساعات الوقت 
في اليوم في قاعدة بيانات ذاتتكرار القائد (المثال مشابه للشكل 5-9). يكتب العميل A 
x = 1 على العقدة1 ؛ يتم نسخ الكتابة إلى العقدة 3 ؛ العميل B يزيد x في العقدة 3 
(لدينا الآنس = 2) ؛ وأخيرًا ، يتم نسخ كلا الكتابين إلى العقدة 2.العميل أالعميل 
بالعقدة 1العقدة 2العقدة 3الوقتحسناس = 2ts = 42.003س = 1ts = 42.004حسناضبط x = 
1الزيادة س + = 
142.00342.00442.00542.00642.00742.00842.00142.00242.00342.00442.005الشكل 8-3. 
الكتابة من قبل العميل "ب" متأخرة سببيًا عن كتابة العميل "أ" ولكن "ب"الكتابة لها 
طابع زمني سابق.في الشكل 8-3، عندما يتم نسخ الكتابة إلى العقد الأخرى ، يتم 
تمييزها بطابع زمنيوفقًا لساعة الوقت من اليوم في العقدة التي نشأت فيها الكتابة. 
الساعةالمزامنة جيدة جدًا في هذا المثال: الانحراف بين العقدة 1 والعقدة 3 هوأقل من 
3 مللي ثانية ، وهو على الأرجح أفضل مما تتوقعه من الناحية العملية.ومع ذلك ، فإن 
الطوابع الزمنية في الشكل 8-3 تفشل في ترتيب الأحداث بشكل صحيح: الكتابةx = 1 لها 
طابع زمني 42.004 ثانية ، لكن كتابة x = 2 لها طابع زمني42.003 ثانية ، على الرغم 
من أن x = 2 حدثت لاحقًا بشكل لا لبس فيه. عندما العقدة 2ساعات غير موثوقة | 283

      صفحة 306
يتلقى هذين الحدثين ، وسوف يستنتج بشكل غير صحيح أن x = 1 هي الأحدثالقيمة ، وإسقاط 
الكتابة x = 2. في الواقع ، تم فقد عملية الزيادة الخاصة بالعميل "ب".تسمى 
إستراتيجية حل النزاع هذه بالفوز الأخير (LWW) ، وهي مستخدمة على نطاق واسعفي كل من 
قواعد البيانات متعددة القادة وقواعد البيانات التي ليس لها زعيم مثل Cassandra [50 
] ورياك [51 ] (راجع "آخر فوز للكتابة (تجاهل عمليات الكتابة المتزامنة)" في الصفحة 
179). بعضتطبيقات إنشاء طوابع زمنية على العميل بدلاً من الخادم ، ولكن هذالا يغير 
المشاكل الأساسية مع LWW:• يمكن أن تختفي عمليات الكتابة في قاعدة البيانات بشكل 
غامض: العقدة ذات الساعة المتأخرة غير قادرة على ذلكلاستبدال القيم التي سبق 
كتابتها بواسطة عقدة بساعة سريعة حتى الساعةانقضى الانحراف بين العقد [ 51 ،52 ]. 
يمكن أن يتسبب هذا في كميات عشوائية منيتم إسقاط البيانات بصمت دون إبلاغ التطبيق 
بأي خطأ.• لا يستطيع LWW التمييز بين عمليات الكتابة التي حدثت بالتتابع في نجاح 
سريع‐التنازل (في الشكل 8-3، زيادة العميل "ب" تحدث بالتأكيد بعد العميل "أ"يكتب) 
ويكتب أنهما متزامن حقًا (لم يكن أي من الكاتبين على علم بـآخر). آليات تتبع 
السببية الإضافية ، مثل ناقلات الإصدار ، هياللازمة لمنع انتهاكات السببية (انظر 
“الكشف المتزامنيكتب "في الصفحة 178).• من الممكن أن تقوم عقدتان بإنشاء عمليات 
كتابة بشكل مستقل في نفس الوقت‐ختم ، خاصةً عندما تكون الساعة ذات دقة ميلي ثانية 
فقط. بالإضافةمطلوب قيمة كسر التعادل (والتي يمكن أن تكون ببساطة عددًا عشوائيًا 
كبيرًا)حل مثل هذه النزاعات ، ولكن هذا يمكن أن يؤدي أيضًا إلى انتهاكات السببية 
[50].وبالتالي ، على الرغم من أنه من المغري حل النزاعات عن طريق الاحتفاظ بآخر 
"أحدث"القيمة والتخلي عن الآخرين ، من المهم أن تدرك أن تعريف "حديث"يعتمد على 
التوقيت المحلي من اليوم ، والذي قد يكون غير صحيح. حتى مع بإحكامساعات NTP 
المتزامنة ، يمكنك إرسال حزمة في الطابع الزمني 100 مللي ثانية (وفقًاإلى ساعة 
المرسل) ، واجعله يصل في الطابع الزمني 99 مللي ثانية (وفقًا للمستلمساعة ent) - 
لذلك يبدو كما لو أن الحزمة وصلت قبل إرسالها ، وهيمستحيل.هل يمكن جعل مزامنة NTP 
دقيقة بدرجة كافية بحيث تكون مثل هذه الطلبات غير الصحيحةلا يمكن أن يحدث؟ ربما لا 
، لأن دقة مزامنة NTP محدودة بحد ذاتهاحسب وقت الرحلة ذهابًا وإيابًا على الشبكة ، 
بالإضافة إلى مصادر الخطأ الأخرى مثل الكوارتزالمغزى. للترتيب الصحيح ، ستحتاج إلى 
أن يكون مصدر الساعة أكبر بكثيردقيقة من الشيء الذي تقيسه (أي تأخير الشبكة).ما 
يسمى بالساعات المنطقية [ 53 ] ، والتي تعتمد على العدادات المتزايدة بدلاً منتعد 
بلورات الكوارتز المتذبذبة بديلاً أكثر أمانًا لترتيب الأحداث (انظر "الكشفيكتب 
المتزامنة "في الصفحة 178 ). الساعات المنطقية لا تقيس الوقت من اليوم فقطالترتيب 
النسبي للأحداث (سواء حدث حدث قبل أو بعد آخر).تُعرف ساعات الوقت العادية أيضًا 
باسم الساعات المادية ، على عكس الساعات المنطقيةالساعات. سننظر في طلب المزيد في 
"طلب الضمانات" في الصفحة 329.284 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 307
قراءات الساعة لها فاصل ثقةقد تكون قادرًا على قراءة ساعة الوقت على مدار اليوم 
بالميكرو ثانية أو حتىقرار نانوثانية. ولكن حتى لو تمكنت من الحصول على مثل هذا 
القياس الدقيق ،هذا لا يعني أن القيمة دقيقة بالفعل لهذه الدقة. في الواقع ، هو 
الأكثرمن المحتمل ألا يكون كذلك - كما ذكر أعلاه ، يمكن أن يكون الانجراف على مدار 
الساعة من كوارتز غير دقيق بسهولةعدة مللي ثانية ، حتى إذا قمت بالمزامنة مع خادم 
NTP على الشبكة المحلية‐اعمل كل دقيقة. مع خادم NTP على الإنترنت العام ، أفضل ما 
يمكنربما تكون الدقة في عشرات المللي ثانية ، وقد يرتفع الخطأ بسهولة إلىأكثر من 
100 مللي ثانية عندما يكون هناك ازدحام في الشبكة [53 ].وبالتالي ، ليس من المنطقي 
التفكير في قراءة الساعة كنقطة زمنية - إنها أكثر من ذلكمثل نطاق من المرات ، ضمن 
فاصل الثقة: على سبيل المثال ، قد يكون النظام 95٪واثق من أن الوقت الآن ما بين 
10.3 و 10.5 ثانية بعد الدقيقة ، لكنهلا يعرف أي شيء أكثر دقة من ذلك [ 54]. إذا 
كنا نعرف فقط الوقت +/- 100 مللي ثانية ،أرقام الميكروثانية في الطابع الزمني لا 
معنى لها أساسًا.يمكن حساب حدود عدم اليقين بناءً على مصدر الوقت الخاص بك. اذا كان 
لديكجهاز استقبال GPS أو الساعة الذرية (السيزيوم) المتصلة مباشرة بجهاز الكمبيوتر 
الخاص بك ، وتم الإبلاغ عن نطاق الخطأ المتوقع من قبل الشركة المصنعة. إذا كنت تحصل 
على الوقت منخادم ، يعتمد عدم اليقين على الانجراف المتوقع للكوارتز منذ آخر 
مزامنةمع الخادم ، بالإضافة إلى عدم اليقين في خادم NTP ، بالإضافة إلى وقت الرحلة 
ذهابًا وإيابًا على الشبكةإلى الخادم (لتقريب أول ، وعلى افتراض أنك تثق 
بالخادم).لسوء الحظ ، لا تكشف معظم الأنظمة عدم اليقين هذا: على سبيل المثال ، 
عندما تقوم بذلكcall clock_gettime () ، فإن القيمة المعادة لا تخبرك بالخطأ 
المتوقع فيtimestamp ، لذلك لا تعرف ما إذا كان فاصل الثقة الخاص به هو 5 مللي 
ثانية أو 5 سنوات.استثناء مثير للاهتمام هو TrueTime API من Google في Spanner [39 
] وهو صريحتقارير فاصل الثقة على الساعة المحلية. عندما تطلبه عن التيارالوقت ، 
تحصل على قيمتين: [ الأقدم ، الأحدث ] ، وهما أقرب وقت ممكن وأحدث طابع زمني ممكن . 
بناءً على حسابات عدم اليقين ، تعرف الساعة ذلكالوقت الحالي الفعلي في مكان ما ضمن 
تلك الفترة الزمنية. عرض الفاصل الزمنييعتمد ، من بين أمور أخرى ، على المدة التي 
مرت منذ ساعة الكوارتز المحليةتمت مزامنتها مؤخرًا مع مصدر ساعة أكثر دقة.الساعات 
المتزامنة للقطات العالميةفي "عزل اللقطة والقراءة القابلة للتكرار" في الصفحة 228 
ناقشنا اللقطة isola‐نشوئها ، وهي ميزة مفيدة جدا في قواعد البيانات التي تحتاج إلى 
دعم كل صغيرة وسريعةمعاملات القراءة والكتابة ، وكذلك معاملات القراءة فقط الكبيرة 
طويلة الأمد (على سبيل المثالالنسخ الاحتياطية أو التحليلات). يسمح للمعاملات 
للقراءة فقط برؤية قاعدة البيانات في Consis‐حالة الخيمة في نقطة زمنية معينة ، دون 
قفل والتدخل في القراءة-كتابة المعاملات.ساعات غير موثوقة | 285

      صفحة 308
السادس. هناك مولدات أرقام تسلسلية موزعة مثل Twitter's Snowflake ، والتي تولد 
تقريبًاmately مفردة النغمة زيادة معرفات فريدة بطريقة متدرجة (على سبيل المثال من 
خلال تخصيص كتل من مساحة ID لالعقد المختلفة). ومع ذلك ، لا يمكنهم عادة ضمان أمر 
يتوافق مع السببية ،لأن مقياس الوقت الذي يتم فيه تعيين كتل المعرفات أطول من 
النطاق الزمني لقراءة قاعدة البيانات ويكتب. راجع أيضًا "طلب الضمانات" في الصفحة 
329.يتطلب التنفيذ الأكثر شيوعًا لعزل اللقطة وجود ملفزيادة معرف المعاملة. إذا حدث 
الكتابة بعد اللقطة (أي الكتابةمعرّف معاملة أكبر من اللقطة) ، هذه الكتابة غير 
مرئية في اللقطةعملية تجارية. في قاعدة بيانات أحادية العقدة ، يكون العداد البسيط 
كافياً للتوليدمعرفات المعاملات.ومع ذلك ، عندما يتم توزيع قاعدة البيانات عبر 
العديد من الأجهزة ، فمن المحتمل أن تكون متعددةple datacenters ، معرّف معاملة 
عالمي يتزايد بشكل رتيب (عبر جميع الأطراف)من الصعب توليدها ، لأنها تتطلب التنسيق. 
معرّف المعاملةيجب أن تعكس السببية: إذا كانت المعاملة "ب" تقرأ قيمة تمت كتابتها 
بواسطة المعاملة "أ" ،ثم يجب أن يكون لدى B معرّف معاملة أعلى من A - وإلا فإن 
اللقطة ستكونلا تكون متسقة. مع الكثير من المعاملات الصغيرة والسريعة ، يتم إنشاء 
معرفات المعاملات في ملفيصبح النظام الموزع عنق زجاجة لا يمكن الدفاع عنه. السادسهل 
يمكننا استخدام الطوابع الزمنية من ساعات اليوم المتزامنة كمعرفات المعاملات؟إذا 
تمكنا من الحصول على المزامنة بشكل جيد بما فيه الكفاية ، فسيكون لديهم الحق 
المناسب‐العلاقات: المعاملات اللاحقة لها طابع زمني أعلى. المشكلة طبعا تكمن في 
النسيان‐دقيق حول دقة الساعة.يطبق Spanner عزل اللقطة الموزعة عبر مراكز البيانات 
بهذه الطريقة [55 ،56 ]. يستخدم فاصل الثقة على مدار الساعة كما تم الإبلاغ عنه 
بواسطة TrueTime API ، وهوبناءً على الملاحظة التالية: إذا كان لديك فترتا ثقة ( A 
= [ A أقرب ،A الأحدث ] و B = [ B الأقدم ، B الأحدث ]) ولا يتداخل هذان الفاصلان 
(على سبيل المثال ، A الأقدم < A الأحدث< B الأقدم < B الأحدث ) ، ثم حدث B 
بالتأكيد بعد A - لا شك في ذلك. فقط اذاتتداخل الفترات ، فنحن غير متأكدين من أي 
ترتيب حدث A و B.من أجل التأكد من أن الطوابع الزمنية للمعاملة تعكس السببية ، تعمد 
Spannerينتظر طول فاصل الثقة قبل تنفيذ ترجمة للقراءة والكتابة‐عمل. من خلال القيام 
بذلك ، فإنه يضمن أن تكون أي معاملة قد تقرأ البيانات كافية.في وقت لاحق بوقت مناسب 
، لذلك لا تتداخل فترات ثقتهم. من أجل الحفاظ علىوقت الانتظار أقصر ما يمكن ، يحتاج 
Spanner إلى إبقاء عدم اليقين على مدار الساعة صغيرًا مثلممكن؛ لهذا الغرض ، تنشر 
Google جهاز استقبال GPS أو ساعة ذرية في كل منهمامركز البيانات ، مما يسمح بمزامنة 
الساعات في غضون حوالي 7 مللي ثانية [39 ].يعد استخدام مزامنة الساعة لدلالات 
المعاملات الموزعة مجالًا نشطًاابحاث [53 ، 57 ، 58]. هذه الأفكار مثيرة للاهتمام 
لكنها لم يتم تنفيذها بعدتم ذكره في قواعد البيانات السائدة خارج Google.286 | 
الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 309
توقف العمليةلنفكر في مثال آخر على الاستخدام الخطير للساعة في نظام موزع. يقوللديك 
قاعدة بيانات مع قائد واحد لكل قسم. يسمح للقائد فقطتقبل يكتب. كيف تعرف العقدة 
أنها لا تزال رائدة (لم يتم التصريح عنهامات من قبل الآخرين) ، وأنه قد يقبل بأمان 
يكتب؟أحد الخيارات هو أن يحصل القائد على عقد إيجار من العقد الأخرى ، وهو مشابه 
لـقفل مع مهلة [ 59]. يمكن لعقدة واحدة فقط عقد الإيجار في أي وقت - وبالتالي 
،عندما تحصل العقدة على عقد إيجار ، فإنها تعلم أنها رائدة لبعض الوقت ،حتى انتهاء 
عقد الإيجار. لكي تظل العقدة رائدة ، يجب تجديد العقدة بشكل دوريعقد الإيجار قبل 
انتهاء صلاحيته. إذا فشلت العقدة ، فإنها تتوقف عن تجديد عقد الإيجار ، حتى آخريمكن 
أن تتولى العقدة عند انتهاء صلاحيتها.يمكنك أن تتخيل أن حلقة معالجة الطلب تبدو 
كالتالي:بينما ( صحيح ) {طلب = getIncomingRequest () ،// تأكد من بقاء 10 ثوانٍ 
على الأقل في عقد الإيجارإذا ( lease . expiryTimeMillis - System . 
currentTimeMillis () < 10000 ) {الإيجار = الإيجار . تجديد () ؛}إذا ( عقد الإيجار 
. isValid ()) {عملية ( طلب ) ؛}}ما الخطأ في هذا الرمز؟ أولاً ، يعتمد على الساعات 
المتزامنة: انتهاء الصلاحيةيتم تعيين وقت عقد الإيجار بواسطة آلة مختلفة (حيث يمكن 
حساب انتهاء الصلاحية على أنهالوقت الحالي زائد 30 ثانية ، على سبيل المثال) ، ويتم 
مقارنته بالوقت المحليساعة النظام. إذا كانت الساعات غير متزامنة لأكثر من بضع 
ثوانٍ ، فسيتم تنفيذ هذا الرمزابدأ بفعل أشياء غريبة.ثانيًا ، حتى لو قمنا بتغيير 
البروتوكول لاستخدام الساعة الرتيبة المحلية فقط ، فهناكمشكلة أخرى: الكود يفترض أن 
القليل من الوقت يمر بين النقطةأنه يتحقق من الوقت ( System.currentTimeMillis () ) 
والوقت الذي يتم فيه فحصيتم معالجة الطلب ( عملية (طلب) ). عادة هذا الرمز يعمل 
بسرعة كبيرة ، لذلكتعد فترة العشر ثوانٍ أكثر من كافية لضمان عدم انتهاء صلاحية عقد 
الإيجارمنتصف معالجة الطلب.ومع ذلك ، ماذا لو كان هناك توقف غير متوقع في تنفيذ 
البرنامج؟ إلى عن علىعلى سبيل المثال ، تخيل أن مؤشر الترابط يتوقف لمدة 15 ثانية 
حول تأجير السطر .قبل المتابعة في النهاية. في هذه الحالة ، من المحتمل أن تنتهي 
صلاحية عقد الإيجار بحلولالوقت الذي تتم فيه معالجة الطلب ، وتولت عقدة أخرى بالفعل 
كقائد.ومع ذلك ، لا يوجد ما يخبر هذا الموضوع أنه تم إيقافه مؤقتًا لفترة طويلة ، 
لذلك هذاساعات غير موثوقة | 287

      الصفحة 310
لن يلاحظ الكود أن عقد الإيجار قد انتهى حتى التكرار التالي للحلقة - بواسطةفي أي 
وقت قد يكون قد فعل شيئًا غير آمن بالفعل من خلال معالجة الطلب.هل من الجنون أن 
نفترض أن الخيط قد يتوقف مؤقتًا لفترة طويلة؟ للأسف لا.هناك العديد من الأسباب وراء 
حدوث ذلك:• يوجد العديد من أوقات تشغيل لغات البرمجة (مثل Java Virtual Machine)ل 
جمع القمامة (GC) الذي يحتاج في بعض الأحيان إلى وقف جميع المواضيع قيد التشغيل.هذه 
"توقف حول العالم" توقف GC في بعض الأحيان من المعروف أن تستمر لعدةدقيقة [ 60 ]! 
حتى ما يسمى بجامعي القمامة "المتزامنين" مثل HotSpotلا يمكن تشغيل CMS الخاص بـ 
JVM بشكل كامل بالتوازي مع رمز التطبيق - حتى همبحاجة لوقف العالم من وقت لآخر [ 
61]. على الرغم من أن فترات التوقف يمكن أن تكون في كثير من الأحيانيتم تقليله عن 
طريق تغيير أنماط التخصيص أو ضبط إعدادات GC [ 62]، يجب عليناتفترض الأسوأ إذا 
أردنا تقديم ضمانات قوية.• في البيئات الافتراضية ، يمكن تعليق جهاز افتراضي (إيقاف 
ملفتنفيذ جميع العمليات ، وحفظ محتويات الذاكرة على القرص) ومستأنف (استعادة 
محتويات الذاكرة واستمرار التنفيذ). هذهيمكن أن يحدث الإيقاف المؤقت في أي وقت 
أثناء تنفيذ العملية ، ويمكن أن يستمر بشكل تعسفيطول الوقت. تُستخدم هذه الميزة 
أحيانًا للترحيل المباشر للافتراضيةالأجهزة من مضيف إلى آخر دون إعادة التشغيل ، 
وفي هذه الحالة يكون طوليعتمد التوقف المؤقت على معدل كتابة العمليات في الذاكرة [ 
63].• في أجهزة المستخدم النهائي مثل أجهزة الكمبيوتر المحمولة ، قد يتم أيضًا 
تعليق التنفيذ واستؤنفت بشكل تعسفي ، على سبيل المثال عندما يغلق المستخدم غطاء 
الكمبيوتر المحمول.• عندما يتحول سياق نظام التشغيل إلى مؤشر ترابط آخر ، أو عندما 
يكون ملفيتحول برنامج Hypervisor إلى جهاز افتراضي مختلف (عند التشغيل في ملف 
افتراضيالجهاز) ، يمكن إيقاف الخيط الجاري تشغيله مؤقتًا عند أي نقطة تعسفية 
فيالرمز. في حالة وجود جهاز افتراضي ، يقضي وقت وحدة المعالجة المركزية في أجهزة 
افتراضية أخرىتُعرف الآلات باسم سرقة الوقت . إذا كان الجهاز تحت حمولة ثقيلة ، أي 
إذا كان هناكقائمة انتظار طويلة من الخيوط في انتظار التشغيل ، قد يستغرق الأمر بعض 
الوقت قبل الإيقاف المؤقتالخيط يحصل على التشغيل مرة أخرى.• إذا كان التطبيق يقوم 
بوصول متزامن إلى القرص ، فقد يتم إيقاف مؤشر ترابط مؤقتًافي انتظار عملية إدخال / 
إخراج قرص بطيئة لإكمال [ 64 ]. في العديد من اللغات ، القرصيمكن أن يحدث الوصول 
بشكل مفاجئ ، حتى لو لم يذكر الرمز صراحة الملفالوصول - على سبيل المثال ، يقوم 
برنامج Java classloader بتحميل ملفات الفئات بشكل كسول عندما تكون كذلكتم استخدامه 
لأول مرة ، والذي يمكن أن يحدث في أي وقت أثناء تنفيذ البرنامج. توقف I / O 
مؤقتًاقد تتآمر التوقفات المؤقتة لـ GC و GC لدمج تأخيراتها [65 ]. إذا كان القرصفي 
الواقع نظام ملفات الشبكة أو جهاز حظر الشبكة (مثل EBS من Amazon) ،كما أن زمن 
انتقال الإدخال / الإخراج يخضع كذلك لتنوع تأخيرات الشبكة [28 ].• إذا تم تكوين 
نظام التشغيل للسماح بالتبديل إلى القرص ( الترحيل ) ، فسيكون ذلك أمرًا بسيطًاقد 
يؤدي الوصول إلى الذاكرة إلى حدوث خطأ في الصفحة يتطلب وجود صفحة من القرصتحميلها 
في الذاكرة. تم إيقاف مؤشر الترابط مؤقتًا بينما تستغرق عملية الإدخال / الإخراج 
البطيئة هذه288 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 311
مكان. إذا كان ضغط الذاكرة مرتفعًا ، فقد يتطلب هذا بدوره وجود صفحة مختلفةمبادلة 
إلى القرص. في الحالات القصوى ، قد يقضي نظام التشغيلفي معظم الأحيان يتم تبديل 
الصفحات داخل وخارج الذاكرة ، والحصول على القليل من الواقعيةالعمل المنجز (يُعرف 
هذا باسم سحق ). لتجنب ذلك ، غالبًا ما يتم تعطيل تشغيل الترحيلأجهزة الخادم (إذا 
كنت تفضل قتل عملية إذا نفدت الذاكرة ،بدلا من المخاطرة بالسحق).• يمكن إيقاف عملية 
Unix مؤقتًا عن طريق إرسال إشارة SIGSTOP ، والتي يمكنك القيام بهاعلى سبيل المثال 
عن طريق الضغط على Ctrl + Z في قذيفة. هذا يوقف العملية على الفورمن الحصول على 
المزيد من دورات وحدة المعالجة المركزية حتى يتم استئنافها مع SIGCONT ، عند 
ذلكتشير إلى أنها تستمر في الركض من حيث توقفت. حتى لو لم تكن بيئتك كذلكعادةً ما 
تستخدم SIGSTOP ، يمكنك تخيل إرسال الإشارة بطريق الخطأ بواسطة ملفمهندس عمليات.كل 
هذه المشكلات يمكن أن تمنع تشغيل الموضوع في أي وقت ، واستئنافه في بعض الأحيانفي 
وقت لاحق ، حتى دون أن يلاحظ الموضوع. المشكلة مشابهة لعمل متعددرمز مترابط على 
جهاز واحد آمن للخيط: لا يمكنك تحمل أي شيء عن tim‐جي ، لأن تبديل السياق التعسفي 
والتوازي قد يحدث.عند كتابة رمز متعدد الخيوط على جهاز واحد ، لدينا أدوات جيدة إلى 
حد ما لـجعله آمنًا للخيط: كائنات المزامنة ، والإشارات ، والعدادات الذرية ، 
وهياكل البيانات الخالية من القفل‐tures ، وحظر قوائم الانتظار ، وما إلى ذلك. 
للأسف ، هذه الأدوات لا تترجم مباشرةللأنظمة الموزعة ، لأن النظام الموزع ليس له 
ذاكرة مشتركة - فقطالرسائل المرسلة عبر شبكة غير موثوقة.يجب أن تفترض العقدة في 
النظام الموزع أنه يمكن إيقاف تنفيذها مؤقتًا لملفطول كبير من الوقت في أي وقت ، 
حتى في منتصف الوظيفة. أثناء التوقف مؤقتًا ، يستمر بقية العالم في التحرك ، وقد 
يعلن أيضًا عن العقدة المتوقفة مؤقتًاميت ، لأنه لا يستجيب. في النهاية ، قد تستمر 
العقدة المتوقفة مؤقتًا في العمل‐نينج ، دون أن يلاحظ حتى أنه كان نائمًا ، حتى 
يتحقق من ساعته في وقت لاحق.ضمانات وقت الاستجابةفي العديد من لغات البرمجة وأنظمة 
التشغيل ، قد تكون الخيوط والعملياتتوقف لفترة غير محدودة من الوقت ، كما تمت 
مناقشته. هذه الأسباب للتوقف يمكنيتم التخلص منها إذا حاولت بجد بما فيه 
الكفاية.تعمل بعض البرامج في البيئات التي يكون فيها الفشل في الاستجابة ضمن 
ملفيمكن أن يتسبب الوقت في أضرار جسيمة: أجهزة الكمبيوتر التي تتحكم في الطائرات 
والصواريخ والروبوتات والسياراتوالأشياء المادية الأخرى يجب أن تستجيب بسرعة وبشكل 
متوقع لمستشعرهاالمدخلات. في هذه الأنظمة ، هناك موعد نهائي محدد يجب على البرنامج 
بحلولهساعات غير موثوقة | 289

      صفحة 312
السابع. في الأنظمة المضمنة ، يعني الوقت الفعلي أن النظام مصمم بعناية واختباره 
لتلبية المحددضمانات التوقيت في جميع الظروف. هذا على النقيض من الاستخدام الأكثر 
غموضًا لمصطلح الوقت الفعلي فيالويب ، حيث يصف الخوادم التي تدفع البيانات إلى 
العملاء ، وتدفق المعالجة دون وقت استجابة صعبالقيود (انظر الفصل 11).رد؛ إذا لم 
يلتزم بالموعد النهائي ، فقد يتسبب ذلك في فشل النظام بأكمله.يُطلق على هذه الأنظمة 
في الوقت الفعلي الصعب . السابععلى سبيل المثال ، إذا اكتشفت أجهزة الاستشعار في 
سيارتك أنك تعاني حاليًافي حالة وقوع حادث ، فلن ترغب في تأجيل تحرير الوسادة 
الهوائية بسبب التعطلضبط توقف GC في نظام تحرير الوسادة الهوائية.يتطلب توفير 
ضمانات في الوقت الفعلي في نظام دعمًا من جميع مستوياتمكدس البرامج: نظام تشغيل في 
الوقت الفعلي (RTOS) يسمح بجدولة العمليات‐محكوم بتخصيص مضمون لوقت وحدة المعالجة 
المركزية في فترات زمنية محددة ؛ وظائف المكتبةيجب توثيق أوقات التنفيذ الأسوأ ؛ قد 
يتم تخصيص الذاكرة الديناميكيةيتم تقييدها أو عدم السماح بها تمامًا (يوجد جامعو 
القمامة في الوقت الفعلي ، ولكن التطبيقلا يزال يتعين على الشركة التأكد من أنها لا 
تمنح GC الكثير من العمل الذي يتعين القيام به) ؛ و enor‐كمية كبيرة من الاختبار 
والقياس لضمان الوفاء بالضمانات.كل هذا يتطلب قدرًا كبيرًا من العمل الإضافي ، 
ويقيد النطاق بشدةمن لغات البرمجة والمكتبات والأدوات التي يمكن استخدامها (منذ 
معظم اللغاتوالأدوات لا تقدم ضمانات في الوقت الحقيقي). لهذه الأسباب ، يتم 
تطويرأنظمة الوقت باهظة الثمن ، وهي الأكثر استخدامًا في السلامة الحرجةالأجهزة 
المدمجة. علاوة على ذلك ، فإن الوقت الفعلي يختلف عن الأداء العالي - فيفي الواقع ، 
قد يكون لأنظمة الوقت الفعلي إنتاجية أقل ، حيث يتعين عليها تحديد 
الأولوياتالاستجابات في الوقت المناسب قبل كل شيء (انظر أيضًا "وقت الاستجابة 
واستخدام الموارد" على الصفحة278).بالنسبة لمعظم أنظمة معالجة البيانات من جانب 
الخادم ، فإن متطلبات الوقت الفعلي ليست كذلكاقتصادية أو مناسبة. وبالتالي ، يجب أن 
تعاني هذه الأنظمة من التوقف المؤقت وعدم استقرار الساعة الذي يأتي من التشغيل في 
بيئة غير الوقت الحقيقي.الحد من تأثير جمع القمامةيمكن التخفيف من الآثار السلبية 
للتوقف المؤقت للعملية دون اللجوء إلى المصاريف.sive ضمانات الجدولة في الوقت 
الحقيقي. تتميز أوقات تشغيل اللغة ببعض المرونةحول وقت جدولة مجموعات القمامة ، لأن 
بإمكانهم تتبع معدلتخصيص الكائن والذاكرة الفارغة المتبقية بمرور الوقت.تتمثل إحدى 
الأفكار الناشئة في معالجة توقفات GC المؤقتة مثل الانقطاعات القصيرة المخطط لها 
للعقدة ، وإلىالسماح للعقد الأخرى بمعالجة الطلبات الواردة من العملاء أثناء قيام 
إحدى العقدة بجمع بيانات القمامة الخاصة بها.إذا كان بإمكان وقت التشغيل تحذير 
التطبيق من أن العقدة تتطلب قريبًا إيقاف GC مؤقتًا ، فإن ملفيمكن للتطبيق التوقف 
عن إرسال طلبات جديدة إلى تلك العقدة ، وانتظر حتى تنتهي العملية‐الطلبات المعلقة ، 
ثم تنفيذ GC أثناء عدم وجود طلبات قيد التقدم.290 | الفصل الثامن: مشكلة الأنظمة 
الموزعة

      صفحة 313
هذا يخفي توقف GC مؤقتًا عن العملاء ، ويقلل النسب المئوية العالية لوقت 
الاستجابة[66، 67]. تم تنفيذ هذا النهج في بعض المالية الحساسة زمن الوصولأنظمة 
التداول [ 68].البديل لهذه الفكرة هو استخدام جامع القمامة فقط للأشياء قصيرة 
العمر(التي يتم جمعها بسرعة) ، وإعادة تشغيل العمليات بشكل دوري قبل أن تتراكمفي 
وقت متأخر بما يكفي من الأجسام طويلة العمر لتتطلب مجموعة كاملة من الأجسام طويلة 
العمر [ 61، 69]. واحديمكن إعادة تشغيل العقدة في وقت واحد ، ويمكن نقل حركة المرور 
بعيدًا عن العقدة من قبلإعادة التشغيل المخطط لها ، كما هو الحال في التحديث 
المتداول (انظر الفصل 4 ).لا يمكن لهذه الإجراءات أن تمنع بشكل كامل التوقفات 
المؤقتة لجمع القمامة ، لكنها يمكن أن تكون مفيدةتقليل تأثيرها على التطبيق.المعرفة 
والحقيقة والأكاذيبلقد استكشفنا حتى الآن في هذا الفصل الطرق التي تختلف بها 
الأنظمة الموزعة.بعيدًا عن البرامج التي تعمل على جهاز كمبيوتر واحد: لا توجد ذاكرة 
مشتركة ، فقطتمرير الرسائل عبر شبكة غير موثوقة مع تأخيرات متغيرة. قد تعاني 
الأنظمةمن الفشل الجزئي والساعات غير الموثوقة والتوقف المؤقت للمعالجة.تكون عواقب 
هذه المشكلات مربكة للغاية إذا لم تكن معتادًا على ذلكالانظمة الموزعة. لا تستطيع 
العقدة في الشبكة معرفة أي شيء على وجه اليقين - يمكنها ذلكفقط قم بإجراء التخمينات 
بناءً على الرسائل التي يتلقاها (أو لا يستقبلها) عبر الشبكة‐الشغل. يمكن للعقدة 
فقط معرفة الحالة التي توجد فيها عقدة أخرى (ما هي البيانات التي خزنتها ،ما إذا 
كان يعمل بشكل صحيح ، وما إلى ذلك) من خلال تبادل الرسائل معه. إذا كان جهاز التحكم 
عن بعدالعقدة لا تستجيب ، لا توجد طريقة لمعرفة الحالة التي تكون فيها ، لأن 
prob‐لا يمكن تمييز lems الموجودة في الشبكة بشكل موثوق عن المشكلات الموجودة في 
العقدة.المناقشات حول هذه الأنظمة تحد من الفلسفية: ماذا نعرف أن نكونصح أم خطأ في 
نظامنا؟ كيف يمكن أن نكون متأكدين من تلك المعرفة ، إذا كانت الآلياتللإدراك 
والقياس لا يمكن الاعتماد عليها؟ هل يجب أن تمتثل أنظمة البرامج لـالقوانين التي 
نتوقعها من العالم المادي ، مثل السبب والنتيجة ؟لحسن الحظ ، لسنا بحاجة للذهاب إلى 
أبعد من اكتشاف معنى الحياة. في disنظام الجزية ، يمكننا تحديد الافتراضات التي 
نتخذها بشأن السلوك (نموذج النظام ) ، وتصميم النظام الفعلي بحيث يلبي تلك 
الافتراضاتنشوئها. يمكن إثبات أن الخوارزميات تعمل بشكل صحيح ضمن نموذج نظام 
معين.هذا يعني أن السلوك الموثوق به يمكن تحقيقه ، حتى لو كان نموذج النظام 
الأساسييوفر عددًا قليلاً جدًا من الضمانات.ومع ذلك ، على الرغم من أنه من الممكن 
جعل البرنامج حسن التصرف في نظام غير موثوق به.نموذج tem ، هذا ليس سهلاً أو 
مباشرًا. في ما تبقى من هذا الفصل سوف ننتقلهناك استكشاف مفاهيم المعرفة والحقيقة 
في الأنظمة الموزعة ، والتي سوفساعدنا في التفكير في أنواع الافتراضات التي يمكننا 
القيام بها ، والضمانات التي نقدمهاقد ترغب في تقديمها. في الفصل 9 سننتقل إلى 
إلقاء نظرة على بعض أمثلة الخوارزميةالمعرفة والحقيقة والأكاذيب | 291

      صفحة 314
rithms للأنظمة الموزعة ، والتي توفر ضمانات خاصة بموجب معينالافتراضات.الحقيقة 
تحددها الأغلبيةتخيل وجود شبكة بها خطأ غير متماثل: العقدة قادرة على استقبال جميع 
الرسائليتم إرسالها إليها ، ولكن يتم إسقاط أو تأخير أي رسائل صادرة من تلك العقدة 
[ 18].على الرغم من أن هذه العقدة تعمل بشكل جيد ، وتتلقى طلبات من الآخرينالعقد ، 
لا تستطيع العقد الأخرى سماع استجاباتها. بعد بعض المهلة ، والآخرتعلن العقد أنها 
ميتة ، لأنها لم تسمع من العقدة. الوضعتتكشف مثل الكابوس: العقدة شبه المنفصلة تُجر 
إلى المقبرة ،الركل والصراخ "أنا لست ميتا!" - ولكن بما أنه لا أحد يسمع صراخها 
،يستمر موكب الجنازة بتصميم رواقي.في سيناريو أقل كوابيسًا ، قد تلاحظ العقدة شبه 
المنفصلة ذلكالرسائل التي يرسلها لا يتم التعرف عليها من قبل العقد الأخرى ، 
وبالتالي فهي حقيقية‐احتمالية وجود عطل في الشبكة. ومع ذلك ، فإن العقدة خاطئةأعلن 
موته بواسطة العقد الأخرى ، والعقدة شبه المنفصلة لا يمكنها القيام بأي شيءشئ 
حياله.كسيناريو ثالث ، تخيل عقدة تواجه قمامة طويلة في العالممجموعة (GC) وقفة. يتم 
استباق جميع خيوط العقدة بواسطة GC ويتم إيقافها مؤقتًالمدة دقيقة واحدة ، وبالتالي 
، لا تتم معالجة أي طلبات ولا توجد ردودمرسل. تنتظر العقد الأخرى ، وتعيد المحاولة 
، وتنفد صبرها ، وفي النهاية تعلن العقدةميتا وتحميله على الكرسي. أخيرًا ، ينتهي 
GC وتجري خيوط العقدةكما لو لم يحدث شيء. تتفاجأ العقد الأخرى كما يفترضالعقدة 
الميتة ترفع رأسها فجأة من التابوت ، بصحة كاملة ، وتبدأ في الهتاف‐الدردشة بشكل 
كامل مع المتفرجين. في البداية ، لا تدرك عقدة GCing أن ملفلقد مرت دقيقة كاملة 
وأعلن موتها - بالكاد من وجهة نظرهامر أي وقت منذ آخر مرة تحدث فيها مع العقد 
الأخرى.المغزى من هذه القصص هو أن العقدة لا يمكنها بالضرورة أن تثق في حكمها 
الخاصموقف. لا يمكن للنظام الموزع الاعتماد بشكل حصري على عقدة واحدة ، لأن ملفقد 
تفشل العقدة في أي وقت ، مما قد يترك النظام عالقًا وغير قادر على الاسترداد.بدلاً 
من ذلك ، تعتمد العديد من الخوارزميات الموزعة على النصاب القانوني (انظر "نصاب 
القراءةوالكتابة "في الصفحة 173): تتخذ القرارات بأغلبية العقد (مثل 2 من 3 ،أو 3 
من 5).يتضمن ذلك قرارات إعلان موت العقد. إذا أعلنت غالبية العقدعقدة أخرى ميتة ، 
إذن يجب اعتبارها ميتة ، حتى لو كانت تلك العقدة لا تزال كثيرةيشعر بالحياة. يجب أن 
تلتزم العقدة الفردية بقرار الأغلبية ، وتتنحى.سبب استخدام الأغلبية بسيط: بافتراض 
وجود عدد ثابت من العقد ،لا يزال بإمكان النظام العمل إذا فشلت العقد الفردية (مع 3 
عقد ، يمكن للفشل الواحديمكن التسامح معها مع 5 عقد ، يمكن التسامح مع فشلين). ومع 
ذلك ، فهي لا تزال آمنة ،292 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 315
لأنه لا يمكن أن يكون هناك سوى أغلبية واحدة في النظام - لا يمكن أن تكون هناك 
أغلبيةأغلبية مع قرارات متضاربة في نفس الوقت. سنناقش هذا في المزيدالتفاصيل عندما 
نصل إلى خوارزميات الإجماع فيالفصل 9.القائد والقفلفي كثير من الأحيان ، يتطلب 
النظام أن يكون هناك شيء واحد فقط من بعض الأشياء ، على سبيل المثال:• يُسمح لعقدة 
واحدة فقط أن تكون رائدة قسم قاعدة البيانات ، لتجنب الانقسام-الدماغ (انظر "معالجة 
انقطاع العقد" في الصفحة 150 ) ؛• يُسمح فقط لمعاملة واحدة أو لعميل واحد بالاحتفاظ 
بقفل مورد معينأو الاعتراض ، لمنع الكتابة إليه بشكل متزامن وإفساده ؛• يُسمح 
لمستخدم واحد فقط بتسجيل اسم مستخدم معين ، لأنه اسم مستخدميجب أن تحدد هوية 
المستخدم بشكل فريد.يتطلب تنفيذ ذلك في نظام موزع رعاية: حتى لو كانت العقد تؤمن 
بذلكإنه "الشخص المختار" (قائد القسم ، صاحب القفل ، الطلبالمستخدم الذي حصل على 
اسم المستخدم بنجاح) ، هذا ليس بالضرورةيعني توافق غالبية العقد! قد تكون العقدة هي 
القائد سابقًا ، ولكن إذاأعلنت العقد الأخرى أنها ميتة في هذه الأثناء (على سبيل 
المثال بسبب انقطاع الشبكةأو GC pause) ، ربما يكون قد تم تخفيض رتبته وربما يكون 
زعيم آخر قد تم تخفيضه بالفعلانتخب.إذا استمرت العقدة في العمل كـ "العقدة 
المختارة" ، على الرغم من أن غالبية العقدأعلنت وفاته ، فقد يتسبب ذلك في مشاكل في 
نظام غير دقيقمصمم. يمكن لمثل هذه العقدة إرسال رسائل إلى العقد الأخرى التي عينتها 
بنفسهاالقدرة ، وإذا صدقت العقد الأخرى ذلك ، فقد يقوم النظام ككل بعمل شيء 
مامستقيم.على سبيل المثال ، يوضح الشكل 8-4 خطأ تلف البيانات بسبب تنفيذ غير 
صحيح‐تيشن القفل. (الخطأ ليس نظريًا: كان HBase يعاني من هذه المشكلة [70 ،71 ].) 
لنفترض أنك تريد التأكد من أنه لا يمكن الوصول إلى ملف في خدمة التخزين إلا 
بواسطةعميل واحد في كل مرة ، لأنه إذا حاول عدة عملاء الكتابة إليه ، فإن الملف 
سيفعلتالف. تحاول تنفيذ ذلك من خلال مطالبة العميل بالحصول على عقد إيجارمن خدمة 
القفل قبل الوصول إلى الملف.المشكلة هي مثال لما ناقشناه في "توقف العملية مؤقتًا" 
في الصفحة 287 : إذاتوقف العميل الذي يحمل عقد الإيجار مؤقتًا لفترة طويلة جدًا ، 
وينتهي عقد إيجاره. يمكن لعميل آخرالحصول على عقد إيجار لنفس الملف ، والبدء في 
الكتابة إلى الملف. عندما توقف العميل مؤقتًايعود ، ويعتقد (بشكل غير صحيح) أنه لا 
يزال لديه عقد إيجار ساري المفعول ، ويمضي إلى ذلك أيضًاالكتابة إلى الملف. نتيجة 
لذلك ، يكتب العملاء الصدام ويفسد الملف.المعرفة والحقيقة والأكاذيب | 293

      صفحة 316
العميل 1العميل 2تخزينقفلالخدماتالوقتحسناقفل يحتفظ به العميل 1احصل 
علىإيجارإيجارمنتهية الصلاحيةحسناحسناقفل يحتفظ به العميل 2احصل 
علىإيجاراكتببياناتاكتببياناتوقف GC في العالم وقفةالشكل 8-4. تنفيذ غير صحيح للقفل 
الموزع: يعتقد العميل 1 أنه لا يزاللديه عقد إيجار صالح ، على الرغم من انتهاء 
صلاحيته ، وبالتالي يفسد ملفًا في التخزين.رموز المبارزةعند استخدام قفل أو عقد 
إيجار لحماية الوصول إلى بعض الموارد ، مثل تخزين الملفاتفي الشكل 8-4، نحتاج إلى 
التأكد من أن العقدة التي تخضع لاعتقاد خاطئ بأنها "اختيار واحد "لا يمكن أن يعطل 
بقية النظام. تقنية بسيطة إلى حد مايُطلق على هذا الهدف اسم المبارزة ، وهو موضح في 
الشكل 8-5.لنفترض أنه في كل مرة يمنح فيها خادم القفل قفلًا أو عقد إيجار ، فإنه 
يقوم أيضًا بإرجاع ملفرمز المبارزة ، وهو رقم يزداد في كل مرة يتم فيها منح قفل 
(على سبيل المثالتزداد بواسطة خدمة القفل). يمكننا بعد ذلك أن نطلب ذلك في كل مرة 
يرسل فيها العميل ملفطلب كتابة إلى خدمة التخزين ، يجب أن يتضمن رمز السياج 
الحالي.العميل 1العميل 2تخزينقفلالخدماتالوقتحسنا،الرمز المميز: 33قفل يحتفظ به 
العميل 1احصل علىإيجارإيجارمنتهية الصلاحيةحسنا،الرمز المميز: 34حسناقفل يحتفظ به 
العميل 2احصل علىإيجاراكتبالرمز المميز: 34اكتبالرمز المميز: 33مرفوض:رمز قديموقف 
GC في العالم وقفةالشكل 8-5. جعل الوصول إلى التخزين آمنًا من خلال السماح بالكتابة 
فقط بترتيب الزيادة‐جي المبارزة الرموز.في الشكل 8-5، يكتسب العميل 1 عقد الإيجار 
برمز رمزي 33 ، ولكنه ينتقل بعد ذلك إلى aوقفة طويلة وينتهي عقد الإيجار. يحصل 
العميل 2 على عقد الإيجار برمز رمزي 34 (يزيد الرقم دائمًا) ، ثم يرسل طلب الكتابة 
إلى خدمة التخزين ،بما في ذلك الرمز المميز 34. لاحقًا ، يعود العميل 1 إلى الحياة 
ويرسل كتابته إلى294 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 317
خدمة التخزين ، بما في ذلك قيمة الرمز المميز 33. ومع ذلك ، فإن خادم التخزين يذكر 
ذلكلقد عالجت بالفعل كتابة برقم رمزي أعلى (34) ، ولذا فهي ترفضطلب مع رمز 33.إذا 
تم استخدام ZooKeeper كخدمة تأمين ، أو معرف المعاملة zxid أو إصدار العقدة 
cverيمكن استخدام سيون كرمز سياج. لأنها مضمونة لتكون رتيبةزيادة ، لديهم الخصائص 
المطلوبة [70 ].لاحظ أن هذا يتطلب من المورد نفسه أن يقوم بدور نشط في التحقق من 
الرموز المميزة ، ورفض أي كتابات يتراجع عنها الرمز المميز - فهذا ليس 
كافيًاالاعتماد على العملاء الذين يتحققون من حالة القفل الخاصة بهم بأنفسهم. 
للموارد التي لا تشرحتدعم itly الرموز المميزة للمبارزة ، فقد لا يزال بإمكانك 
التغلب على القيود (لـعلى سبيل المثال ، في حالة خدمة تخزين الملفات ، يمكنك تضمين 
رمز السياج فياسم الملف). ومع ذلك ، فإن نوعًا من الفحص ضروري لتجنب معالجة 
الطلباتخارج حماية القفل.قد يبدو التحقق من الرمز المميز على جانب الخادم جانبًا 
سلبيًا ، ولكن يمكن القول إنه ملفشيء جيد: ليس من الحكمة أن تفترض الخدمة أن 
عملائها سيكونون دائمًا في حالة جيدة-تم التصرف ، لأن العملاء غالبًا ما يديرهم 
أشخاص تختلف أولوياتهم بشدة‐من أولويات القائمين بتشغيل الخدمة [72 ]. وبالتالي ، 
فهي فكرة جيدةلأي خدمة لحماية نفسها من العملاء المسيئين عن طريق الخطأ.العيوب 
البيزنطيةتعتبر التقنيات الموجودة في القسم الأخير ، مثل رموز المبارزة ، مفيدة في 
الكشفوحظر عقدة تتصرف عن طريق الخطأ عن غير قصد (على سبيل المثال لأنها لم تفعل ذلك 
بعداكتشفت أن عقد إيجارها قد انتهى). ومع ذلك ، إذا أرادت العقدة عمدًا أن تفرغVert 
من ضمانات النظام ، يمكنه القيام بذلك بسهولة عن طريق إرسال رسائل مزيفةرمز 
المبارزة.في هذا الكتاب نفترض أن العقد غير موثوقة ولكنها صادقة: قد تكون بطيئة 
أولا تستجيب أبدًا (بسبب خطأ) ، وقد تكون حالتهم قديمة (بسبب توقف GC أوالتأخير 
الشبكة)، ولكننا نفترض أنه إذا عقدة يفعل الاستجابة، فإنه هو قول "الحقيقة": لأفضل 
ما لديها من معرفة ، إنها تلعب وفقًا لقواعد البروتوكول.تصبح مشاكل الأنظمة الموزعة 
أكثر صعوبة إذا كان هناك خطر من أن العقد قد تكون"الكذب" (إرسال ردود خاطئة أو 
تالفة تعسفية) - على سبيل المثال ، إذا كانت العقدة قد تدعيلتلقي رسالة معينة من 
عقدة أخرى ، في حين أنها لم تكن كذلك في الواقع. اذا كانالعقدة ترسل رسائل غير 
صحيحة إلى العقد الأخرى ، وهذا ما يعرف بالخطأ البيزنطي ، والمعرفة والحقيقة 
والأكاذيب | 295

      صفحة 318
تُعرف مشكلة الوصول إلى إجماع في هذه البيئة غير الموثوقة باسممشكلة الجنرالات 
البيزنطيين [73 ].مشكلة الجنرالات البيزنطيينمشكلة الجنرالات البيزنطيين هي تعميم 
لما يسمى بالجنرالينالمشكلة [ 74 ] التي تتخيل موقفًا يحتاج فيه جنرالان في الجيش 
إلى الاتفاقخطة معركة مشتركة. نظرًا لأنهم أقاموا معسكرًا في موقعين مختلفين ، 
يمكنهم فقطالتواصل عن طريق الرسول ، وفي بعض الأحيان يتأخر الرسل أو يتم القبض 
عليهم(مثل الحزم في الشبكة). سنناقش مشكلة التوافق هذه بمزيد من التفصيلفي الفصل 
9.في النسخة البيزنطي لهذه المشكلة، وهناك ن الجنرالات الذين يحتاجون إلى توافق، 
وأعاقت مساعيهم حقيقة وجود بعض الخونة في وسطهم.معظم الجنرالات مخلصون ، وبالتالي 
يرسلون رسائل صادقة ، لكن الخونة قد يفعلون ذلكحاول خداع وإرباك الآخرين بإرسال 
رسائل مزيفة أو غير صحيحة (أثناء المحاولة‐جي لتظل غير مكتشفة). من غير المعروف 
مسبقا من هم الخونة.كانت بيزنطة مدينة يونانية قديمة أصبحت فيما بعد القسطنطينية في 
المكانالتي هي الآن اسطنبول في تركيا. لا يوجد أي دليل تاريخي على أن الجنرالاتكانت 
بيزنطة أكثر عرضة للتآمر والتآمر من تلك الموجودة في أماكن أخرى.بدلا من ذلك ، 
الاسم مشتق من البيزنطية بمعنى مفرط التعقيد ،البيروقراطية ، المخادعة ، التي كانت 
تستخدم في السياسة قبل وقت طويل من أجهزة الكمبيوتر [75 ]. خروف-أراد أورت اختيار 
جنسية لا تسيء إلى أي قارئ ، وكان كذلكنصح بأن تسمية مشكلة الجنرالات الألبان لم 
تكن فكرة جيدة [ 76 ].النظام يتحمل الأخطاء البيزنطية إذا استمر في العمل بشكل صحيح 
، حتى لو كان البعضمن العقد معطلة ولا تمتثل للبروتوكول ، أو في حالة هجوم 
ضار‐يتدخلون في الشبكة. هذا مناسب في بعض الظروف المحددة ،فمثلا:• في بيئات الفضاء 
، البيانات الموجودة في ذاكرة الكمبيوتر أو سجل وحدة المعالجة المركزيةيمكن أن تتلف 
بسبب الإشعاع ، مما يؤدي إلى الاستجابة للعقد الأخرى فيطرق غير متوقعة بشكل تعسفي. 
نظرًا لأن فشل النظام سيكون مكلفًا للغاية(على سبيل المثال ، تحطم طائرة ومقتل كل 
من كان على متنها ، أو اصطدام صاروخ بهامحطة الفضاء الدولية) ، يجب أن تتسامح أنظمة 
التحكم في الطيران مع البيزنطيةالعيوب [ 77، 78].• في نظام مع العديد من المنظمات 
المشاركة ، قد بعض المشاركينمحاولة خداع الآخرين أو الاحتيال عليهم. في مثل هذه 
الظروف ، لا يعد آمنًا بالنسبة لـعقدة لتثق ببساطة في رسائل عقدة أخرى ، حيث يمكن 
إرسالها مع mali‐نية كريمة. على سبيل المثال ، يمكن النظر في أنظمة مثل Bitcoin 
blockchain296 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 319
لتكون وسيلة لإقناع الأطراف غير الموثوقة بشكل متبادل بالاتفاق على ما إذا كانت 
الصفقةحدث أم لا ، دون الاعتماد على سلطة مركزية [ 79].ومع ذلك ، في أنواع الأنظمة 
التي نناقشها في هذا الكتاب ، يمكننا عادةً بأمانلنفترض أنه لا توجد أخطاء بيزنطية. 
في مركز البيانات الخاص بك ، تكون جميع العقد مخروطيةتصيدها مؤسستك (حتى يمكن 
الوثوق بها) ومستويات الإشعاعمنخفضة بما يكفي بحيث لا يمثل تلف الذاكرة مشكلة 
كبيرة. بروتوكولات لماكوأنظمة التسامح مع الخطأ البيزنطي معقدة للغاية [80 ] والخطأ 
متسامحتعتمد الأنظمة المضمنة على الدعم من مستوى الأجهزة [ 77]. في معظم من جانب 
الخادمأنظمة البيانات ، فإن تكلفة نشر الحلول البيزنطية المتسامحة تجعلهاغير 
عملي.يمكن اعتبار خطأ في البرنامج خطأ بيزنطيًا ، ولكن إذا قمت بنشر ملفنفس 
البرنامج لجميع العقد ، فلا يمكن أن تنقذك الخوارزمية البيزنطية المتسامحة مع 
الخطأ.تتطلب معظم الخوارزميات البيزنطية المتسامحة مع الأخطاء أغلبية ساحقة تزيد عن 
اثنينتعمل ثلثي العقد بشكل صحيح ، أي إذا كان لديك أربع عقد على الأكثرقد يعطل 
المرء. لاستخدام هذا الأسلوب ضد الأخطاء ، يجب أن يكون لديكأربعة تطبيقات مستقلة 
لنفس البرنامج ، ونأمل أن يكون هناك خلل فقطيظهر في أحد التطبيقات الأربعة.وبالمثل 
، سيكون من الرائع أن يحمينا البروتوكول من الثغرات الأمنية ،التنازلات الأمنية 
والهجمات الضارة. لسوء الحظ ، هذا غير واقعيإما: في معظم الأنظمة ، إذا تمكن 
المهاجم من اختراق عقدة واحدة ، فمن المحتمل أن يتمكن من ذلكتعرضهم للخطر جميعًا ، 
لأنهم على الأرجح يقومون بتشغيل نفس البرنامج. هكذا،الآليات التقليدية (المصادقة 
والتحكم في الوصول والتشفير والجدران النارية وما إلى ذلكon) تظل الحماية الرئيسية 
ضد المهاجمين.أشكال الكذب الضعيفةعلى الرغم من أننا نفترض أن العقد صادقة بشكل عام 
، فقد يكون من المفيد إضافة mecha‐nisms إلى البرامج التي تحمي من الأشكال الضعيفة 
من "الكذب" - على سبيل المثال ، غير صالحةالرسائل بسبب مشكلات في الأجهزة وأخطاء 
البرامج والتهيئة الخاطئة. هذا الحماية‐آليات نشوئها ليست التسامح البيزنطي الكامل 
للخطأ ، كما لم يفعلواتصمد أمام خصم حازم ، لكنها مع ذلك بسيطة وواقعيةخطوات نحو 
موثوقية أفضل. فمثلا:• تتلف حزم الشبكة أحيانًا بسبب مشكلات في الأجهزة أو أخطاء 
بهاأنظمة التشغيل ، وبرامج التشغيل ، وأجهزة التوجيه ، وما إلى ذلك ، عادةً ما يتم 
اكتشاف الحزم التالفةالمجاميع الاختبارية المضمنة في TCP و UDP ، لكنها في بعض 
الأحيان تتهرب من الاكتشاف [81 ،82 ، 83 ]. التدابير البسيطة عادة ما تكون حماية 
كافية ضد مثل هذا الفساد‐نشوئها ، مثل المجاميع الاختبارية في بروتوكول مستوى 
التطبيق.• يجب أن يقوم التطبيق الذي يمكن الوصول إليه للجمهور بتعقيم أي مدخلات من 
المستخدمين بعناية ،على سبيل المثال التحقق من أن القيمة تقع ضمن نطاق معقول ، 
وتحديدحجم السلاسل لمنع رفض الخدمة من خلال عمليات تخصيص الذاكرة الكبيرة. 
انالمعرفة والحقيقة والأكاذيب | 297

      صفحة 320
قد تتمكن الخدمة الداخلية خلف جدار الحماية من الإفلات من عمليات الفحص الأقل 
صرامةعلى المدخلات ، ولكن بعض التحقق من صحة القيم الأساسية (على سبيل المثال في 
تحليل البروتوكول [ 81 ])فكرة جيدة.• يمكن تكوين عملاء NTP بعناوين خادم متعددة. 
عند المزامنةing ، يقوم العميل بالاتصال بهم جميعًا ، وتقدير أخطائهم ، والتحقق من 
ذلكتوافق غالبية الخوادم على نطاق زمني معين. طالما أن معظم الخوادمحسنًا ، تم 
اكتشاف خادم NTP الذي تم تكوينه بشكل خاطئ والذي يبلغ عن وقت غير صحيح على أنهخارجي 
، ويتم استبعاده من المزامنة [ 36]. هذا يجعل NTP أكثرأقوى مما لو كان يستخدم 
خادمًا واحدًا فقط.نموذج النظام والواقعتم تصميم العديد من الخوارزميات لحل مشكلات 
الأنظمة الموزعة - لـعلى سبيل المثال ، سوف ندرس الحلول لمشكلة الإجماع في الفصل 9 
. مرتبلكي تكون مفيدة ، تحتاج هذه الخوارزميات إلى تحمل الأخطاء المختلفة للأنظمة 
الموزعةالتي ناقشناها في هذا الفصل.يجب كتابة الخوارزميات بطريقة لا تعتمد بشكل 
كبير علىتفاصيل تكوين الأجهزة والبرامج التي يتم تشغيلها عليها. هذا فيبدوره يتطلب 
أن نقوم بطريقة ما بإضفاء الطابع الرسمي على أنواع الخطأ التي نتوقع حدوثهافي 
النظام. نقوم بذلك عن طريق تحديد نموذج النظام ، وهو تجريديصف الأشياء التي قد 
تفترضها الخوارزمية.فيما يتعلق بافتراضات التوقيت ، هناك ثلاثة نماذج للنظام شائعة 
الاستخدام:نموذج متزامنيفترض النموذج المتزامن تأخير الشبكة المحدود ، وعملية 
محدودة pau‐ses وخطأ ساعة محدود. هذا لا يعني بالضبط الساعات المتزامنة أولا يوجد 
تأخير في الشبكة ؛ هذا يعني فقط أنك تعرف أن تأخير الشبكة ، والتوقف المؤقت 
والساعةلن يتجاوز الانجراف أبدًا حدًا أعلى ثابتًا [ 84]. كما تمت مناقشته في هذا 
الفصل ،النموذج المتزامن ليس نموذجًا واقعيًا لمعظم الأنظمة العملية ، لأنتحدث 
تأخيرات وتوقفات غير محدودة.نموذج متزامن جزئيًاالتزامن الجزئي يعني أن النظام 
يتصرف مثل نظام متزامن في معظم الأحيانالوقت ، ولكنه في بعض الأحيان يتجاوز حدود 
تأخير الشبكة ، تتوقف العملية مؤقتًاوساعة الانجراف [ 84]. هذا نموذج واقعي للعديد 
من الأنظمة: في معظم الأحيان ،الشبكة والعمليات حسنة التصرف ، وإلا فلن نكون قادرين 
على ذلكلإنجاز أي شيء - ولكن علينا أن نأخذ في الحسبان حقيقة أن أي توقيتقد يتم 
تحطيم الافتراضات من حين لآخر. عندما يحدث هذا ، تأخير الشبكة ،قد تصبح فترات 
الإيقاف المؤقت وخطأ الساعة كبيرة بشكل تعسفي.298 | الفصل الثامن: مشكلة الأنظمة 
الموزعة

      صفحة 321
نموذج غير متزامنفي النموذج غير المتزامن ، لا يُسمح للخوارزمية بعمل أي 
توقيتافتراضات على الإطلاق - في الواقع ، ليس لديها حتى ساعة (لذلك لا يمكن 
استخدامهاالمهلات). يمكن تصميم بعض الخوارزميات في النموذج غير المتزامن ، لكنها 
كذلكمقيدة للغاية.علاوة على ذلك ، إلى جانب مشكلات التوقيت ، يتعين علينا النظر في 
حالات فشل العقدة. الثلاثة الأكثرنماذج النظام الشائعة للعقد هي:أخطاء توقف 
الأعطالفي نموذج توقف التعطل ، قد تفترض الخوارزمية أن العقدة يمكن أن تفشل 
فقططريقة واحدة ، وهي بالتحطم. هذا يعني أن العقدة قد تتوقف فجأةتستجيب في أي لحظة 
، وبعد ذلك تختفي هذه العقدة إلى الأبد - إنها لا تفعل ذلك أبدًايعود.أخطاء التعافي 
من التعطلنفترض أن العقد قد تنهار في أي لحظة ، وربما تبدأ في الاستجابةمرة أخرى 
بعد وقت غير معروف. في نموذج استرداد التعطل ، يتم افتراض العقدأن يكون لديك تخزين 
مستقر (أي تخزين قرص غير متطاير) يتم حفظه عبرتعطل ، بينما يُفترض أن تكون الحالة 
في الذاكرة مفقودة.العيوب البيزنطية (التعسفية)يمكن للعقد أن تفعل أي شيء على 
الإطلاق ، بما في ذلك محاولة خداع الآخرين وخداعهمالعقد ، كما هو موضح في القسم 
الأخير.لنمذجة الأنظمة الحقيقية ، النموذج المتزامن جزئيًا مع استعادة 
الأعطالالأخطاء هي النموذج الأكثر فائدة بشكل عام. لكن كيف تتعامل الخوارزميات 
الموزعةمع هذا النموذج؟صحة الخوارزميةلتحديد ما يعنيه أن تكون الخوارزمية صحيحة ، 
يمكننا وصف خصائصها .على سبيل المثال ، ناتج خوارزمية الفرز له خاصية أي عرضينعناصر 
صبغة لقائمة المخرجات ، يكون العنصر الموجود على اليسار أصغر من العنصر الإضافيمنة 
أبعد إلى اليمين. هذه ببساطة طريقة رسمية لتحديد ما تعنيه لـقائمة ليتم 
فرزها.وبالمثل ، يمكننا تدوين الخصائص التي نريدها من الخوارزمية الموزعةتحديد ما 
يعنيه أن تكون على صواب. على سبيل المثال ، إذا قمنا بإنشاء رموز سياجبالنسبة للقفل 
(راجع "رموز المبارزة" في الصفحة 294 ) ، قد نطلب الحصول على الخوارزميةالخصائص 
التالية:التفردلا يوجد طلبان لرمز سياج بإرجاع نفس القيمة.المعرفة والحقيقة 
والأكاذيب | 299

      صفحة 322
تسلسل رتيبإذا طلب x إرجاع الرمز المميز t x ، وطلب y إرجاع الرمز المميز t y ، 
وإكمال xقبل أن تبدأ y ، ثم t x < t y .التوفرتتلقى العقدة التي تطلب رمز سياج ولا 
تتعطل في النهاية ملفاستجابة.تكون الخوارزمية صحيحة في بعض نماذج النظام إذا كانت 
تفي دائمًا بخصائصها بالكاملالمواقف التي نفترض أنها قد تحدث في نموذج النظام هذا. 
لكن كيف يصنع هذااشارة؟ إذا تعطلت جميع العقد ، أو أصبحت كل تأخيرات الشبكة فجأة 
طويلة بشكل غير محدود ، إذنلن تتمكن أي خوارزمية من إنجاز أي شيء.السلامة 
والحيويةلتوضيح الموقف ، يجدر التمييز بين نوعين مختلفين منالخصائص: السلامة و من 
مدى الحياة الخصائص. في المثال أعلاه ، التفرد و monالتسلسل الصوتي هي خصائص أمان ، 
لكن التوافر هو خاصية حيوية.ما الذي يميز نوعي الملكية؟ الهبة هي خصائص 
الحياةغالبًا ما تتضمن كلمة "في النهاية" في تعريفها. (ونعم ، لقد خمنت ذلك 
-الاتساق النهائي هو خاصية حيويّة [ 85 ].)غالبًا ما يتم تعريف السلامة بشكل غير 
رسمي على أنها لا تحدث شيئًا سيئًا ، والحيوية هي شيءالخير يحدث في النهاية . ومع 
ذلك ، من الأفضل عدم قراءة الكثير في تلك غير الرسميةالتعريفات ، لأن معنى الخير 
والشر ذاتي. التعاريف الفعليةالسلامة والحيوية دقيقة ورياضية [86 ]:• في حالة 
انتهاك خاصية الأمان ، يمكننا الإشارة إلى نقطة زمنية معينة عندهاتم كسره (على سبيل 
المثال ، إذا تم انتهاك خاصية التفرد ، فيمكننا تحديدtify العملية المحددة التي تم 
فيها إرجاع رمز سياج مكرر).بعد انتهاك خاصية الأمان ، لا يمكن التراجع عن الانتهاك 
- لا يمكن التراجع عن الانتهاكتم بالفعل الضرر.• تعمل خاصية liveness في الاتجاه 
المعاكس: قد لا تصمد في مرحلة ماالوقت (على سبيل المثال ، ربما تكون العقدة قد 
أرسلت طلبًا ولكنها لم تتلق بعد ملفالاستجابة) ، ولكن هناك دائمًا أمل في أن يتم 
إشباعها في المستقبل (أي من خلالتلقي رد).ميزة التمييز بين خصائص السلامة والحيوية 
هي أنهاتساعدنا في التعامل مع نماذج النظام الصعبة. بالنسبة للخوارزميات الموزعة ، 
فمن الشائعتتطلب أن يتم الاحتفاظ بخصائص الأمان دائمًا ، في جميع المواقف المحتملة 
لنموذج النظام[84]. أي أنه حتى إذا تعطلت جميع العقد ، أو فشلت الشبكة بالكامل ، 
يجب أن تقوم الخوارزميةمع ذلك ، تأكد من أنها لا تقدم نتيجة خاطئة ، أي أن السلامة 
مناسبةالعلاقات تبقى راضية.300 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 323
ومع ذلك ، مع خصائص الحياة ، يُسمح لنا بتقديم التحذيرات: على سبيل المثال ، 
نحنيمكن القول أن الطلب يحتاج إلى تلقي استجابة فقط إذا لم تكن غالبية العقد كذلك، 
وفقط إذا تعافت الشبكة في النهاية من الانقطاع. التعريفمن النموذج المتزامن جزئيًا 
أن يعود النظام في النهاية إلى ملفالحالة المتزامنة - أي أن أي فترة انقطاع للشبكة 
تستمر لفترة محدودة فقطالمدة ثم يتم إصلاحها.رسم خرائط نماذج النظام للعالم 
الحقيقيتعتبر خصائص الأمان والحيوية ونماذج النظام مفيدة جدًا في التفكيرصحة 
الخوارزمية الموزعة. ومع ذلك ، عند تنفيذ الخوارزميةفي الممارسة العملية ، تعود 
الحقائق الفوضوية للواقع لتعضك مرة أخرى ، وهييصبح من الواضح أن نموذج النظام هو 
تجريد مبسط للواقع.على سبيل المثال ، تفترض الخوارزميات في نموذج استرداد الأعطال 
عمومًا أن البيانات بتنسيقالتخزين المستقر ينجو من الأعطال. ومع ذلك ، ماذا يحدث 
إذا كانت البيانات الموجودة على القرص تالفة؟ted ، أو تم مسح البيانات بسبب خطأ في 
الجهاز أو خطأ في التكوين [87 ]؟ ماذا او مايحدث إذا كان الخادم به خلل في البرنامج 
الثابت ، وفشل في التعرف على محركات الأقراص الثابتة الموجودة عليهإعادة التشغيل ، 
على الرغم من توصيل محركات الأقراص بشكل صحيح بالخادم [88 ]؟تعتمد خوارزميات النصاب 
(راجع "نصاب القراءة والكتابة" في الصفحة 173 ) على أالعقدة التي تتذكر البيانات 
التي تدعي أنها خزنتها. إذا كانت العقدة قد تعاني منفقدان الذاكرة ونسيان البيانات 
المخزنة مسبقًا ، والتي تكسر شرط النصاب القانوني ، ووهكذا يكسر صحة الخوارزمية. 
ربما هناك حاجة إلى نموذج نظام جديد ،حيث نفترض أن التخزين المستقر ينجو في الغالب 
من الأعطال ، ولكن في بعض الأحيان قد يحدث ذلككن خاسرا. لكن هذا النموذج يصبح من 
الصعب التفكير فيه.يمكن للوصف النظري للخوارزمية أن يعلن أن بعض الأشياء هي 
ببساطةيفترض أنه لن يحدث - وفي الأنظمة غير البيزنطية ، علينا أن نصنع 
بعضًاافتراضات حول العيوب التي يمكن أن تحدث ولا يمكن أن تحدث. ومع ذلك ، فإن 
التنفيذ الحقيقيقد لا يزال يتعين عليها تضمين رمز للتعامل مع الحالة التي يحدث فيها 
شيء ماكان يُفترض أنه مستحيل ، حتى لو كان هذا التعامل يتلخص في printf ("Sucks 
toتكون أنت ") و الخروج (666) - أي السماح للعامل البشري تنظيف الفوضى [ 89].(يمكن 
القول إن هذا هو الفرق بين علوم الكمبيوتر وهندسة البرمجيات.)هذا لا يعني أن نماذج 
النظام النظرية والمجردة لا قيمة لها - تمامًاضد. إنها مفيدة بشكل لا يصدق في 
استخلاص تعقيد النظام الحقيقي‐إلى مجموعة يمكن التحكم فيها من الأخطاء التي يمكننا 
التفكير فيها ، حتى نتمكن من التغلب عليهاالوقوف على المشكلة ومحاولة حلها بشكل 
منهجي. يمكننا إثبات صحة الخوارزمياتمن خلال إظهار أن خصائصها ثابتة دائمًا في بعض 
نماذج النظام.إثبات صحة الخوارزمية لا يعني أن تنفيذها على نظام حقيقي 
إرادةبالضرورة دائما تتصرف بشكل صحيح. لكنها خطوة أولى جيدة جدًا ، لأن theo‐يمكن 
أن يكشف التحليل الشبكي عن مشاكل في الخوارزمية قد تظل مخفية لـلفترة طويلة في نظام 
حقيقي ، وهذا ما يزعجك فقط عند افتراضاتكالمعرفة والحقيقة والأكاذيب | 301

      صفحة 324
(على سبيل المثال حول التوقيت) هُزمت بسبب ظروف غير عادية. التحليل النظريوالاختبار 
التجريبي بنفس القدر من الأهمية.ملخصلقد ناقشنا في هذا الفصل مجموعة واسعة من 
المشاكل التي يمكن أن تحدث في بلدان مختلفة.نظم تحية ، بما في ذلك:• عندما تحاول 
إرسال حزمة عبر الشبكة ، فقد يتم فقدها أو بشكل عشوائيتأخير. وبالمثل ، قد يتم فقد 
الرد أو تأخيره ، لذلك إذا لم تحصل على رد ،ليس لديك أي فكرة عما إذا كانت الرسالة 
قد وصلت أم لا.• قد تكون ساعة العقدة غير متزامنة بشكل ملحوظ مع العقد الأخرى (على 
الرغم منأفضل الجهود لإعداد NTP) ، فقد يقفز فجأة للأمام أو للخلف في الوقت المناسب 
، والاعتماد عليها أمر خطير لأنه على الأرجح ليس لديك مقياس جيد لـالفاصل الزمني 
لخطأ ساعتك.• قد تتوقف العملية مؤقتًا لفترة طويلة من الوقت في أي وقت أثناء 
تنفيذها(ربما بسبب توقف جامع القمامة في العالم) ، أعلن ميتًاالعقد الأخرى ، ثم 
تعود إلى الحياة مرة أخرى دون أن تدرك أنها كانت كذلكمتوقف مؤقتا.كل هذا يمكن 
تلخيصه على أنه فشل جزئي . كلما حاول البرنامج القيام بأي شيءالشيء الذي يتضمن 
عقدًا أخرى ، فهناك احتمال أنه قد يفشل أحيانًا ، أوانتقل بشكل عشوائي بطيئًا ، أو 
لا تستجيب على الإطلاق (وانتهى الوقت في النهاية). في النظام الموزع‐tems ، نحاول 
بناء التسامح مع الفشل الجزئي في البرامج ، بحيث يكون النظام كملفالكل قد يستمر في 
العمل ، حتى عندما يتم كسر بعض الأجزاء المكونة له.لتحمل الأخطاء ، فإن الخطوة 
الأولى هي اكتشاف الخطأ ، ولكن حتى هذا صعب. معظم نظاملا تمتلك tems آلية دقيقة 
لاكتشاف ما إذا كانت العقدة قد فشلت أم لاتعتمد معظم الخوارزميات الموزعة على 
المهلات لتحديد ما إذا كانت العقدة البعيدة أم لامازال متاحا. ومع ذلك ، لا يمكن 
تمييز المهلات بين فشل الشبكة والعقدة‐في بعض الأحيان ، يؤدي التأخير المتغير 
للشبكة إلى الاشتباه في العقدة خطأًتحطم. علاوة على ذلك ، في بعض الأحيان يمكن أن 
تكون العقدة في حالة تدهور: على سبيل المثال ، Gig‐قد تنخفض واجهة شبكة abit فجأة 
إلى معدل نقل يبلغ 1 كيلو بت / ثانية بسبب السائقعلة [ 90]. مثل هذا النظام الذي 
"يعرج" ولكنه لم يمت ، يمكن أن يكون أكثر صعوبةالتعامل مع أكثر من عقدة فاشلة 
تمامًا.بمجرد اكتشاف خطأ ، فإن جعل النظام يتسامح مع الأمر ليس بالأمر السهل أيضًا: 
لا يوجدمتغير عالمي ، لا ذاكرة مشتركة ، لا توجد معرفة مشتركة أو أي نوع آخرحالة 
مشتركة بين الآلات. لا تستطيع العقد حتى الاتفاق على الوقت الحالي ، ناهيك عن ذلكأي 
شيء أعمق. الطريقة الوحيدة لتدفق المعلومات من عقدة إلىوالآخر هو إرساله عبر الشبكة 
غير الموثوقة. لا يمكن أن تكون القرارات الكبرى بأمانتم إنشاؤه بواسطة عقدة واحدة ، 
لذلك نحن نطلب بروتوكولات تسرد المساعدة من العقد الأخرىومحاولة الحصول على نصاب 
الأغلبية للموافقة.302 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 325
إذا كنت معتادًا على كتابة البرامج في الكمال الرياضي المثالي لشخص واحدالكمبيوتر ، 
حيث تؤدي العملية نفسها دائمًا بشكل حاسم إلى نفس النتيجة ،ثم الانتقال إلى الواقع 
المادي الفوضوي للأنظمة الموزعة يمكن أن يكون قليلاً منصدمة. على العكس من ذلك ، 
غالبًا ما يعتبر مهندسو الأنظمة الموزعة المشكلة على أنها تافهةial إذا كان من 
الممكن حلها على جهاز كمبيوتر واحد [ 5 ] ، وبالفعل يمكن لجهاز كمبيوتر واحد القيام 
بذلكالكثير في الوقت الحاضر [ 91]. إذا كان بإمكانك تجنب فتح صندوق Pandora ، 
واحتفظ بالأشياء ببساطةعلى جهاز واحد ، فإن الأمر يستحق القيام بذلك بشكل عام.ومع 
ذلك ، كما نوقش في مقدمة الجزء الثاني، قابلية التوسع ليست السبب الوحيدلرغبتهم في 
استخدام نظام موزع. التسامح مع الخطأ والكمون المنخفض (عن طريق وضعالبيانات القريبة 
جغرافيًا من المستخدمين) أهداف مهمة بنفس القدر ، ويمكن لهذه الأشياءلا تتحقق من 
خلال عقدة واحدة.في هذا الفصل ، ذهبنا أيضًا إلى بعض الظلال لاستكشاف ما إذا كان 
عدم موثوقيةالشبكات والساعات والعمليات من قوانين الطبيعة الحتمية. رأينا أنه ليس 
كذلك: إنه كذلكمن الممكن إعطاء ضمانات استجابة صعبة في الوقت الحقيقي وتأخير محدود 
في الشبكات ،لكن القيام بذلك مكلف للغاية ويؤدي إلى استخدام أقل لموارد 
الأجهزة.معظم الأنظمة غير الحرجة للسلامة تختار رخيصة وغير موثوقة على باهظة الثمن 
وموثوق بها.لقد تطرقنا أيضًا إلى أجهزة الكمبيوتر العملاقة ، التي تحمل مكونات 
موثوقة ، وبالتالييجب إيقافها وإعادة تشغيلها تمامًا عند فشل أحد المكونات. على 
نقيض ذلك،يمكن أن تعمل الأنظمة الموزعة إلى الأبد دون مقاطعة على مستوى الخدمة 
،لأنه يمكن معالجة جميع الأخطاء والصيانة على مستوى العقدة - على الأقل فينظرية. 
(من الناحية العملية ، إذا تم إدخال تغيير سيئ في التكوين على جميع العقد ، فسيؤدي 
ذلك إلى حدوث ذلكلا يزال يجلب نظامًا موزعًا على ركبتيه.)كان هذا الفصل كله يتعلق 
بالمشاكل ، وقد أعطانا نظرة قاتمة. في الالفصل التالي سوف ننتقل إلى الحلول ، 
ومناقشة بعض الخوارزميات التي لديهاتم تصميمه للتعامل مع جميع المشاكل في الأنظمة 
الموزعة.مراجع[1] مارك كافيج: " ليس هناك حل: أنت تبني نموذجًا موزعًانظام، " قائمة 
انتظار ACM ، المجلد 11 ، العدد 4 ، أبريل 2013. doi:10.1145 / 2466486.2482856[2] 
جاي كريبس: " التعرف على حقيقة موثوقية النظام الموزع، blog.empathy‐box.com ، 19 
مارس 2012.[3] سيدني بادوا: مغامرات لوفليس وباباج المثيرة: (في الغالب)القصة 
الحقيقية لأول كمبيوتر . كتب معينة ، أبريل 2015. ISBN:978-0-141-98151-2[4 ] كودا 
هيل: "لا يمكنك التضحية بتسامح التقسيم، "codahale.com ، 7 أكتوبر2010.ملخص | 303

      صفحة 326
[5 ] جيف هودجز: "ملاحظات حول الأنظمة الموزعة لدماء الشباب ، " 
Somethingsimi‐lar.com ، 14 يناير 2013.[6 ] أنطونيو ريغالادو: "من صاغ "الحوسبة 
السحابية"؟، "technologyreview.com ،31 أكتوبر 2011.[7 ] لويز أندريه باروسو ، 
وجيمي كليداراس ، وأورس هولزل: " مركز البيانات ككومي"الكمبيوتر: مقدمة لتصميم آلات 
مقياس المستودعات ، الطبعة الثانيةنشوئها، " محاضرات تجميعية حول هندسة الكمبيوتر ، 
المجلد 8 ، العدد 3 ، Morgan &Claypool Publishers ، يوليو 2013. doi: 10.2200 / 
S00516ED2V01Y201306CAC024، رقم ال ISBN:978-1627050104[8 ] ديفيد فيالا وفرانك 
مولر وكريستيان إنجلمان وآخرون: "كشف و Correcنشوئها من فساد البيانات الصامت 
للحوسبة عالية الأداء على نطاق واسع،" فيالمؤتمر الدولي للحوسبة عالية الأداء 
والشبكات والتخزين والتخزينالتحليل (SC12) ، نوفمبر 2012.[9 ] جلين ك. لوكوود: “ 
Hadoop's Un Comfortable Fit in HPC، "جلينكلوك‐wood.blogspot.co.uk ، ١٦ مايو 
٢٠١٤.[10 ] أرجون سينغ ، وجون أونغ ، وأميت أغاروال وآخرون: "ارتفاع كوكب المشتري: 
عقد من الإغلاقالطبولوجيا والتحكم المركزي في شبكة مراكز بيانات Google " ، في 
السنويمؤتمر مجموعة الاهتمام الخاصة بـ ACM حول اتصالات البيانات (SIGCOMM) 
،الصفحات 183–197 ، أغسطس 2015. doi: 10.1145 / 2785956.2787508[11] جون فون 
نيومان: " المنطق الاحتمالي وتوليف عضو موثوق"isms from Unreliable Components "، 
في دراسات Automata (AM-34) ، كلود إي شانونون وجون مكارثي ، المحررين. مطبعة جامعة 
برينستون ، 1956. ISBN:9780691079165[12] ريتشارد دبليو هامينج: فن ممارسة العلوم 
والهندسة . تايلور وفرانورابطة الدول المستقلة ، 1997. ISBN: 9056995006[13 ] كلود 
إي شانون: "نظرية رياضية للتواصل " The Bell Sys‐المجلة التقنية ، المجلد 27 ، 
العدد 3 ، الصفحات 379-423 و 623-656 ، يوليو 1948.[14] بيتر بيليس وكايل كينجسبري: 
" الشبكة موثوقة، " ACM Queue ، vol‐ume 12 ، العدد 7 ، يوليو 2014. دوى: 10.1145 / 
2639988.2639988[15] جوشوا بي لينرز ، وتريناب جوبتا ، وماركوس ك.أغيليرا ، ومايكل 
والفيش:"ترويض عدم اليقين في الأنظمة الموزعة بمساعدة الشبكة، "في العاشرالمؤتمر 
الأوروبي لأنظمة الكمبيوتر (EuroSys) ، أبريل 2015. doi:10.1145 / 
2741948.2741976[16] Phillipa Gill و Navendu Jain و Nachiappan Nagappan: “ 
Understanding Netفشل العمل في مراكز البيانات: القياس والتحليل والانعكاسات ، "في 
ACMمؤتمر SIGCOMM ، الصفحات 350-361 ، أغسطس 2011. doi: 10.1145 / 
2018436.2018477[17 ] مارك إمبرياكو: "وقت التوقف يوم السبت الماضي "، github.com ، 
26 كانون الأول (ديسمبر) 2012.304 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 327
[18 ] مارك أ دونجس: "رد: بطاقات bnx2 متقطعة دون اتصال بالإنترنت، "رسالة إلى 
Linuxالقائمة البريدية لـ netdev ، spinics.net ، 13 سبتمبر 2012.[19 ] كايل 
كينجسبري: "اتصل بي ربما: Elasticsearch، "aphyr.com ، 15 حزيران (يونيو) 2014.[20 
] سالفاتور سانفيليبو: "بعض الحجج حول خصائص Redis Sentinel وفشلسيناريوهات، 
”antirez.com ، 21 تشرين الأول (أكتوبر) 2014.[21] بيرت هوبرت: " صفحة SO_LINGER 
النهائية ، أو: لماذا لا يمكن الاعتماد على برنامج التعاون الفني " 
،blog.netherlabs.nl ، 18 يناير 2009.[22 ] نيكولاس ليوشون: "CAP: إذا كان كل ما 
لديك هو مهلة ، كل شيء يبدو وكأنه جزءنشوئها، ”blog.thislongrun.com ، 25 أيار 
(مايو) 2015.[23 ] جيروم سالتزر وديفيد بي ريد وديفيد دي كلارك: "الحجج الشاملةفي 
تصميم النظام ، " معاملات ACM على أنظمة الكمبيوتر ، المجلد 2 ، العدد 4 ،الصفحات 
277-288 ، نوفمبر 1984. دوى: 10.1145 / 357401.357402[24 ] Matthew P Grosvenor، 
Malte Schwarzkopf، Ionel Gog، et al: "قوائم الانتظار لاعندما يمكنك القفز عليهم!، 
في ندوة USENIX الثانية عشرة حول الشبكةتصميم وتنفيذ النظم (NSDI) ، مايو 2015.[25] 
Guohui Wang و TS Eugene Ng: " تأثير المحاكاة الافتراضية على الشبكةأداء مركز 
بيانات Amazon EC2، "في المؤتمر الدولي التاسع والعشرين IEEE بتاريخاتصالات 
الكمبيوتر (INFOCOM) ، مارس 2010. doi: 10.1109 / INFCOM.2010.5461931[26 ] فان 
جاكوبسون: "تجنب الازدحام والسيطرة عليه "، في ندوة ACM بتاريخمعماريات وبروتوكولات 
الاتصالات (SIGCOMM) ، الصفحات 314-329 ، أغسطس1988. دوى: 10.1145 / 52324.52356[27 
] براندون فيليبس: "إلخ: القفل الموزع واكتشاف الخدمة، "في Strangeلوب ، سبتمبر 
2014.[28] ستيف نيومان: " نظرة منهجية على EC2 I / O، blog.scalyr.com ، 16 
أكتوبر2012.[29 ] ناوهيرو هاياشيبارا ، وكزافييه ديفاغو ، ورامي يارد ، وتاكويا 
كاتاياما: "الϕ جهاز كشف فشل الاستحقاق ، "المعهد الياباني المتقدم للعلوم 
والتكنولوجيا ،كلية علوم المعلومات ، التقرير الفني IS-RR-2004-010 ، مايو 2004.[30 
] جيفري وانج:كاشف فشل الاستحقاق Phi "، ternarysearch.blogspot.co.uk، 11اغسطس 
2013.[31] سرينيفاسان كيشاف: نهج هندسي لشبكات الكمبيوتر: ATMالشبكات والإنترنت 
وشبكة الهاتف . أديسون ويسلي بروفيشنال ،مايو 1997 ISBN: 0-201-63442-2[32] " 
الشبكة الرقمية للخدمات المتكاملة" ، docwiki.cisco.com.ملخص | 305

      صفحة 328
[33] أوتمار كياس: شبكات الصراف الآلي . دار نشر طومسون الدولية ، 1995. 
ISBN:1-850-32128-0[34] " الأسئلة الشائعة حول InfiniBand ." تقنيات Mellanox ، 22 
ديسمبر 2014.[35 ] خوسيه ريناتو سانتوس ، ويوشيو تورنر ، وج (جون) جاناكرامان: 
"نهاية لنهايةالتحكم في الازدحام لـ InfiniBand "، في المؤتمر المشترك السنوي 
الثاني والعشرين لـ IEEEجمعيات الكمبيوتر والاتصالات (INFOCOM) ، أبريل 2003. تم 
النشر أيضًا بواسطةمختبرات HP بالو ألتو ، تقرير التكنولوجيا HPL-2002-359. دوى: 
10.1109 / INFCOM.2003.1208949[36] أولريش ويندل ، وديفيد دالتون ، ومارك مارتينيك 
، وديل آر وورلي: " إن NTPالتعليمات و HOWTO، ”ntp.org ، تشرين الثاني (نوفمبر) 
2006.[37] ديفيد هولمز: " Inside the Hotspot VM: الساعات والمؤقتات وجدولة الأحداث 
-الجزء الأول - Windows ، blogs.oracle.com ، 2 أكتوبر 2006.[38] ستيف لوغران: " 
الوقت على خوادم متعددة النواة ، متعددة المقابس " steveloughran.blog‐spot.co.uk ، 
17 سبتمبر 2015.[39 ] جيمس سي كوربيت ، وجيفري دين ، ومايكل إبستين ، وآخرون: 
"المفك: جوجلقاعدة بيانات موزعة عالميًا، في ندوة USENIX العاشرة حول نظام 
التشغيلالتصميم والتنفيذ (OSDI) ، أكتوبر 2012.[40 ] إم كابورالوني وآر أمبروسيني: 
"ما مدى قرب ساعة الكمبيوتر الشخصيتتبع الجدول الزمني UTC عبر الإنترنت؟ ، " المجلة 
الأوروبية للفيزياء ، المجلد 23 ،رقم 4 ، الصفحات L17 إلى L21 ، يونيو 2012. doi: 
10.1088 / 0143-0807 / 23/4/103[41 ] نيلسون مينار:مسح لشبكة NTP ” ، 
xenia.media.mit.edu ، ديسمبر1999.[42 ] فيليام هولوب:مزامنة الساعات في عنقود 
كاساندرا Pt. 1 - الاحتمالليم، blog.logentries.com ، 14 آذار (مارس) 2014.[43] بول 
هينينج كامب: " حرب ثانية واحدة (في أي وقت تموت؟) ،" إيه سي إمقائمة الانتظار ، 
المجلد 9 ، العدد 4 ، أبريل 2011.دوى: 10.1145 / 1966989.1967009[44 ] نيلسون 
مينار:الثانية الكبيسة تعطل نصف الإنترنت، "somebits.com ، 3 تموز (يوليو)2012.[45 
] كريستوفر باسكو: "الوقت والتكنولوجيا والثواني القفزة ، 
"googleblog.blog‐spot.co.uk ، 15 سبتمبر 2011.[46] Mingxue Zhao و Jeff Barr: " 
انظر قبل أن تقفز - القفزة القادمة ثانيًاو AWS ، ”aws.amazon.com ، 18 مايو 
2015.[47] " ضبط الوقت في الأجهزة الافتراضية لـ VMware ،" دليل المعلومات ، 
VMware، Inc. ،ديسمبر 2011.306 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 329
[48 ] "MiFID II / MiFIR: المعايير الفنية والتنفيذية التنظيمية - الملحقأنا 
(مسودة) ، "هيئة الأوراق المالية والأسواق الأوروبية ، تقرير ESMA / 2015/1464 
،سبتمبر 2015.[49 ] لوك بيغوم: "حل مزامنة الساعة MiFID II مع الحد الأدنى من 
الإنفاق(الجزء 1)، ”lmax.com ، 27 تشرين الثاني (نوفمبر) 2015.[50 ] كايل كينجسبري: 
"اتصل بي ربما: كاساندرا، "aphyr.com ، 24 سبتمبر 2013.[51] جون ديلي: " الساعات 
سيئة ، أو مرحبًا بك في عالم ديس الرائعtributed Systems "، basho.com ، 12 تشرين 
الثاني (نوفمبر) 2013.[52 ] كايل كينجسبري:مشكلة الطوابع الزمنية، "aphyr.com ، 12 
تشرين الأول (أكتوبر) 2013.[53] سانديب كولكارني ، ومورات دميرباس ، وديباك ماديبا 
، وبرادواج أففا ، ومارسيلو ليون: " الساعات الفيزيائية المنطقية واللقطات المتسقة 
في عالم العالم"قواعد البيانات التي تم تكريمها، "University at Buffalo، Computer 
Science and Engineering Tech‐nical Report 2014-04 ، مايو 2014.[54] جاستن شيهي: " 
لا يوجد الآن: مشاكل التزامن في النظام الموزع‐tems ، " قائمة انتظار ACM ، المجلد 
13 ، العدد 3 ، مارس 2015. doi: 10.1145 / 2733108[55 ] مراد دميرباس:Spanner: 
قاعدة بيانات Google الموزعة عالميًامرادبوفيfalo.blogspot.co.uk ، 4 يوليو 
2013.[56 ] داليا مالخي وجان فيليب مارتن:التحكم في التزامن في Spanner ، "أخبار 
ACM SIGACT ، المجلد 44 ، العدد 3 ، الصفحات 73-77 ، سبتمبر 2013. doi:10.1145 / 
2527748.2527767[57] مانويل برافو ، ونونو دييجيز ، وجينغنا زينج ، وباولو رومانو ، 
ولويس رودريغيز:"حول استخدام الساعات لفرض الاتساق في السحابة ، " IEEE Data 
Engineeringالنشرة ، المجلد 38 ، العدد 1 ، الصفحات 18-31 ، مارس 2015.[58 ] سبنسر 
كيمبال:Living Without Atomic Clocks "، cockroachlabs.com ، 17 فبراير.يناير 
2016.[59 ] كاري جي جراي وديفيد آر تشريتون: "عقود الإيجار: آلية فعالة ومتسامحة مع 
الأخطاءnism لاتساق ذاكرة التخزين المؤقت للملفات الموزعة، في ندوة ACM الثانية 
عشرة حول التشغيلمبادئ النظم (SOSP) ، ديسمبر 1989. doi: 10.1145 / 74850.74870[60 
] تود ليبكون: "تجنب GCs الكاملة في Apache HBase باستخدام MemStore-Local 
Allo‐مخازن الكاتيون: الجزء 1، ”blog.cloudera.com ، 24 فبراير 2011.[61] مارتن 
طومسون: " مجموعة قمامة جافا المقطرة،" ميكانيكي-sympathy.blogspot.co.uk ، 16 
يوليو 2013.[62] أليكسي راجوزين: " كيف تروض توقف جافا GC مؤقتًا؟ البقاء على قيد 
الحياة 16 جيجا كومة وأكبر ، "java.dzone.com ، 28 حزيران (يونيو) 2011.ملخص | 307

      صفحة 330
[63] كريستوفر كلارك ، كير فريزر ، ستيفن هاند وآخرون: " الهجرة الحية 
للافتراضيةالآلات "في ندوة USENIX الثانية حول الندوة حول تصميم الأنظمة 
الشبكيةوالتنفيذ (NSDI) ، مايو 2005.[64] مايك شيفر: " fsyncers و curveballs، 
"shaver.off.net ، 25 أيار (مايو) 2008.[65] Zhenyun Zhuang و Cuong Tran: " تسببت 
في القضاء على التوقفات الكبيرة لـ JVM GCحسب حركة المرور الخلفية IO، 
“engineering.linkedin.com ، 10 شباط (فبراير) 2016.[66] ديفيد تيري وأميت ليفي: " 
Blade: أداة تجميع القمامة في مركز البيانات " ، arXiv:1504.02578 ، 13 أبريل 
2015.[67] مارتن ماس ، وتيم هاريس ، وكريست أسانوفيتش ، وجون كوباتوفيتش: " يوم 
القمامة:تنسيق جمع القمامة في الأنظمة الموزعة "، في ورشة عمل USENIX الخامسة 
عشرةفي موضوعات ساخنة في أنظمة التشغيل (HotOS) ، مايو 2015.[68] " زمن انتقال 
منخفض يمكن التنبؤ به، "Cinnober Financial Technology AB ، cinnober.com ، 
24نوفمبر 2013.[69] مارتن فاولر: " هندسة LMAX ،" martinfowler.com ، 12 يوليو 
2011.[70] Flavio P Junqueira and Benjamin Reed: ZooKeeper: تنسيق العمليات 
الموزعةأمة . O'Reilly Media ، نوفمبر 2013. ISBN: 978-1-4493-6130-3[71 ] Enis 
Söztutar: "HBase و HDFS: فهم استخدام نظام الملفات في HBase ، "فيHBaseCon ، يونيو 
2013.[72] Caitie McCaffrey: " العملاء حمقى : ويعرف أيضًا باسم Halo 4 DoSed 
الخدمات فيإطلاق وكيف نجونا، ”caitiem.com ، 23 حزيران (يونيو) 2015.[73 ] ليزلي 
لامبورت وروبرت شوستاك ومارشال بيز: "الجنرالات البيزنطيينمشكلة ، " معاملات ACM 
بشأن لغات وأنظمة البرمجة (TOPLAS) ،المجلد 4 ، العدد 3 ، الصفحات 382-401 ، يوليو 
1982. دوى: 10.1145 / 357172.357176[74] جيم إن جراي: " ملاحظات حول أنظمة تشغيل 
قاعدة البيانات، "في أنظمة التشغيل: Anدورة متقدمة ، ملاحظات المحاضرة في علوم 
الكمبيوتر ، المجلد 60 ، تحرير R Bayer ،RM Graham، and G Seegmüller، pages 
393–481. Springer-Verlag ، 1978. ISBN:3-540-08755-9[75] بريان بالمر: "ما مدى 
تعقيد الإمبراطورية البيزنطية؟، "slate.com ، 20أكتوبر 2011.[76 ] ليزلي لامبورت: 
"كتاباتي ، "research.microsoft.com ، 16 ديسمبر 2014.يمكن العثور على هذه الصفحة 
من خلال البحث في الويب عن سلسلة مكونة من 23 حرفًا تم الحصول عليها بواسطةإزالة 
الواصلات من السلسلة allla-mport-spubso-ntheweb .[77] جون راشبي: " هندسة الحافلات 
للأنظمة المضمنة الحرجة للسلامة، "في 1stورشة عمل دولية حول البرمجيات المدمجة 
(EMSOFT) ، أكتوبر 2001.[78] جيك إيدج: " ELC: الدروس المستفادة من SpaceX، 
"lwn.net ، 6 آذار (مارس) 2013.308 | الفصل الثامن: مشكلة الأنظمة الموزعة

      صفحة 331
[79 ] أندرو ميلر وجوزيف جيه لافيولا جونيور: "إجماع بيزنطي مجهولمن الألغاز ذات 
الصلابة المعتدلة: نموذج لعملة البيتكوين، "جامعة سنترال فلوريدا ،التقرير الفني 
CS-TR-14-01 ، أبريل 2014.[80] جيمس ميكينز: " اللحظة الأكثر حزنًا " ، USENIX ؛ 
تسجيل الدخول: تسجيل الخروج ، مايو 2013.[81 ] إيفان جيلمان: "اكتشاف حزمة السموم 
من Apache ZooKeeper، "pagerd‐uty.com ، 7 مايو 2015.[82] جوناثان ستون وكريغ 
بارتريدج: " عندما يكون اختبار CRC و TCP Checksum Disa‐جري، "في مؤتمر ACM 
للتطبيقات والتقنيات والبنى والبروتوكولاتلاتصالات الكمبيوتر(SIGCOMM) ، أغسطس 
2000.دوى:10.1145 / 347059.347561[83] إيفان جونز: " كيف تفشل كل من المجموع 
الاختباري لـ TCP و Ethernet ،" evanjones.ca ، 5 أكتوبربير 2015.[84 ] سينثيا دورك 
ونانسي لينش ولاري ستوكماير: "الإجماع في الرئاسة‐من التزامن الجزئي ، " Journal of 
the ACM ، المجلد 35 ، العدد 2 ، الصفحات 288–323 ، أبريل 1988. دوى: 10.1145 / 
42282.42283[85] بيتر بيليس وعلي قدسي: " الاتساق النهائي اليوم: القيود ، 
الإضافية‐sions ، and Beyond "، قائمة انتظار ACM ، المجلد 11 ، العدد 3 ، مارس 
2013. دوى:10.1145 / 2460276.2462076[86] بوين ألبيرن وفريد ​​بي شنايدر: “ تعريف 
الحياة، " معالجة المعلومات "الرسائل ، المجلد 21 ، العدد 4 ، الصفحات 181-185 ، 
أكتوبر 1985. دوى:10.1016 / 0020-0190 (85) 90056-0[87 ] فلافيو بي جونكويرا: "يا 
صاح ، أين بياناتي الوصفية؟ ، "fpj.me ، 28 أيار (مايو) 2015.[88] سكوت ساندرز: " 
تقرير حادثة 28 يناير، ”github.com ، 3 شباط (فبراير) 2016.[89] جاي كريبس: " بعض 
الملاحظات على كافكا وجيبسن" blog.empathybox.com ، 25 سبتمبرتشرين الثاني 
2013.[90] ثان دو ، مينجزه هاو ، تاناكورن ليساتابورنونجسا ، تيرات باتانا-أناكي ،و 
Haryadi S Gunawi: " Limplock: فهم تأثير برنامج limpware على النطاق-خارج الأنظمة 
السحابية "، في ندوة ACM الرابعة حول الحوسبة السحابية (SoCC) ، أكتوبر2013. دوى: 
10.1145 / 2523616.2523627[91] فرانك ماكشيري ومايكل إيسارد وديريك جي موراي: " 
قابلية التوسع! لكن في ماذاكلفة؟ ، في ورشة عمل USENIX الخامسة عشرة حول الموضوعات 
الساخنة في أنظمة التشغيل (HotOS) ،مايو 2015.ملخص | 309

      صفحة 332


      صفحة 333
الفصل 9الاتساق والتوافقهل الأفضل أن تكون حيا وخاطئا أم صائبا وموتا؟- جاي كريبس ، 
بعض الملاحظات عن كافكا وجيبسن (2013)يمكن أن تحدث أخطاء كثيرة في الأنظمة الموزعة 
، كما تمت مناقشته في الفصل الثامن . الإن أبسط طريقة للتعامل مع مثل هذه الأخطاء 
هي ببساطة ترك الخدمة بأكملها تفشل وإظهارهاالمستخدم رسالة خطأ. إذا كان هذا الحل 
غير مقبول ، فنحن بحاجة إلى إيجاد طرق لذلكالتسامح مع الأخطاء - أي للحفاظ على أداء 
الخدمة بشكل صحيح ، حتى لو كان بعضهاالمكون الداخلي معيب.في هذا الفصل ، سنتحدث عن 
بعض الأمثلة على الخوارزميات والبروتوكولات الخاصة بـبناء أنظمة موزعة تتسامح مع 
الأخطاء. سنفترض أن كل المشاكلمن الفصل 8 يمكن أن يحدث: يمكن فقدان الحزم أو إعادة 
ترتيبها أو تكرارها أو بشكل عشوائيتأخير في الشبكة ، والساعات تقريبية في أحسن 
الأحوال ، ويمكن أن تتوقف العقد مؤقتًا (على سبيل المثاللجمع القمامة) أو تعطل في 
أي وقت.أفضل طريقة لبناء أنظمة تتسامح مع الأخطاء هي العثور على بعض الأغراض 
العامةالتجريد بضمانات مفيدة ، وتنفيذها مرة واحدة ، ثم السماح للتطبيقاتالاعتماد 
على تلك الضمانات. هذا هو نفس النهج الذي استخدمناه مع المعاملات فيالفصل 7: 
باستخدام المعاملة ، يمكن للتطبيق التظاهر بعدم وجودتعطل (atomicity) ، حيث لا يقوم 
أي شخص آخر بالوصول إلى قاعدة البيانات في نفس الوقت (isola‐) ، وأن أجهزة التخزين 
موثوقة تمامًا (المتانة). على الرغم من وقوع حوادث ،تحدث حالات السباق وفشل القرص ، 
ويخفي تجريد المعاملة تلكحتى لا يقلق التطبيق بشأنها.سنستمر الآن على نفس المنوال ، 
ونبحث عن أفكار تجريدية يمكن أن تسمح بامتدادتطبيق لتجاهل بعض مشاكل الأنظمة 
الموزعة. فمثلا،أحد أهم الأفكار التجريدية للأنظمة الموزعة هو الإجماع ، أي311

      صفحة 334
جعل جميع العقد تتفق على شيء ما. كما سنرى في هذا الفصل ، بشكل موثوقإن التوصل إلى 
إجماع على الرغم من أخطاء الشبكة وإخفاقات العمليات أمر مثير للدهشةمشكلة 
صعبة.بمجرد تنفيذ الإجماع ، يمكن للتطبيقات استخدامه لأغراض متنوعةالمقاصد. على 
سبيل المثال ، لنفترض أن لديك قاعدة بيانات ذات تكرار وحيد القائد. إذا كانزعيم 
يموت وتحتاج إلى تجاوز الفشل إلى عقدة أخرى ، عقد قاعدة البيانات المتبقيةيمكن 
استخدام الإجماع لانتخاب قائد جديد. كما تمت مناقشته في "معالجة انقطاع العقدة" 
بتاريخصفحة 150، من المهم أن يكون هناك قائد واحد فقط ، وأن تتفق جميع العقد مع 
منالزعيم. إذا اعتقدت عقدتان أنهما القائد ، فإن هذا الوضع يسمى الانقسامالدماغ ، 
وغالبًا ما يؤدي إلى فقدان البيانات. عمليات التنفيذ الصحيحة لمساعدة الإجماعتجنب 
مثل هذه المشاكل.لاحقًا في هذا الفصل ، في "المعاملات الموزعة والإجماع" في الصفحة 
343، سنقومالنظر في الخوارزميات لحل الإجماع والمشاكل ذات الصلة. لكننا نحتاج 
أولاًلاستكشاف مجموعة الضمانات والتجريدات التي يمكن تقديمها في عرضنظام تحية.نحن 
بحاجة إلى فهم نطاق ما يمكن وما لا يمكن فعله: في بعض المواقعمن الممكن أن يتسامح 
النظام مع الأخطاء ومواصلة العمل ؛ في مواقع أخرى‐uations ، هذا غير ممكن. حدود ما 
هو ممكن وغير ممكن كانتاستكشافها في العمق ، سواء في البراهين النظرية والتطبيقات 
العملية. نحنسوف تحصل على لمحة عامة عن تلك الحدود الأساسية في هذا الفصل.قام 
الباحثون في مجال الأنظمة الموزعة بدراسة هذه الموضوعات لـعقود ، لذلك هناك الكثير 
من المواد - سنكون قادرين فقط على خدش السطح. في هذاكتاب ليس لدينا مساحة للخوض في 
تفاصيل النماذج والبراهين الرسمية ، لذلك نحنستتمسك بالبديهيات غير الرسمية. تقدم 
المراجع الأدبية الكثير من الإضافاتالعمق إذا كنت مهتمًا.ضمانات الاتساقفي "مشاكل 
مع تأخر النسخ المتماثل" في الصفحة 155 ، نظرنا في بعض مشكلات التوقيتالتي تحدث في 
قاعدة بيانات منسوخة. إذا نظرت إلى عقدتي قاعدة بيانات في نفس الوقتلحظة من الزمن ، 
من المحتمل أن ترى بيانات مختلفة على العقدتين ، لأن الكتابةتصل الطلبات على عقد 
مختلفة في أوقات مختلفة. هذه التناقضات لا تحدثبغض النظر عن طريقة النسخ المتماثل 
التي تستخدمها قاعدة البيانات (قائد واحد أو متعدد القادة أوالنسخ المتماثل بلا 
زعيم).توفر معظم قواعد البيانات المنسوخة اتساقًا نهائيًا على الأقل ، مما يعني أنه 
إذا كانتتوقف عن الكتابة إلى قاعدة البيانات وتنتظر بعض الوقت غير المحدد ، ثمفي 
النهاية ستعيد جميع طلبات القراءة نفس القيمة [ 1 ]. بمعنى آخر ، إنالاتزان مؤقت ، 
وفي النهاية يحل نفسه (على افتراض أن أي أخطاء فيالشبكة أيضًا في النهاية تم 
إصلاحها). قد يكون الاسم الأفضل للاتساق النهائيالتقارب ، كما نتوقع أن تتقارب جميع 
النسخ المتماثلة في النهاية إلى نفس القيمة [ 2 ].312 | الفصل التاسع: الاتساق 
والتوافق

      صفحة 335
ومع ذلك ، يعد هذا ضمانًا ضعيفًا للغاية - لا يقول أي شيء عن وقت مندوبLicas سوف 
تتقارب. حتى وقت التقارب ، يمكن للقراءات إرجاع أي شيء أولا شيئ [1]. على سبيل 
المثال ، إذا كتبت قيمة ثم قرأتها مرة أخرى على الفور ،ليس هناك ما يضمن أنك سترى 
القيمة التي كتبتها للتو ، لأن القراءة قد تكونيتم توجيهها إلى نسخة متماثلة مختلفة 
(انظر "قراءة كتاباتك" في الصفحة 156).يعد التناسق النهائي صعبًا على مطوري 
التطبيقات لأنه يختلف كثيرًا عنسلوك المتغيرات في برنامج عادي أحادي الخيوط. إذا 
قمت بتعيين قيمةإلى متغير ، ثم قراءته بعد ذلك بوقت قصير ، لا تتوقع إعادة قراءة 
ملفالقيمة القديمة ، أو فشل القراءة. تبدو قاعدة البيانات بشكل سطحي مثل متغير 
أنتيمكن أن تقرأ وتكتب ، ولكن في الواقع فإن دلالاتها أكثر تعقيدًا [3].عند العمل 
بقاعدة بيانات تقدم ضمانات ضعيفة فقط ، يجب أن تكون كذلكتدرك باستمرار حدودها ، ولا 
تفترض الكثير عن طريق الخطأ. البقغالبًا ما يكون خفيًا ويصعب العثور عليه عن طريق 
الاختبار ، لأن التطبيق قد يعمل بشكل جيد أكثرمن الوقت. تصبح الحالات الحادة 
للاتساق النهائي واضحة فقط عند وجودهاهو خطأ في النظام (مثل انقطاع الشبكة) أو في 
التزامن العالي.في هذا الفصل سوف نستكشف نماذج تناسق أقوى يمكن أن تستخدمها أنظمة 
البياناتاختر أن تقدم. إنها لا تأتي مجانًا: الأنظمة ذات الضمانات الأقوى قد تفعل 
ذلكلديها أداء أسوأ ، أو تكون أقل تسامحًا مع الأخطاء من الأنظمة ذات الحماية 
الأضعفالمحملات. ومع ذلك ، يمكن أن تكون الضمانات الأقوى جذابة لأنها أسهل في 
الاستخدامبشكل صحيح. بمجرد أن ترى بعض نماذج الاتساق المختلفة ، ستكون في وضع 
أفضللتحديد أفضل خيار يناسب احتياجاتك.يوجد بعض التشابه بين نماذج التناسق الموزع 
والتسلسل الهرمي لـمستويات عزل المعاملات التي ناقشناها في الفصل 7 (انظر "مستويات 
العزل الضعيفة" علىالصفحة 224) [ 4 ، 5 ]. على الرغم من وجود بعض التداخل ، إلا 
أنها غالبًاcerns: يتعلق عزل المعاملة في المقام الأول بتجنب ظروف العرق بسبب 
الخلافيتم حاليًا تنفيذ المعاملات ، في حين أن التناسق الموزع هو في الغالب 
حولتنسيق حالة النسخ المتماثلة في مواجهة التأخيرات والأعطال.يغطي هذا الفصل مجموعة 
واسعة من الموضوعات ، ولكن كما سنرى ، فإن هذه المجالات هي في الواقعمرتبطة بعمق 
ببعضها البعض:• سنبدأ بالنظر في أحد أقوى نماذج الاتساق المشتركةالاستخدام 
والقابلية الخطية وفحص مزاياها وعيوبها.• سنقوم بعد ذلك بفحص مسألة ترتيب الأحداث 
في نظام موزع ( "ترتيب"الضمانات "في الصفحة 329 ) ، ولا سيما السببية والنظام 
الإجمالي.• في القسم الثالث ( "المعاملات الموزعة والإجماع" في الصفحة 343) نحنسوف 
يستكشف كيفية ارتكاب معاملة موزعة بشكل ذري ، والتي سوفيقودنا أخيرًا نحو حلول 
لمشكلة التوافق.ضمانات الاتساق | 313

      صفحة 336
الخطيةفي قاعدة بيانات متسقة أخيرًا ، إذا سألت نسختين متماثلتين مختلفتين نفس 
الأسئلة‐في نفس الوقت ، قد تحصل على إجابتين مختلفتين. هذا محير. لاسيكون الأمر 
أبسط كثيرًا إذا كانت قاعدة البيانات تعطي الوهم بوجود نسخة متماثلة واحدة فقط ،أي 
نسخة واحدة فقط من البيانات؟ ثم سيكون لدى كل عميل نفس طريقة العرض الخاصة 
بـالبيانات ، ولا داعي للقلق بشأن تأخر النسخ المتماثل.هذه هي الفكرة الكامنة وراء 
القابلية الخطية [ 6 ] (المعروف أيضًا باسم الاتساق الذري [7 ] ، قويالاتساق أو 
الاتساق الفوري أو التناسق الخارجي [ 8 ]). التعريف الدقيقالقابلية للخطية دقيقة 
للغاية ، وسوف نستكشفها في بقية هذا القسم. ولكنالفكرة الأساسية هي جعل النظام يبدو 
كما لو كان هناك نسخة واحدة فقط من البيانات ،وجميع العمليات عليها ذرية. مع هذا 
الضمان ، على الرغم من أنه قد يكون هناكنسخ متماثلة متعددة في الواقع ، لا داعي 
للقلق بشأن التطبيق.في نظام خطي ، بمجرد أن يكمل عميل واحد الكتابة بنجاح ، كل 
شيءيجب أن تكون القراءة من قاعدة البيانات قادرة على رؤية القيمة المكتوبة للتو. 
المحافظةالوهم بنسخة واحدة من البيانات يعني ضمان القيمة التي تقرأهاأحدث قيمة 
محدثة ، وليست من ذاكرة تخزين مؤقت قديمة أو نسخة متماثلة. بعبارات أخرى،الخطية هي 
ضمان حداثة . لتوضيح هذه الفكرة ، دعنا نلقي نظرة على مثال لملفالنظام غير 
الخطي.حكمأليسبوبزعيمالمتابع 1المتابع 2الوقتتضاف إلى الدرجات النهائية(لاعب 1 ، 
النتيجة 1 ، لاعب 2 ، النتيجة 2)القيم ("ألمانيا" ، 1 ، "الأرجنتين" ، 
0)حسناإدراج…إدراج…حدد * من الدرجات النهائيةحدد * من الدرجات النهائيةمرحبًا ، 
ألمانيافاز فيكأس العالم!هل حقا؟ الموقع الويب يقول إنهملازال يلعب.الشكل 9-1. هذا 
النظام غير قابل للتقسيم الخطي ، مما يتسبب في إرباك مشجعي كرة القدم.314 | الفصل 
التاسع: الاتساق والتوافق

      صفحة 337
أنا. من التفاصيل الدقيقة لهذا المخطط أنه يفترض وجود ساعة عالمية يمثلها الأفقمحور 
تل. على الرغم من أن الأنظمة الحقيقية لا تحتوي عادةً على ساعات دقيقة (انظر 
"الساعات غير الموثوق بها" في الصفحة 278) ،هذا الافتراض جيد: لأغراض تحليل 
الخوارزمية الموزعة ، قد نتظاهر بأنها دقيقةالساعة العالمية موجودة ، طالما أن 
الخوارزمية لا تستطيع الوصول إليها [ 50 ]. بدلاً من ذلك ، يمكن للخوارزمية فقط 
رؤية ملفتقريب مشوه للوقت الحقيقي ، كما ينتج بواسطة مذبذب كوارتز و NTP.يوضح الشكل 
9-1 مثالاً على موقع ويب رياضي غير قابل للتحويل [9]. أليس وبوبيجلسون في نفس 
الغرفة ، وكلاهما يتحقق من هواتفهم لمعرفة نتيجةنهائي كأس العالم لكرة القدم 2014. 
بعد إعلان النتيجة النهائية مباشرة ، تنعش أليسالصفحة ، ترى إعلان الفائز ، وتخبر 
بوب بحماس عن ذلك. بوب لا يصدقيضرب بحزن على إعادة التحميل على هاتفه الخاص ، لكن 
طلبه يذهب إلى نسخة طبق الأصل من قاعدة البياناتمتخلفًا ، وهكذا يظهر هاتفه أن 
اللعبة ما زالت مستمرة.إذا قام Alice and Bob بضرب إعادة التحميل في نفس الوقت ، 
فلن يكون مفاجئًا إذالقد حصلوا على نتيجتي طلب بحث مختلفتين ، لأنهم لا يعرفون في 
أي وقت بالضبطتمت معالجة طلباتهم من قبل الخادم. ومع ذلك ، بوب يعرف أنهاضغط على زر 
إعادة التحميل (بدأ استعلامه) بعد أن سمع أليس تصرخ بالنتيجة النهائية ،وبالتالي 
يتوقع أن تكون نتيجة استعلامه حديثة على الأقل مثل نتائج أليس. الحقيقةأن استعلامه 
الذي أرجع نتيجة قديمة يعد انتهاكًا لقابلية التحديد الخطي.ما الذي يجعل النظام 
قابلاً للتقسيم الخطي؟الفكرة الأساسية وراء القابلية الخطية بسيطة: جعل النظام يبدو 
كما لو كان موجودًانسخة واحدة فقط من البيانات. ومع ذلك ، فإن تحديد ما يعنيه ذلك 
بالضبطفي الواقع يتطلب بعض العناية. من أجل فهم القابلية الخطية بشكل أفضل ، دعنا 
نلقي نظرة علىبعض الأمثلة الأخرى.يوضح الشكل 9-2 ثلاثة عملاء يقرؤون ويكتبون في نفس 
الوقت نفس المفتاح x في aقاعدة بيانات قابلة للتخصيص. في أدبيات الأنظمة الموزعة ، 
يُطلق على x اسم السجل - فيالممارسة ، يمكن أن يكون مفتاحًا واحدًا في مخزن القيمة 
الرئيسية ، أو صفًا واحدًا في قاعدة بيانات علائقية ، أووثيقة واحدة في قاعدة 
بيانات وثيقة ، على سبيل المثال.للتبسيط ، يوضح الشكل 9-2 الطلبات فقط من وجهة نظر 
العملاء ، وليسالداخلية لقاعدة البيانات. كل شريط هو طلب مقدم من العميل ، حيث 
تبدأالشريط هو الوقت الذي تم فيه إرسال الطلب ، وتكون نهاية الشريط عند الاستجابةتم 
استلامه من قبل العميل. بسبب تأخيرات الشبكة المتغيرة ، لا يعرف العميلبالضبط عندما 
عالجت قاعدة البيانات طلبها - فهي تعرف فقط أنه يجب أن يكون لديهاحدث في وقت ما بين 
إرسال العميل للطلب واستلامهاستجابة. أناالخطية | 315

      صفحة 338
العميل أالعميل بالعميل جالوقتكتابة (س ، 1)⇒ طيبقراءة (x)⇒ 0اقرأ (x) ⇒ 0 أو 1اقرأ 
(x) ⇒ 0 أو 1اقرأ (x) ⇒ 0 أو 1قراءة (x)⇒ 1الشكل 9-2. إذا كان طلب القراءة متزامنًا 
مع طلب الكتابة ، فيجوز له إرجاع إماالقديمة أو الجديدة.في هذا المثال ، يحتوي 
السجل على نوعين من العمليات:• read ( x ) ⇒ v تعني العميل الذي طلب قراءة قيمة 
السجل x ، وأرجعت قاعدة البيانات القيمة v .• write ( x ، v ) ⇒ r تعني العميل الذي 
طلب ضبط السجل x على القيمة v وقاعدة بيانات عاد استجابة ص (والتي يمكن أن يكون 
حسنا أو خطأ ).في الشكل 9-2، تكون قيمة x في البداية 0 ، ويقوم العميل C بتنفيذ طلب 
كتابة لتعيينهإلى 1. أثناء حدوث ذلك ، يقوم العملاء "أ" و "ب" باستطلاع قاعدة 
البيانات بشكل متكرر إلىاقرأ أحدث قيمة. ما هي الاستجابات المحتملة التي قد يحصل 
عليها "أ" و "ب" بالنسبة لهماقراءة الطلبات؟• تكتمل عملية القراءة الأولى بواسطة 
العميل "أ" قبل بدء الكتابة ، لذا يجب أن يتم ذلكبالتأكيد إرجاع القيمة القديمة 0.• 
تبدأ آخر قراءة بواسطة العميل "أ" بعد اكتمال الكتابة ، لذا يجب تحديدهاقم بإرجاع 
القيمة الجديدة 1 إذا كانت قاعدة البيانات قابلة للتحويل الخطي: نحن نعلم أنيجب أن 
تتم معالجة الكتابة في وقت ما بين بداية الكتابة ونهايتهاالعملية ، ويجب أن تتم 
معالجة القراءة في وقت ما بين البدايةونهاية عملية القراءة. إذا بدأت القراءة بعد 
انتهاء الكتابة ، فإن ملفيجب أن تتم معالجة القراءة بعد الكتابة ، وبالتالي يجب أن 
ترى الجديدالقيمة التي تمت كتابتها.• قد تعود أي عمليات قراءة تتداخل مع عملية 
الكتابةإما 0 أو 1 ، لأننا لا نعرف ما إذا كانت الكتابة قد دخلت حيز التنفيذ أم 
لاوقت معالجة عملية القراءة. هذه العمليات متزامنةمع الكتابة.ومع ذلك ، هذا ليس 
كافياً حتى الآن لوصف القابلية للخطية بشكل كامل: إذا كان هذا صحيحًاالمتزامنة مع 
الكتابة يمكن أن ترجع القيمة القديمة أو الجديدة ، ثم يستطيع القراء ذلكترى قيمة 
تنقلب ذهابًا وإيابًا بين القيمة القديمة والجديدة عدة مرات أثناء316 | الفصل 
التاسع: الاتساق والتوافق

      صفحة 339
ثانيا. هذه الدلالات ، التي قد ترجع فيها القراءات القيمة القديمة أو الجديدة إذا 
كانت متزامنة معالكتابة ، تُعرف باسم السجل العادي [ 7، 30].الكتابة جارية. ليس هذا 
ما نتوقعه من نظام يحاكي "واحدنسخة من البيانات ". ثانيالجعل النظام قابلاً للتقسيم 
الخطي ، نحتاج إلى إضافة قيد آخر ، موضح فيالشكل 9-3 .العميل أالعميل بالعميل 
جالوقتكتابة (س ، 1)⇒ طيبقراءة (x)⇒ 0قراءة (x)⇒ 0قراءة (x)⇒ 1قراءة (x)⇒ 1قراءة 
(x)⇒ 1الشكل 9-3. بعد أن أعاد أي شخص للقراءة القيمة الجديدة ، تقرأ جميع القراءة 
التالية (في ملفنفس العملاء أو غيرهم) يجب أيضًا إرجاع القيمة الجديدة.في نظام خطي 
نتخيل أنه يجب أن تكون هناك نقطة زمنية معينة (بينبداية ونهاية عملية الكتابة) التي 
عندها تنقلب قيمة x ذريًامن 0 إلى 1. وبالتالي ، إذا كانت قراءة أحد العملاء ترجع 
القيمة الجديدة 1 ، فيجب على جميع القراءات اللاحقةتقوم أيضًا بإرجاع القيمة 
الجديدة ، حتى إذا لم تكتمل عملية الكتابة بعد.يتم توضيح تبعية التوقيت هذه بسهم في 
الشكل 9-3. العميل أ هو الأوللقراءة القيمة الجديدة 1. بعد عودة قراءة A مباشرة ، 
يبدأ B قراءة جديدة. منذ بالقراءة تحدث بشكل صارم بعد قراءة A ، يجب أن تُرجع أيضًا 
1 ، على الرغم من أن الكتابة بواسطة C هيلا تزال جارية. (إنه نفس الموقف مع أليس 
وبوب في الشكل 9-1 : بعد أليسقرأ القيمة الجديدة ، يتوقع بوب أيضًا قراءة القيمة 
الجديدة.)يمكننا تحسين مخطط التوقيت هذا لتصور كل عملية سارية المفعولذريًا في وقت 
ما. يظهر مثال أكثر تعقيدًا في الشكل 9-4[10].الخطية | 317

      الصفحة 340
⇒ 2العميل أالعميل بالعميل جالعميل دالوقتقراءة (x)كاس (س ، 1 ، 2)كاس (س ، 0 ، 
3)قراءة (x)قراءة (x)قراءة (x)قاعدة البياناتس = 0 س = 1س = 2س = 4اقرا 
اقراقرأقرأقرأقرأ⇒ طيبقراءة (x)⇒ 1⇒ طيب⇒ 2⇒ 1⇒ طيب⇒ خطأكتابة (س ، 1)⇒ 4كاس (س ، 2 
، 4)⇒ طيبكتابة (س ، 0)الشكل 9-4. تصور النقاط الزمنية التي يبدو أن القراءة 
والكتابة بهاساري المفعول. القراءة النهائية لـ B غير قابلة للتقسيم الخطي.في الشكل 
9-4 نضيف نوع ثالث من عملية إلى جانب القراءة و الكتابة :• الاكاديمية ( س ، من 
الخامس من العمر ، V الجديدة ) ⇒ ص الوسائل طلب العميل الذري مقارنة-ومجموعة 
oper-ation (راجع "المقارنة والتعيين" في الصفحة 236). إذا كانت القيمة الحالية 
للسجل سيساوي v قديم ، يجب ضبطه ذريًا على v جديد . إذا كان x ≠ v قديمًا ، فيجب أن 
تكون العمليةاترك السجل دون تغيير وإرجاع خطأ. r هو استجابة قاعدة البيانات ( 
موافقأو خطأ ).تم تمييز كل عملية في الشكل 9-4 بخط عمودي (داخل الشريط لكل 
منهاالعملية) في الوقت الذي نعتقد أن العملية قد نفذت فيه. تلك العلاماتمرتبطين 
بترتيب تسلسلي ، ويجب أن تكون النتيجة تسلسلاً صالحًا للقراءات ويكتب لسجل (يجب أن 
ترجع كل قراءة القيمة التي تم تعيينها بواسطة أحدث كتابة).مطلب القابلية الخطية هو 
أن تنضم الخطوط إلى علامات العمليةتحرك دائمًا للأمام في الوقت المناسب (من اليسار 
إلى اليمين) ، وليس للخلف أبدًا. هذا يضمن أنضمان الحداثة الذي ناقشناه سابقًا: 
بمجرد كتابة قيمة جديدة أو قراءتها ، كل شيءالقراءات اللاحقة ترى القيمة التي تمت 
كتابتها ، حتى يتم استبدالها مرة أخرى.هناك بعض التفاصيل المثيرة للاهتمام للإشارة 
إليها في الشكل 9-4:• أرسل العميل الأول طلبًا لقراءة x ، ثم أرسل العميل D طلبًا 
لضبط x على 0 ،ثم أرسل العميل A طلبًا لتعيين x على 1. ومع ذلك ، عادت القيمة 
إلىقراءة B هي 1 (القيمة التي كتبها A). هذا جيد: فهذا يعني أن قاعدة البيانات 
أولاًعالج كتابة D ، ثم كتابة A ، وأخيراً قراءة B. على الرغم من أن هذا ليس 
ملفبالترتيب الذي تم إرسال الطلبات به ، إنه أمر مقبول ، لأن الثلاثة318 | الفصل 
التاسع: الاتساق والتوافق

      الصفحة 341
الطلبات متزامنة. ربما تأخر طلب قراءة B قليلاً في الشبكة‐العمل ، لذلك لم تصل إلى 
قاعدة البيانات إلا بعد أن يكتب الاثنان.• عادت قراءة العميل "ب" 1 قبل أن يتلقى 
العميل "أ" استجابته من قاعدة البيانات ،قائلين إن كتابة القيمة 1 كانت ناجحة. هذا 
أيضًا جيد: لا يعني ذلكتمت قراءة القيمة قبل كتابتها ، فهذا يعني فقط استجابة 
"موافق" منقاعدة بيانات للعميل A تأخرت قليلاً في الشبكة.• لا يفترض هذا النموذج أي 
عزل للمعاملات: قد يتغير عميل آخرقيمة في أي وقت. على سبيل المثال ، تقرأ C أولاً 
ثم تقرأ 2 ، لأنتم تغيير القيمة بواسطة B بين القراءتين. مقارنة وتعيين ذري ( CAS 
)يمكن استخدام العملية للتحقق من عدم تغيير القيمة بشكل متزامن بواسطةعميل آخر: B و 
C في الاكاديمية طلبات تنجح، ولكن D'الصورة الاكاديمية فشل الطلب (من قبلمرة تقوم 
قاعدة البيانات بمعالجتها ، لم تعد قيمة x 0).• القراءة النهائية من قبل العميل B 
(في شريط مظلل) غير قابلة للتقسيم الخطي. العمليةبالتزامن مع C في الاكاديمية 
الكتابة، الذي يستكمل العاشر 2-4. في غيابطلبات أخرى ، سيكون من المقبول أن تُرجع 
قراءة B 2. ومع ذلك ، فإن العميل A لديهقرأت بالفعل القيمة الجديدة 4 قبل أن تبدأ 
قراءة B ، لذلك لا يُسمح لـ B بالقراءةقيمة أقدم من A. مرة أخرى ، إنها نفس الحالة 
كما هو الحال مع Alice و Bob فيالشكل 9-1 .هذا هو الحدس وراء الخطية. التعريف 
الرسمي [ 6 ] يصفه أكثرعلى وجه التحديد. من الممكن (على الرغم من التكلفة الحسابية) 
اختبار ما إذا كان النظام أم لايمكن تحديد السلوك بشكل خطي من خلال تسجيل توقيتات 
جميع الطلبات والردود ، والتحقق مما إذا كان يمكن ترتيبها بترتيب تسلسلي صالح [ 
11].القابلية الخطية مقابل التسلسلمن السهل الخلط بين القابلية الخطية والقابلية 
للتسلسل (انظر “Serializability” في الصفحة 242 ) ،حيث يبدو أن كلتا الكلمتين تعني 
شيئًا مثل "يمكن ترتيبها بترتيب تسلسلي".ومع ذلك ، فهما ضمانان مختلفان تمامًا ، 
ومن المهم التمييز بينهمامعهم:تسلسلSerializability هي خاصية عزل المعاملات ، حيث 
كل معاملةقد يقرأ ويكتب كائنات متعددة (صفوف ، مستندات ، سجلات) - راجع 
"مفرد-عمليات الكائن والكائنات المتعددة "في الصفحة 219. يضمن أن المعاملاتيتصرفون 
كما لو كانوا قد نفذوا في بعض الأوامر التسلسلية (كل معاملةقيد التشغيل حتى 
الاكتمال قبل بدء المعاملة التالية). لا بأس في ذلك المسلسلمن أجل أن تكون مختلفة 
عن الترتيب الذي تم به تنفيذ المعاملات بالفعل [12 ].الخطيةالقابلية للخطية هي ضمان 
حداثة للقراءة والكتابة في السجل ( indi‐كائن vidual ). لا تجمع العمليات معًا في 
معاملات ، لذا فهي تفعل ذلكلا تمنع حدوث مشكلات مثل الكتابة المنحرفة (راجع "منع 
الانحراف في الكتابة والخطأ"الخطية | 319

      الصفحة 342
ثالثا. بالمعنى الدقيق للكلمة ، يوفر ZooKeeper و etcd كتابات قابلة للتقسيم الخطي 
، ولكن قد تكون القراءات قديمة ، نظرًا لأنه افتراضيًايمكن تقديمها بواسطة أي من 
النسخ المتماثلة. يمكنك اختياريًا طلب قراءة خطية: إلخقراءة النصاب [ 16 ] ، وفي 
ZooKeeper تحتاج إلى استدعاء المزامنة () قبل القراءة [ 15 ] - راجع"خط 
التنفيذ‐تخزين قابل للضبط باستخدام نظام البث الإجمالي "في الصفحة 340.toms "في 
الصفحة 237 ) ، ما لم تتخذ إجراءات إضافية مثل تحقيق ذلكالنزاعات (انظر "تجسيد 
النزاعات" في الصفحة 242).قد توفر قاعدة البيانات كلاً من قابلية التسلسل والقابلية 
الخطية ، وهذه المجموعةيُعرف باسم التسلسل الصارم أو القابلية القوية للتسلسل لنسخة 
واحدة (strong-1SR) [4 ، 13 ].تطبيقات القابلية للتسلسل على أساس تأمين مرحلتين 
(انظر "تأمين مرحلتين(2PL) "في الصفحة 248) أو تنفيذ تسلسلي فعلي (راجع "التنفيذ 
التسلسلي الفعلي" في الصفحة243) قابلة للتقسيم الخطي عادةً.ومع ذلك ، عزل لقطة 
قابلة للتسلسل (راجع " عزل لقطة تسلسلية قابلة للتسلسل (SSI)"في الصفحة 252 ) غير 
قابل للتقسيم الخطي: حسب التصميم ، فإنه يجعل القراءة من لقطة متسقة ،لتجنب الخلاف 
بين القراء والكتاب. بيت القصيد من متسقةsnapshot أنها لا تتضمن عمليات الكتابة 
الأحدث من اللقطة ، ووهكذا يقرأ من اللقطة غير خطية.الاعتماد على الخطيةفي أي ظروف 
تكون القابلية الخطية مفيدة؟ عرض النتيجة النهائية للرياضةربما يكون التطابق مثالًا 
تافهًا: النتيجة التي عفا عليها الزمن ببضع ثوان هيمن غير المحتمل أن يسبب أي ضرر 
حقيقي في هذه الحالة. ومع ذلك ، هناك عدد قليل من المجالات التيتعد قابلية تحديد 
الخطية مطلبًا مهمًا لجعل النظام يعمل بشكل صحيح.قفل وانتخاب الزعيميحتاج النظام 
الذي يستخدم النسخ المتماثل للقائد الفردي إلى التأكد من وجوده بالفعل فقطقائد واحد 
، وليس عدة (دماغ منقسم). طريقة واحدة لانتخاب قائد هي استخدام قفل: كلالعقدة التي 
تبدأ في محاولة الحصول على القفل ، والعقدة التي تنجح تصبحزعيم [ 14]. بغض النظر عن 
كيفية تنفيذ هذا القفل ، يجب أن يكون قابلاً للتقسيم الخطي: جميع العقديجب أن توافق 
على العقدة التي تمتلك القفل ، وإلا فلن تكون مجدية.خدمات التنسيق مثل Apache 
ZooKeeper [ 15] وخلافه [ 16] كثيرا ما تستخدم لتنفيذ الأقفال الموزعة وانتخاب 
الزعيم. يستخدمون خوارزميات الإجماع لتنفيذ عمليات قابلة للتخصيص بطريقة تتسامح مع 
الخطأ (نناقش هذه الخوارزمياتلاحقًا في هذا الفصل ، في "الإجماع المتسامح مع الخطأ" 
في الصفحة 355 ). iii لا يزال هناك الكثيرتفاصيل دقيقة لتنفيذ الأقفال وانتخاب 
القائد بشكل صحيح (انظر على سبيل المثالقضية المبارزة في "القائد والقفل" في الصفحة 
293 ) ، ومكتبات مثل Apacheالقيم الفني [ 17] المساعدة من خلال توفير وصفات عالية 
المستوى أعلى ZooKeeper. ومع ذلك ، أخدمة التخزين الخطي هي الأساس الأساسي لمهام 
التنسيق هذه.320 | الفصل التاسع: الاتساق والتوافق

      صفحة 343
يتم استخدام القفل الموزع أيضًا على مستوى أكثر دقة في بعض التوزيعاتقواعد البيانات 
مثل Oracle Real Application Clusters (RAC) [18 ]. يستخدم RAC قفلًا لكلصفحة القرص 
، مع عقد متعددة تشترك في الوصول إلى نظام تخزين القرص نفسه. منذتوجد هذه الأقفال 
القابلة للخط على المسار الحرج لتنفيذ المعاملة ، ونشر RAC‐عادة ما يكون هناك شبكة 
ربط عنقودية مخصصة للاتصالبين عقد قاعدة البيانات.القيود وضمانات التفردقيود التفرد 
شائعة في قواعد البيانات: على سبيل المثال ، اسم المستخدم أو البريد الإلكترونييجب 
أن يحدد العنوان بشكل فريد مستخدمًا واحدًا ، ولا يمكن أن يكون هناك في خدمة تخزين 
الملفاتملفين بنفس المسار واسم الملف. إذا كنت ترغب في فرض هذا القيد كـتتم كتابة 
البيانات (على سبيل المثال ، إذا حاول شخصان إنشاء مستخدم أو ملف بامتدادنفس الاسم 
، سيتم إرجاع خطأ واحد منهم) ، فأنت بحاجة إلى قابلية خطية. هذا الموقع‐يشبه الوضع 
في الواقع القفل: عندما يقوم المستخدم بالتسجيل في خدمتك ، يمكنك ذلكفكر في حصولهم 
على "قفل" على اسم المستخدم الذي اختاروه.تظهر مشكلات مماثلة إذا كنت تريد التأكد 
من أن رصيد الحساب المصرفي لا يتراجع أبدًا.ative ، أو أنك لا تبيع عناصر أكثر مما 
لديك في المخزن ، أوأن شخصين لا يحجزان نفس المقعد في نفس الوقت على متن طائرة أو 
في مسرح.تتطلب كل هذه القيود وجود قيمة محدثة واحدة (حساب الحسابance ، ومستوى 
المخزون ، وشغل المقعد) التي تتفق عليها جميع العقد.ومع ذلك ، في هذه المواقف ، قد 
تتمكن أيضًا من الابتعاد دون قابلية تحديد الخطية:• إذا قام شخصان بتسجيل نفس اسم 
المستخدم أو حجزوا نفس المقعد في نفس الوقت ،يمكنك إرسال بريد إلكتروني إلى أحدهم 
للاعتذار ، واطلب منهم اختيار اختلاف‐الأنف والحنجرة واحد. هذا النوع من التغيير 
لتصحيح الخطأ يسمى التحويل التعويضيعمل [ 19، 20 ].• إذا طلب العملاء عناصر أكثر 
مما لديك في المستودع الخاص بك ، يمكنك الطلبفي مخزون أكثر ، اعتذر للعملاء عن 
التأخير ، وقدم لهم خصمًا.هذا في الواقع هو نفسه الذي يجب أن تفعله إذا مرت شاحنة 
رافعة شوكية فوق أحدهاالعناصر الموجودة في المستودع الخاص بك ، مما يترك لك عددًا 
أقل من العناصر في المخزن منكاعتقدت أن لديك [ 21]. وبالتالي ، فإن سير عمل 
الاعتذار يحتاج بالفعل إلى أن يكون جزءًا منعمليات عملك على أي حال ، وبالتالي قد 
يكون من غير الضروري طلب خطقيد قابل للتخصيص على عدد العناصر الموجودة في المخزون.• 
إذا قام شخص ما بسحب أموال أكثر مما لديه في حسابه ، فيمكنك ذلكفرض رسوم غرامة 
السحب على المكشوف لهم والضحك طوال الطريق إلى البنك [ 22]. بواسطةتحديد الحد 
الأقصى للمبلغ الذي يمكن سحبه يوميًا ، والمخاطر علىيحد البنك [ 23].يمكن أن تكون 
أنواع القيود الأخرى ، مثل قيود المفتاح الخارجي أو السمة ، منفذةمرقمة دون الحاجة 
إلى قابلية خطية [ 24 ].الخطية | 321

      صفحة 344
تبعيات التوقيت عبر القنواتلاحظ التفاصيل في الشكل 9-1 : إذا لم تصرخ أليس بالنتيجة 
، فلن يفعل بوبمعروف أن نتيجة استفساره كانت قديمة. كان سيحدث الصفحة للتومرة أخرى 
بعد بضع ثوان ، وشهدت النتيجة النهائية في النهاية. فيولا الخطيةلوحظ فقط بسبب وجود 
قناة اتصال إضافية فينظام (صوت أليس إلى آذان بوب).يمكن أن تنشأ مواقف مماثلة في 
أنظمة الكمبيوتر. على سبيل المثال ، لنفترض أن لديك موقع ويبحيث يمكن للمستخدمين 
تحميل صورة ، وتؤدي عملية الخلفية إلى تغيير حجم الصور إلىدقة أقل لتنزيل أسرع 
(الصور المصغرة). بنية وتدفق البياناتهذا النظام موضح في الشكل 9-5.قاعدة بيانات 
للانترنتحجم الصورةملف التخزينقائمة انتظار الرسائل1. تحميل الصورة2. تخزين الصورة 
بالحجم الكامل3. إرسال رسالة4. توصيل الرسالة5. إحضار كامل-حجم الصورة6. تخزين 
حجمهاصورةالشكل 9-5. يتواصل خادم الويب ومُحسِّن الصور من خلال تخزين الملفاتوقائمة 
انتظار الرسائل ، مما يفتح احتمالية ظروف السباق.يحتاج مغير حجم الصورة إلى تعليمات 
صريحة لأداء مهمة تغيير الحجم ، وهذايتم إرسال التعليمات من خادم الويب إلى أداة 
تغيير الحجم عبر قائمة انتظار الرسائل (انظر Chap‐ثالثًا 11). لا يضع خادم الويب 
الصورة بأكملها في قائمة الانتظار ، نظرًا لأن معظمهاتم تصميم وسطاء sage للرسائل 
الصغيرة ، وقد يصل حجم الصورة إلى عدة ميغا بايتفي الحجم. بدلاً من ذلك ، تتم كتابة 
الصورة أولاً في خدمة تخزين الملفات ، ثم يتم كتابة التعليماتيتم وضع إشارة إلى 
أداة تغيير الحجم في قائمة الانتظار.إذا كانت خدمة تخزين الملفات قابلة للتقسيم 
الخطي ، فيجب أن يعمل هذا النظام بشكل جيد. إذا لم يكنخطيًا ، هناك خطر حدوث حالة 
سباق: قائمة انتظار الرسائل (الخطوتان 3 و 4 فيالشكل 9-5) أسرع من النسخ المتماثل 
الداخلي داخل خدمة التخزين. فيفي هذه الحالة ، عندما يقوم برنامج تغيير الحجم بجلب 
الصورة (الخطوة 5) ، قد يرى إصدارًا قديمًا منصورة ، أو لا شيء على الإطلاق. إذا 
قام بمعالجة نسخة قديمة من الصورة ، فإن الحجم الكامل وتصبح الصور التي تم تغيير 
حجمها في تخزين الملفات غير متسقة بشكل دائم.تنشأ هذه المشكلة بسبب وجود قناتين 
مختلفتين للاتصالبين خادم الويب و resizer: تخزين الملفات وقائمة انتظار 
الرسائل.بدون ضمان حداثة قابلية الخطية ، وظروف السباق بين هذينالقنوات ممكنة. هذا 
مشابه للشكل 9-1، حيث كان هناك أيضًا سباق322 | الفصل التاسع: الاتساق والتوافق

      الصفحة 345
رابعا. لا يتم تقسيم (تجزئة) قاعدة بيانات ذات قائد واحد ، بحيث يكون هناك قائد 
منفصل لكل قسمتؤثر على القابلية الخطية ، لأنها ضمان كائن واحد فقط. المعاملات عبر 
الأقسام هي أمر مختلف‐ثالثًا (انظر "المعاملات الموزعة والإجماع" في الصفحة 343 
).الشرط بين قناتي اتصال: نسخ قاعدة البيانات ، وقناة صوتية واقعية بين فم أليس 
وأذني بوب.ليست القابلية الخطية هي الطريقة الوحيدة لتجنب حالة السباق هذه ، لكنها 
أبسطهالفهم. إذا كنت تتحكم في قناة الاتصال الإضافية (كما في الحالةمن قائمة انتظار 
الرسائل ، ولكن ليس في حالة Alice and Bob) ، يمكنك استخدام بديلمقاربات مشابهة لما 
ناقشناه في "قراءة كتاباتك" في الصفحة 156 ،على حساب التعقيد الإضافي.تنفيذ أنظمة 
خطيةالآن بعد أن نظرنا إلى بعض الأمثلة التي تفيد فيها القابلية الخطية ، دعنا 
نفكرحول كيفية تنفيذ نظام يقدم دلالات قابلة للتقسيم الخطي.نظرًا لأن القابلية 
الخطية تعني أساسًا "التصرف كما لو كان هناك نسخة واحدة فقطمن البيانات ، وجميع 
العمليات عليها ذرية "، فإن أبسط إجابة هيحقًا لا تستخدم سوى نسخة واحدة من 
البيانات. ومع ذلك ، فإن هذا النهج لن تكون قادرة علىتحمل الأخطاء: إذا فشلت العقدة 
التي تحتفظ بهذه النسخة ، فستفقد البيانات (أو فيعلى الأقل يتعذر الوصول إليه حتى 
يتم إحضار العقدة مرة أخرى).الأسلوب الأكثر شيوعًا لجعل نظام يتحمل الأخطاء هو 
استخدام النسخ المتماثل.دعنا نعيد النظر في طرق النسخ من الفصل الخامس، وقارنوا ما 
إذا كانوا يستطيعون ذلكأن تكون قابلة للتقسيم الخطي:تكرار قائد واحد (يحتمل أن يكون 
خطيًا)في نظام مع تكرار القائد الفردي (انظر "القادة والمتابعون" في الصفحة146) ، 
يمتلك القائد النسخة الأساسية من البيانات المستخدمة في عمليات الكتابة ، ويحتفظ 
المتابعون بنسخ احتياطية من البيانات على العقد الأخرى. إذا كنت تقرأمن القائد ، أو 
من المتابعين المحدثين بشكل متزامن ، لديهم الإمكانياتللمحاكمة أن تكون 
linearizable. iv ومع ذلك ، ليست كل قاعدة بيانات ذات قائد واحد عبارة عن سطرقابل 
للضبط ، إما عن طريق التصميم (على سبيل المثال لأنه يستخدم عزل اللقطة) أو 
بسببأخطاء التزامن [10 ].يعتمد استخدام القائد للقراءات على افتراض أنك تعرف 
بالتأكيد منالقائد. كما نوقش في "الحقيقة تحددها الأغلبية" في الصفحة 292 ،من 
الممكن تمامًا للعقدة أن تعتقد أنها رائدة ، بينما في الحقيقة ليست كذلك - وإذا 
استمر القائد الوهمي في خدمة الطلبات ، فمن المحتمل أن ينتهك الخطية.القدرة [ 25]. 
مع النسخ المتماثل غير المتزامن ، قد تفقد تجاوز الفشل البيانات (انظر"معالجة 
انقطاع العقد" في الصفحة 150 ) ، والذي ينتهك كلاً من المتانة 
والخطية‐izability.الخطية | 323

      صفحة 346
خوارزميات الإجماع (قابلة للتخصيص)بعض خوارزميات الإجماع ، والتي سنناقشها لاحقًا 
في هذا الفصل ، تحمل أتشابه مع تكرار القائد الفردي. ومع ذلك ، تحتوي بروتوكولات 
الإجماعتدابير لمنع انقسام الدماغ والنسخ المتماثلة التي لا معنى لها. بفضل هذه 
التفاصيل ،يمكن للخوارزميات الحسية تنفيذ التخزين الخطي بأمان. هذه هي الطريقة 
Zoo‐حارس [ 26] و إلخ [ 27] العمل على سبيل المثال.النسخ المتماثل متعدد القادة 
(غير قابل للتقسيم الخطي)عادةً ما تكون الأنظمة ذات النسخ المتماثل متعدد القادة 
غير قابلة للتقسيم الخطي ، لأنهاعملية يكتب في وقت واحد على عقد متعددة والنسخ 
المتماثل بشكل غير متزامنمنهم إلى العقد الأخرى. لهذا السبب ، يمكنهم إنتاج كتابات 
متضاربةتتطلب دقة (انظر "معالجة تعارض الكتابة" في الصفحة 164 ).النسخ المتماثل 
بدون زعيم (ربما لا يكون قابلاً للتقسيم الخطي)بالنسبة للأنظمة ذات النسخ المتماثل 
بدون قائد (نمط دينامو ، راجع "نسخة طبق الأصل من دون زعيم ""في الصفحة 171) ، يدعي 
الأشخاص أحيانًا أنه يمكنك الحصول على "موافقات قوية"tency "باشتراط النصاب للقراءة 
والكتابة ( w + r > n ). اعتمادا على الدقيقتكوين النصاب القانوني ، واعتمادًا على 
كيفية تحديد الصلاحيات القوية‐tency ، هذا ليس صحيحًا تمامًا.طرق حل النزاعات 
"الكتابة الأخيرة تربح" استنادًا إلى الساعات الزمنية (على سبيل المثال فيكاساندرا 
، انظر "الاعتماد على الساعات المتزامنة" في الصفحة 282) تقريبا سيروغير خطية إلى 
حد ما ، لأنه لا يمكن ضمان أن تكون الطوابع الزمنية على مدار الساعةبما يتفق مع 
ترتيب الحدث الفعلي بسبب انحراف الساعة. نصاب قذر("النصاب القانوني المهمل والتسليم 
الملمّح" في الصفحة 177) أيضًا تدمر أي فرصة للخطالأذن. حتى مع وجود نصاب قانوني 
صارم ، فإن السلوك غير الخطي ممكن ، مثلموضح في القسم التالي.الخطية والنصاب 
القانونيحدسيًا ، يبدو أن النصاب القانوني الصارم في القراءة والكتابة يجب أن يكون 
قابلاً للتقسيم الخطيفي نموذج دينامو. ومع ذلك ، عندما يكون لدينا تأخيرات متغيرة 
في الشبكة ، فهذا أمر ممكنمن الممكن أن يكون لديك ظروف السباق ، كما هو موضح في 
الشكل 9-6.324 | الفصل التاسع: الاتساق والتوافق

      صفحة 347
كاتبالقارئ أالقارئ بنسخة 1نسخة 2نسخة 3الوقتحسناحسناحسناضبط x = 1الحصول على 
xالحصول على x11000000الشكل 9-6. تنفيذ غير خطي ، على الرغم من استخدام النصاب 
القانوني الصارم.في الشكل 9-6، القيمة الأولية لـ x هي 0 ، ويقوم عميل الكاتب 
بتحديث x إلى 1 عن طريق الإرسال‐جي الكتابة إلى النسخ المتماثلة الثلاثة ( ن = 3 ، 
ث = 3). في الوقت نفسه ، يقرأ العميل A من ملفالنصاب القانوني من عقدتين ( r = 2) 
ويرى القيمة الجديدة 1 على إحدى العقد. نتفق أيضابتمعن مع الكتابة ، يقرأ العميل B 
من نصاب مختلف من عقدتين ، ويعودالقيمة القديمة 0 من كليهما.تم استيفاء شرط النصاب 
( w + r > n ) ، ولكن هذا التنفيذ مع ذلك ليس سطرًا‐arizable: يبدأ طلب B بعد 
اكتمال طلب A ، لكن B تُرجع القيمة القديمةبينما تُرجع A القيمة الجديدة. (إنها مرة 
أخرى حالة أليس وبوب منالشكل 9-1 .)ومن المثير للاهتمام ، أنه من الممكن جعل نصاب 
الدينامو قابلاً للتقسيم الخطي على حسابأداء منخفض: يجب على القارئ إجراء إصلاح 
للقراءة (راجع "قراءة الإصلاح ومكافحةإنتروبيا "في الصفحة 172 ) بشكل متزامن ، قبل 
إرجاع النتائج إلى التطبيق[28] ، ويجب على الكاتب قراءة أحدث حالة لنصاب العقد قبل 
إرسالهيكتب [ 29 ، 30 ]. ومع ذلك ، فإن Riak لا يفعل ذلك بسبب عقوبة الأداء [ 
31].كاساندرا لا الانتظار للحصول على الإصلاح للقراءة إلى كامل على النصاب القانوني 
يقرأ [ 32] ، لكنها تخسرقابلية تحديد الخطية في حالة وجود العديد من عمليات الكتابة 
المتزامنة لنفس المفتاح ، نظرًا لاستخدامه لـآخر فوز في الكتابة.وعلاوة على ذلك، 
فقط linearizable القراءة و الكتابة العمليات يمكن تنفيذها في هذانموذج ، ولكن لا 
يمكن لعملية المقارنة والتعيين الخطية - إنها تتطلب موافقةخوارزمية sus [ 33 
].باختصار ، من الأكثر أمانًا افتراض أن نظامًا بدون قائد مع نسخة طبق الأصل من نمط 
دينامولا توفر إمكانية تحديد الخطية.الخطية | 325

      صفحة 348
تكلفة الخطيةنظرًا لأن بعض طرق النسخ يمكن أن توفر قابلية خطية والبعض الآخر لا 
يمكن ذلك ، فهي متداخلةتقدير لاستكشاف إيجابيات وسلبيات القابلية الخطية بمزيد من 
العمق.ناقشنا بالفعل بعض حالات الاستخدام لطرق النسخ المختلفة في الفصل الخامس ؛على 
سبيل المثال ، رأينا أن النسخ المتماثل متعدد القادة غالبًا ما يكون خيارًا 
جيدًاالنسخ المتماثل لمراكز البيانات (انظر "عملية مراكز البيانات المتعددة" في 
الصفحة 162). مثالمثل هذا النشر موضح في الشكل 9-7.مركز البيانات 1عملاءطلبDBمركز 
البيانات 2طلبDBتكرارالإتصالانقطاع الشبكة(قسم الشبكة)الشكل 9-7. انقطاع في الشبكة 
يفرض الاختيار بين القابلية الخطية والتوافر.قدرة.ضع في اعتبارك ما يحدث إذا كان 
هناك انقطاع في الشبكة بين وحدتي البيانات‐ters. افترض أن الشبكة داخل كل مركز 
بيانات تعمل ، ويمكن للعملاء الوصول إلىمراكز البيانات ، لكن لا يمكن لمراكز 
البيانات الاتصال ببعضها البعض.باستخدام قاعدة بيانات متعددة القادة ، يمكن لكل 
مركز بيانات الاستمرار في العمل بشكل طبيعي: منذ ذلك الحينيتم نسخ عمليات الكتابة 
من أحد مراكز البيانات بشكل غير متزامن إلى الآخر ، كما يتم نسخ عمليات 
الكتابةببساطة في قائمة الانتظار وتبادلها عند استعادة اتصال الشبكة.من ناحية أخرى 
، إذا تم استخدام النسخ المتماثل للقائد الفردي ، فيجب أن يكون القائد في واحدمن 
مراكز البيانات. يجب إرسال أي كتابات وأي قراءات خطية إلى القائد -وبالتالي ، 
بالنسبة لأي عميل متصل بمركز بيانات تابع ، يقوم هؤلاء بقراءة وكتابة الطلباتيجب 
إرسالها بشكل متزامن عبر الشبكة إلى مركز البيانات القائد.إذا انقطعت الشبكة بين 
مراكز البيانات في إعداد قائد واحد ، فسيكون العملاءلا يمكن لمراكز بيانات 
المتابعين الاتصال بالقائد ، لذلك لا يمكنهم إنشاء أي منهايكتب إلى قاعدة البيانات 
، ولا يقرأ أي خطي. لا يزال بإمكانهم إجراء قراءات منتابع ، لكنها ستكون قديمة (غير 
خطية). إذا كان التطبيق يتطلب Lineariza‐بلي يقرأ ويكتب ، يتسبب انقطاع الشبكة في 
أن يصبح التطبيقغير متوفر في مراكز البيانات التي لا يمكنها الاتصال بالقائد.326 | 
الفصل التاسع: الاتساق والتوافق

      صفحة 349
v. يُعرف هذان الخياران أحيانًا باسم CP (متسق ولكن غير متاح ضمن أقسام الشبكة) وAP 
(متوفرة ولكنها غير متسقة ضمن أقسام الشبكة) ، على التوالي. ومع ذلك ، فإن مخطط 
التصنيف هذاله عدة عيوب [ 9] ، لذلك من الأفضل تجنبه.إذا كان بإمكان العملاء 
الاتصال مباشرة بمركز البيانات الرائد ، فهذه ليست مشكلة ،حيث يستمر التطبيق في 
العمل بشكل طبيعي هناك. ولكن إذا كان بإمكان العملاء الوصول فقط إلى ملفتابع مركز 
البيانات ، سيرون انقطاعًا في التطبيق حتى يتم ربط الشبكةتم الاصلاح.نظرية CAPهذه 
المشكلة ليست مجرد نتيجة لتكرار قائد واحد ومتعدد القادة: أيتحتوي قاعدة البيانات 
القابلة للتحويل الخطي على هذه المشكلة ، بغض النظر عن كيفية تنفيذها. المشكلةلا 
يقتصر الأمر أيضًا على عمليات النشر متعددة مراكز البيانات ، ولكن يمكن أن تحدث في 
أي عمليات نشر غير موثوق بهاشبكة ، حتى داخل مركز بيانات واحد (انظر "الشبكات غير 
الموثوقة" في الصفحة 269).تكون المفاضلة كما يلي: v• إذا كان التطبيق الخاص بك 
يتطلب قابلية خطية ، وتم فصل بعض النسخ المتماثلةمن النسخ المتماثلة الأخرى بسبب 
مشكلة في الشبكة ، فلا يمكن لبعض النسخ المتماثلةمعالجة الطلبات أثناء فصلها: يجب 
عليهم إما الانتظار حتى الشبكة‐تم إصلاح مشكلة العمل ، أو إرجاع خطأ (في كلتا 
الحالتين ، تصبح غير متوفرة ).• إذا كان طلبك لا يتطلب قابلية خطية ، فيمكن كتابته 
بطريقة ماأن كل نسخة متماثلة يمكنها معالجة الطلبات بشكل مستقل ، حتى لو تم فصلهامن 
النسخ المتماثلة الأخرى (على سبيل المثال متعددة القادة). في هذه الحالة ، يمكن أن 
يظل التطبيقمتوفر في مواجهة مشكلة الشبكة ، لكن سلوكها غير قابل للتقسيم 
الخطي.وبالتالي ، يمكن أن تكون التطبيقات التي لا تتطلب قابلية خطية أكثر تسامحًا 
مع الشبكةمشاكل. تُعرف هذه البصيرة عمومًا باسم نظرية CAP [34، 35 ، 36 ، 37] ،تم 
تسميته من قبل Eric Brewer في عام 2000 ، على الرغم من أن المقايضة كانت معروفة 
بالفعل للمصممينمن قواعد البيانات الموزعة منذ السبعينيات [ 22 ،38 ، 39، 40].تم 
اقتراح CAP في الأصل كقاعدة عامة ، بدون تعريفات دقيقة ، معهدف بدء مناقشة حول 
المقايضات في قواعد البيانات. في ذلك الوقت ، العديد من disركزت قواعد البيانات 
التقديرية على توفير دلالات قابلة للتجزئة على مجموعة منآلات ذات تخزين مشترك [ 18 
] ، وشجع CAP مهندسي قواعد البيانات علىاستكشاف مساحة تصميم أوسع لأنظمة لا شيء 
مشترك موزعة ، والتي كانت أكثرمناسبة لتنفيذ خدمات الويب على نطاق واسع [ 23 ]. 
يستحق CAP الفضل في ذلكتحول الثقافة - شاهد انفجار تقنيات قواعد البيانات الجديدة 
منذمنتصف العقد الأول من القرن الحادي والعشرين (المعروف باسم NoSQL).نظرية CAP ، 
كما تم تعريفها رسميًا [35] ذات نطاق ضيق للغاية: فهي تنظر فقطنموذج تناسق واحد (أي 
قابلية الخطية) ونوع واحد من الخطأ (جزء من الشبكة)الخطية | 327

      صفحة 350
السادس. كما تمت مناقشته في "أخطاء الشبكة في الممارسة" في الصفحة 271، يستخدم هذا 
الكتاب التقسيم للإشارة إلى المتعمد‐تقسيم مجموعة البيانات الكبيرة إلى مجموعات 
أصغر ( تجزئة ، انظرالفصل 6). على النقيض من ذلك ، فإن أحد أطراف الشبكةنشوئها هو 
نوع معين من أخطاء الشبكة ، والذي لا نعتبره عادةً منفصلاً عن الأنواع الأخرىخطأ. 
ومع ذلك ، نظرًا لأنه P في CAP ، لا يمكننا تجنب الالتباس في هذه الحالة.ستعقد، 
السادس أي العقد التي هي على قيد الحياة ولكن منفصلة عن بعضها البعض). لا تقول أي 
شيءشيئًا عن تأخيرات الشبكة أو العقد الميتة أو المقايضات الأخرى. وهكذا ، على 
الرغم من أن CAP لديهاكان مؤثرًا تاريخيًا ، وله قيمة عملية قليلة لتصميم الأنظمة 
[9، 41 ].هناك العديد من نتائج الاستحالة الأكثر إثارة للاهتمام في الأنظمة الموزعة 
[ 42] ،و CAP حلت الآن نتائج أكثر دقة [ 2 ، 43] ، لذلك فهو في الغالبالاهتمام 
التاريخي اليوم.نظرية CAP غير المفيدةيتم تقديم CAP أحيانًا على أنه الاتساق 
والتوافر وتحمل التقسيم: اختر 2من أصل 3 . لسوء الحظ ، فإن وضعه بهذه الطريقة مضلل 
[ 37] لأن شبكة parti‐تعتبر الأخطاء نوعًا من الخطأ ، لذا فهي ليست شيئًا تختاره 
عادةً: إمايحدثون أو لا يحدثون [44 ].في الأوقات التي تعمل فيها الشبكة بشكل صحيح ، 
يمكن للنظام توفير كلا المستويين‐tency (الخطية) والتوافر الكلي. عند حدوث خطأ في 
الشبكة ، يجب عليك ذلكاختر بين القابلية الخطية والتوافر الكلي. وبالتالي ، طريقة 
أفضلستكون صياغة CAP إما متسقة أو متاحة عند التقسيم [45].في مناقشات CAP هناك 
العديد من التعاريف المتناقضة للمصطلح متاحbility ، وإضفاء الطابع الرسمي كنظرية [ 
35 ] لا يتطابق مع معناها المعتاد [ 41 ].العديد من الأنظمة التي تسمى "عالية 
التوفر" (المتسامحة مع الأخطاء) في الواقع لا تلبي معايير CAPتعريف خاص للإتاحة. 
بشكل عام ، هناك الكثير من سوء الفهموالارتباك حول CAP ، ولا يساعدنا على فهم 
الأنظمة بشكل أفضل ، لذلكمن الأفضل تجنب CAP.الخطية وتأخيرات الشبكةعلى الرغم من أن 
القابلية الخطية هي ضمان مفيد ، إلا أنه من المدهش أن القليل من الأنظمة هي في 
الواقعخطي في الممارسة. على سبيل المثال ، حتى ذاكرة الوصول العشوائي على وحدة 
المعالجة المركزية الحديثة متعددة النواة ليست كذلكخطي [46 ]: إذا كتب مؤشر ترابط 
يعمل على نواة واحدة لوحدة المعالجة المركزية إلى عنوان ذاكرة ،ويقرأ مؤشر ترابط 
على نواة وحدة معالجة مركزية أخرى نفس العنوان بعد ذلك بوقت قصير ، فهو ليس 
كذلكمضمون لقراءة القيمة المكتوبة بواسطة الخيط الأول (ما لم يكن هناك حاجز للذاكرة 
أوسياج [47 ] يستخدم).والسبب في هذا السلوك هو أن كل وحدة معالجة مركزية لها ذاكرة 
تخزين مؤقت وذاكرة تخزين مؤقتمخزن العازلة. ينتقل الوصول إلى الذاكرة أولاً إلى 
ذاكرة التخزين المؤقت افتراضيًا ، وأي تغييرات تكون كذلكمكتوبة بشكل غير متزامن إلى 
الذاكرة الرئيسية. منذ الوصول إلى البيانات في ذاكرة التخزين المؤقت328 | الفصل 
التاسع: الاتساق والتوافق

      الصفحة 351
أسرع بكثير من الذهاب إلى الذاكرة الرئيسية [48 ] ، هذه الميزة ضرورية لكل شخصشكل 
على وحدات المعالجة المركزية الحديثة. ومع ذلك ، يوجد الآن عدة نسخ من البيانات 
(نسخة واحدةفي الذاكرة الرئيسية ، وربما أكثر في مخابئ مختلفة) ، وهذه النسخيتم 
تحديثها بشكل غير متزامن ، لذلك يتم فقدان القابلية الخطية.لماذا نقوم بهذه 
المقايضة؟ ليس من المنطقي استخدام نظرية CAP لتبريرنموذج تناسق الذاكرة متعدد 
النواة: داخل جهاز كمبيوتر واحد عادة ما نفترض الموثوقية‐قادر على الاتصال ، ولا 
نتوقع أن يكون بإمكان نواة وحدة معالجة مركزية واحدة مواصلة العمل‐ating بشكل طبيعي 
إذا تم فصله عن بقية الكمبيوتر. السبب لإسقاط القابلية الخطية هو الأداء ، وليس 
التسامح مع الخطأ.وينطبق الشيء نفسه على العديد من قواعد البيانات الموزعة التي 
تختار عدم تقديم خطي.ضمانات بل: يفعلون ذلك في المقام الأول لزيادة الأداء ، وليس 
للخطأتفاوت [49]. القابلية للخطية بطيئة - وهذا صحيح طوال الوقت ، وليس فقط خلالخطأ 
في الشبكة.ألا يمكننا العثور على تنفيذ أكثر كفاءة للتخزين الخطي؟ هو - هييبدو أن 
الجواب لا: عطية وولش [ 50] إثبات أنك إذا كنت تريد قابلية تحديد الخطية ،وقت 
الاستجابة لطلبات القراءة والكتابة يتناسب على الأقل مع حالة عدم اليقينمن التأخير 
في الشبكة. في شبكة ذات تأخيرات متغيرة للغاية ، مثل معظم أجهزة الكمبيوترشبكات 
الكمبيوتر (انظر "المهلات والتأخيرات غير المحدودة" في الصفحة 273 ) ، الاستجابةوقت 
القراءة والكتابة الخطي سيكون حتمًا مرتفعًا. خوارزمية أسرعلا وجود لقابلية خطية ، 
ولكن يمكن أن تكون نماذج الاتساق الأضعف أسرع بكثير ،لذا فهذه مقايضة مهمة للأنظمة 
الحساسة لوقت الاستجابة.طلب ضماناتقلنا سابقًا أن السجل القابل للتقسيم الخطي يتصرف 
كما لو كان هناك واحدًا فقطنسخة من البيانات ، وأن كل عملية تبدو نافذة المفعول 
ذريًا في وقت واحدبالتوقيت. هذا يعني أن العمليات يتم تنفيذها بترتيب محدد 
جيدًا.أوضحنا الترتيب في الشكل 9-4 من خلال ضم العمليات بالترتيب فيالتي يبدو أنهم 
قد نفذوها.كان الطلب موضوعًا متكررًا في هذا الكتاب ، مما يشير إلى أنه قد يكون 
ملففكرة أساسية مهمة. دعنا نلخص بإيجاز بعض السياقات الأخرى التيلقد ناقشنا الطلب:• 
في الفصل الخامس ، رأينا أن الغرض الرئيسي للقائد في النسخة المتماثلة ذات القائد 
الفرديالهدف هو تحديد ترتيب عمليات الكتابة في سجل النسخ - أي الترتيبفي أي أتباع 
يطبقون تلك الكتابات. إذا لم يكن هناك زعيم واحد ، يمكن للنزاعاتتحدث بسبب العمليات 
المتزامنة (انظر "معالجة تعارض الكتابة" في الصفحة 164 ).• القابلية للتسلسل في 
الفصل 7 هي ضمان أن المعاملات تتصرف كما لو كانتتم تنفيذها بترتيب تسلسلي . يمكن 
تحقيقه بالتنفيذ الحرفيطلب ضمانات | 329

      صفحة 352
المعاملات بترتيب تسلسلي ، أو بالسماح بالتنفيذ المتزامن أثناء المنعجي تعارض 
التسلسل (عن طريق قفل أو إحباط).• استخدام الطوابع الزمنية والساعات في الأنظمة 
الموزعة التي ناقشناها فيهاالفصل 8 (انظر "الاعتماد على الساعات المتزامنة" في 
الصفحة 282) محاولة أخرىلإدخال النظام في عالم غير منظم ، على سبيل المثال لتحديد 
أي واحدمن كتابين حدث لاحقًا.ومن المثير للاهتمام ، اتضح أن هناك روابط عميقة بين 
الترتيب الخطي.القدرة ، والإجماع. على الرغم من أن هذه الفكرة أكثر نظرية 
وتجريديةأكثر من باقي أجزاء هذا الكتاب ، فهو مفيد جدًا لتوضيح فهمنالما تستطيع 
الأنظمة فعله وما لا تستطيع فعله. سوف نستكشف هذا الموضوع في الثواني القليلة 
القادمة‐نشوئها.الترتيب والسببيةهناك عدة أسباب وراء استمرار الطلب ، وأحد الأسباب 
هوأنه يساعد في الحفاظ على السببية . لقد رأينا بالفعل العديد من الأمثلة علىمسار 
هذا الكتاب حيث كانت السببية مهمة:• في "قراءة البادئة المتسقة" في الصفحة 159 ( 
الشكل 5-5) رأينا مثالا حيثرأى مراقب المحادثة أولاً إجابة السؤال ، ثميتم الرد على 
السؤال. هذا محير لأنه ينتهك حدسنا لالسبب والنتيجة: إذا تمت الإجابة على سؤال ، 
فمن الواضح أن السؤال يجب أن يكونهناك أولاً ، لأن الشخص الذي يجيب يجب أن يكون قد 
رأى السؤال(بافتراض أنهم ليسوا نفسانيين ولا يمكنهم رؤية المستقبل). نقول ذلك 
هناكهي علاقة سببية بين السؤال والجواب.• ظهر نمط مشابه في الشكل 5-9، حيث نظرنا 
إلى النسخ المتماثلبين ثلاثة قادة ، ولاحظوا أن بعض الكتابات يمكن أن "تتفوق" على 
البعض الآخرللتأخير في الشبكة. من منظور إحدى النسخ المتماثلة سيبدوعلى الرغم من 
وجود تحديث لصف غير موجود. السببية هنا تعني ذلكيجب أولاً إنشاء صف قبل أن يتم 
تحديثه.• في "الكشف عن عمليات الكتابة المتزامنة" في الصفحة 178 ، لاحظنا أنه إذا 
كان لديك كتابتانالعمليات A و B ، هناك ثلاثة احتمالات: إما حدث A قبل B أو Bحدث 
قبل أن تكون A ، أو A و B متزامنة. حدث هذا قبل العلاقةهو تعبير آخر عن السببية: 
إذا حدث "أ" قبل "ب" ، فهذا يعني أن "ب" قد تكونعلموا بـ A ، أو مبنيون على A ، أو 
اعتمدوا على A. إذا كان A و B متفقين‐الريع ، ليس هناك علاقة سببية بينهما ، أي نحن 
على يقين من أن لا أحد يعرفعن الآخر.• في سياق عزل اللقطة للمعاملات ("لقطة عزل 
وقراءة قابلة للتكرار "في الصفحة 228 ) ، قلنا أن المعاملة تُقرأ من ملف متسقلمحة. 
ولكن ماذا تعني كلمة "ثابت" في هذا السياق؟ إنه يعني الاتساقمع السببية : إذا احتوت 
اللقطة على إجابة ، فيجب أن تحتوي أيضًا على أسئلة330 | الفصل التاسع: الاتساق 
والتوافق

      صفحة 353
الرد [ 51]. مراقبة قاعدة البيانات بأكملها في وقت واحديجعلها متوافقة مع السببية: 
تأثير جميع العمليات التي حدثت cau‐سالي قبل تلك النقطة الزمنية مرئية ، ولكن لم 
تحدث أي عمليات cau‐يمكن رؤية سالي بعد ذلك. قراءة الانحراف (قراءات غير متسقة ، 
كما هو موضح فيالشكل 7-6 ) يعني قراءة البيانات في حالة تنتهك السببية.• أمثلتنا 
على الكتابة الانحراف بين المعاملات (انظر "منع الانحراف الكتابةوالأشباح "في 
الصفحة 237 ) أيضًا تبعيات سببية: فيالشكل 7-8 ، سُمح لأليس بالتوقف عن الاتصال لأن 
المعاملة اعتقدت ذلكلا يزال بوب تحت الطلب والعكس صحيح. في هذه الحالة ، يكون إجراء 
الخروج عن الطلب هو cau‐سالي تعتمد على مراقبة من هو حاليا تحت الطلب. snap قابل 
للتسلسل‐عزل اللقطة (راجع "عزل اللقطة القابل للتسلسل (SSI)" في الصفحة 252) 
يكتشفكتابة الانحراف عن طريق تتبع التبعيات السببية بين المعاملات.• في مثال أليس 
وبوب يشاهدان كرة القدم (الشكل 9-1) ، حقيقة أن بوبحصلت على نتيجة لا معنى لها من 
الخادم بعد سماع أليس تصيح أن النتيجة سببيةانتهاك ity: يعتمد تعجب أليس سببيًا على 
إعلانالنتيجة ، لذلك يجب أن يكون بوب أيضًا قادرًا على رؤية النتيجة بعد سماع أليس. 
الظهر نفس النمط مرة أخرى في "تبعيات توقيت القنوات المتقاطعة" على الصفحة322 في 
ستار خدمة تغيير حجم الصورة.بالنظر إليه بهذه الطريقة ، يمكن تلخيص العديد من 
الصفحات الـ 200 الأخيرة من هذا الكتابللكلمات الثلاث: "انتبه إلى السببية!"أن تكون 
متسقًا مع السببية يعني الامتثال للأوامر التي تفرضها السببية.يأتي السبب قبل 
التأثير. يتم إرسال رسالة قبل استلام هذه الرسالة. الالسؤال يأتي قبل الجواب. وكما 
هو الحال في الحياة الواقعية ، هناك شيء يؤدي إلى شيء آخر:عقدة واحدة تقرأ بعض 
البيانات ثم تكتب شيئًا نتيجة لذلك ، تقرأ عقدة أخرىالشيء الذي كتب ويكتب شيئًا آخر 
بدوره ، وهكذا. هذه السلاسلمن العمليات المعتمدة سببيًا تحدد الترتيب السببي في 
النظام - أي ماذاحدث قبل ماذا.الترتيب السببي ليس ترتيبًا كليًاA مجموع النظام يسمح 
لأي العنصرين يمكن مقارنة، لذلك إذا كان لديك عنصرين،يمكنك دائمًا تحديد أيهما أكبر 
وأيهما أصغر. على سبيل المثال ، natu‐يتم ترتيب أرقام ral بالكامل: إذا أعطيتك أي 
رقمين ، لنقل 5 و 13 ، يمكنك ذلكأخبرني أن 13 أكبر من 5.ومع ذلك ، فإن المجموعات 
الحسابية ليست مرتبة بالكامل: هل { a ، b } أكبر من { b ، c }؟ نحن سوف،لا يمكنك 
مقارنتها حقًا ، لأن أيًا منهما ليست مجموعة فرعية من الأخرى. نقول لهمو لا تضاهى 
مجموعات، وبالتالي الرياضية هي أمر جزئيا : في بعضالحالات ، مجموعة واحدة أكبر من 
الأخرى (إذا كانت مجموعة واحدة تحتوي على جميع عناصر مجموعة أخرى) ،لكنها في حالات 
أخرى لا تضاهى.طلب ضمانات | 331

      صفحة 354
ينعكس الفرق بين الترتيب الكلي والترتيب الجزئي في بيانات مختلفة‐نماذج التناسق 
الأساسي:الخطيةفي النظام الخطي ، لدينا ترتيب إجمالي للعمليات: إذا كان النظام 
يتصرفوكأن هناك نسخة واحدة فقط من البيانات ، وكل عملية ذرية ، هذايعني أنه بالنسبة 
لأي عمليتين ، يمكننا دائمًا تحديد أيهما حدث أولاً.يتم توضيح هذا الترتيب الإجمالي 
كجدول زمني في الشكل 9-4 .السببيةقلنا أن عمليتين متزامنتين إذا لم تحدث قبل 
الأخرى(راجع علاقة "يحدث قبل" والتزامن "في الصفحة 180 ). وضعبطريقة أخرى ، يتم 
ترتيب حدثين إذا كانا مرتبطين سببيًا (حدث أحدهماقبل الأخرى) ، لكنها لا تضاهى إذا 
كانت متزامنة. هذا يعنىأن السببية تحدد ترتيبًا جزئيًا ، وليس ترتيبًا كليًا: بعض 
العملياتأمر فيما يتعلق ببعضها البعض ، ولكن بعضها لا يضاهى.لذلك ، وفقًا لهذا 
التعريف ، لا توجد عمليات متزامنة في الخط‐مخزن بيانات قابل للامتداد: يجب أن يكون 
هناك جدول زمني واحد تكون جميع العمليات على طولهأمرت تماما. قد يكون هناك العديد 
من الطلبات التي تنتظر معالجتها ، ولكن البيانات‐يضمن المتجر أن يتم التعامل مع كل 
طلب بشكل ذري في وقت واحد ، والعملعلى نسخة واحدة من البيانات ، على طول خط زمني 
واحد ، دون أي التزامن.قد يعني التزامن أن الجدول الزمني يتفرع ودمج مرة أخرى - وفي 
هذاالحالة ، العمليات على الفروع المختلفة لا تضاهى ، أي متزامنة. لقد رأينا هذافي 
الفصل 5 : على سبيل المثال ، الشكل 5-14 ليس ترتيبًا كليًا بخط مستقيم ، ولكنه 
بالأحرى أخليط من العمليات المختلفة الجارية في نفس الوقت. الأسهم في الرسم 
التخطيطيتشير إلى التبعيات السببية - الترتيب الجزئي للعمليات.إذا كنت معتادًا على 
أنظمة التحكم في الإصدارات الموزعة مثل git ، فنسختهاالتاريخ يشبه إلى حد كبير 
الرسم البياني للتبعيات السببية. في كثير من الأحيان يلتزم المرءيحدث بعد الآخر ، 
في خط مستقيم ، لكن في بعض الأحيان تحصل على فروع (عندمايعمل العديد من الأشخاص 
بشكل متزامن في مشروع) ، ويتم إنشاء عمليات الدمج عندمايتم دمج الالتزامات التي تم 
إنشاؤها حاليًا.القابلية الخطية أقوى من الاتساق السببيإذن ما هي العلاقة بين 
الترتيب السببي والقدرة الخطية؟ الجواب هوأن القابلية للتحديد الخطي تعني السببية: 
أي نظام قابل للتقسيم الخطي سيحافظ على cau‐sality بشكل صحيح [7]. على وجه الخصوص ، 
إذا كانت هناك قنوات اتصال متعددة في ملفالنظام (مثل قائمة انتظار الرسائل وخدمة 
تخزين الملفات بتنسيق الشكل 9-5) ، lineariz‐القدرة على ضمان الحفاظ على السببية 
تلقائيًا دون الحاجة إلى القيام بأي شيءشيء خاص (مثل تمرير الطوابع الزمنية بين 
المكونات المختلفة).حقيقة أن القابلية الخطية تضمن السببية هي ما يجعل الأنظمة 
القابلة للتقسيم الخطي محاكاةالتنوير القائل لفهم وجاذبية. ومع ذلك ، كما نوقش في 
"تكلفة الخطية"332 | الفصل التاسع: الاتساق والتوافق

      الصفحة 355
ity "في الصفحة 326، فإن جعل النظام قابلاً للتقسيم الخطي يمكن أن يضر بأدائه 
والتوفر ، خاصة إذا كان النظام يعاني من تأخيرات كبيرة في الشبكة (على سبيل المثال 
إذا كانموزعة جغرافيا). لهذا السبب ، فإن العديد من أنظمة البيانات الموزعة 
لديهاتخلى عن جميع ضمانات الاتساق ، مما يمنحهم أداءً أفضل ، لكن يمكنهم ذلكتجعل 
العمل معهم صعبًا.الخبر السار هو أن الحل الوسط ممكن. القابلية للخط ليست هي 
الطريقة الوحيدةللحفاظ على السببية - هناك طرق أخرى أيضًا. يمكن أن يكون النظام 
متوافقًا سببيًاخيمة دون تكبد نتيجة الأداء لجعلها قابلة للتقسيم الخطي (على وجه 
الخصوص ،لا تنطبق نظرية CAP). في الواقع ، الاتساق السببي هو أقوى ما يمكننموذج 
تناسق لا يتباطأ بسبب تأخيرات الشبكة ويبقىمتاح في مواجهة أعطال الشبكة [ 2 ، 
43].في كثير من الحالات ، تتطلب الأنظمة التي يبدو أنها تتطلب قابلية تحديد الخطية 
في الواقع فقطالاتساق السببي ، والذي يمكن تنفيذه بكفاءة أكبر. بناء على هذا 
المراقب‐vation ، يستكشف الباحثون أنواعًا جديدة من قواعد البيانات التي تحافظ على 
السببية ، باستخدامخصائص الأداء والتوافر المتشابهة في النهاية المتسقةأنظمة [ 52 
،53 ، 54].نظرًا لأن هذا البحث حديث جدًا ، لم يشق الكثير منه طريقه إلى 
الإنتاجالأنظمة ، ولا تزال هناك تحديات يجب التغلب عليها [55 ، 56]. ومع ذلك ، فهو 
بروموهو الاتجاه لأنظمة المستقبل.تتبع العلاقات السببيةلن ندخل في جميع التفاصيل 
الدقيقة حول كيفية قيام الأنظمة غير الخطية بذلكالحفاظ على الاتساق السببي ، ولكن 
فقط أشر بإيجاز إلى بعض الأفكار الرئيسية.من أجل الحفاظ على السببية ، تحتاج إلى 
معرفة العملية التي حدثت من قبلأي عملية أخرى. هذا أمر جزئي: قد تكون العمليات 
المتزامنة مؤيدةبأي ترتيب ، ولكن إذا حدثت عملية قبل الأخرى ، فيجب أن تكون كذلكتتم 
معالجتها بهذا الترتيب في كل نسخة طبق الأصل. وهكذا ، عندما تعالج نسخة متماثلة 
عملية ما ،يجب أن تتأكد من أن جميع العمليات السابقة سببيًا (جميع العمليات التي 
حدثتمن قبل) تمت معالجتها بالفعل ؛ إذا كانت بعض العمليات السابقة مفقودة ، في وقت 
لاحقيجب أن تنتظر العملية حتى تتم معالجة العملية السابقة.من أجل تحديد العلاقات 
السببية ، نحتاج إلى طريقة ما لوصف"معرفة" العقدة في النظام. إذا كانت العقدة قد 
رأت بالفعل القيمة X عندهاأصدر الكتابة Y ، ثم X و Y قد يكونان مرتبطين سببيًا. 
تبدأ الحجج في البحثمثل أنواع الأسئلة التي تتوقعها في تحقيق جنائي 
بالاحتيالالرسوم: لم الرئيس التنفيذي يعرف عن X في الوقت الذي جعلوا قرار Y؟تقنيات 
تحديد العملية التي حدثت قبل أي عملية أخرىation مشابه لما ناقشناه في "الكشف عن 
عمليات الكتابة المتزامنة" في الصفحة 178 .ناقش هذا القسم السببية في مخزن بيانات 
بلا قيادة ، حيث نحتاج إلى الكشفيكتب المتزامن إلى نفس المفتاح من أجل منع 
التحديثات المفقودة. استشارة سببية‐طلب ضمانات | 333

      صفحة 356
السابع. من السهل إنشاء ترتيب إجمالي لا يتوافق مع السببية ، ولكنه ليس مفيدًا 
جدًا. على سبيل المثال ، يمكنكقم بإنشاء UUID عشوائي لكل عملية ، وقارن UUIDs بشكل 
معجمي لتحديد الترتيب الإجمالي‐جي من العمليات. هذا ترتيب إجمالي صالح ، لكن UUIDs 
العشوائية لا تخبرك بأي شيء عن العمليةحدث بالفعل أولاً ، أو ما إذا كانت العمليات 
متزامنة.يذهب tency إلى أبعد من ذلك: يحتاج إلى تتبع العلاقات السببية عبر قاعدة 
البيانات بأكملها ،ليس فقط لمفتاح واحد. يمكن تعميم ناقلات الإصدار للقيام بذلك [ 
57 ].من أجل تحديد الترتيب السببي ، تحتاج قاعدة البيانات إلى معرفة الإصدارتمت 
قراءة البيانات من قبل التطبيق. هذا هو السبب في الشكل 5-13، الإصدار num‐يتم تمرير 
ber من العملية السابقة إلى قاعدة البيانات على الكتابة. فكرة مماثلةيظهر في اكتشاف 
التعارض في عزل اللقطة التسلسلية ، كما تمت مناقشته في"عزل اللقطة التسلسلية (SSI)" 
في الصفحة 252: عندما تريد صفقة أن تأتيmit ، تقوم قاعدة البيانات بالتحقق مما إذا 
كان إصدار البيانات التي تقرأها لا يزال محدثًا.تحقيقا لهذه الغاية ، تقوم قاعدة 
البيانات بتتبع البيانات التي تمت قراءتها من خلالنشوئها.ترتيب رقم التسلسلعلى 
الرغم من أن السببية هي مفهوم نظري مهم ، إلا أنها تتبع في الواقع كل شيءيمكن أن 
تصبح التبعيات السببية غير عملية. في العديد من التطبيقات ، يقرأ العملاء الكثيرمن 
البيانات قبل كتابة شيء ما ، ومن ثم ليس من الواضح ما إذا كانت الكتابة سببيةتعتمد 
على كل أو بعض تلك القراءات السابقة فقط. صراحة تتبع جميع البياناتالتي تمت قراءتها 
يعني عبء كبير.ومع ذلك ، هناك طريقة أفضل: يمكننا استخدام الأرقام التسلسلية أو 
الطوابع الزمنية للطلبالأحداث. لا يلزم أن يأتي الطابع الزمني من ساعة الوقت من 
اليوم (ساعة فعلية) ، والتيلديها العديد من المشاكل كما تمت مناقشتها في "الساعات 
غير الموثوق بها" في الصفحة 278. طابع زمنييمكن أن تأتي أيضًا من ساعة منطقية ، وهي 
عبارة عن خوارزمية لإنشاء تسلسلالأعداد لتعريف العمليات - عادةً باستخدام العدادات 
التي يتم زيادتها من أجلهاكل عملية.تكون أرقام التسلسل أو الطوابع الزمنية مضغوطة 
(حجمها قليل فقط) ، وأنها توفر ترتيبًا إجماليًا : أي أن لكل عملية رقم تسلسل فريد 
، ويمكنك دائمًا مقارنة رقمين متسلسلين لتحديد أيهما أكبر (على سبيل المثالالتي 
حدثت في وقت لاحق).على وجه الخصوص ، يمكننا إنشاء أرقام متسلسلة بترتيب إجمالي 
يتوافق معالسببية : vii نحن نعد بأنه إذا حدثت العملية "أ" سببيًا قبل "ب" ، فعندئذ 
تحدث "أ"قبل B بالترتيب الإجمالي (يحتوي A على رقم تسلسل أقل من B). منافسعمليات قد 
أمر تعسفيا. مثل هذا النظام الكلي يلتقط جميع المعلومات السببيةالتزاوج ، ولكنه 
يفرض أيضًا ترتيبًا أكثر مما تتطلبه السببية بشكل صارم.في قاعدة بيانات مع تكرار 
القائد الفردي (انظر "القادة والمتابعون" في الصفحة146) ، يحدد سجل النسخ المتماثل 
الترتيب الإجمالي لعمليات الكتابة المتسقة334 | الفصل التاسع: الاتساق والتوافق

      صفحة 357
مع السببية. يمكن للقائد ببساطة زيادة عداد لكل عملية ، ووبالتالي ، قم بتعيين رقم 
تسلسل متزايد بشكل رتيب لكل عملية فيسجل النسخ المتماثل. إذا قام أحد المتابعين 
بتطبيق عمليات الكتابة بالترتيب الذي تظهر به في النسخة المتماثلةسجل نشوئها ، تكون 
حالة التابع دائمًا متسقة سببيًا (حتى لو كانت متأخرةخلف القائد).مولدات أرقام 
التسلسل غير السببيةإذا لم يكن هناك قائد واحد (ربما لأنك تستخدم قائدًا متعددًا أو 
قائدًا)أقل من قاعدة البيانات ، أو لأن قاعدة البيانات مقسمة) ، فمن غير الواضح 
كيفية إنشاءأرقام التسلسل للعمليات. يتم استخدام طرق مختلفة في الممارسة:• يمكن لكل 
عقدة أن تولد مجموعتها المستقلة من أرقام التسلسل. من أجل الإختبار-ple ، إذا كان 
لديك عقدتان ، يمكن أن تولد عقدة واحدة فقط أرقامًا فردية وأرقام زوجية أخرى فقط. 
بشكل عام ، يمكنك الاحتفاظ ببعض وحدات البت في الثنائيتمثيل رقم التسلسل الذي يحتوي 
على معرف عقدة فريد ، وهذا من شأنه أن يضمن أن عقدتين مختلفتين لا تستطيعان أبدًا 
توليد نفس التسلسلعدد.• طريقة أخرى هي إرفاق طابع زمني من ساعة على مدار اليوم 
(فعليةالساعة) لكل عملية [58 ]. هذه الطوابع الزمنية ليست متسلسلة ، ولكن إذا كانت 
كذلكدقة عالية بما فيه الكفاية ، قد تكون كافية لطلب الأوبرا بالكاملنشوئها. يستخدم 
هذه الحقيقة في الكتابة الماضي انتصارات (LWW) طريقة حل النزاعات- يرى "الطوابع 
الزمنية لترتيب الأحداث" في الصفحة 283 .• الخيار الثالث هو التخصيص المسبق لكتل 
​​من أرقام التسلسل. على سبيل المثال ، العقدةقد تدعي A كتلة أرقام التسلسل من 1 
إلى 1000 ، وقد تدعي العقدة Bالمطالبة بالكتلة من 1001 إلى 2000. ثم يمكن لكل عقدة 
تعيين بشكل مستقلأرقام متسلسلة من كتلتها ، وتخصيص كتلة جديدة عند توريدهاتبدأ 
الأرقام التسلسلية في الانخفاض.تعمل هذه الخيارات الثلاثة بشكل أفضل وهي أكثر 
قابلية للتطوير من دفع جميع العملياتمن خلال قائد واحد يزيد العداد. أنها تولد 
تقريبية وفريدة من نوعهازيادة عدد التسلسل لكل عملية. ومع ذلك ، لديهم جميعًا 
ملفالمشكلة: الأرقام التسلسلية التي تولدها لا تتوافق مع السببية .تحدث مشاكل 
السببية لأن مولدات الأرقام التسلسلية هذه لا تحل.تتبع ترتيب العمليات بشكل مستقيم 
عبر العقد المختلفة:• قد تعالج كل عقدة عددًا مختلفًا من العمليات في الثانية. 
وهكذا ، إذا كان أحدتولد العقدة أرقامًا زوجية والآخر يولد أرقامًا فردية ، 
العدادلأن الأرقام الزوجية قد تتخلف عن عداد الأرقام الفردية ، أو العكس. لولديك 
عملية ذات أرقام فردية وعملية ذات أرقام زوجية ، أنتلا يمكن أن تخبر بدقة أي واحد 
حدث سببيًا أولاً.طلب ضمانات | 335

      صفحة 358
ثامنا. من الممكن جعل الطوابع الزمنية الفعلية للساعة متوافقة مع السببية: 
in"الساعات المتزامنة للقطات عالمية "في الصفحة 285 ، ناقشنا Spanner من Google ، 
والذي يقدر انحراف الساعة المتوقع وينتظر انتهاء فترة عدم اليقين قبل تنفيذ 
الكتابة. هذا يضمن أن تكون المعاملة اللاحقة سببيًانظرا لطابع زمني أكبر. ومع ذلك ، 
لا يمكن أن توفر معظم الساعات مقياس الارتياب المطلوب.• الطوابع الزمنية من الساعات 
المادية تخضع لانحراف الساعة ، والذي يمكن أن يحدثتتعارض مع السببية. على سبيل 
المثال ، انظرالشكل 8-3، والذي يظهر sce‐nario التي تم فيها بالفعل تعيين أطابع 
زمني أقل. ثامنا• في حالة مخصص الكتلة ، يمكن إعطاء عملية واحدة رقم تسلسليفي 
النطاق من 1001 إلى 2000 ، ويمكن إعطاء عملية لاحقة سببيًا أرقم في النطاق من 1 إلى 
1000. هنا ، مرة أخرى ، الرقم التسلسلي غير متوفر‐تتماشى مع السببية.الطوابع 
الزمنية لامبورتعلى الرغم من أن مولدات الأرقام التسلسلية الثلاثة أعلاه غير 
متوافقة مع السببيةity ، هناك بالفعل طريقة بسيطة لتوليد أرقام التسلسل التي تعتبر 
مناسبةخيمة مع السببية. يطلق عليه الطابع الزمني لامبورت ، الذي اقترحه ليزلي في 
عام 1978لامبورت [59 ] ، في ما هو الآن واحدة من أكثر الأوراق التي يتم الاستشهاد 
بها في مجال توزيعهاالأنظمة.يوضح الشكل 9-8 استخدام الطوابع الزمنية لامبورت. كل 
عقدة لها فريدالمعرف ، وتحافظ كل عقدة على عداد لعدد العمليات التي لديها pro‐خسر. 
ثم يكون الطابع الزمني Lamport مجرد زوج من ( العداد ، معرف العقدة ). اثنينقد 
تحتوي العقد أحيانًا على نفس قيمة العداد ، ولكن من خلال تضمين معرف العقدة 
فيالطابع الزمني ، كل طابع زمني فريد من نوعه.العميل أالعميل بالعقدة 1العقدة 2(1 ، 
2)(1 ، 1)ج = 1ج = 1ج = 2ج = 3ج = 4ج = 6ج = 6ج = 5اكتبماكس = 0(6 ، 1)اكتبماكس = 
5(5 ، 2)اكتبماكس = 1اكتبماكس = 0اكتبماكس = 1اكتبماكس = 2اكتبماكس = 3(2 ، 2)(3 ، 
2)(4 ، 2)اكتبماكس = 4(6 ، 2)الشكل 9-8. توفر الطوابع الزمنية لامبورت ترتيبًا 
إجماليًا يتوافق مع السببية.336 | الفصل التاسع: الاتساق والتوافق

      الصفحة 359
لا علاقة للطابع الزمني لـ Lamport بساعة الوقت الفعلي من اليوم ، ولكنهيوفر 
الترتيب الإجمالي: إذا كان لديك طابعان زمنيان ، فإن الأول به عداد أكبرالقيمة هي 
الطابع الزمني الأكبر ؛ إذا كانت قيم العداد هي نفسها ، فإن القيمة التي تحتوي 
علىمعرّف العقدة الأكبر هو الطابع الزمني الأكبر.حتى الآن هذا هو في الأساس نفس 
العدادات الزوجية / الفردية في القسم الأخير. المفتاحفكرة عن الطوابع الزمنية 
Lamport ، مما يجعلها متوافقة مع السببية ، هوالتالي: كل عقدة وكل عميل يتتبع قيمة 
العداد القصوى لهارأيته حتى الآن ، ويتضمن ذلك الحد الأقصى في كل طلب. عندما تستقبل 
العقدةطلب وارد مع عداد أكبر من العداد الخاص به ، فإنه لا بد منيزيد على الفور 
العداد الخاص به إلى هذا الحد الأقصى.يظهر هذا في الشكل 9-8 ، حيث يتلقى العميل A 
قيمة عداد 5 من العقدة 2 ،ثم يرسل الحد الأقصى من 5 إلى العقدة 1. في ذلك الوقت ، 
كان عداد العقدة 1 فقط1 ، ولكن تم نقله على الفور إلى 5 ، لذلك كان للعملية التالية 
زيادةقيمة العداد التي تم إدخالها 6.طالما يتم تنفيذ الحد الأقصى لقيمة العداد مع 
كل عملية ، فهذايضمن النظام أن الطلب من طوابع Lamport الزمنية متسقة معالسببية ، 
لأن كل تبعية سببية تؤدي إلى زيادة الطابع الزمني.أحيانًا يتم الخلط بين الطوابع 
الزمنية لـ Lamport ومتجهات الإصدار ، والتي رأيناها"الكشف عن عمليات الكتابة 
المتزامنة" في الصفحة 178. على الرغم من وجود بعض أوجه التشابه ، إلا أنهالها غرض 
مختلف: يمكن لمتجهات الإصدار أن تميز ما إذا كانت هناك عمليتان أم لامتزامن أو ما 
إذا كان أحدهما يعتمد سببيًا على الآخر ، في حين أن Lamportتفرض الطوابع الزمنية 
دائمًا ترتيبًا إجماليًا. من الترتيب الإجمالي لوقت لامبورت‐لا يمكنك معرفة ما إذا 
كانت عمليتان متزامنتان أو ما إذا كانتا كذلكتعتمد سببيًا.ترتيب الطابع الزمني غير 
كافٍعلى الرغم من أن الطوابع الزمنية Lamport تحدد الترتيب الإجمالي للعمليات 
المتسقةمع السببية ، فهي ليست كافية تمامًا لحل العديد من المشكلات الشائعة في 
العالم.نظم تحية.على سبيل المثال ، ضع في اعتبارك نظامًا يحتاج إلى التأكد من أن 
اسم المستخدم معرّف بشكل فريدfies حساب مستخدم. إذا حاول مستخدمان في نفس الوقت 
إنشاء حساب بنفس الشيءاسم المستخدم ، يجب أن ينجح أحدهما والآخر يفشل. (تطرقناهذه 
المشكلة سابقًا في "القائد والقفل" في الصفحة 293. )للوهلة الأولى ، يبدو الأمر 
وكأنه ترتيب إجمالي للعمليات (على سبيل المثال استخدام Lamportالطوابع الزمنية) 
كافية لحل هذه المشكلة: إذا كان هناك حسابان لهما نفس المستخدم‐تم إنشاء الاسم ، 
فاختر الاسم الذي يحتوي على طابع زمني أقل باعتباره الفائز (الشخص الذيحصل على اسم 
المستخدم أولاً) ، ودع الشخص الذي يحتوي على طابع زمني أكبر يفشل. منذالطوابع 
الزمنية مرتبة بالكامل ، هذه المقارنة صالحة دائمًا.طلب ضمانات | 337

      الصفحة 360
يعمل هذا الأسلوب على تحديد الفائز بعد الحقيقة: بمجرد أن تقوم بالتجميعتيد جميع 
عمليات إنشاء اسم المستخدم في النظام ، يمكنك مقارنة وقتهم‐طوابع بريدية. ومع ذلك ، 
لا يكفي أن تتلقى العقدة طلبًا من aالمستخدم لإنشاء اسم مستخدم ، ويحتاج إلى أن 
يقرر الآن ما إذا كان يجب الطلب أم لاتنجح أو تفشل. في تلك اللحظة ، لا تعرف العقدة 
ما إذا كانت هناك عقدة أخرى أم لافي نفس الوقت في عملية إنشاء حساب بنفس اسم 
المستخدم ، وماذاالطابع الزمني الذي قد تعينه العقدة الأخرى للعملية.للتأكد من عدم 
وجود عقدة أخرى بصدد إنشاء ملفحساب بنفس اسم المستخدم وطابع زمني أقل ، يجب عليك 
التحققمع كل عقدة أخرى لمعرفة ما تفعله [59 ]. إذا فشلت إحدى العقد الأخرىأو لا 
يمكن الوصول إليه بسبب مشكلة في الشبكة ، سيتوقف هذا النظام.هذا ليس نوع نظام 
التسامح مع الخطأ الذي نحتاجه.تكمن المشكلة هنا في أن الترتيب الإجمالي للعمليات لا 
يظهر إلا بعد أن يكون لديكجمعت كل العمليات. إذا أنشأت عقدة أخرى بعض العمليات ، 
ولكنأنت لا تعرف ما هي بعد ، لا يمكنك إنشاء الترتيب النهائي للأوبرا‐العمليات غير 
المعروفة من العقدة الأخرى قد تحتاج إلى إدراجها في المتغيراتمواقف ous بالترتيب 
الإجمالي.في الختام: من أجل تنفيذ شيء مثل قيد التفرد للمستخدم‐الأسماء ، لا يكفي 
أن يكون لديك ترتيب إجمالي للعمليات - تحتاج أيضًا إلىتعرف متى يتم الانتهاء من هذا 
الأمر. إذا كانت لديك عملية لإنشاء اسم مستخدم ، وأنت متأكد من أنه لا يمكن لأي 
عقدة أخرى إدراج مطالبة باسم المستخدم نفسه قبل ذلكعمليتك بالترتيب الإجمالي ، ثم 
يمكنك إعلان نجاح العملية بأمان.فكرة معرفة متى يتم الانتهاء من طلبك الإجمالي يتم 
التقاطها في موضوعمجموع البث النظام .إجمالي بث النظامإذا كان برنامجك يعمل فقط على 
نواة واحدة لوحدة المعالجة المركزية ، فمن السهل تحديد الترتيب الإجمالي 
لـالعمليات: إنه ببساطة الترتيب الذي تم تنفيذه من قبل وحدة المعالجة المركزية. ومع 
ذلك،في نظام موزع ، الحصول على موافقة جميع العقد على نفس الترتيب الكلي للأوبرا‐إن 
العمليات صعبة. ناقشنا في القسم الأخير الترتيب حسب الطوابع الزمنية أو 
التسلسلالأرقام ، لكنها وجدت أنها ليست قوية مثل النسخ المتماثل للقائد الفردي (فهي 
ليست كافيةكفؤ لتنفيذ قيد التفرد).كما تمت مناقشته ، يحدد تكرار القائد الفردي 
الترتيب الإجمالي للعمليات حسباختيار عقدة واحدة كقائد ، وتسلسل جميع العمليات على 
نواة واحدة لوحدة المعالجة المركزيةعلى القائد. التحدي إذن هو كيفية توسيع نطاق 
النظام إذا كانت الإنتاجيةأكبر من قائد واحد يمكنه التعامل معه ، وكذلك كيفية 
التعامل مع تجاوز الفشل في حالةفشل القائد (راجع "معالجة انقطاعات العقدة" في 
الصفحة 150). في الأنظمة الموزعة Lit338 | الفصل التاسع: الاتساق والتوافق

      الصفحة 361
التاسع. مصطلح البث الذري تقليدي ، لكنه محير للغاية لأنه غير متوافق مع 
الاستخدامات الأخرى لـword atomic : ليس لها علاقة بالذرية في معاملات ACID ، وهي 
مرتبطة بشكل غير مباشر فقط بـالعمليات الذرية (بمعنى البرمجة متعددة الخيوط) أو 
السجلات الذرية (التخزين الخطي).مصطلح الإرسال المتعدد الترتيب الكلي هو مرادف 
آخر.انتصاب ، تُعرف هذه المشكلة بالترتيب الكلي للبث أو البث الذري [ 30، 60 ،61 ]. 
التاسعنطاق طلب الضمانغالبًا ما تكون قواعد البيانات المقسمة ذات قائد واحد لكل قسم 
رئيسيةطلب tain فقط لكل قسم ، مما يعني أنه لا يمكنهم العرضضمانات التناسق (مثل 
اللقطات المتسقة ، مرجع المفتاح الخارجي‐erences) عبر الأقسام. الترتيب الإجمالي 
عبر جميع الأقسام هوممكن ، لكنه يتطلب تنسيقًا إضافيًا [ 62].عادة ما يوصف البث 
الكلي للطلب على أنه بروتوكول لتبادل الرسائلبين العقد. بشكل غير رسمي ، يتطلب أن 
يكون هناك ملكيتان راضيتان دائمًا:تسليم موثوقلا يتم فقد أي رسائل: إذا تم تسليم 
رسالة إلى عقدة واحدة ، فسيتم تسليمها للجميعالعقد.أمرت التسليم تمامايتم تسليم 
الرسائل إلى كل عقدة بنفس الترتيب.يجب أن تضمن الخوارزمية الصحيحة لبث الترتيب 
الإجمالي أن الموثوقية ويتم تلبية طلبات الخصائص دائمًا ، حتى إذا كانت العقد أو 
الشبكة معيبة. لبالطبع ، لن يتم تسليم الرسائل أثناء انقطاع الشبكة ، بل يتم 
تسليمها.يمكن لـ rithm الاستمرار في إعادة المحاولة حتى تصل الرسائل عندما تكون 
الشبكة متساوية‐tually (ومن ثم يجب تسليمها بالترتيب الصحيح).باستخدام نظام البث 
الكليتقوم خدمات الإجماع مثل ZooKeeper و etcd بتنفيذ الطلب الكلي بالفعلإذاعة. هذا 
تلميح إلى وجود علاقة قوية بين إجمالي الطلب الواسع‐المدلى بها والإجماع ، والتي 
سوف نستكشفها لاحقًا في هذا الفصل.إجمالي بث الطلب هو بالضبط ما تحتاجه لنسخ قاعدة 
البيانات: إذا كان كل mes‐يمثل sage الكتابة إلى قاعدة البيانات ، وكل نسخة متماثلة 
تعالج نفس عمليات الكتابةبنفس الترتيب ، ستظل النسخ المتماثلة متسقة مع بعضها البعض 
(بصرف النظر عنأي تأخر مؤقت في النسخ المتماثل). يُعرف هذا المبدأ باسم نسخ آلة 
الحالة[63] ، وسنعود إليه في الفصل 11 .وبالمثل ، يمكن استخدام بث الترتيب الكلي 
لتنفيذ المعاملات القابلة للتسلسل: asتمت مناقشته في "التنفيذ التسلسلي الفعلي" في 
الصفحة 243، إذا كانت كل رسالة تمثل ملفطلب ضمانات | 339

      صفحة 362
x. بالمعنى الرسمي ، يعد سجل القراءة / الكتابة القابل للتخصيص مشكلة "أسهل". 
إجمالي البث من أجل متساوي‐أقرضت لتوافق الآراء [70] ، والتي ليس لها حل حتمي في 
نموذج توقف التصادم غير المتزامن [ 73] ،في حين يمكن تنفيذ سجل القراءة / الكتابة 
الخطي في نفس نموذج النظام [ 28 ، 29 ، 30 ]. كيف-على الإطلاق ، فإن إضافة العمليات 
الذرية مثل المقارنة والتعيين أو الزيادة والحصول على سجل يجعلها متساوية‐أقرضت 
لتوافق الآراء [33]. في الممارسة العملية ، فإن مشاكل الإجماع والسجل الخطي متشابهة 
إلى حد ما.يتم تنفيذ المعاملة القطعية كإجراء مخزن ، وإذا كانت كل عقدة proتتخلص من 
تلك الرسائل بنفس الترتيب ، ثم أقسام ونُسخ البيانات المتماثلةقاعدة يتم الاحتفاظ 
بها متسقة مع بعضها البعض [ 64].يتمثل أحد الجوانب المهمة في الترتيب الإجمالي للبث 
في أن الترتيب ثابت في وقت البثيتم تسليم الرسائل: لا يُسمح للعقدة بإدراج رسالة 
بأثر رجعي في ملفسابقًا بالترتيب إذا تم بالفعل تسليم الرسائل اللاحقة. هذهالحقيقة 
تجعل بث الترتيب الإجمالي أقوى من ترتيب الطابع الزمني.هناك طريقة أخرى للنظر إلى 
البث بالترتيب الإجمالي وهي أنها طريقة لإنشاء سجل (مثلفي سجل النسخ المتماثل أو 
سجل العمليات أو سجل الكتابة المسبقة): تسليم الرسالة يشبهإلحاق السجل. نظرًا لأن 
جميع العقد يجب أن تسلم نفس الرسائل في نفسالترتيب ، يمكن لجميع العقد قراءة السجل 
ورؤية تسلسل الرسائل نفسه.يعد بث الترتيب الإجمالي مفيدًا أيضًا لتنفيذ خدمة القفل 
التي توفرالرموز المميزة للمبارزة (راجع "رموز المبارزة" في الصفحة 294). كل طلب 
للحصول على القفليتم إلحاقه كرسالة بالسجل ، ويتم ترقيم جميع الرسائل بالتسلسلترتيب 
ظهورهم في السجل. يمكن أن يكون الرقم التسلسلي بمثابة سياجرمز ، لأنه يتزايد بشكل 
رتيب. في ZooKeeper ، هذا الرقم التسلسلي هويسمى zxid [15 ].تنفيذ التخزين الخطي 
باستخدام بث النظام الكليكما هو موضح في الشكل 9-4، في نظام خطي يوجد ترتيب إجمالي 
للأوبرانشوئها. هل هذا يعني أن القابلية الخطية هي نفسها البث الكلي؟ ليس 
تماما،ولكن هناك روابط وثيقة بين الاثنين. xالبث الكلي للطلب غير متزامن: الرسائل 
مضمونة لتسليمها relia‐bly بترتيب ثابت ، ولكن لا يوجد ضمان بشأن موعد تسليم 
الرسالة(لذلك قد يتخلف أحد المستلمين عن الآخرين). على النقيض من ذلك ، فإن الخطية 
هي حداثةالضمان: القراءة مضمونة لمعرفة أحدث قيمة مكتوبة.ومع ذلك ، إذا كان لديك 
نظام البث الكلي ، فيمكنك إنشاء مساحة تخزين قابلة للتخصيص في الأعلىمنه. على سبيل 
المثال ، يمكنك التأكد من أن أسماء المستخدمين تحدد بشكل فريد حسابات 
المستخدمين.تخيل أنه لكل اسم مستخدم محتمل ، يمكنك الحصول على سجل قابل للتخصيص 
بامتدادعملية المقارنة والتعيين الذرية. كل سجل له في البداية قيمة خالية 
(indi‐تفيد بأن اسم المستخدم غير مأخوذ). عندما يريد المستخدم إنشاء اسم مستخدم ، 
فأنتقم بتنفيذ عملية المقارنة والتعيين في السجل لاسم المستخدم هذا ، واضبطه 
علىمعرف حساب المستخدم ، بشرط أن تكون قيمة التسجيل السابقة خالية . لو340 | الفصل 
التاسع: الاتساق والتوافق

      صفحة 363
الحادي عشر. إذا لم تنتظر ، ولكن اعترفت بالكتابة فور وضعها في قائمة الانتظار ، 
فستحصل على شيءعلى غرار نموذج تناسق معالجات x86 متعددة النواة [ 46 ]. هذا النموذج 
ليس خطيًا ولامتسقة بالتتابع.يحاول العديد من المستخدمين الحصول في نفس الوقت على 
نفس اسم المستخدم ، واحد فقط من المقارنة-and-set ستنجح ، لأن الآخرين سيرون قيمة 
غير خالية(بسبب الخطية).يمكنك تنفيذ مثل هذه العملية الخطية للمقارنة والتعيين على 
النحو التالي ، من خلالباستخدام بث النظام الإجمالي كسجل إلحاق فقط [65 ،66 ]:1. قم 
بإلحاق رسالة بالسجل ، تشير مبدئيًا إلى اسم المستخدم الذي تريدهمطالبة.2. اقرأ 
السجل وانتظر حتى يتم تسليم الرسالة التي قمت بإلحاقها مرة أخرىأنت. الحادي عشر3. 
تحقق من وجود أي رسائل تدعي اسم المستخدم الذي تريده. إذا كانت الرسالة الأولىاسم 
المستخدم الذي تريده هو رسالتك الخاصة ، فأنت ناجح: يمكنك ذلكالالتزام بادعاء اسم 
المستخدم (ربما عن طريق إلحاق رسالة أخرى بالسجل)والإقرار بها للعميل. إذا كانت 
الرسالة الأولى لاسم المستخدم الذي تريده هيمن مستخدم آخر ، قمت بإجهاض العملية.لأن 
إدخالات السجل يتم تسليمها إلى جميع العقد بنفس الترتيب ، إذا كان هناك العديد 
منهايكتب المتزامن ، ستتفق جميع العقد على أي منها يأتي أولاً. عن طريق اختيار 
الأولمن الكتابات المتضاربة على أنها فائزة ، وإجهاض اللاحقة ، تتفق جميع العقد على 
ما إذا كان ملفتم ارتكاب الكتابة أو إحباطها. يمكن استخدام نهج مماثل لتنفيذ 
المسلسلمعاملات متعددة الكائنات izable أعلى السجل [65 ].في حين أن هذا الإجراء 
يضمن الكتابة الخطية ، إلا أنه لا يضمن إمكانية الكتابة الخطيةيقرأ - إذا قرأت من 
متجر تم تحديثه بشكل غير متزامن من السجل ، فقد يكونتكون قديمة. (على وجه الدقة ، 
يوفر الإجراء أعلاه تناسقًا تسلسليًا [ 50، 67] ،يُعرف أحيانًا أيضًا باتساق الجدول 
الزمني [ 68، 69 ] ، ضمان أضعف قليلاًمن القابلية الخطية.) لجعل القراءات قابلة 
للتقسيم الخطي ، هناك بعض الخيارات:• يمكنك قراءة تسلسل من خلال السجل من خلال 
إلحاق رسالة ، وقراءة السجل ،وأداء القراءة الفعلية عند تسليم الرسالة إليك. 
الوبالتالي ، فإن موضع الرسالة في السجل يحدد النقطة الزمنية التي تتم فيها 
القراءةيحدث. (يقرأ النصاب في عمل إلخ إلى حد ما مثل هذا [16].)• إذا كان السجل 
يسمح لك بجلب موضع آخر رسالة سجل في خطيةبلي الطريقة ، يمكنك الاستعلام عن هذا 
الموضع ، انتظر حتى تكون جميع الإدخالات حتى هذا الموضعتسلمها لك ، ثم قم بالقراءة. 
(هذه هي الفكرة وراء Zoo‐عملية مزامنة Keeper () [ 15].)طلب ضمانات | 341

      صفحة 364
• أو يمكنك جعل قراءتك من نسخة متماثلة يتم تحديثها بشكل متزامنيكتب ، وبالتالي من 
المؤكد أن يكون محدثًا. (تُستخدم هذه التقنية في نسخة طبق الأصل من السلسلةنشوئها [ 
66].)تنفيذ بث النظام الكلي باستخدام التخزين الخطيأظهر القسم الأخير كيفية إنشاء 
عملية مقارنة وتعيين قابلة للتقسيم منمجموع البث النظام. يمكننا أيضًا قلبها ، 
بافتراض أن لدينا قابلية للتقسيم الخطيالتخزين ، وتبين كيفية بناء النظام الإجمالي 
للبث منه.أسهل طريقة هي افتراض أن لديك سجلًا قابلًا للتقسيم الخطي يخزن عددًا 
صحيحًا والتي لديها عملية زيادة وتحصل ذرية [33]. بدلا من ذلك ، ذريةعملية المقارنة 
والتعيين ستؤدي المهمة أيضًا.الخوارزمية بسيطة: لكل رسالة تريد إرسالها من خلال 
الطلب الإجماليالبث ، يمكنك زيادة والحصول على العدد الصحيح الخطي ، ثم إرفاق 
القيمةحصلت عليها من السجل كرقم تسلسلي للرسالة. يمكنك بعد ذلك الإرسالالرسالة إلى 
جميع العقد (إعادة إرسال أي رسائل مفقودة) ، ويقوم المستلمون بتسليمهاالرسائل على 
التوالي برقم تسلسلي.لاحظ أنه على عكس الطوابع الزمنية لـ Lamport ، فإن الأرقام 
التي تحصل عليها من زيادةيشكل السجل الخطي تسلسلاً بدون فجوات. وبالتالي ، إذا قامت 
العقدة بتسليم mes‐sage 4 ويتلقى رسالة واردة برقم تسلسلي 6 ، فهو يعرف ذلكيجب أن 
تنتظر الرسالة 5 قبل أن تتمكن من تسليم الرسالة 6. الأمر ليس كذلكمع الطوابع 
الزمنية Lamport - في الواقع ، هذا هو الفرق الرئيسي بين الترتيب الإجماليترتيب 
البث والطوابع الزمنية.ما مدى صعوبة إنشاء عدد صحيح خطي مع زيادة ذرية - و-الحصول 
على العملية؟ كالعادة ، إذا لم تفشل الأمور أبدًا ، فسيكون الأمر سهلاً: يمكنك 
الاحتفاظ بهافي متغير على عقدة واحدة. المشكلة تكمن في معالجة الوضع عند 
الشبكةتنقطع الاتصالات بهذه العقدة ، وتستعيد القيمة عند فشل تلك العقدة[62]. بشكل 
عام ، إذا كنت تفكر مليًا بما يكفي حول إنشاء رقم التسلسل الخطي ،ators ، ينتهي بك 
الأمر حتمًا إلى خوارزمية إجماع.هذه ليست مصادفة: يمكن إثبات أن المقارنة والتعيين 
قابلة للتخصيص (أوincrement-and-get) وإجمالي بث النظام كلاهما مكافئ لـ consen‐سوس 
[33، 70 ]. بمعنى ، إذا كان بإمكانك حل إحدى هذه المشكلات ، فيمكنك تحويلها إلىحلا 
للآخرين. هذه رؤية عميقة ومدهشة!لقد حان الوقت أخيرًا لمعالجة مشكلة الإجماع وجهاً 
لوجه ، وهو ما سنفعله فيبقية هذا الفصل.342 | الفصل التاسع: الاتساق والتوافق

      صفحة 365
الثاني عشر. يتم إضفاء الطابع الرسمي على الالتزام الذري بشكل مختلف قليلاً عن 
الإجماع: يمكن أن تلتزم الصفقة الذرية فقطإذا صوت جميع المشاركين للالتزام ، ويجب 
أن يُجهض إذا كان أي مشارك يحتاج إلى الإجهاض. توافق الآراء مسموح بهاتخاذ قرار 
بشأن أي قيمة يقترحها أحد المشاركين. ومع ذلك ، فإن الالتزام الذري والإجماعقابلة 
للاختزال لبعضها البعض [71، 72]. الالتزام الذري غير المعطل أصعب من الإجماع - انظر 
"ثلاث مراحلارتكاب "في الصفحة 350.المعاملات الموزعة والتوافقالإجماع من أهم 
المشاكل الأساسية في التوزيعالحوسبة. ظاهريًا ، يبدو الأمر بسيطًا: بشكل غير رسمي ، 
الهدف هو ببساطة الحصول علىالعقد eral للاتفاق على شيء ما . قد تعتقد أن هذا لا 
ينبغي أن يكون صعبًا للغاية.لسوء الحظ ، تم بناء العديد من الأنظمة المعطلة على 
أساس الاعتقاد الخاطئ بأن هذاالمشكلة سهلة.على الرغم من أن الإجماع مهم جدًا ، إلا 
أن القسم المتعلق به ظهر متأخرًا جدًا في هذا الكتابلأن الموضوع دقيق للغاية ، 
وتقدير التفاصيل الدقيقة يتطلب بعضًا مسبقًاالمعرفة المطلوبة. حتى في مجتمع البحث 
الأكاديمي ، الفهمالإجماع يتبلور بشكل تدريجي فقط على مدى عقود ، مع وجود العديد من 
الأخطاءتفاهمات على طول الطريق. الآن وقد ناقشنا النسخ المتماثل (الفصل 5) 
،المعاملات (الفصل 7 ) ، نماذج النظام ( الفصل 8) ، والقابلية الخطية ، والنظام 
الإجماليإذاعة (الفصل 9) ، فنحن مستعدون أخيرًا لمعالجة مشكلة الإجماع.هناك عدد من 
المواقف التي يكون من المهم فيها أن تتفق العقد معهامثال:انتخاب الزعيمفي قاعدة 
البيانات ذات النسخ المتماثل ذي القائد الفردي ، تحتاج جميع العقد إلى الاتفاق على 
العقدةالقائد. قد يصبح منصب القيادة موضع نزاع إذا لم تتمكن بعض العقد من 
ذلكالتواصل مع الآخرين بسبب خطأ في الشبكة. في هذه الحالة ، الإجماع هومهم لتجنب 
الفشل السيئ ، مما يؤدي إلى حالة دماغ منقسم فيها اثنانيعتقد كل من العقدتين أنهما 
الرائدتان (انظر "معالجة انقطاعات العقد" في الصفحة 150 ). لوكان هناك قائدان ، 
كلاهما سيقبل الكتابة وستقبل بياناتهماالتباعد ، مما يؤدي إلى عدم الاتساق وفقدان 
البيانات.الالتزام الذريفي قاعدة البيانات التي تدعم المعاملات التي تمتد عبر عدة 
عقد أو أقسام ، فإننالديك مشكلة في أن إحدى المعاملات قد تفشل في بعض العقد ولكنها 
تنجح في الأخرى‐ers. إذا أردنا الحفاظ على ذرية الصفقة (بمعنى ACID ، انظر"الذرية" 
في الصفحة 216) ، فقد حصلنا على موافقة جميع العقد على نتيجةالمعاملة: إما أنهم 
جميعًا يجهضون / يتراجعون (إذا حدث خطأ ما) أو أنهم جميعًاارتكاب (إذا لم يحدث 
خطأ). يُعرف مثال الإجماع هذا باسممشكلة ارتكاب الذرية . الثاني عشرفي هذا القسم 
سوف نفحص أولاً مشكلة الالتزام الذري بمزيد من التفصيل. فيعلى وجه الخصوص ، سنناقش 
خوارزمية الالتزام (2PC) ، وهي الأكثرالمعاملات الموزعة والإجماع | 343

      صفحة 366
طريقة شائعة لحل الالتزام الذري ، والتي يتم تنفيذها في بيانات مختلفة‐القواعد 
وأنظمة المراسلة وخوادم التطبيقات. اتضح أن 2PC هو نوع منخوارزمية الإجماع - ولكنها 
ليست جيدة جدًا [ 71، 72 ].من خلال التعلم من 2PC ، سنعمل بعد ذلك في طريقنا نحو 
توافق أفضل في الآراء.الإيقاعات ، مثل تلك المستخدمة في ZooKeeper (Zab) و etcd 
(الطوافة).استحالة التوافقربما سمعت عن نتيجة FLP [ 73 ] - التي سميت على اسم 
المؤلفين فيشر ،لينش وباترسون - مما يثبت أنه لا توجد خوارزمية يمكن الاعتماد 
عليهاإجماع ieves إذا كان هناك خطر من أن العقدة قد تنهار. في نظام موزع ، نحنيجب 
أن نفترض أن العقد قد تنهار ، لذا فإن الإجماع مستحيل. ومع ذلك ، ها نحن هنا ، 
dis‐الخوارزميات العنيفة لتحقيق الإجماع. ما الذي يجري هنا؟الجواب هو أن نتيجة FLP 
أثبتت في نظام نظري شديد التقييدنموذج ، بافتراض خوارزمية حتمية لا يمكنها استخدام 
أي ساعات أو مهلات. لويُسمح للخوارزمية باستخدام المهلات ، أو طريقة أخرى للاشتباه 
في أن العقدتحطمت (حتى لو كان الشك خاطئًا في بعض الأحيان) ، يصبح الإجماع قابلاً 
للحل[ 70]. حتى مجرد السماح للخوارزمية باستخدام أرقام عشوائية يكفي لعملهاتوافق 
الآراء قابل للحل [ 74 ].وبالتالي ، على الرغم من أن نتيجة FLP حول استحالة التوافق 
تعتبر نظرية عظيمة‐الأهمية المادية ، يمكن للأنظمة الموزعة أن تحقق إجماعًا في 
الممارسة العملية.الالتزام الذري والالتزام على مرحلتين (2PC)تذكر من الفصل 7 أن 
الغرض من ذرية الصفقة هو توفير بسيطدلالات في الحالة التي يحدث فيها خطأ ما في 
منتصف صنع عدةيكتب. تكون نتيجة الصفقة إما التزامًا ناجحًا (وفي هذه الحالة يكون كل 
شيءمن عمليات الكتابة في المعاملة دائمة) ، أو إحباط (وفي هذه الحالة يتم إلغاء 
جميعتتم التراجع عن عمليات الكتابة الخاصة بالمعاملة ، أي التراجع عنها أو 
تجاهلها).تمنع Atomicity المعاملات الفاشلة من إغراق قاعدة البيانات بنصفهاالنتائج 
وحالة نصف محدثة. هذا مهم بشكل خاص ل transac متعدد الكائنات(راجع "عمليات الكائن 
الواحد والكائنات المتعددة" في الصفحة 219 ) وقواعد البياناتالتي تحافظ على فهارس 
ثانوية. كل فهرس ثانوي هو بنية بيانات منفصلةمن البيانات الأولية - وبالتالي ، إذا 
قمت بتعديل بعض البيانات ، فإن التغيير المقابليجب أيضًا إجراؤه في الفهرس الثانوي. 
تضمن الذرية أن الثانويةيظل الفهرس متسقًا مع البيانات الأولية (إذا أصبح الفهرس 
غير متوافق معالبيانات الأولية ، لن تكون مفيدة جدًا).344 | الفصل التاسع: الاتساق 
والتوافق

      صفحة 367
من عقدة واحدة إلى الالتزام الذري الموزعبالنسبة للمعاملات التي يتم تنفيذها في 
عقدة قاعدة بيانات واحدة ، عادة ما تكون الذرية فعالةتراجعت عن طريق محرك التخزين. 
عندما يطلب العميل من عقدة قاعدة البيانات الالتزام بامتدادالمعاملة ، فإن قاعدة 
البيانات تجعل عمليات الكتابة في المعاملة دائمة (عادةً ما تكون في الكتابة-قبل 
الدخول ، راجع "التحديث في المكان مقابل التسجيل الإلحاق فقط" في الصفحة 80 ) 
ثمإلحاق سجل الالتزام إلى قرص تسجيل الدخول. إذا تعطلت قاعدة البيانات في منتصففي 
هذه العملية ، يتم استرداد المعاملة من السجل عند إعادة تشغيل العقدة: إذا كان 
ملفتمت كتابة سجل الالتزام بنجاح على القرص قبل الانهيار ، المعاملة هيتعتبر ملتزمة 
؛ إذا لم يكن الأمر كذلك ، فسيتم إرجاع أي رسائل مكتوبة من تلك المعاملة.وبالتالي ، 
في عقدة واحدة ، يعتمد التزام المعاملة بشكل حاسم على الترتيب الذي يتم فيهتتم 
كتابة البيانات بشكل دائم على القرص: أولاً البيانات ، ثم سجل الالتزام [75 ]. 
المفتاحاللحظة الحاسمة للالتزام أو الإجهاض هي اللحظة التي ينتهي عندها القرص من 
الكتابةفي سجل الالتزام: قبل تلك اللحظة ، لا يزال من الممكن الإجهاض (بسبب أتعطل) 
، وبعد تلك اللحظة ، يتم تنفيذ المعاملة (حتى لو كانت قاعدة البياناتتعطل). 
وبالتالي ، فهو جهاز واحد (جهاز التحكم في محرك أقراص واحد معين ،مرتبطة بعقدة 
معينة) تجعل الالتزام ذريًا.ومع ذلك ، ماذا لو تم تضمين عدة عقد في معاملة؟ على 
سبيل المثال ، ربمالديك معاملة متعددة الكائنات في قاعدة بيانات مقسمة ، أو مقسمة 
مصطلحالفهرس الثانوي (الذي قد يكون فيه مدخل الفهرس على عقدة مختلفة عن pri‐بيانات 
ماري ، انظر "التقسيم والفهارس الثانوية" في الصفحة 197). معظم "NoSQL"لا تدعم 
مخازن البيانات الموزعة مثل هذه المعاملات الموزعة ، ولكن مجموعات مختلفةأنظمة 
العلاقات المتدرجة تفعل (انظر "المعاملات الموزعة في الممارسة العملية" في الصفحة 
350 ).لا يكفي مجرد إرسال طلب الالتزام إلى جميع العقد ، وبشكل مستقل.إجراء 
المعاملة ضمنيًا على كل واحد. عند القيام بذلك ، يمكن أن يحدث بسهولة أنينجح 
الالتزام في بعض العقد ويفشل في العقد الأخرى ، مما يؤدي إلى انتهاكضمان الذرية:• 
قد تكتشف بعض العقد انتهاكًا للقيد أو تعارضًا ، مما يجعل الإجهاض ضروريًا‐sary ، 
في حين أن العقد الأخرى قادرة على الالتزام بنجاح ؛• قد يتم فقد بعض طلبات الالتزام 
في الشبكة ، مما يؤدي إلى إحباطها في النهايةبسبب انتهاء المهلة ، بينما يتم تنفيذ 
طلبات الالتزام الأخرى ؛• قد تتعطل بعض العقد قبل كتابة سجل الالتزام بالكامل ، ثم 
العودة مرة أخرىالانتعاش ، بينما ينجح الآخرون.إذا نفذت بعض العقد المعاملة وأجهضها 
البعض الآخر ، تصبح العقد غير متسقة‐خيمة مع بعضها البعض (كما في الشكل 7-3 ). 
وبمجرد إتمام الصفقةعلى عقدة واحدة ، لا يمكن التراجع عنها مرة أخرى إذا تبين 
لاحقًا أنه تم إحباطهاعقدة أخرى.بمجرد الالتزام بالبيانات ، تصبح مرئية للمعاملات 
الأخرى ، وبالتاليقد يبدأ العملاء الآخرون في الاعتماد على تلك البيانات. لهذا 
السبب ، تلتزم الصفقةالمعاملات الموزعة والإجماع | 345

      صفحة 368
يجب أن يكون غير قابل للنقض - ​​لا يُسمح لك بتغيير رأيك بأثر رجعيإجهاض معاملة بعد 
إتمامها. هذا هو أساس الالتزام بالقراءةالعزلة - انظر "قراءة الالتزام" في الصفحة 
225 . (من الممكن لتأثيرات com‐يتم التراجع عن المعاملة المحققة لاحقًا بواسطة 
معاملة أخرى تعويضية [ 19، 20].ومع ذلك ، من وجهة نظر قاعدة البيانات ، فهذه معاملة 
منفصلة ، وبالتاليأي متطلبات للصحة عبر المعاملات هي مشكلة التطبيق.)مقدمة للالتزام 
على مرحلتينالالتزام على مرحلتين (2PC) هو خوارزمية لتحقيق التزام المعاملة 
الذريةعبر عقد متعددة ، أي لضمان التزام جميع العقد أو إحباط جميع العقد.إنها 
خوارزمية كلاسيكية في قواعد البيانات الموزعة [13 ، 39، 76]. 2PC يستخدم داخليا 
فيبعض قواعد البيانات ، وإتاحتها أيضًا للتطبيقات في شكل XA transac‐ستعقد [ 77، 78 
] (التي تدعمها Java Transaction API ، على سبيل المثال) ، أوWS-AtomicTransaction 
لخدمات الويب SOAP [79 ، 80].لا تخلط بين 2PC و 2PLالتزام مرحلتين (2PC) وقفل 
مرحلتين (انظر "مرحلتينlocking (2PL) "في الصفحة 248 ) شيئان مختلفان تمامًا. 2 
قطعة بروvides atomic الالتزام في قاعدة بيانات موزعة ، 2PL يوفر التسلسلي‐عزلة 
izable. لتجنب الارتباك ، من الأفضل التفكير فيها على أنهامفاهيم منفصلة تمامًا ، 
وتجاهل التشابه المؤسففي الاسم.التدفق الأساسي لـ 2PC موضح في الشكل 9-9 . بدلاً من 
طلب التزام واحد ،كما هو الحال مع معاملة العقدة الواحدة ، يتم تقسيم عملية الإلزام 
/ الإحباط في 2PC إلى قسمينمراحل (ومن هنا الاسم).منسققاعدة البيانات 1قاعدة 
البيانات 2الوقتحسنانعمنعمحسناكتابة البياناتكتابة البياناتإعدادالمرحلة 1= أقفال 
عقدتها معاملةالمرحلة 2حسناحسنايقترفالشكل 9-9. تنفيذ ناجح للالتزام على مرحلتين 
(2PC).يستخدم الالتزام على مرحلتين مكونًا جديدًا لا يظهر عادةً فيمعاملات العقدة: 
منسق (يُعرف أيضًا باسم مدير المعاملات ). المنسقةغالبًا ما يتم تنفيذ tor كمكتبة 
ضمن نفس عملية التطبيق346 | الفصل التاسع: الاتساق والتوافق

      صفحة 369
طلب المعاملة (على سبيل المثال مضمنة في حاوية Java EE) ، ولكن يمكن أن تكون 
أيضًاعملية منفصلة أو خدمة. أمثلة على هؤلاء المنسقين تشمل Narayana و JOTM وBTM أو 
MSDTC.تبدأ معاملة 2PC مع قراءة التطبيق وكتابة البيانات على عدةعقد قاعدة البيانات 
، كالمعتاد. نسمي عقد قاعدة البيانات هؤلاء المشاركين في Transac‐نشوئها. عندما 
يكون التطبيق جاهزًا للالتزام ، يبدأ المنسق المرحلة الأولى: إنهايرسل طلب تحضير 
إلى كل عقد ، ويسألهم عما إذا كانوا قادرين على ذلكيقترف. ثم يتتبع المنسق ردود 
المشاركين:• إذا رد جميع المشاركين بـ "نعم" ، مشيرًا إلى استعدادهم للالتزام ، 
عندئذٍيرسل dinator طلب الالتزام في المرحلة 2 ، ويأخذ الالتزام فعليًامكان.• إذا 
رد أي من المشاركين بـ "لا" ، يرسل المنسق طلب إجهاض إلىجميع العقد في المرحلة 
2.هذه العملية تشبه إلى حد ما مراسم الزواج التقليدية في الثقافات الغربية:يسأل 
الوزير العروس والعريس بشكل فردي عما إذا كانوا يريدون الزواج منالآخر ، وعادة ما 
يتلقى الإجابة "أنا أفعل" من كل منهما. بعد استلام كليهماشكر وتقدير الوزير يلفظ 
الزوج والزوجة: العابرالعمل ملتزم ، ويتم بث الحقيقة السعيدة لجميع الحاضرين. إذا 
كانت العروس أوالعريس لا يقول نعم ، الحفل محبط [19].نظام الوعودمن هذا الوصف 
المختصر ، قد لا يكون من الواضح سبب ضمان الالتزام على مرحلتينالذرية ، في حين أن 
الالتزام أحادي الطور عبر عدة عقد لا يفعل ذلك. بالتأكيد الاستعدادو ارتكاب طلبات 
يمكن بسهولة مثلما تضيع في حالة من مرحلتين. ما الذي يجعل 2PCمختلف؟لفهم هذا ، 
يتعين علينا تقسيم العملية بمزيد من التفاصيل:1. عندما يريد التطبيق بدء معاملة 
موزعة ، فإنه يطلب أمعرف المعاملة من المنسق. معرف المعاملة هذا فريد من نوعه على 
مستوى العالم.2. يبدأ التطبيق معاملة أحادية العقدة على كل من المشاركين ، ويرفق 
معرّف المعاملة الفريد عالميًا بالمعاملة أحادية العقدة. الجميعتتم القراءة 
والكتابة في إحدى هذه المعاملات أحادية العقدة. إذا حدث شيءيحدث خطأ في هذه المرحلة 
(على سبيل المثال ، تعطل العقدة أو انتهاء مهلة الطلب) ،منسق أو أي من المشاركين 
يمكن إجهاض.3. عندما يكون التطبيق جاهزًا للالتزام ، يرسل المنسق إعدادًاطلب إلى 
جميع المشاركين ، مع وضع علامة معرّف المعاملة العالمي. إذا كان أي من هؤلاءفشل 
الطلبات أو انقضت مهلتها ، يرسل المنسق طلب إجهاض لهذا العبور‐معرف الإجراء لجميع 
المشاركين.المعاملات الموزعة والإجماع | 347

      الصفحة 370
4. عندما يتلقى أحد المشاركين طلب التحضير ، فإنه يتأكد من أنه يمكن تعريفهبلطف 
تنفيذ المعاملة في جميع الظروف. وهذا يشمل كتابة كل شيءبيانات المعاملة إلى القرص 
(عطل أو انقطاع التيار الكهربائي أو نفاد مساحة القرص هيعذرًا غير مقبول لرفض 
الالتزام لاحقًا) ، والتحقق من أي مخالفات.تقيد أو قيود الانتهاكات. من خلال الرد 
بـ "نعم" على المنسق ، العقدةيتعهد بإتمام المعاملة دون خطأ إذا طلب ذلك. بعبارات 
أخرى،يتنازل المشارك عن حقه في إجهاض المعاملة ، ولكن بدونه فعلاًارتكابها.5. عندما 
يتلقى المنسق ردودًا على جميع طلبات الإعداد ، فإنه يقوم بعملقرار نهائي بشأن تنفيذ 
الصفقة أو إجهاضها (الالتزام فقطإذا صوت جميع المشاركين بـ "نعم"). يجب على المنسق 
كتابة هذا القرار لهسجل المعاملات على القرص ، حتى يعرف الطريقة التي قررت بها في 
حالة ما إذا كانت فرعيةبهدوء تعطل. هذا يسمى نقطة الالتزام .6. بمجرد كتابة قرار 
المنسق على القرص ، الالتزام أو الإجهاضيتم إرسال الطلب إلى جميع المشاركين. إذا 
فشل الطلب أو انتهت المهلة ، المنسقيجب إعادة المحاولة إلى الأبد حتى تنجح. ليس 
هناك المزيد من التراجع: إذا كان القرارهو الالتزام ، يجب تنفيذ هذا القرار ، بغض 
النظر عن عدد مرات إعادة المحاولةيأخذ. إذا تعطل أحد المشاركين في هذه الأثناء ، 
فستكون المعاملة comتمت إزالته عندما يتعافى - بما أن المشارك صوّت بـ "نعم" ، فلا 
يمكنه رفض ذلكالالتزام عندما يتعافى.وهكذا ، يحتوي البروتوكول على نقطتين أساسيتين 
من "نقاط اللاعودة": عندما يكون المشاركصوتت بـ "نعم" ، فهي تعد بأنها قادرة 
بالتأكيد على الالتزام لاحقًا (على الرغم من أن المنسققد يختار nator الإجهاض) ؛ 
وبمجرد أن يقرر المنسق ، يكون هذا القرارأخير. هذه الوعود تضمن ذرية 2PC. (الالتزام 
الذري أحادي العقدةيجمع هذين الحدثين في حدث واحد: كتابة سجل الالتزام في سجل 
المعاملات.)بالعودة إلى تشبيه الزواج: قبل أن تقول "أنا أفعل" ، أنت وعروسك / 
عريسكلديك الحرية في إجهاض الصفقة بقول "لا مفر!" ، أو شيء من هذا القبيلتأثير. ومع 
ذلك ، بعد قول "أنا أفعل" ، لا يمكنك التراجع عن هذا البيان. إذا أغمي عليكبعد أن 
تقول "أنا أفعل" ، ولا تسمع الوزير يتكلم بالكلمات "أنت الآنالزوج والزوجة "، فهذا 
لا يغير من حقيقة إتمام الصفقة.عندما تستعيد وعيك لاحقًا ، يمكنك معرفة ما إذا كنت 
متزوجًا أمليس عن طريق الاستعلام من الوزير عن حالة معرّف معاملتك العالمي ، أو 
يمكنك ذلكانتظر إعادة محاولة الوزير التالية لطلب الالتزام (حيث ستتم إعادة 
المحاولةاستمر طوال فترة فقدان الوعي الخاصة بك).فشل المنسقلقد ناقشنا ما يحدث إذا 
فشل أحد المشاركين أو الشبكة أثناء ذلك2PC: إذا فشل أي من طلبات التحضير أو انقضت 
مهلة ، فسيقوم المنسق بإلغاء التحويل.عمل؛ في حالة فشل أي من طلبات الالتزام أو 
الإجهاض ، يعيد المنسق المحاولة مرة أخرىبلطف. ومع ذلك ، فإنه ليس من الواضح ما 
يحدث إذا تعطل المنسق.348 | الفصل التاسع: الاتساق والتوافق

      صفحة 371
إذا فشل المنسق قبل إرسال طلبات التحضير ، يمكن للمشارك بأمانإجهاض الصفقة. ولكن 
بمجرد أن يتلقى المشارك طلب إعداد وصوتت بـ "نعم" ، فلم يعد بإمكانها الإجهاض من 
جانب واحد - يجب أن تنتظر حتى تسمع ردودًا منالمنسق سواء تم تنفيذ المعاملة أو 
إحباطها. إذا كان المنسقتعطل الشبكة أو تعطل الشبكة في هذه المرحلة ، لا يمكن 
للمشارك فعل أي شيء سوى الانتظار. أيتم استدعاء معاملة المشارك في هذه الحالة في شك 
أو غير مؤكد .الوضع موضح في الشكل 9-10. في هذا المثال بالذات ، المنسققررت بالفعل 
الالتزام ، وتلقت قاعدة البيانات 2 طلب الالتزام. ومع ذلك،تعطل المنسق قبل أن يتمكن 
من إرسال طلب الالتزام إلى قاعدة البيانات 1 ، وهكذاقاعدة البيانات 1 لا تعرف ما 
إذا كانت سترتكب أم ستجهض. حتى المهلة لا تساعدهنا: إذا تم إحباط قاعدة البيانات 1 
من جانب واحد بعد انقضاء المهلة ، فسوف ينتهي الأمر بالتعارض معقاعدة البيانات 2 ، 
التي ارتكبت. وبالمثل ، ليس من الآمن الالتزام من جانب واحد ،لأن مشاركًا آخر ربما 
أجهض.منسققاعدة البيانات 1قاعدة البيانات 2الوقتحسناحسنانعمنعمكتابة 
البياناتإعدادالمرحلة 1المرحلة 2حسنايقترفيقترفتحطمعالق في حالة "الاستعداد"الشكل 
9-10. يتعطل المنسق بعد تصويت المشاركين بـ "نعم". قاعدة البيانات 1 لاتعرف ما إذا 
كانت سترتكب أو تجهض.دون الاستماع من المنسق ، ليس لدى المشارك أي وسيلة 
للمعرفةسواء لارتكاب أو إجهاض. من حيث المبدأ ، يمكن للمشاركين التواصل فيما 
بينأنفسهم لمعرفة كيف صوت كل مشارك والتوصل إلى بعض الاتفاق ، ولكنهذا ليس جزءًا من 
بروتوكول 2PC.الطريقة الوحيدة لإكمال 2PC هي انتظار استرداد المنسق.هذا هو السبب في 
أنه يجب على المنسق كتابة قرار الالتزام أو الإجهاض للمعاملةقم بتسجيل الدخول على 
القرص قبل إرسال طلبات الالتزام أو الغاء للمشاركين: عندما يكون المشتركيتعافى 
dinator ، فإنه يحدد حالة جميع المعاملات المشكوك فيها من خلال قراءةسجل المعاملات. 
أي معاملات ليس لها سجل التزام في المنسقة‐تم إحباط سجل تور. وبالتالي ، فإن نقطة 
الالتزام 2PC تنخفض إلى المستوى العاديأحادية العقدة الذرية تلتزم 
بالمنسق.المعاملات الموزعة والإجماع | 349

      صفحة 372
ثلاث مراحل الالتزاميُطلق على الالتزام على مرحلتين بروتوكول حظر الالتزام الذري 
نظرًا لحقيقة ذلك2PC يمكن أن تتعثر في انتظار استعادة المنسق. من الناحية النظرية ، 
هذا ممكنلجعل بروتوكول الالتزام الذري غير محظور ، بحيث لا يتعطل إذا أفشل العقدة. 
ومع ذلك ، فإن جعل هذا العمل في الممارسة العملية ليس بالأمر السهل.كبديل لـ 2PC ، 
تم تقديم خوارزمية تسمى الالتزام ثلاثي الطور (3PC).طرح [ 13، 81]. ومع ذلك ، فإن 
الصيغة القياسية لـ 3PC تفترض وجود شبكة بهاالتأخير المحدود والعقد ذات أوقات 
الاستجابة المحدودة ؛ في معظم الأنظمة العمليةمع تأخير غير محدود للشبكة وتوقف مؤقت 
للعملية (انظر الفصل 8 ) لا يمكن ضمان ذلكذرية نقطة الإنطلاق.بشكل عام ، يتطلب 
الالتزام الذري غير المعوق وجود كاشف فشل مثالي [ 70، 72] ،أي آلية موثوقة لمعرفة 
ما إذا كانت العقدة قد تحطمت أم لا. في شبكةمع تأخير غير محدود ، المهلة ليست أداة 
كشف فشل موثوق ، لأن الطلبقد تنتهي المهلة بسبب مشكلة في الشبكة حتى لو لم تتعطل أي 
عقدة. لهذا السبب،يستمر استخدام 2PC ، على الرغم من المشكلة المعروفة للحظر على 
المنسقبالفشل.توزيع المعاملات في الممارسة العمليةالمعاملات الموزعة ، خاصة تلك 
التي تم تنفيذها مع الالتزام على مرحلتين ، لهاسمعة مختلطة. من ناحية ، يُنظر إليها 
على أنها توفر أمانًا مهمًاضمان أنه سيكون من الصعب تحقيق خلاف ذلك ؛ من ناحية أخرى 
، هم نقادتم تخصيصه بسبب التسبب في مشاكل تشغيلية ، وقتل الأداء ، والوعود 
بالمزيدمما يمكنهم تحقيقه [ 82، 83 ،84، 85 ]. تختار العديد من خدمات "السحابة" عدم 
تنفيذهاتوزيع المعاملات بسبب المشاكل التشغيلية التي تسببها [86، 87].تحمل بعض 
عمليات تنفيذ المعاملات الموزعة عقوبة كبيرة على الأداء- على سبيل المثال ، تم 
الإبلاغ عن زيادة عدد المعاملات الموزعة في MySQL 10 مراتأبطأ من المعاملات أحادية 
العقدة [ 88] ، لذلك ليس من المستغرب أن ينصح الناسضد استخدامها. يكون جزء كبير من 
تكلفة الأداء المتأصلة في الالتزام على مرحلتين مستحقًاإلى فرض القرص الإضافي 
(fsync) المطلوب لاستعادة التعطل [ 89]، و الشبكة إضافية ذهابًا وإيابًا.ومع ذلك ، 
بدلاً من رفض المعاملات الموزعة تمامًا ، يجب علينا اختبارأدخلها بمزيد من التفصيل 
، لأن هناك دروسًا مهمة يمكن الاستفادة منهامعهم. للبدء ، يجب أن نكون دقيقين بشأن 
ما نعنيه بالترجمة الموزعة‐نشوئها. غالبًا ما يتم الخلط بين نوعين مختلفين تمامًا 
من المعاملات الموزعة:المعاملات الموزعة على قاعدة البيانات الداخليةبعض قواعد 
البيانات الموزعة (أي قواعد البيانات التي تستخدم النسخ المتماثل والتقسيم 
بتنسيقتكوينها القياسي) دعم المعاملات الداخلية بين عقدقاعدة البيانات تلك. على 
سبيل المثال ، VoltDB و FoundationDB و MySQL Cluster NDB350 | الفصل التاسع: 
الاتساق والتوافق

      صفحة 373
محرك التخزين لديه مثل هذا الدعم الداخلي للمعاملات. في هذه الحالة ، كل 
العقدالمشاركة في المعاملة تقوم بتشغيل نفس برنامج قاعدة البيانات.المعاملات 
الموزعة غير المتجانسةفي معاملة غير متجانسة ، يكون المشاركون اثنان أو أكثر من 
التقنيات المختلفة‐نولوجيات: على سبيل المثال ، قاعدتا بيانات من بائعين مختلفين ، 
أو حتى غيرأنظمة قواعد البيانات مثل وسطاء الرسائل. صفقة موزعة عبر هذهيجب أن تضمن 
الأنظمة الالتزام الذري ، على الرغم من أنها قد تكون مختلفة تمامًاتحت الغطاء.لا 
يجب أن تكون المعاملات الداخلية في قاعدة البيانات متوافقة مع أي نظام آخر 
،وبالتالي يمكنهم استخدام أي بروتوكول وتطبيق تحسينات خاصة بذلكتكنولوجيا. لهذا 
السبب ، يمكن للمعاملات الموزعة داخل قاعدة البيانات في كثير من الأحيانتعمل بشكل 
جيد. من ناحية أخرى ، فإن المعاملات التي تشمل التقنيات غير المتجانسةgies أكثر 
تحديا بكثير.بالضبط مرة واحدة معالجة الرسائلتسمح المعاملات الموزعة غير المتجانسة 
بدمج أنظمة متنوعة فيهاطرق قوية. على سبيل المثال ، يمكن التعرف على رسالة من قائمة 
انتظار الرسائلكما تمت معالجتها إذا وفقط إذا كانت معاملة قاعدة البيانات لمعالجة 
الرسالةملتزم بنجاح. يتم تنفيذ ذلك عن طريق ارتكاب الرسالة ذريًاإقرار وتكتب قاعدة 
البيانات في معاملة واحدة. مع توزيعهادعم المعاملات ، هذا ممكن ، حتى لو كان وسيط 
الرسائل وقاعدة البياناتتقنيتان غير مرتبطتين تعملان على أجهزة مختلفة.إذا فشل 
تسليم الرسالة أو معاملة قاعدة البيانات ، فسيتم إحباط كلاهما ، ولذلك قد يقوم وسيط 
الرسائل بإعادة تسليم الرسالة بأمان لاحقًا. وهكذا ، بشكل ذريارتكاب الرسالة 
والآثار الجانبية لمعالجتها ، يمكننا التأكد من أنتتم معالجة الرسالة بشكل فعال مرة 
واحدة بالضبط ، حتى لو تطلبت عدة محاولات قبلهانجح.هذه المعاملة الموزعة ممكنة فقط 
إذا كانت جميع الأنظمة تتأثر بـ transac‐قادرون على استخدام نفس بروتوكول الالتزام 
الذري. على سبيل المثال ، قل أحد الآثار الجانبيةمعالجة الرسالة هي إرسال بريد 
إلكتروني ، ولا يدعم خادم البريد الإلكترونيعلى مرحلتين الالتزام. ثم يمكن أن يحدث 
أن يتم إرسال البريد الإلكتروني مرتين أو أكثر إذافشل معالجة الرسالة وإعادة 
المحاولة. ولكن إذا كانت جميع الآثار الجانبية لمعالجة الرسالةيتم إرجاعها عند 
إحباط المعاملة ، ثم يمكن إعادة محاولة خطوة المعالجة بأمان كـإذا لم يحدث 
شيء.سنعود إلى موضوع معالجة الرسائل مرة واحدة بالضبط في الفصل 11 . دعوناانظر 
أولاً إلى بروتوكول الالتزام الذري الذي يسمح بمثل هذا التوزيع غير 
المتجانسالمعاملات.المعاملات الموزعة والإجماع | 351

      صفحة 374
معاملات XAX / Open XA (اختصار لـ eXtended Architecture ) هو معيار لتنفيذ 
اثنين-الالتزام بالمرحلة عبر التقنيات غير المتجانسة [ 77، 78 ]. تم تقديمه في عام 
1991وتم تنفيذه على نطاق واسع: XA مدعوم من قبل العديد من العلاقات التقليديةقواعد 
البيانات (بما في ذلك PostgreSQL و MySQL و DB2 و SQL Server و Oracle) 
والرسالةالوسطاء (بما في ذلك ActiveMQ و HornetQ و MSMQ و IBM MQ).XA ليس بروتوكول 
شبكة - إنه مجرد واجهة برمجة تطبيقات C للتفاعل مع معاملةمنسق. توجد ارتباطات 
لواجهة برمجة التطبيقات هذه بلغات أخرى ؛ على سبيل المثال ، في العالممن تطبيقات 
Java EE ، يتم تنفيذ معاملات XA باستخدام معاملة JavaAPI (JTA) ، والتي بدورها 
مدعومة من قبل العديد من برامج التشغيل لقواعد البيانات باستخدام Java Data‐الاتصال 
الأساسي (JDBC) ، وبرامج تشغيل لوسطاء الرسائل باستخدام Java Messageخدمة (JMS) 
APIs.تفترض XA أن تطبيقك يستخدم برنامج تشغيل شبكة أو مكتبة عميل للاتصالالتعامل مع 
قواعد بيانات المشاركين أو خدمات المراسلة. إذا كان برنامج التشغيل يدعم XA ،هذا 
يعني أنه يستدعي XA API لمعرفة ما إذا كان يجب أن تكون العملية جزءًا من 
ملفالمعاملات الموزعة - وإذا كان الأمر كذلك ، فإنها ترسل المعلومات اللازمة إلى 
قاعدة البياناتالخادم. يكشف السائق أيضًا عن عمليات الاسترجاعات التي يمكن للمنسق 
من خلالها أن يسألمشارك في التحضير أو ارتكاب أو إجهاض.يقوم منسق المعاملات بتنفيذ 
XA API. المعيار لا يحددكيف ينبغي تنفيذها ، ولكن من الناحية العملية ، غالبًا ما 
يكون المنسق مجرد ملفالمكتبة التي يتم تحميلها في نفس عملية التطبيق الذي أصدر 
المعاملة(ليست خدمة منفصلة). يقوم بتتبع المشاركين في الصفقة ، ويجمعاستجابات 
لإعداد الطلبات (عبر رد الاتصال إلى السائق) ، ويستخدم سجل على المحليقرص لتتبع 
نتيجة الالتزام / الإحباط لكل معاملة.إذا تعطلت عملية التطبيق ، أو الجهاز الذي 
يعمل عليه التطبيقيموت ، المنسق يذهب معها. أي مشارك مع استعداد ولكن غير ملتزمثم 
تصبح المعاملات محل شك. بما أن سجل المنسق موجود على التطبيقالقرص المحلي للخادم ، 
يجب إعادة تشغيل هذا الخادم ، ويجب على مكتبة المنسقاقرأ السجل لاستعادة نتيجة 
الالتزام / الإحباط لكل معاملة. عندها فقط يمكنيستخدم المنسق عمليات رد نداء XA 
لبرنامج تشغيل قاعدة البيانات ليطلب من المشاركين الالتزامأو إجهاض ، حسب الاقتضاء. 
لا يمكن لخادم قاعدة البيانات الاتصال بالمنسق مباشرة ،نظرًا لأن جميع الاتصالات 
يجب أن تمر عبر مكتبة العميل الخاصة بها.عقد الأقفال في حالة الشكلماذا نهتم كثيرًا 
بمعاملة ما في حالة شك؟ لا يمكن لبقيةيواصل النظام عمله ، ويتجاهل المعاملة المشكوك 
فيهاتنظيفها في النهاية؟المشكلة مع القفل . كما تمت مناقشته في "قراءة الالتزام" في 
الصفحة 225، بيانات-تأخذ المعاملات الأساسية عادةً قفلًا حصريًا على مستوى الصف على 
أي صفوف يتم تعديلها إليها352 | الفصل التاسع: الاتساق والتوافق

      صفحة 375
منع الكتابة القذرة. بالإضافة إلى ذلك ، إذا كنت تريد عزلًا قابلاً للتسلسل ، فإن 
قاعدة البيانات التي تستخدم 2-يجب أن يأخذ قفل الطور أيضًا قفلًا مشتركًا على أي 
صفوف يقرأها transac‐نشوئها (انظر "قفل مرحلتين (2PL)" في الصفحة 248 ).لا يمكن 
لقاعدة البيانات تحرير هذه الأقفال حتى يتم تنفيذ المعاملة أو إحباطها(موضحة كمنطقة 
مظللة في الشكل 9-9 ). لذلك ، عند استخدام الالتزام على مرحلتين ، أيجب أن تتمسك 
المعاملة بالأقفال طوال الوقت المشكوك فيه. إذا كان المنسقnator قد تعطل ويستغرق 20 
دقيقة لبدء التشغيل مرة أخرى ، سيتم الاحتفاظ بهذه الأقفال20 دقيقة. إذا فُقد سجل 
المنسق بالكامل لسبب ما ، فستفقد تلك الأقفالمحتفظ بها إلى الأبد - على الأقل حتى 
يتم حل الموقف يدويًا بواسطة المسؤول.أثناء الاحتفاظ بهذه الأقفال ، لا يمكن لأي 
معاملة أخرى كتابة تلك الصفوف. اعتمادا عليقاعدة البيانات ، ربما يتم حظر المعاملات 
الأخرى حتى من قراءة تلك الصفوف.وبالتالي ، لا يمكن للمعاملات الأخرى الاستمرار في 
أعمالها ببساطة - إذا أرادوا ذلكللوصول إلى تلك البيانات نفسها ، سيتم حظرها. هذا 
يمكن أن يسبب أجزاء كبيرة من الخاص بكسيصبح التطبيق غير متاح حتى يتم حل المعاملة 
المشكوك فيها.التعافي من فشل المنسقنظريًا ، إذا تعطل المنسق وأعيد تشغيله ، فيجب 
أن يستعيد حالته تمامًامن السجل وحل أي معاملات مشكوك فيها. ومع ذلك ، في الممارسة 
العملية ، يتيمتحدث المعاملات المشكوك فيها [ 90، 91 ] - أي المعاملات التي يقوم 
المنسق بهالا يستطيع nator أن يقرر النتيجة لأي سبب كان ، على سبيل المثال بسبب سجل 
المعاملاتتم فقده أو تلفه بسبب خطأ في البرنامج. لا يمكن حل هذه المعاملاتتلقائيًا 
، لذلك يجلسون إلى الأبد في قاعدة البيانات ، ويمسكون الأقفال ويمنعون 
الآخرينالمعاملات.حتى إعادة تشغيل خوادم قاعدة البيانات الخاصة بك لن يحل هذه 
المشكلة ، لأن ملفيجب أن يحافظ تنفيذ 2PC على أقفال المعاملة المشكوك فيهاعبر 
عمليات إعادة التشغيل (وإلا فقد ينتهك ضمان الذرية). إنها لزجةقارة.السبيل الوحيد 
للخروج هو أن يقرر المسؤول يدويًا ما إذا كان سيلتزم أمالتراجع عن المعاملات. يجب 
على المسؤول فحص المشاركين من كلمعاملة مشكوك فيها ، حدد ما إذا كان أي مشارك قد 
ارتكبها أو أجهضهابالفعل ، ثم قم بتطبيق نفس النتيجة على المشاركين الآخرين. هذا 
ممكنالكثير من الجهد اليدوي ، وعلى الأرجح يجب القيام به تحت ضغط عالٍ وضغط الوقت 
أثناء الانقطاع الخطير للإنتاج (لماذا لولا ذلك فإن المنسقأن يكون ناتور في مثل هذه 
الحالة السيئة؟).تحتوي العديد من تطبيقات XA على فتحة هروب طارئة تسمى قرارات الكشف 
عن مجريات الأمور :السماح للمشارك بأن يقرر من جانب واحد إجهاض أو ارتكاب Transac 
مشكوك فيه.بدون قرار نهائي من المنسق [77، 78 ، 92 ]. لنكون واضحين ، هووristic هنا 
هو تعبير ملطف لربما كسر الذرة ، لأنه ينتهك النظاممن الوعود في 2-المرحلة 
الالتزام. وبالتالي ، فإن قرارات الكشف عن مجريات الأمور مخصصة فقط لـ get‐من 
المواقف الكارثية وليس للاستخدام المنتظم.المعاملات الموزعة والإجماع | 353

      صفحة 376
حدود المعاملات الموزعةتحل معاملات XA المشكلة الحقيقية والمهمة المتمثلة في 
الاحتفاظ بالعديد من المشاركينتتفق أنظمة البيانات مع بعضها البعض ، ولكن كما رأينا 
، فإنها تقدم أيضًامشاكل تشغيلية كبيرة. على وجه الخصوص ، فإن الإدراك الرئيسي هو 
أن الصفقةالمنسق هو نفسه نوع من قاعدة البيانات (حيث يتم تخزين نتائج المعاملات) 
،ولذا يجب التعامل معها بنفس العناية مثل أي قاعدة بيانات مهمة أخرى.• إذا لم يتم 
تكرار المنسق ، ولكنه يعمل فقط على جهاز واحد ، فهو عبارة عن خطيئةنقطة فشل النظام 
بأكمله (نظرًا لأن فشلها يتسبب في تطبيق آخرخوادم لحظر الأقفال التي تحتفظ بها 
المعاملات المشكوك فيها). والمثير للدهشة أن الكثيرلا تتوفر تطبيقات منسق بشكل كبير 
بشكل افتراضي ، أو لديها فقطدعم النسخ المتماثل الأولي.• تم تطوير العديد من 
التطبيقات من جانب الخادم في نموذج عديم الحالة (كما يفضلهHTTP) ، مع تخزين جميع 
الحالات الثابتة في قاعدة بيانات ، والتي تتمتع بالميزةيمكن إضافة خوادم التطبيقات 
وإزالتها حسب الرغبة. ومع ذلك ، عندماالمنسق هو جزء من خادم التطبيق ، فهو يغير 
طبيعة النشر‐منة: فجأة أصبحت سجلات المنسق جزءًا مهمًا من النظام الدائم‐tem state 
- لا تقل أهمية عن قواعد البيانات نفسها ، نظرًا لأن المنسق يسجلمطلوبة من أجل 
استرداد المعاملات المشكوك فيها بعد الانهيار. هذا التطبيقلم تعد خوادم نشوئها 
عديمة الحالة.• نظرًا لأن XA يجب أن يكون متوافقًا مع مجموعة واسعة من أنظمة 
البيانات ، فمن الضروريily القاسم المشترك الأدنى. على سبيل المثال ، لا يمكنه 
اكتشاف حالات الجمودعبر أنظمة مختلفة (حيث سيتطلب ذلك بروتوكولًا موحدًا لـأنظمة 
لتبادل المعلومات حول الأقفال التي تنتظرها كل معاملةfor) ، ولا يعمل مع 
Serializable Snapshot Isolation (راجع "Serializableعزل اللقطة (SSI) "في الصفحة 
252، لأن ذلك سيتطلب بروتوكولًا لـتحديد التعارضات عبر الأنظمة المختلفة).• بالنسبة 
للمعاملات الموزعة داخل قاعدة البيانات (وليس XA) ، فإن القيود ليست كذلكرائع جدًا 
- على سبيل المثال ، يمكن إصدار نسخة موزعة من مباحث أمن الدولة. مهما يكن هناتبقى 
المشكلة التي ل2PC لارتكاب بنجاح الصفقة، كل ساعدهايجب أن يستجيب المشاركون. 
وبالتالي ، إذا تم كسر أي جزء من النظام ، فإن ملففشل المعاملة أيضا. وبالتالي فإن 
المعاملات الموزعة تميل إلى التضخيمالإخفاقات ، والتي تتعارض مع هدفنا المتمثل في 
بناء أنظمة تتسامح مع الأخطاء.هل تعني هذه الحقائق أننا يجب أن نتخلى عن كل أمل في 
الحفاظ على اتساق العديد من الأنظمةمع بعض؟ ليس تمامًا - هناك طرق بديلة تسمح لنا 
بالتحقيقنفس الشيء دون عناء المعاملات الموزعة غير المتجانسة. سنقومالعودة إلى هذه 
في الفصل 11 و ؟؟؟ . لكن أولاً يجب أن نختتم موضوع كونحس.354 | الفصل التاسع: 
الاتساق والتوافق

      صفحة 377
الثالث عشر. يسمى هذا البديل المعين من الإجماع إجماعًا موحدًا ، وهو ما يعادل 
الإجماع المنتظمفي الأنظمة غير المتزامنة مع أجهزة كشف الأعطال غير الموثوق بها 
[72]. تشير الأدبيات الأكاديمية عادة إلى pro‐الخانات بدلاً من العقد ، لكننا 
نستخدم العقد هنا للتوافق مع بقية هذا الكتاب.إجماع متسامح مع الخطأبشكل غير رسمي ، 
الإجماع يعني الحصول على عدة عقد للاتفاق على شيء ما. من أجل الإختبار-ple ، إذا 
حاول العديد من الأشخاص في نفس الوقت حجز آخر مقعد على متن طائرة ، أو نفس 
الشيءالجلوس في المسرح ، أو محاولة تسجيل حساب بنفس اسم المستخدم ، ثم الموافقةيمكن 
استخدام خوارزمية sus لتحديد أي منها غير متوافق بشكل متبادليجب أن تكون العمليات 
هي الفائز.عادة ما يتم صياغة مشكلة الإجماع على النحو التالي: يجوز عقد واحد أو 
أكثراقتراح القيم ، وتقرر خوارزمية الإجماع إحدى هذه القيم. في المثال حجز المقاعد 
، عندما يحاول العديد من العملاء شراء الأخير في نفس الوقتمقعد ، قد تقترح كل عقدة 
تتعامل مع طلب العميل معرّف العميل كما هوالخدمة ، ويشير القرار إلى أي من هؤلاء 
العملاء حصل على المقعد.في هذه الشكلية ، يجب أن تفي خوارزمية الإجماع بالخصائص 
التالية [ 30]: الثالث عشراتفاق موحدلا توجد عقدتان تقرران بشكل مختلف.نزاهةلا توجد 
عقدة تقرر مرتين.صلاحيةإذا قررت العقدة القيمة v ، فحينئذٍ تم اقتراح v بواسطة بعض 
العقدة.نهايةكل عقدة لا تتعطل تقرر في النهاية بعض القيمة.و اتفاق موحدة و سلامة 
الممتلكات تحدد الفكرة الأساسية التوافق:الجميع يقرر نفس النتيجة ، وبمجرد أن تقرر 
، لا يمكنك ذلكغير رأيك. و صحة الملكية موجودة في الغالب لاستبعاد الحلول تافهة: 
لعلى سبيل المثال ، يمكن أن يكون لديك خوارزمية تقرر دائمًا أنها لاغية ، بغض النظر 
عن ما كانمقترح - من شأنه أن يفي بخصائص الاتفاقية والسلامة ، ولكن ليس 
الصالحممتلكات إيتي.إذا كنت لا تهتم بالتسامح مع الخطأ ، فإن تلبية الخصائص الثلاثة 
الأولى هوسهل: يمكنك فقط ترميز عقدة واحدة لتكون "الديكتاتور" ، وترك هذه العقدة 
تصنع كل شيءمن القرارات. ومع ذلك ، إذا فشلت تلك العقدة ، فلن يعد بإمكان النظام 
القيام بذلكأي قرارات. هذا ، في الواقع ، ما رأيناه في حالة الالتزام على مرحلتين: 
إذا كان coor‐يفشل dinator ، لا يمكن للمشاركين المشكوك فيهم أن يقرروا ما إذا 
كانوا سيرتكبون أو يجهضون.المعاملات الموزعة والإجماع | 355

      صفحة 378
ل إنهاء الملكية تضفي الصبغة الرسمية على فكرة التسامح مع الخطأ. تقول ذلك أساسًالا 
يمكن لخوارزمية الإجماع أن تجلس ببساطة ولا تفعل شيئًا إلى الأبد - في أخرىالكلمات 
، يجب أن تحرز تقدما. حتى إذا فشلت بعض العقد ، فلا يزال يتعين على العقد 
الأخرىالتوصل إلى قرار. (الإنهاء هو خاصية الحياة ، في حين أن الثلاثة الآخرين 
همخصائص الأمان - راجع "السلامة والحيوية" في الصفحة 300 ).يفترض نموذج نظام 
الإجماع أنه عندما "تتعطل" العقدة ، فإنها تنفصل فجأةيظهر ولا يعود أبدا. (بدلاً من 
تعطل البرنامج ، تخيل أن هناك ملفالزلزال ، ودمر الانهيار الأرضي مركز البيانات 
الذي يحتوي على عقدتك. أنتيجب أن تفترض أن العقدة الخاصة بك مدفونة تحت 30 قدمًا من 
الطين ولن تفعل ذلك أبدًامرة أخرى عبر الإنترنت.) في نموذج النظام هذا ، أي 
خوارزمية عليها انتظار عقدةالاسترداد لن يكون قادرًا على تلبية خاصية الإنهاء. على 
وجه الخصوص ، 2PCلا يفي بمتطلبات الإنهاء.بالطبع ، إذا تعطلت جميع العقد ولم يتم 
تشغيل أي منها ، فلن يكون ذلك ممكنًاأي خوارزمية لتقرير أي شيء. هناك حد لعدد حالات 
الفشل التي يمكن أن يؤديها ملفيمكن أن تتسامح الخوارزمية: في الواقع ، يمكن إثبات 
أن أي خوارزمية توافق في الآراء تتطلبتعمل غالبية العقد على الأقل بشكل صحيح لضمان 
الإنهاء[70].وبالتالي ، فإن خاصية الإنهاء تخضع لافتراض أن أقل من نصفالعقد معطلة 
أو لا يمكن الوصول إليها. ومع ذلك ، فإن معظم تطبيقات التوافقتأكد من أن خصائص 
السلامة - الاتفاق والنزاهة والصلاحية - هي دائمًاالتقى ، حتى إذا فشلت غالبية 
العقد أو كانت هناك مشكلة خطيرة في الشبكة [93 ]. هكذا،يمكن أن يؤدي انقطاع التيار 
الكهربائي على نطاق واسع إلى إيقاف النظام من القدرة على معالجة الطلبات ، ولكنهلا 
يمكن أن يفسد نظام الإجماع من خلال جعله يتخذ قرارات غير صحيحة.تفترض معظم 
خوارزميات الإجماع عدم وجود أخطاء بيزنطية ، كما تمت مناقشته في"العيوب البيزنطية" 
في الصفحة 295. بمعنى ، إذا كانت العقدة لا تتبع البروتو بشكل صحيحالعمود (على سبيل 
المثال ، إذا أرسل رسائل متناقضة إلى عقد مختلفة) ، فقد ينقطعخصائص أمان 
البروتوكول. من الممكن جعل الإجماع قويًا ضدهالعيوب البيزنطية طالما أن أقل من ثلث 
العقد معيبة بيزنطية [30 ،94 ] ، لكننا لا نناقش هذه الخوارزميات هنا لأنها نادرًا 
ما تُستخدم في الممارسة.خوارزميات الإجماع وترتيب البث الكليأشهر خوارزميات الإجماع 
المتسامحة مع الأخطاء هي النسخ المتماثل للطابع البصري(VSR) [ 95، 96 ] ، باكسوس [ 
97، 98 ، 99 ، 100 ] ، طوافة [ 27، 101، 102 ] وزاب [15 ، 26، 103].هناك عدد غير 
قليل من أوجه التشابه بين هذه الخوارزميات ، لكنها ليست متشابهة[104 ]. في هذا 
الكتاب لن ندخل في التفاصيل الكاملة للخوارزميات: يكفي أن تكونعلى دراية ببعض 
الأفكار عالية المستوى التي تشترك فيها هذه الخوارزميات ، ما لمأنت تقوم بتنفيذ 
نظام الإجماع بنفسك (وهو على الأرجح غير مستحسن -من الصعب [99، 105 ]).لا تستخدم 
معظم هذه الخوارزميات النموذج الرسمي الموضح أعلاه بشكل مباشر(اقتراح قيمة واحدة 
واتخاذ قرار بشأنها ، مع تلبية الاتفاقية ، والنزاهة ،356 | الفصل التاسع: الاتساق 
والتوافق

      صفحة 379
خصائص الصلاحية والإنهاء). بدلاً من ذلك ، يقررون سلسلة من القيم ،مما يجعلها 
خوارزميات البث ذات الترتيب الكلي ، كما تمت مناقشته سابقًا في هذاالفصل (انظر 
"إجمالي ترتيب البث" في الصفحة 338).تذكر أن بث الطلب الإجمالي يتطلب تسليم الرسائل 
مرة واحدة بالضبط ،بنفس الترتيب لجميع العقد. إذا فكرت في الأمر ، فهذا يعادل 
الأداءعدة جولات من الإجماع: في كل جولة ، تقترح العقد الرسالة التي يقومون بهاتريد 
إرسالها بعد ذلك ، ثم حدد الرسالة التالية التي سيتم تسليمها في المجموعطلب [ 
70].وبالتالي ، فإن الترتيب الإجمالي للبث يعادل جولات متكررة من الإجماع (كل 
كونقرار حساس يتوافق مع تسليم رسالة واحدة):• نظرًا لخاصية الاتفاق المتمثلة في 
الإجماع ، تقرر جميع العقد تقديم نفس الشيءالرسائل بنفس الترتيب.• بسبب خاصية 
التكامل ، لا يتم تكرار الرسائل.• بسبب خاصية الصلاحية ، الرسائل ليست تالفة وليست 
ملفقةمن فراغ.• بسبب خاصية الإنهاء ، لا تضيع الرسائل.تطبيق Viewstamped 
Replication ، يقوم Raft و Zab بتنفيذ بث الترتيب الكلي مباشرةً ،لأن ذلك أكثر 
فاعلية من القيام بجولات متكررة لقيمة واحدة في كل مرةإجماع. في حالة Paxos ، يُعرف 
هذا التحسين باسم Multi-Paxos.النسخ المتماثل للسيد الفردي والإجماعناقشنا في الفصل 
الخامس تكرار القائد الفردي (انظر "القادة والتابعون" فيصفحة 146) ، الذي يأخذ كل 
ما يكتب إلى القائد ويطبقها على التابعين فيهنفس الترتيب ، وبالتالي الحفاظ على 
النسخ المتماثلة محدثة. أليس هذا هو الترتيب الكلي في الأساسإذاعة؟ لماذا لم يكن 
علينا القلق بشأن الإجماع فيالفصل 5؟الجواب يتعلق بكيفية اختيار القائد. إذا تم 
اختيار القائد يدويًاوتهيئتها من قبل البشر في فريق العمليات لديك ، فأنت في الأساس 
تمتلك "خداع"خوارزمية حساسة 'للصنف الديكتاتوري: يُسمح لعقدة واحدة فقط بقبول 
الكتابة(أي اتخاذ قرارات بشأن ترتيب عمليات الكتابة في سجل النسخ المتماثل) ، وما 
إذا كانت هذه العقدة، يصبح النظام غير متاح للكتابة حتى يقوم المشغلون يدويًاتكوين 
عقدة مختلفة لتكون رائدة. يمكن أن يعمل مثل هذا النظام بشكل جيد في الممارسة ،لكنها 
لا تفي بخاصية الإنهاء المتفق عليها لأنها تتطلب ذلكالتدخل البشري من أجل إحراز 
تقدم.تقوم بعض قواعد البيانات بإجراء انتخابات تلقائية للزعيم وتجاوز الفشل ، مما 
يؤدي إلى ترقية أحد المتابعينأن تكون القائد الجديد إذا فشل الزعيم القديم (انظر 
"معالجة انقطاعات العقد" في الصفحة 150).هذا يجعلنا أقرب إلى بث النظام الكامل 
المتسامح مع الخطأ ، وبالتالي حل التوافقsus.المعاملات الموزعة والإجماع | 357

      الصفحة 380
ومع ذلك ، هناك مشكلة: لقد ناقشنا سابقًا مشكلة انقسام الدماغ ، وقال إن جميع العقد 
تحتاج إلى الاتفاق على من هو القائد - خلاف ذلك عقدتان مختلفتانيمكن أن يعتقد كل 
منهم أنه القائد ، وبالتالي الحصول على قاعدة البيانات في حالة غير متوقعةحالة 
ثابتة. وبالتالي ، نحن بحاجة إلى إجماع من أجل انتخاب قائد. ولكن إذا كان 
بالإجماعالخوارزميات المذكورة أعلاه هي في الواقع خوارزميات بث الترتيب الكلي ، 
وإجمالي نطاق النظامcast مثل تكرار القائد الفردي ، والنسخ المتماثل للقائد الفردي 
يتطلب قائدًا ،من ثم…يبدو أنه من أجل انتخاب قائد ، نحتاج أولاً إلى قائد. من أجل 
حل مشكلةحس ، يجب علينا أولا حل الإجماع. كيف نخرج من هذا اللغز؟ترقيم الحقبة 
والنصاب القانونيتستخدم جميع بروتوكولات الإجماع أعلاه داخليًا قائدًا بشكل أو بآخر 
،لكنهم لا يضمنون أن يكون القائد فريدًا. بدلا من ذلك ، يمكنهم جعل أضعفالضمان: 
تحدد البروتوكولات رقم حقبة (يسمى رقم الاقتراع في Paxos ، عرضnumber في 
Viewstamped Repliced ​​، ورقم المصطلح في Raft) ، وتضمن ذلكفي كل عصر ، يكون 
القائد فريدًا.في كل مرة يُعتقد أن الزعيم الحالي قد مات ، يبدأ التصويت بين 
العقدلانتخاب قائد جديد. يتم إعطاء هذا الاختيار رقم حقبة متزايدة ، وبالتالييتم 
ترتيب أرقام الحقبة بالكامل وتتزايد بشكل رتيب. إذا كان هناك تعارضبين قائدين 
مختلفين في فترتين مختلفتين (ربما بسبب السابقالزعيم في الواقع لم يمت بعد كل شيء) 
، ثم القائد صاحب الرقم الأعلى في الحقبةيسود.قبل أن يُسمح للقائد أن يقرر أي شيء ، 
يجب عليه أولاً التحقق من عدم وجود البعضزعيم آخر لديه رقم حقبة أعلى قد يتخذ 
قرارًا متضاربًا.كيف يعرف القائد أنه لم يتم طرده من قبل عقدة أخرى؟ أذكر "الحقيقة 
تعرفها الأغلبية "في الصفحة 292: لا تستطيع العقدة بالضرورة أن تثق في عقدة خاصة 
بهاالحكم - فقط لأن العقدة تعتقد أنها قائد لا يعني ذلك الآخرالعقد تقبله كزعيم - 
لذلك يجب أن يعتمد على أصوات الأغلبية.يتم ذلك باستخدام النصاب القانوني للعقد 
(راجع "نصاب القراءة والكتابة" علىصفحة 173 ). لكل قرار يريد القائد اتخاذه ، يجب 
أن يرسل المقترحالقيمة للعقد الأخرى ، وانتظر حتى تستجيب غالبية العقد لصالحاقتراح. 
تصوت العقدة لصالح اقتراح فقط إذا لم تكن على علم بأي اقتراح آخرزعيم عصر 
أعلى.نظرًا لأن العقدة تتطلب أغلبية الأصوات لتصبح قائدًا ، ويتطلب الاقتراح أسيتم 
تحديد الأغلبية ، يمكننا التأكد من أن واحدة على الأقل من العقد تصوت على pro‐سوف 
يكون بوسال قد شهد انتخاب زعيم إذا حدث ذلك. لذلك ، إذا كان غالبيةالعقد لصالح 
الاقتراح ، يمكن للقائد أن يتأكد من أنه لا يزال يحتفظ بالقائد‐السفينة ، وبالتالي 
يمكنها تحديد القيمة المقترحة بأمان.358 | الفصل التاسع: الاتساق والتوافق

      صفحة 381
تبدو عملية التصويت هذه مشابهة بشكل سطحي لـ 2-Phase Commit. أكبر الفرق‐ومن هنا ، 
فإن خوارزميات الإجماع المتسامحة مع الأخطاء لا تتطلب سوى أصوات من أغلبيةالعقد ، 
بينما تتطلب 2PC تصويتًا بنعم من كل مشارك. علاوة على ذلك ، الإجماعتحدد 
الخوارزميات عملية الاسترداد التي يمكن للعقد من خلالها الوصول إلى حالة متسقةبعد 
انتخاب قائد جديد ، ضمان تلبية خصائص السلامة دائمًا. هؤلاءالاختلافات هي مفتاح 
التسامح مع خطأ خوارزمية الإجماع.حدود التوافقتعد خوارزميات الإجماع طفرة هائلة 
للأنظمة الموزعة: فهي تجلبخصائص سلامة الخرسانة (الاتفاق والنزاهة والصلاحية) 
للأنظمة التي يكون فيها كلشيء آخر غير مؤكد ، ومع ذلك يظلون متسامحين (قادرون على 
تقديمما دامت غالبية العقد تعمل ويمكن الوصول إليها). أنها توفر المجموعطلب البث ، 
وبالتالي يمكنهم أيضًا تنفيذ أوبرا ذرية قابلة للتقسيم الخطيبطريقة تتسامح مع 
الأخطاء (راجع "تنفيذ التخزين الخطي باستخدام الترتيب الإجماليبث "في الصفحة 
340).ومع ذلك ، لا يتم استخدامها في كل مكان ، لأن الفوائد تأتي بتكلفة.إن العملية 
التي تصوت بها العقد على المقترحات قبل أن يتم تحديدها هي نوع من أنواع 
العملياتتكرار متزامن. كما تمت مناقشته في "نسخة متماثلة متزامنة مقابل غير 
متزامنة"نشوئها "في الصفحة 147 ، غالبًا ما يتم تكوين قواعد البيانات لاستخدام 
النسخ المتماثل غير المتزامن. فيهذا التكوين ، من المحتمل أن تفقد بعض البيانات 
الملتزمة عند تجاوز الفشل - ولكنيختار العديد من الأشخاص قبول هذه المخاطرة من أجل 
أداء أفضل.تتطلب أنظمة الإجماع دائمًا أغلبية صارمة للعمل. هذا يعني أنك بحاجة إلى 
ملفثلاث عقد على الأقل من أجل تحمل فشل واحد (العقدان المتبقيان منثلاثة تشكل 
أغلبية) ، أو ما لا يقل عن خمس عقد لتحمل فشلين (الثلاثة المتبقية من أصل خمسة 
يشكلون أغلبية). في حالة حدوث فشل في الشبكة يؤدي إلى قطع بعض العقدمن البقية ، 
يمكن فقط للجزء الأكبر من الشبكة إحراز تقدم ، وتم حظر الباقي (انظر أيضًا "تكلفة 
قابلية التحديد الخطي" في الصفحة 326).تفترض معظم خوارزميات الإجماع مجموعة ثابتة 
من العقد التي تشارك في التصويت ،مما يعني أنه لا يمكنك فقط إضافة أو إزالة العقد 
في الكتلة. ذاكرة ديناميكيةتسمح امتدادات bership لخوارزميات الإجماع لمجموعة العقد 
في الكتلة بـتتغير بمرور الوقت ، لكن فهمها أقل بكثير من العضوية 
الثابتةالخوارزميات.تعتمد أنظمة الإجماع بشكل عام على المهلات لاكتشاف العُقد 
الفاشلة. في البيئاتمع تأخيرات شبكة متغيرة للغاية ، خاصة الأنظمة الموزعة جغرافيًا 
، فإنهغالبًا ما يحدث أن العقدة تعتقد خطأً أن القائد قد فشل بسبب عابرمشكلة 
الشبكة. على الرغم من أن هذا لا يضر بخصائص السلامة ، متكرر الزعيمتؤدي الانتخابات 
إلى أداء سيئ ، لأن النظام يمكن أن ينتهي بالإنفاقالمزيد من الوقت في اختيار القائد 
أكثر من القيام بأي عمل مفيد.المعاملات الموزعة والإجماع | 359

      صفحة 382
في بعض الأحيان ، تكون خوارزميات الإجماع حساسة بشكل خاص لمشاكل الشبكة. إلى عن 
علىعلى سبيل المثال ، لقد ثبت أن Raft يحتوي على حالات حافة مزعجة [ 106 ]: إذا 
كانت الشبكة بالكامل‐يعمل بشكل صحيح ، باستثناء ارتباط شبكة معين ثابتلا يمكن 
الاعتماد عليها ، يمكن لطوافة الدخول في المواقف التي ترتد فيها القيادة 
باستمرارعقدتان ، أو يتم إجبار القائد الحالي على الاستقالة باستمرار ، وبالتالي 
فإن النظام فعالtively لا يحرز أي تقدم. خوارزميات الإجماع الأخرى لديها مشاكل 
مماثلة ، ولا يزال تصميم الخوارزميات الأكثر قوة للشبكات غير الموثوقة مفتوحًامشكلة 
بحث.خدمات العضوية والتنسيقإذا نظرت إلى مشاريع مثل ZooKeeper أو غيرها ، فسترى 
وصفها بأنها "موزعةمخازن القيمة الرئيسية "أو" خدمات التنسيق والتهيئة ". واجهة 
برمجة التطبيقات تبدو جميلةتشبه إلى حد كبير تلك الموجودة في قاعدة البيانات: يمكنك 
قراءة قيمة مفتاح معين وكتابتها ، وكرر على المفاتيح. لذا ، إذا كانوا أساسًا قواعد 
بيانات ، فلماذا يذهبون إلى كل هذا الجهدتنفيذ خوارزمية الإجماع؟ ما الذي يجعلهم 
مختلفين عن أي شخص آخرنوع من قاعدة البيانات؟لفهم هذا ، من المفيد أن تستكشف بإيجاز 
كيف تعمل خدمة مثل ZooKeeperتستخدم. بصفتك مطور تطبيق ، نادرًا ما تحتاج إلى 
استخدام ZooKeeper مباشرة ، لأنفي الواقع ليس مناسبًا تمامًا كقاعدة بيانات للأغراض 
العامة. من الأرجح أنكينتهي الأمر بالاعتماد عليه بشكل غير مباشر عبر مشروع آخر: 
على سبيل المثال ، HBase ، Hadoopيعتمد كل من YARN و OpenStack Nova و Kafka على 
ZooKeeper الذي يعمل في الخلف‐أرض. ما الذي تحصل عليه هذه المشاريع منها؟تم تصميم 
ZooKeeper و etcd للاحتفاظ بكميات صغيرة من البيانات التي يمكن أن تناسب تمامًافي 
الذاكرة (على الرغم من أنهم لا يزالون يكتبون على القرص من أجل المتانة) - لذلك لن 
ترغب في ذلكلتخزين جميع بيانات التطبيق الخاص بك هنا. يتم تكرار هذه الكمية الصغيرة 
من البياناتعبر جميع العقد باستخدام خوارزمية بث الترتيب الكلي المتسامحة مع 
الأخطاء. كما disلعن سابقًا ، فإن بث الطلب الإجمالي هو فقط ما تحتاجه لنسخة 
متماثلة لقاعدة البيانات‐نشوئها: إذا كانت كل رسالة تمثل كتابة إلى قاعدة البيانات 
، فقم بتطبيق نفس عمليات الكتابةنفس الترتيب يحافظ على النسخ المتماثلة متسقة مع 
بعضها البعض.تم تصميم ZooKeeper على غرار خدمة قفل Chubby من Google [ 14 ، 99] ، 
تنفيذ لافقط نظام البث الكلي (وبالتالي الإجماع) ، ولكن أيضًا مجموعة مثيرة 
للاهتمام من الآخرينالميزات التي تبين أنها مفيدة بشكل خاص عند إنشاء أنظمة 
موزعة:العمليات الذرية الخطيةباستخدام عملية المقارنة والتعيين الذرية ، يمكنك 
تنفيذ قفل: إذا كان هناك عدة عملياتتحاول العقد في نفس الوقت إجراء نفس العملية ، 
وستنجح واحدة منها فقط.ceed. باستخدام الإجماع ، يتم ضمان أن تكون العملية ذرية 
وخطية.بلي ، حتى في حالة فشل العقدة أو انقطاع الشبكة في أي وقت. وزعتعادةً ما يتم 
تطبيق القفل كعقد إيجار ، والذي له وقت انتهاء صلاحية بحيث يكون متساويًافي حالة 
فشل العميل (راجع "توقف العملية مؤقتًا" في الصفحة 287).360 | الفصل التاسع: 
الاتساق والتوافق

      صفحة 383
الترتيب الكلي للعملياتكما تمت مناقشته في "القائد والقفل" في الصفحة 293، عندما 
يكون بعض المواردمحميًا بقفل أو عقد إيجار ، فأنت بحاجة إلى رمز سياج لمنع العملاء 
من الاتصالتتشابك مع بعضها البعض في حالة توقف العملية مؤقتًا. رمز المبارزة هو 
بعضالرقم الذي يزيد بشكل رتيب في كل مرة يتم فيها الحصول على القفل. حارس حديقة 
الحيوانهذا عن طريق طلب جميع العمليات بالكامل ، وإعطاء كل عملية أزيادة معرّف 
المعاملة zxid وتحويل رقم الإصدار بشكل رتيب[15].كشف الفشليحتفظ العملاء بجلسة 
طويلة الأمد على خوادم ZooKeeper وبشكل دوريتبادل ضربات القلب للتحقق من أن العقدة 
الأخرى لا تزال على قيد الحياة. حتى لو كان الارتباط‐تمت مقاطعة مؤقتًا ، أو فشلت 
عقدة ZooKeeper ، وتبقى الجلسةنشيط. ومع ذلك ، إذا توقفت دقات القلب لمدة أطول من 
ses‐مهلة sion ، يعلن ZooKeeper أن الجلسة ميتة. أي أقفال يحتفظ بها الجهازيمكن 
تكوينه ليتم حذفه تلقائيًا عند انتهاء مهلة الجلسة(يطلق ZooKeeper على هذه العقد 
المؤقتة ).إخطارات الحدثلا يستطيع عميل واحد فقط قراءة الأقفال والقيم التي تم 
إنشاؤها بواسطة عميل آخر ،ولكن يمكنه أيضًا مراقبتها لمعرفة التغييرات. وبالتالي ، 
يمكن للعميل معرفة وقت آخرينضم العميل إلى المجموعة (بناءً على القيمة التي يكتبها 
إلى ZooKeeper) ، أو إذا كان آخرفشل العميل (بسبب انتهاء مهلة جلسته واختفاء عقده 
المؤقتة). بواسطةبالاشتراك في الإخطارات ، يتجنب العميل الاضطرار إلى إجراء 
الاقتراع بشكل متكرر لمعرفة ذلكحول التغييرات.من بين هذه الميزات ، تتطلب العمليات 
الذرية القابلة للتقسيم الخطي فقط الإجماع.ومع ذلك ، فإن مزيج هذه الميزات هو الذي 
يجعل أنظمة مثل ZooKeeperمفيد جدا للتنسيق الموزع.تخصيص العمل للعقدأحد الأمثلة 
التي يعمل فيها نموذج ZooKeeper / Chubby جيدًا هو إذا كان لديكأمثلة عامة لعملية 
أو خدمة ، ويحتاج أحدهم إلى اختياره كقائد أوخبرات. إذا فشل القائد ، يجب أن تتولى 
إحدى العقد الأخرى. هذا بالطبعمفيد لقواعد البيانات ذات القائد الفردي ، ولكن أيضًا 
لجدولة الوظائف وأنظمة الحالة المماثلةتيمس.مثال آخر هو مكان وجود بعض الموارد 
المقسمة (قاعدة بيانات ، رسالةالتدفقات ، وتخزين الملفات ، ونظام الممثل الموزع ، 
وما إلى ذلك) وتحتاج إلى تحديد أي جزءنشوئها لتعيين أي عقدة. عندما تنضم العقد 
الجديدة إلى الكتلة ، فإن بعض الأقساميجب نقلها من العقد الموجودة إلى العقد 
الجديدة ، من أجل إعادة التوازن إلىتحميل (راجع "إعادة موازنة الأقسام" في الصفحة 
201 ). كما تتم إزالة العقد أو فشل ، أخرىتحتاج العقد إلى تولي عمل العقد 
الفاشلة.المعاملات الموزعة والإجماع | 361

      صفحة 384
يمكن تحقيق هذه الأنواع من المهام من خلال الاستخدام الحكيم للعمليات الذرية سريعة 
الزوالالعقد والإخطارات في ZooKeeper. إذا تم القيام به بشكل صحيح ، فإن هذا يسمح 
للتطبيق بـالتعافي تلقائيًا من الأخطاء دون تدخل بشري. لا يزال الأمر غير سهل 
-مكتبات مثل Apache Curator [ 17] نشأت لتوفير أدوات ذات مستوى أعلىأعلى واجهة 
برمجة تطبيقات عميل ZooKeeper. لكنها لا تزال أفضل بكثير من محاولة التنفيذمن خلال 
خوارزميات الإجماع الضرورية من البداية ، والتي حققت نجاحًا ضعيفًاسجل [107 ].قد 
يتم تشغيل التطبيق في البداية فقط على عقدة واحدة ، ولكن في النهاية قد ينمو 
إلىآلاف العقد. محاولة أداء أصوات الأغلبية على العديد من العقد ستكون كذلكغير فعال 
بشكل رهيب. بدلاً من ذلك ، يعمل ZooKeeper على عدد ثابت من العقد (عادةً 3 أو5) 
وتؤدي أغلبية أصواتها بين تلك العقد مع دعم احتمالعدد كبير من العملاء. وبالتالي ، 
يوفر ZooKeeper طريقة "للاستعانة بمصادر خارجية" لبعضعمل العقد التنسيقية (الإجماع 
وترتيب العملية وكشف الأعطال)خدمة خارجية.عادةً ما يكون نوع البيانات التي يديرها 
ZooKeeper بطيئًا جدًا: فهو يمثلترسل معلومات مثل "العقدة التي تعمل على 10.1.1.23 
هي الرائدة للقسم 7" ،والتي قد تتغير على مقياس زمني بالدقائق أو الساعات. انها 
ليست مخصصة للتخزينحالة وقت تشغيل التطبيق ، والتي قد تغير الآلاف أو حتى الملايين 
منمرات في الثانية. إذا كانت حالة التطبيق بحاجة إلى النسخ المتماثل من عقدة واحدة 
إلىآخر ، يمكن استخدام أدوات أخرى مثل Apache BookKeeper [108].اكتشاف الخدمةغالبًا 
ما يتم استخدام ZooKeeper و etcd و Consul لاكتشاف الخدمة ، أي للعثور عليهاتحديد 
عنوان IP الذي تريد الاتصال به للوصول إلى خدمة معينة. فيبيئات مراكز البيانات 
"السحابية" ، حيث يكون من الشائع أن تستمر الأجهزة الافتراضيةتعال وتذهب ، غالبًا 
ما لا تعرف عناوين IP لخدماتك مسبقًاالوقت. بدلاً من ذلك ، يمكنك تكوين خدماتك بحيث 
يتم تسجيلها عند بدء تشغيلهاister نقطة نهاية الشبكة الخاصة بهم في سجل الخدمة ، 
حيث يمكن العثور عليها بعد ذلك بواسطةخدمات أخرى.ومع ذلك ، فمن غير الواضح ما إذا 
كان اكتشاف الخدمة يتطلب بالفعل إجماعًا. DNS هوالطريقة التقليدية للبحث عن عنوان 
IP لاسم خدمة ، وتستخدم متعددطبقات متعددة من التخزين المؤقت لتحقيق أداء جيد 
وتوافر. يقرأ من DNSليست قابلة للتقسيم الخطي على الإطلاق ، وعادة لا تعتبر مشكلة 
إذا كانالنتائج قديمة بعض الشيء [ 109 ]. من الأهمية بمكان أن يتوفر DNS بشكل موثوق 
وقوية لانقطاعات الشبكة.على الرغم من أن اكتشاف الخدمة لا يتطلب إجماعًا ، إلا أن 
انتخاب الزعيم يتطلب ذلك. وهكذا ، إذانظام الإجماع الخاص بك يعرف بالفعل من هو 
القائد ، ومن ثم يمكن أن يكون منطقيًاتستخدم أيضًا هذه المعلومات لمساعدة الخدمات 
الأخرى على اكتشاف هوية القائد. لهذاالغرض ، تدعم بعض أنظمة الإجماع النسخ 
المتماثلة للتخزين المؤقت للقراءة فقط. هذه النسخ المتماثلةتتلقى بشكل غير متزامن 
سجل جميع قرارات خوارزمية الإجماع ، لكن لا تفعل ذلك362 | الفصل التاسع: الاتساق 
والتوافق

      صفحة 385
المشاركة بنشاط في التصويت. ولذلك فهم قادرون على تلبية طلبات القراءة التي تعمللا 
تحتاج إلى أن تكون قابلة للتقسيم الخطي.خدمات العضويةيمكن اعتبار ZooKeeper 
والأصدقاء جزءًا من تاريخ طويل من البحث في الأعضاء‐تعود خدمات السفن إلى 
الثمانينيات وكانت مهمة للبناءأنظمة موثوقة للغاية ، مثل مراقبة الحركة الجوية 
[110].تحدد خدمة العضوية العقد النشطة حاليًا والأعضاء الحيةمن الكتلة. كما رأينا 
طوال الفصل 8 ، بسبب التأخير غير المحدود في الشبكةغير ممكن لاكتشاف ما إذا كانت 
عقدة أخرى قد فشلت بشكل موثوق. ومع ذلك ، إذا قمت بالتنازلالكشف عن فشل التنوير 
القائل بتوافق الآراء ، يمكن أن تتوصل العقد إلى اتفاق حول أي منهماالعقدة على قيد 
الحياة والتي ليست كذلك.لا يزال من الممكن أن يتم إعلان موت العقدة بشكل غير صحيح 
بالإجماع ، حتىعلى الرغم من أنه على قيد الحياة بالفعل. لكن من المفيد جدًا مع ذلك 
أن يوافق النظام على ما يلي:منة على العقد التي تشكل العضوية الحالية. على سبيل 
المثال ، اختيار ملفيمكن أن يعني القائد ببساطة اختيار أقل عدد من الميمات 
الحاليةبيرس. هذا غير ممكن إذا كانت العقد المختلفة لديها آراء متباينة حول من هو 
الحال.أعضاء الإيجار.ملخصدرسنا في هذا الفصل موضوعات الاتساق والتوافق من عدة 
اختلافات.زوايا شديدة. نظرنا بعمق في القابلية الخطية ، نموذج تناسق شائع: إنهالهدف 
هو جعل البيانات المنسوخة تظهر كما لو كان هناك نسخة واحدة فقط ، وجعل جميع 
العمليات تعمل عليه بشكل ذري. على الرغم من أن الخطية جذابة لأنمن السهل فهمها - 
فهي تجعل قاعدة البيانات تتصرف كمتغير فيبرنامج مترابطة - له جانب سلبي لكونه 
بطيئًا ، خاصة في البيئاتمع تأخيرات كبيرة في الشبكة.استكشفنا أيضًا العلاقة 
السببية ، التي تفرض ترتيبًا على الأحداث في نظام ما (ماذاقبل ماذا ، بناءً على 
السبب والنتيجة). على عكس الخطية التي تضعجميع العمليات في جدول زمني واحد ومرتّب 
بالكامل ، والسببية توفر لنا أضعفنموذج التناسق: يمكن أن تكون بعض الأشياء متزامنة 
، لذا فإن سجل الإصدار يشبه ملفالجدول الزمني مع التفريع والدمج. الاتساق السببي 
ليس لديه التنسيقالأمة النفقات العامة للخطية ، وأقل حساسية لمشاكل الشبكة.ومع ذلك 
، حتى لو التقطنا الترتيب السببي (على سبيل المثال باستخدام وقت Lamport‐الطوابع) ، 
فقد رأينا أنه لا يمكن تنفيذ بعض الأشياء بهذه الطريقة: في "الطابع الزمنيالطلب غير 
كافٍ "في الصفحة 337 نظرنا في مثال ضمان أن أاسم المستخدم فريد ويرفض التسجيلات 
المتزامنة لنفس اسم المستخدم. لوستقبل عقدة التسجيل ، يجب أن تعرف بطريقة أو بأخرى 
أن عقدة أخرىملخص | 363

      صفحة 386
العقدة ليست في نفس الوقت في عملية تسجيل نفس الاسم. أدت هذه المشكلةلنا نحو 
الإجماع .لقد رأينا أن تحقيق الإجماع يعني أن نقرر شيئًا بطريقة تناسب جميع 
العقدالموافقة على ما تقرر ، ويكون القرار غير قابل للنقض. مع بعض الحفر ،اتضح أن 
مجموعة كبيرة من المشاكل يمكن اختزالها في الواقع إلى إجماع ، ومتكافئة مع بعضها 
البعض (بمعنى أنه إذا كان لديك حل لأحدهم ، فأنتيمكنه بسهولة تحويله إلى حل لأحد 
الحلول الأخرى):سجل خطي للمقارنة والتعيينيحتاج السجل إلى تقرير ذريًا ما إذا كان 
سيتم تحديد قيمته ، بناءً على ما إذا كانقيمته الحالية تساوي المعلمة المعطاة في 
العملية.التزام الصفقة الذريةيجب أن تقرر قاعدة البيانات ما إذا كانت ستلتزم أو 
ستجهض معاملة موزعة.إجمالي بث النظاميجب أن يقرر نظام المراسلة ترتيب تسليم 
الرسائل.أقفال وعقود إيجارعندما يتسابق العديد من العملاء للاستيلاء على قفل أو عقد 
إيجار ، يقرر القفل أيهماحصل عليها بنجاح.خدمة العضوية / التنسيقبالنظر إلى كاشف 
الفشل (مثل المهلات) ، يجب أن يقرر النظام أي العقد هيعلى قيد الحياة ، والتي يجب 
اعتبارها ميتة لأن جلستهم انتهت.التفرد قيدعندما تحاول عدة معاملات في نفس الوقت 
إنشاء سجلات متضاربة مع ملفالمفتاح نفسه ، يجب أن يقرر القيد أيهما يسمح به وأيهما 
يجب أن يفشلمع انتهاك القيد.كل هذه الأمور واضحة ومباشرة إذا كان لديك عقدة واحدة 
فقط ، أو إذا كنت على استعداد لذلكتعيين القدرة على اتخاذ القرار لعقدة واحدة. هذا 
ما يحدث في ملفقاعدة بيانات قائد واحد: كل سلطة اتخاذ القرارات منوطة بالقائد ، 
والذيهو السبب في أن قواعد البيانات هذه قادرة على توفير عمليات خطية ، وخصوصية 
فريدةسلالات ، وسجل نسخ مرتب بالكامل ، وأكثر من ذلك.ومع ذلك ، إذا فشل هذا القائد 
الفردي ، أو إذا كان انقطاع الشبكة هو القائدغير قابل للوصول ، يصبح مثل هذا النظام 
غير قادر على إحراز أي تقدم. هناك ثلاثةطرق التعامل مع هذا الموقف:1. انتظر حتى 
يتعافى القائد ، واقبل أن يتم حظر النظام فيغضون ذلك. يختار العديد من منسقي 
معاملات XA / JTA هذا الخيار. هذهالنهج لا يحل الإجماع لأنه لا يفي 
بالإنهاءالخاصية: إذا لم يتعافى القائد ، يمكن حظر النظام إلى الأبد.364 | الفصل 
التاسع: الاتساق والتوافق

      صفحة 387
2. تجاوز الفشل يدويًا عن طريق جعل البشر يختارون عقدة قيادية جديدة ، وإعادة 
التكوين‐جي النظام لاستخدامه. العديد من قواعد البيانات العلائقية تتخذ هذا النهج. 
إنه نوعالإجماع ب "القضاء والقدر" - العامل البشري ، خارج الكمبيوترالنظام ، يتخذ 
القرار. سرعة تجاوز الفشل محدودة بالسرعة التي يتم بهايمكن للإنسان أن يتصرف ، وهو 
بشكل عام أبطأ من أجهزة الكمبيوتر.3. استخدم خوارزمية لاختيار قائد جديد تلقائيًا. 
هذا يتطلب موافقةخوارزمية سوس أي نظام يقوم بإجراء تجاوز الفشل تلقائيًا دون 
استخدام برنامج pro‐من المحتمل أن تتصرف خوارزمية توافق الآراء بشكل سيئ في ظروف 
الشبكة المعاكسة[107 ].على الرغم من أن قاعدة البيانات ذات القائد الفردي يمكن أن 
توفر قابلية تحديد خطية دون تنفيذ ملفخوارزمية الإجماع في كل كتابة ، لا تزال تتطلب 
إجماعًا للحفاظ على قائدها‐السفينة ولتغييرات القيادة. وبالتالي ، بمعنى ما ، فإن 
وجود قائد فقط "يركليمكن أن يسير في الطريق ": لا يزال الإجماع مطلوبًا ، فقط في 
مكان مختلف ، وأقل حرية‐بهدوء. والخبر السار هو أن الخوارزميات المتسامحة وأنظمة 
التوافقموجودة ، وقد ناقشناها بإيجاز في هذا الفصل.تلعب أدوات مثل ZooKeeper دورًا 
مهمًا في توفير موافقة "الاستعانة بمصادر خارجية "‐sus وكشف الأعطال وخدمة العضوية 
التي يمكن للتطبيقات استخدامها. إنه ليس سهلالاستخدامها ، لكنها أفضل بكثير من 
محاولة تطوير خوارزمياتك الخاصةتحمل كل المشاكل التي نوقشت في الفصل 8 . إذا وجدت 
نفسك تريد أن تفعلأحد تلك الأشياء التي يمكن اختزالها إلى الإجماع ، وتريدها أن 
تكون متسامحة مع الخطأ ،فمن المستحسن استخدام شيء مثل ZooKeeper.ومع ذلك ، لا يتطلب 
كل نظام إجماعًا بالضرورة: على سبيل المثال ، بدون قيادةوأنظمة النسخ المتماثل 
متعددة القادة لا تستخدم الإجماع العالمي. كونوالانكسارات التي تحدث في هذه الأنظمة 
(راجع "معالجة تعارضات الكتابة" في الصفحة 164) منطقةنتيجة عدم وجود إجماع بين 
مختلف القادة. لكن ربما لا بأس بذلك:ربما نحتاج ببساطة إلى التأقلم دون قابلية 
تحديد الخطية ، وتعلم كيفية العمل معها بشكل أفضلالبيانات التي تحتوي على سجلات 
إصدارات متفرعة ومدمجة.أشار هذا الفصل إلى مجموعة كبيرة من الأبحاث حول نظرية 
الأنظمة الموزعة.على الرغم من أن الأوراق والبراهين النظرية ليست دائمًا سهلة الفهم 
، وأحيانًا تضع افتراضات غير واقعية ، فهي ذات قيمة كبيرة للإعلامالعمل العملي في 
هذا المجال: يساعدوننا في التفكير فيما يمكن وما لا يمكن فعله ،ومساعدتنا في العثور 
على الطرق غير البديهية التي غالبًا ما تكون الأنظمة الموزعة بهامعيب. إذا كان لديك 
الوقت ، فإن المراجع تستحق الاستكشاف.يقودنا هذا إلى نهاية الجزء الثاني من هذا 
الكتاب ، والذي غطينا فيه النسخ المتماثل(الفصل 5 ) ، التقسيم ( الفصل 6) ، 
المعاملات ( الفصل السابع ) ، النظام الموزعنماذج الفشل (الفصل 8) ، وأخيرًا 
الاتساق والتوافق ( الفصل 9). الآنأننا قد وضعنا أساسًا ثابتًا للنظرية ، في الجزء 
الثالث سوف نعود إليه مرة أخرىأنظمة أكثر عملية ، وناقش كيفية إنشاء تطبيقات قوية 
من غير المتجانسةلبنات البناء الجينية.ملخص | 365

      صفحة 388
مراجع[1] بيتر بيليس وعلي قدسي: " الاتساق النهائي اليوم: القيود ، الإضافية‐sions 
، and Beyond "، قائمة انتظار ACM ، المجلد 11 ، العدد 3 ، مارس 2013. دوى:10.1145 
/ 2460276.2462076[2] الأمير ماهاجان ، ولورنزو ألفيسي ، ومايك داهلين: " الاتساق 
والتوافر والتقارب، "جامعة تكساس في أوستن ، قسم علوم الكمبيوتر ، التكنولوجياتقرير 
UTCS TR-11-22 ، مايو 2011.[3] أليكس سكوتي: " مغامرات في بناء قاعدة بيانات خاصة 
بك، "في كل قاعدتك ،تشرين الثاني (نوفمبر) 2015.[4] بيتر بيليس وآرون ديفيدسون 
وآلان فيكيتي وآخرون: " المعاملات المتاحة للغاية:الفضائل والقيود، "في المؤتمر 
الدولي الأربعين لقواعد البيانات الكبيرة جدًا(VLDB) ، سبتمبر 2014. تم نشر النسخة 
الموسعة كطباعة ما قبل الطباعة arXiv: 1302.0309[cs.DB].[5] باولو فيوتي وماركو 
فوكوليتش: " الاتساق في التوزيع غير التجاريStorage Systems ، ” arXiv: 1512.00168 
، 12 أبريل 2016.[6 ] موريس بي هيرليهي وجانيت إم وينج: "القابلية الخطية: A 
Correctness Condi‐نشوئها عن الكائنات المتزامنة ، " معاملات ACM على لغات البرمجة 
وSystems (TOPLAS) ، المجلد 12 ، العدد 3 ، الصفحات 463-492 ، يوليو 1990. 
دوى:10.1145 / 78969.78972[7 ] ليزلي لامبورت: "على الاتصال بين العمليات، " 
الحوسبة الموزعة ، المجلدume 1، number 2، pages 77–101، June 1986. doi: 10.1007 / 
BF01786228[8 ] ديفيد ك. جيفورد: "تخزين المعلومات في نظام كمبيوتر لامركزي ، 
"مراكز أبحاث Xerox Palo Alto ، CSL-81-8 ، يونيو 1981.[9] مارتن كليبمان: "من فضلك 
توقف عن استدعاء قواعد البيانات CP أو AP ،" martin.klepp‐mann.com ، 11 مايو 
2015.[10 ] كايل كينجسبري: "اتصل بي ربما: يقرأ MongoDB التي لا معنى لها، 
"aphyr.com ، 20 أبريل2015.[11] كايل كينجسبري: " التقنيات الحسابية في كنوسوس " ، 
aphyr.com ، 17 مايو2014.[12] بيتر بيليس: " Linearizability مقابل Serializability 
" ، bailis.org ، 24 سبتمبر 2014.[13] فيليب أ بيرنشتاين وفاسوس هادزيلاكوس وناثان 
جودمان: التزامنالتحكم والاستعادة في أنظمة قواعد البيانات. أديسون ويسلي ، 1987. 
متاح على الإنترنت فيResearch.microsoft.com. رقم ال ISBN: 0201107155366 | الفصل 
التاسع: الاتساق والتوافق

      صفحة 389
[14] مايك بوروز: " خدمة قفل Chubby للنظم الموزعة غير المحكم الاقتران‐tems ، "في 
ندوة USENIX السابعة حول تصميم وتنفيذ نظام التشغيل(OSDI) ، نوفمبر 2006.[15] 
Flavio P Junqueira and Benjamin Reed: ZooKeeper: تنسيق العمليات الموزعةأمة . 
O'Reilly Media ، نوفمبر 2013. ISBN: 978-1-4493-6130-3[16] “ etcd 2.0.12 
Documentation ،” CoreOS، Inc.، 2015.[17] " Apache Curator ،" Apache Software 
Foundation، curator.apache.org، 2015.[18] مورالي فالاث: Oracle 10g RAC Grid، 
Services & Clustering . إلسفير ديجيتالالصحافة ، مايو 2006. ISBN: 
978-1-55558-321-7[19 ] جيم جراي: "مفهوم الصفقة: الفضائل والقيود "، في 7th 
Interna‐المؤتمر الإقليمي حول قواعد البيانات الكبيرة جدًا (VLDB) ، الصفحات 
144-154 ، سبتمبر 1981.[20] هيكتور جارسيا مولينا وكينيث سالم: " Sagas " في ACM 
International Con‐مرجع بشأن إدارة البيانات (SIGMOD) ، الصفحات 249-259 ، مايو 
1987. دوى:10.1145 / 38713.38742[21 ] بات هيلاند:الذكريات والتخمينات والاعتذارات 
، blogs.msdn.com ، 15 مايو2007.[22] سوزان بي ديفيدسون ، وهيكتور جارسيا مولينا ، 
وديل سكين: " الاتساق في باروشبكات titioned، " ACM Computing Surveys ، المجلد 17 
، العدد 3 ، الصفحات 341-370 ،سبتمبر 1985. دوى: 10.1145 / 5505.5508[23] إريك إيه 
بروير: " NoSQL: الماضي والحاضر والمستقبل، "في QCon San Francisco ، Novem‐بير 
2012.[24 ] بيتر بيليس وآلان فيكيتي ومايكل جيه فرانكلين وآخرون: "تجنب التنسيقنظم 
قواعد البيانات ، وقائع VLDB Endowment ، المجلد 8 ، العدد 3 ، الصفحات185–196 ، 
نوفمبر 2014.[25 ] كايل كينجسبري: "اتصل بي ربما: إلخ والقنصل، "aphyr.com ، 9 
حزيران (يونيو) 2014.[26] فلافيو بي جونكويرا وبنجامين سي ريد وماركو سيرافيني: " 
زاب: مرتفع-بث الأداء لأنظمة النسخ الاحتياطي الأولية " ، في 41st IEEE 
International Con‐دليل على الأنظمة والشبكات التي يمكن الاعتماد عليها (DSN) ، 
الصفحات 245-256 ، يونيو 2011. doi:10.1109 / DSN.2011.5958223[27 ] دييجو أونغارو 
وجون ك أوسترهوت: "بحثًا عن فكرة مفهومةالخوارزمية الحسية (نسخة موسعة)، "في 
المؤتمر الفني السنوي USENIX(ATC) ، يونيو 2014.[28 ] حجيت عطية وأموتس بار نوي 
وداني دوليف: "مشاركة الذاكرة بقوة فيأنظمة تمرير الرسائل ، " مجلة ACM ، المجلد 42 
، العدد 1 ، الصفحات 124–142 ،يناير 1995. دوى: 10.1145 / 200836.200869ملخص | 367

      صفحة 390
[29 ] نانسي لينش وأليكس شفارتسمان: "مضاهاة قوية للذاكرة المشتركة باستخدامالبث 
الديناميكي المعترف به من قبل النصاب القانوني، في المؤتمر السنوي الدولي السابع 
والعشرون Sympo‐sium on Fault-Tolerant Computing (FTCS) ، الصفحات 272-281 ، يونيو 
1997. doi: 10.1109 /FTCS.1997.614100[30] كريستيان كاشين ، رشيد كراوي ، لويس 
رودريغز: مقدمة عن ريلياكالبرمجة الموزعة الآمنة والآمنة ، الإصدار الثاني. سبرينغر 
، فبراير 2011.رقم ال ISBN: 978-3-642-15259-7، دوى: 10.1007 / 
978-3-642-15260-3[31] سام إليوت ومارك ألين ومارتن كليبمان: اتصال شخصي ،موضوع على 
twitter.com ، 15 أكتوبر 2015.[32] نيكلاس إكستروم ، ميخائيل بانتشينكو ، وجوناثان 
إليس: " مشكلة محتملة معقراءة الإصلاح؟ ، "موضوع البريد الإلكتروني على القائمة 
البريدية كاساندرا ديف ، تشرين الأول (أكتوبر) 2012.[33 ] موريس بي هيرليهي: "انتظر 
بدون التزامن، " معاملات ACM على Pro‐اللغات والأنظمة النحوية (TOPLAS) ، المجلد 13 
، العدد 1 ، الصفحات 124-149 ،يناير 1991. دوى: 10.1145 / 114005.102808[34] 
Armando Fox و Eric A Brewer: " الحصاد والعائد ونظام التسامح القابل للتطوير‐tems 
، "في ورشة العمل السابعة حول الموضوعات الساخنة في أنظمة التشغيل (HotOS) ، 
الصفحات من 174 إلى 178 ،مارس 1999. doi: 10.1109 / HOTOS.1999.798396[35 ] سيث 
جيلبرت ونانسي لينش: "تخمين بروير وجدوى كونخدمات ويب ثابتة ومتاحة ومتسامحة مع 
التقسيم، " أخبار ACM SIGACT ، المجلد 33 ،رقم 2 ، الصفحات 51-59 ، 2002. دوى: 
10.1145 / 564585.564601[36] سيث جيلبرت ونانسي لينش: " وجهات نظر حول نظرية CAP " 
، IEEE Com‐مجلة الكمبيوتر ، المجلد 45 ، العدد 2 ، الصفحات 30-36 ، فبراير 2012. 
doi: 10.1109 / MC.2011.389[37 ] إريك إيه بروير: "CAP بعد اثني عشر عامًا: كيف 
تغيرت "القواعد" ، "مجلة IEEE Computer ، المجلد 45 ، العدد 2 ، الصفحات 23-29 ، 
فبراير 2012. doi:10.1109 / MC.2012.37.001[38] بول آر جونسون وروبرت إتش توماس: " 
RFC 677: The Maintenance of Duplicate Databases ، ”Network Working Group، 27 
January 1975.[39 ] بروس جي ليندسي ، باتريشيا غريفيث سيلينجر ، سي جاليتيري 
وآخرون: "ملاحظات على Dis‐قواعد البيانات التي تم تكريمها، IBM Research ، Research 
Report RJ2571 (33471) ، يوليو 1979.[40] مايكل جي فيشر وآلان مايكل: " التضحية 
بالتسلسل للوصول إلى مستوى مرتفعتوافر البيانات في شبكة غير موثوقة "، في ندوة ACM 
الأولى حول مبادئأنظمة قواعد البيانات (PODS) ، الصفحات 70-75 ، مارس 1982. دوى: 
10.1145 / 588111.588124[41] مارتن كليبمان: " نقد نظرية CAP " ، arXiv: 1509.05393 
، 17سبتمبر 2015.368 | الفصل التاسع: الاتساق والتوافق

      الصفحة 391
[42 ] نانسي لينش: "مائة دليل على استحالة الحوسبة الموزعة ، "في ندوة ACM الثامنة 
حول مبادئ الحوسبة الموزعة (PODC) ، الصفحات 1-28 ،أغسطس 1989. دوى: 10.1145 / 
72981.72982[43 ] حجيت عطية ، فيث إيلين ، وآدم موريسون: "حدود التوفر العاليمخازن 
بيانات متسقة في نهاية المطاف، "في ندوة ACM حول مبادئ التوزيعالحوسبة (PODC) ، 
يوليو 2015.دوى: 10.1145 / 2767386.2767419[44 ] هنري روبنسون: "ارتباك CAP: مشاكل 
"التسامح مع التقسيم" ، "blog.cloudera.com ، 26 أبريل 2010.[45 ] Adrian 
Cockcroft: "Migrating to Microservices "، في QCon London ، آذار (مارس) 2014.[46] 
بيتر سيويل ، وسوسميت ساركار ، وسكوت أوينز ، وفرانشيسكو زابا نارديلي ، وماغونوس 
أو ميرين: "x86-TSO: نموذج مبرمج صارم وقابل للاستخدام لـ x86 Mul‐معالجات، " 
اتصالات من ACM ، المجلد 53 ، العدد 7 ، الصفحات 89-97 ، يوليو2010. دوى: 10.1145 / 
1785414.1785443[47]مارتنطومسون:" الذاكرةحواجز / أسوار، 
"ميكانيكي-sympathy.blogspot.co.uk ، 24 يوليو 2011.[48 ] أولريش دريبر:ما يجب أن 
يعرفه كل مبرمج عن الذاكرة "akkadia.org21 نوفمبر 2007.[49 ] دانيال ج 
أبادي:مقايضات الاتساق في نظام قواعد البيانات الموزعة الحديثالتصميم ، مجلة آي إي 
إي إي للكمبيوتر ، المجلد 45 ، العدد 2 ، الصفحات 37-42 ، فبراير2012. دوى: 10.1109 
/ MC.2012.33.007[50 ] حجيت عطية وجنيفر إل ولش: "التناسق المتسلسل مقابل 
Linearizabil‐ity ، " معاملات ACM على أنظمة الكمبيوتر (TOCS) ، المجلد 12 ، العدد 
2 ، الصفحات91-122 ، مايو 1994. دوى: 10.1145 / 176575.176576[51] Mustaque Ahamad 
و Gil Neiger و James E Burns و Prince Kohli و Phillip WHutto: " الذاكرة السببية: 
التعريفات والتنفيذ والبرمجة " ، Dis‐Tributed Computing ، المجلد 9 ، العدد 1 ، 
الصفحات 37-49 ، مارس 1995. doi: 10.1007 /BF01784241[52] وايت لويد ومايكل جيه 
فريدمان ومايكل كامينسكي وديفيد جي أندرسن:"أقوى دلالات للتخزين الجغرافي المتماثل 
منخفض زمن الوصول، في 10 USENIX Sym‐posium on Networked Systems Design and 
Implementation (NSDI) ، أبريل 2013.[53] ماريك زاويرسكي وأنيت بينيوس وفالتر 
باليجاس وآخرون: " سويفت كلاود: خطأ-تكامل النسخ المتماثل الجغرافي المتسامح على 
طول الطريق إلى جهاز العميل، "INRIAتقرير البحث 8347 ، أغسطس 2013.[54 ] بيتر بيليس 
وعلي قدسي وجوزيف إم هيلرستين وأيون ستويكا:سببية الترباسالتناسق، "في مؤتمر ACM 
الدولي حول إدارة البيانات (SIGMOD) ،يونيو 2013.ملخص | 369

      صفحة 392
[55] فيليب أجوكس ، وناثان برونسون ، وسانجيف كومار ، ويات لويد ، 
وكوشيكVeeraraghavan: " التحديات التي تواجه اعتماد تناسق أقوى على نطاق واسع " ، 
في المركز الخامس عشرورشة عمل USENIX حول الموضوعات الساخنة في أنظمة التشغيل 
(HotOS) ، مايو 2015.[56 ] بيتر بيليس:السببية باهظة الثمن (وماذا تفعل حيال ذلك)، 
"bailis.org ، 5شباط 2014.[57] ريكاردو غونسالفيس وباولو سيرجيو ألميدا وكارلوس 
باكيرو وفيكتور فونتي:"إدارة موجزة للسببية على مستوى الخادم لمخازن البيانات 
المتسقة في نهاية المطاف ، "في المؤتمر الدولي الخامس عشر IFIP حول التطبيقات 
الموزعة والتشغيل البينيSystems (DAIS) ، الصفحات 66-79 ، يونيو 2015.دوى: 10.1007 
/ 978-3-319-19129-4_6[58] Rob Conery: "منشئ معرف أفضل لـ PostgreSQL، 
rob.conery.io ، 29 مايو2014.[59 ] ليزلي لامبورت:الوقت والساعات وترتيب الأحداث في 
نظام موزع‐tem ، " Communications of the ACM ، المجلد 21 ، العدد 7 ، الصفحات 
558-565 ، يوليو 1978.دوى: 10.1145 / 359545.359563[60 ] كزافييه ديفاغو وأندريه 
شيبر وبيتر أوربان: "مجموع البث النظام وخوارزميات البث المتعدد: التصنيف والمسح ، 
" مسوحات حوسبة ACM ، المجلد 36 ،العدد 4 ، الصفحات 372-421 ، كانون الأول (ديسمبر) 
2004. دوى: 10.1145 / 1041680.1041682[61] حجيت عطية وجنيفر ولش: الحوسبة الموزعة: 
الأساسيات ، Simula‐الموضوعات والموضوعات المتقدمة ، الإصدار الثاني. جون وايلي 
وأولاده ، يونيو 2004. ISBN:9780471453246 ، دوى: 10.1002 / 0471478210[62] Mahesh 
Balakrishnan و Dahlia Malkhi و Vijayan Prabhakaran وآخرون: " CORFU: Aتصميم سجل 
مشترك لمجموعات الفلاش "، في ندوة USENIX التاسعة حول أنظمة الشبكات‐تصميم وتنفيذ 
(NSDI) ، أبريل 2012.[63 ] فريد ب شنايدر: "تنفيذ خدمات التسامح مع الأخطاء 
باستخدام الدولةنهج الآلة: برنامج تعليمي، " ACM Computing Surveys ، المجلد 22 ، 
العدد 4 ،الصفحات 299-319 ، ديسمبر 1990.[64] ألكساندر طومسون ، ثاديوس دايموند ، 
شو تشون وينغ وآخرون: " كالفن: سريعالمعاملات الموزعة لأنظمة قواعد البيانات 
المقسمة، "في ACM Internationalمؤتمر إدارة البيانات (SIGMOD) ، مايو 2012.[65] 
ماهيش بالاكريشنان ، وداليا مالخي ، وتيد ووبر ، وآخرون: " Tango: Distributedهياكل 
البيانات عبر سجل مشترك "، في ندوة ACM 24 حول أنظمة التشغيلالمبادئ (SOSP) ، 
الصفحات 325-340 ، نوفمبر 2013.دوى: 10.1145 / 2517349.2522732[66] روبيرت فان 
رينيسي وفريد ​​بي شنايدر: " تكرار السلسلة للدعمإنتاجية عالية وتوافر، "في ندوة 
USENIX السادسة حول نظام التشغيلالتصميم والتنفيذ (OSDI) ، ديسمبر 2004.370 | الفصل 
التاسع: الاتساق والتوافق

      صفحة 393
[67 ] ليزلي لامبورت: "كيفية صنع جهاز كمبيوتر متعدد المعالجات يعمل بشكل صحيحبرامج 
العمليات المتعددة ، " IEEE Transactions on Computers ، المجلد 28 ، العدد9 ، 
الصفحات 690 - 691 ، سبتمبر 1979. دوى: 10.1109 / TC.1979.1675439[68 ] Enis 
Söztutar و Devaraj Das و Carter Shanklin: "Apache HBase High Availabil‐مدينة في 
المستوى التالي، ”hortonworks.com ، 22 كانون الثاني (يناير) 2015.[69 ] بريان إف 
كوبر وراغو راماكريشنان وأوتكارش سريفاستافا وآخرون: "الوصلات:منصة تقديم البيانات 
المستضافة من Yahoo!، "في المؤتمر الدولي 34 على جداقواعد البيانات الكبيرة (VLDB) 
، أغسطس 2008. doi: 10.14778 / 1454159.1454167[70 ] توشار ديباك شاندرا وسام تويغ: 
"أجهزة كشف الأعطال غير الموثوق بها للإصلاح‐أنظمة موزعة قادرة، " Journal of the 
ACM ، المجلد 43 ، العدد 2 ، الصفحات من 225 إلى 267 ،مارس 1996. دوى: 10.1145 / 
226643.226647[71] جيم إن جراي وليزلي لامبورت: " إجماع على الالتزام بالصفقة، " 
ACMالمعاملات على أنظمة قواعد البيانات (TODS) ، المجلد 31 ، العدد 1 ، الصفحات 
133-160 ،مارس 2006. دوى: 10.1145 / 1132863.1132867[72 ] رشيد الكراوي:إعادة النظر 
في العلاقة بين الذرات غير المعوقةالالتزام والتوافق، "في ورشة العمل الدولية 
التاسعة حول الموزعة Algo‐rithms (WDAG) ، الصفحات 87-100 ، سبتمبر 1995.دوى: 
10.1007 / BFb0022140[73 ] مايكل جي فيشر ونانسي لينش ومايكل إس باترسون: "استحالة 
ديسإجماع تحية مع عملية واحدة خاطئة ، " مجلة ACM ، المجلد 32 ، العدد‐بير 2 ، 
الصفحات 374-382 ، أبريل 1985. دوى: 10.1145 / 3149.214121[74] مايكل بن أور: "ميزة 
أخرى للاختيار الحر: غير متزامن تمامًابروتوكولات الاتفاق "، في ندوة ACM الثانية 
حول مبادئ الحوسبة الموزعة‐جي (PODC) ، أغسطس 1983.دوى: 10.1145 / 
800221.806707[75] ثانومالايان سانكارانارايانا بيلاي ، فيجاي تشيدامبارام ، 
رامناتان عليغابان وآخرون: "لم يتم إنشاء جميع أنظمة الملفات على قدم المساواة: حول 
تعقيد الحرف‐التطبيقات المتوافقة مع الأعطال " ، في ندوة USENIX الحادية عشرة حول 
التشغيلتصميم النظم وتنفيذها (OSDI) ، أكتوبر 2014.[76] C Mohan و Bruce G Lindsay 
و Ron Obermarck: “ إدارة المعاملات فينظام إدارة قواعد البيانات الموزعة R * ، " 
معاملات ACM على قاعدة البياناتالأنظمة ، المجلد 11 ، العدد 4 ، الصفحات 378-396 ، 
ديسمبر 1986. دوى:10.1145 / 7239.7266[77] " معالجة المعاملات الموزعة: مواصفات XA، 
"X / شركة مفتوحةLtd ، Technical Standard XO / CAE / 91/300 ، ديسمبر 1991. ISBN: 
1872630243[78] مايك سبيل: " XA Exposed، Part II ،" jroller.com ، 3 أبريل 
2004.[79] إيفان سيلفا نيتو وفرانسيسكو ريفيربل: " الدروس المستفادة من التنفيذWS- 
التنسيق و WS-AtomicTransaction "، في 7 IEEE / ACIS Internationalملخص | 371

      صفحة 394
مؤتمر علوم الحاسب والمعلومات (ICIS) ، مايو 2008. doi: 10.1109 /ICIS.2008.75[80] 
جيمس إي جونسون ، وديفيد إي لانغورثي ، وليزلي لامبورت ، وفريدريك إتش 
فوغت:"المواصفات الرسمية لبروتوكول خدمات الويب ، "في ورشة العمل الدولية الأولى 
حولخدمات الويب والأساليب الرسمية (WS-FM) ، فبراير 2004. doi: 10.1016 / 
j.entcs.2004.02.022[81] ديل سكين: " عدم حظر بروتوكولات الالتزام " في المؤتمر 
الدولي لـ ACMحول إدارة البيانات (SIGMOD) ، أبريل 1981.دوى: 10.1145 / 
582318.582339[82] جريجور هوهبي: "لا يستخدم المقهى الخاص بك التزامًا من مرحلتين، 
" IEEE Soft‐الخزنة ، المجلد 22 ، العدد 2 ، الصفحات 64-66 ، آذار (مارس) 2005.دوى: 
10.1109 / MS.2005.52.005[83 ] بات هيلاند:الحياة خارج المعاملات الموزعة: رأي 
المرتد،" فيالمؤتمر الثالث لبحوث نظم البيانات المبتكرة (CIDR) ، الصفحات 132-141 
،يناير 2007.[84] جوناثان أوليفر: " My Beef with MSDTC and Two-Phase Commits،" 
blog.jona‐thanoliver.com ، 4 أبريل 2011.[85] أورين عيني (Ahende Rahien): " 
مغالطة المعاملات الموزعة ،"ayende.com ، 17 يوليو 2014.[86] Clemens Vasters: " 
المعاملات في Windows Azure (مع ناقل الخدمة) - Anمناقشة البريد الإلكتروني، 
"vasters.com ، 30 تموز (يوليو) 2012.[87] " المعاملات في Azure، "وثائق 
NServiceBus ، برامج معينة ،2015.[88 ] راندي ويجينتون ، وريان لوي ، وماركوس ألب ، 
وفيرناندو إيبار: "وزعتالمعاملات في MySQL، "في مؤتمر ومعرض MySQL ، أبريل 
2013.[89] مايك سبيل: " XA مكشوف ، الجزء الأول، "jroller.com ، 3 نيسان (أبريل) 
2004.[90 ] أجمر دريوال: "معاملات MSDTC المعزولة (-2 spids) ، "Ageofdata.com ، 
12ديسمبر 2008.[91] بول راندال: " قصة العالم الحقيقي لـ DBCC PAGE إنقاذ اليوم ،" 
sqlskills.com ، 19يونيو 2013.[92 ] "خيار تكوين الخادم بدقة xact المشكوك فيه"، 
SQL Server 2016 docu‐التوجيه ، شركة مايكروسوفت ، 2016.[93 ] سينثيا دورك ونانسي 
لينش ولاري ستوكماير: "الإجماع في الرئاسة‐من التزامن الجزئي ، " Journal of the 
ACM ، المجلد 35 ، العدد 2 ، الصفحات 288–323 ، أبريل 1988. دوى: 10.1145 / 
42282.42283372 | الفصل التاسع: الاتساق والتوافق

      الصفحة 395
[94 ] ميغيل كاسترو وباربرا إتش ليسكوف: "التسامح البيزنطي العملي والاسترداد 
الاستباقي ، " معاملات ACM على أنظمة الكمبيوتر ، المجلد 20 ، العدد 4 ،الصفحات 
396-461 ، نوفمبر 2002. دوى: 10.1145 / 571637.571640[95] بريان إم أوكي وباربرا 
إتش ليسكوف: " النسخ المتماثل لطابع الرؤية: ابتدائي جديدطريقة النسخ لدعم الأنظمة 
الموزعة عالية التوفر، في 7th ACM Sympo‐سيوم حول مبادئ الحوسبة الموزعة (PODC) ، 
أغسطس 1988. doi:10.1145 / 62546.62549[96 ] باربرا إتش ليسكوف وجيمس كولينج: "تمت 
إعادة النظر في النسخ المتماثل بطابع العرض ، "معهد ماساتشوستس للتكنولوجيا ، تقرير 
تقني MIT-CSAIL-TR-2012-021 ، يوليو2012.[97 ] ليزلي لامبورت: "البرلمان غير 
المتفرغ، " معاملات ACM على الكمبيوترالأنظمة ، المجلد 16 ، العدد 2 ، الصفحات 
133-169 ، مايو 1998. دوى: 10.1145 / 279227.279229[98 ] ليزلي لامبورت: "Paxos 
Made Simple ، " أخبار ACM SIGACT ، المجلد 32 ، العدد4 ، الصفحات 51-58 ، كانون 
الأول (ديسمبر) 2001.[99] توشار ديباك شاندرا ، روبرت جريسيمر ، وجوشوا ريدستون: " 
Paxos Madeمباشر - منظور هندسي، في ندوة ACM 26 حول مبادئ Distributed Computing 
(PODC) ، يونيو 2007.[100 ] روبيرت فان رينيسه: " باكسوس جعلها معقدة بشكل معتدل " 
، cs.cornell.edu ، مارس2011.[101 ] دييغو أونغارو: " الإجماع: تجسير النظرية 
والتطبيق، "أطروحة دكتوراه ، ستانوجامعة فورد ، أغسطس 2014.[102 ] هايدي هوارد ، 
ومالت شوارزكوف ، وأنيل مادافابيدي ، وجون كروكروفت:"انعكاس الطوافة: هل لدينا 
إجماع؟ ، " مراجعة أنظمة تشغيل ACM SIGOPS ،المجلد 49 ، العدد 1 ، الصفحات 12–21 ، 
يناير 2015. دوى: 10.1145 / 2723872.2723876[103 ] أندريه ميديروس: بروتوكول البث 
الذري لـ ZooKeeper: النظرية والبراكيtice ، "كلية العلوم بجامعة آلتو ، مارس 
2012.[104 ] روبيرت فان رينيسي ونيكولاس شيبر وفريد ​​بي شنايدر: " Vive La 
Différ‐ence: Paxos مقابل Viewstamped Replication مقابل Zab ، " IEEE Transactions 
on Dependableوالحوسبة الآمنة ، المجلد 12 ، العدد 4 ، الصفحات 472-484 ، سبتمبر 
2014. doi:10.1109 / TDSC.2014.2355848[105 ] ويل بورتنوي: "الدروس المستفادة من 
تطبيق Paxos، blog.willport‐noy.com14 يونيو 2012.[106 ] هايدي هوارد وجون 
كروكروفت: " Coracle: تقييم الإجماع في Inter‐net Edge "، في المؤتمر السنوي 
لمجموعة الاهتمام الخاصة بـ ACM حول اتصالات البياناتnication (SIGCOMM)، الصفحات 
85-86، أغسطس 2015.دوى: 10.1145 / 2829988.2790010ملخص | 373

      صفحة 396
[107 ] كايل كينجسبري: "اتصل بي ربما: Elasticsearch 1.5.0 "، aphyr.com ، 27 
أبريل2015.[108 ] إيفان كيلي: " BookKeeper Tutorial " github.com ، أكتوبر 
2014.[109 ] كميل فورنييه: " نظم إجماع للمهندس المتشكك، "في Craftالمؤتمر ، 
بودابست ، المجر ، أبريل 2015.[110 ] كينيث بي بيرمان: "تاريخ نموذج النسخ المتماثل 
الافتراضي للمزامنة،" فيالنسخ المتماثل: النظرية والتطبيق ، Springer LNCS ، المجلد 
5959 ، الفصل 6 ، الصفحات 91-120 ، 2010. ISBN: 978-3-642-11293-5 ، دوى: 10.1007 / 
978-3-642-11294-2_6374 | الفصل التاسع: الاتساق والتوافق

      صفحة 397
الجزء الثالثالبيانات المشتقةفي الجزء الأول و الجزء الثاني من هذا الكتاب، اجتمعنا 
من الألف إلى الياء جميع الرئيسيةالاعتبارات التي تدخل في قاعدة البيانات الموزعة ، 
من تخطيط البيانات على القرص ، كل شيءالطريق إلى حدود التناسق الموزع في وجود 
العيوب. ومع ذلك،افترضت هذه المناقشة وجود قاعدة بيانات واحدة فقط في التطبيق.في 
الواقع ، غالبًا ما تكون أنظمة البيانات أكثر تعقيدًا. غالبًا ما تحتاج في تطبيق 
كبيرلتكون قادرًا على الوصول إلى البيانات ومعالجتها بعدة طرق مختلفة ، ولا توجد 
بيانات واحدة‐القاعدة التي يمكن أن تلبي جميع تلك الاحتياجات المختلفة في وقت واحد. 
وبالتالي التطبيقاتعادةً ما يستخدم مزيجًا من عدة مخازن بيانات مختلفة ، وفهارس ، 
وذاكرة التخزين المؤقت ، والتحليل‐نظم ics وما إلى ذلك وتنفيذ آليات لنقل البيانات 
من مخزن واحد إلىاخر.في هذا الجزء الأخير من الكتاب ، سوف ندرس القضايا المتعلقة 
بدمج متعددple أنظمة بيانات مختلفة ، يحتمل أن تكون بنماذج بيانات مختلفة ومحسّنة 
لـأنماط وصول مختلفة ، في بنية تطبيق واحدة متماسكة. هذا الجانب منغالبًا ما يتم 
تجاهل بناء النظام من قبل البائعين الذين يدعون أن منتجهم يمكن أن يرضيisfy جميع 
احتياجاتك. في الواقع ، يعد دمج الأنظمة المتباينة من أكثر الأمور أهميةأشياء tant 
التي يجب القيام بها في تطبيق غير تافه.أنظمة التسجيل والبيانات المشتقةعلى مستوى 
عالٍ ، يمكن تصنيف الأنظمة التي تخزن البيانات وتعالجها في قسمين عريضينالتصنيفات:

      صفحة 398
نظم التسجيليمتلك نظام التسجيل ، المعروف أيضًا باسم مصدر الحقيقة ، النسخة 
الموثوقةمن بياناتك. عندما يتم إدخال بيانات جديدة ، على سبيل المثال كمدخلات 
مستخدم ، يتم كتابتها أولاً هنا.يتم تمثيل كل حقيقة مرة واحدة بالضبط (عادة ما يتم 
تطبيع التمثيل ).إذا كان هناك أي تعارض بين نظام آخر ونظام التسجيل ،فالقيمة في 
نظام التسجيل هي (بحكم التعريف) القيمة الصحيحة.أنظمة البيانات المشتقةالبيانات في 
نظام مشتق هي نتيجة أخذ بعض البيانات الموجودة من نظام آخرالنظام وتحويله أو 
معالجته بطريقة ما. إذا فقدت البيانات المشتقة ،يمكنك إعادة إنشائه من المصدر 
الأصلي. المثال الكلاسيكي هو ذاكرة التخزين المؤقت: البياناتيمكن تقديمها من ذاكرة 
التخزين المؤقت إذا كانت موجودة ، ولكن إذا كانت ذاكرة التخزين المؤقت لا تحتوي على 
ما لديكتحتاج ، يمكنك الرجوع إلى قاعدة البيانات الأساسية. قيم غير طبيعية ، 
فهارسوالآراء المحققة تندرج أيضًا في هذه الفئة. في أنظمة التوصية ،غالبًا ما يتم 
اشتقاق بيانات الملخص التنبؤية من سجلات الاستخدام.من الناحية الفنية ، البيانات 
المشتقة زائدة عن الحاجة ، بمعنى أنها تتكرر.جي المعلومات. ومع ذلك ، غالبًا ما 
يكون ضروريًا للحصول على أداء جيد عند القراءةاستفسارات. غالبًا ما يتم إلغاء 
تسويته . يمكنك اشتقاق العديد من مجموعات البيانات المختلفة من sin‐gle ، مما يتيح 
لك إلقاء نظرة على البيانات من "وجهات نظر" مختلفة.لا تميز جميع الأنظمة بشكل واضح 
بين أنظمة التسجيل والبيانات المشتقةفي الهندسة المعمارية الخاصة بهم ، ولكنه تمييز 
مفيد للغاية ، لأنه يوضحتدفق البيانات عبر نظامك: يوضح أي أجزاء من النظام تحتوي 
على ملفاتالمدخلات والمخرجات وكيف تعتمد على بعضها البعض.معظم قواعد البيانات 
ومحركات التخزين ولغات الاستعلام ليست بطبيعتها نظامسجل أو نظام مشتق. قاعدة 
البيانات هي مجرد أداة: يعود الأمر لك في كيفية استخدامها. اللا يعتمد التمييز بين 
نظام التسجيل ونظام البيانات المشتق علىأداة ، ولكن حول كيفية استخدامها في التطبيق 
الخاص بك.من خلال توضيح البيانات المستمدة من أي بيانات أخرى ، يمكنك إحضارهاالوضوح 
لبنية نظام مربكة. ستكون هذه النقطة قيد التشغيلالموضوع طوال الوقت الجزء الثالث من 
هذا الكتاب.نظرة عامة على الفصولسنبدأ في الفصل 10 بفحص أنظمة تدفق البيانات 
الموجهة بالدُفعات مثلMapReduce ، وإظهار كيف أنها توفر لنا أدوات ومبادئ جيدة 
لبناء كبيرنظم البيانات على نطاق واسع. في الفصل 11 سنأخذ هذه الأفكار ونطبقها على 
البياناتالتي تسمح لنا بالقيام بنفس أنواع الأشياء بتأخيرات أقل. ؟؟؟ كونيتضمن 
الكتاب من خلال استكشاف أفكار حول كيفية بناء موثوقة وقابلة للتطوير وتطبيقات قابلة 
للصيانة في المستقبل.

      الصفحة 399
الفصل 10تجهيز الدفعاتلا يمكن أن يكون النظام ناجحًا إذا كان شديد التأثر بشخص 
واحد. ذات مرةالتصميم الأولي مكتمل وقوي إلى حد ما ، يبدأ الاختبار الحقيقي عندما 
يكون هناك أشخاص كثيرونوجهات نظر مختلفة إجراء تجاربهم الخاصة.—دونالد كنوثفي 
القسمين الأولين من هذا الكتاب تحدثنا كثيرا عن طلبات و الاستفسارات ، والردود أو 
النتائج المقابلة . هذا النمط من معالجة البيانات يفترض في كثيرأنظمة البيانات 
الحديثة: تطلب شيئًا ما ، أو ترسل تعليمات ، والبعض الآخرفي وقت لاحق يعطيك النظام 
(نأمل) إجابة. قواعد البيانات والمخابئ والبحثتعمل الفهارس وخوادم الويب والعديد من 
الأنظمة الأخرى بهذه الطريقة.في مثل هذه الأنظمة عبر الإنترنت ، سواء كان متصفح ويب 
يطلب صفحة أو مكالمة خدمة‐في واجهة برمجة تطبيقات بعيدة ، نفترض عمومًا أن الطلب تم 
تشغيله بواسطة مستخدم بشري ،وأن المستخدم ينتظر الرد. لا ينبغي أن ينتظروا 
طويلاالاستجابة ، لذلك فإننا نولي الكثير من الاهتمام لوقت استجابة هذه الأنظمة 
(انظر"وصف الأداء" في الصفحة 11).الويب ، والأعداد المتزايدة من واجهات برمجة 
التطبيقات المستندة إلى HTTP / REST ، جعلتأسلوب الطلب / الاستجابة للتفاعل شائع 
جدًا بحيث يسهل اعتباره أمرًا مفروغًا منه.لكن يجب أن نتذكر أنها ليست الطريقة 
الوحيدة لبناء الأنظمة ، وذلكالمناهج الأخرى لها مزاياها أيضًا. دعونا نميز بين 
ثلاثة أنواع مختلفة من النظامتيم:الخدمات (أنظمة عبر الإنترنت)خدمة تنتظر وصول طلب 
أو تعليمات من العميل. عندما يكون المرءتلقيها ، تحاول الخدمة التعامل معها في أسرع 
وقت ممكن وترسل ردًاعودة. عادة ما يكون وقت الاستجابة هو المقياس الأساسي لأداء 
الخدمة ،377

      الصفحة 400
وغالبًا ما يكون التوفر مهمًا جدًا (إذا لم يتمكن العميل من الوصول إلى الخدمة ، 
فإنمن المحتمل أن يتلقى المستخدم رسالة خطأ).أنظمة معالجة الدفعات (أنظمة غير متصلة 
بالإنترنت)يأخذ نظام معالجة الدُفعات كمية كبيرة من بيانات الإدخال ، ويدير مهمة 
لإنتاجها ‐cess it ، وتنتج بعض بيانات الإخراج. غالبًا ما تستغرق الوظائف بعض الوقت 
(من القليلمن دقائق إلى عدة أيام) ، لذلك لا يوجد عادةً مستخدم ينتظر انتهاء 
المهمة‐العش. بدلاً من ذلك ، غالبًا ما تتم جدولة الوظائف المجمعة للتشغيل بشكل 
دوري (على سبيل المثال ، مرة واحدةيوم). عادةً ما يكون مقياس الأداء الأساسي لوظيفة 
المجموعة هو الإنتاجية(الوقت المستغرق لسحق مجموعة بيانات إدخال بحجم معين). نحن 
ديسلعنة معالجة دفعة في هذا الفصل.أنظمة معالجة الدفق (أنظمة شبه الوقت الحقيقي)تتم 
معالجة الدفق في مكان ما بين الإنترنت وغير متصل / دفعة (لذا فهي بعضدعا مرات قرب 
الوقت الحقيقي أو nearline التجهيز). مثل معالجة الدُفعات ، أيستهلك معالج التدفق 
المدخلات وينتج مخرجات (بدلاً من الاستجابة‐جي للطلبات). ومع ذلك ، تعمل الوظيفة 
على الأحداث بعد وقت قصير من حدوثها ،بينما تعمل وظيفة الدُفعات على مجموعة ثابتة 
من بيانات الإدخال. هذا الاختلاف يسمحأنظمة معالجة الدفق لديها زمن انتقال أقل من 
نظام الدُفعات المكافئة‐تيمس. نظرًا لأن معالجة الدفق تعتمد على معالجة الدُفعات ، 
فإننا نناقشها في Chap‐ثالثًا 11 .كما سنرى في هذا الفصل ، تعد المعالجة الدفعية 
لبنة مهمة فيالسعي لبناء تطبيقات موثوقة وقابلة للتطوير ويمكن صيانتها. على سبيل 
المثال ، Map‐Reduce ، خوارزمية معالجة مجمعة نُشرت في عام 2004 [1] كان (ربما 
انتهى-بحماس) تسمى "الخوارزمية التي تجعل Google قابلة للتطوير على نطاق واسع" [ 2 
]. هو - هيتم تنفيذه لاحقًا في أنظمة بيانات مفتوحة المصدر مختلفة ، بما في 
ذلكHadoop و CouchDB و MongoDB.ومع ذلك ، فإن MapReduce هو أيضًا في بعض النواحي 
خطوة إلى الوراء من أكثر تعقيدًاتقنيات المعالجة المتوازية التي تم تطويرها لمخازن 
البيانات لسنوات عديدةقبل [3، 4 ]. على الرغم من أن أهمية MapReduce تتراجع الآن [ 
5 ] ، إلا أنها لا تزال قائمةيستحق الفهم ، لأنه يوفر صورة واضحة عن سبب وكيفية 
إنتاج الدُفعاتالتوقف مفيد.في الواقع ، تعد المعالجة الدفعية شكلًا قديمًا جدًا من 
أشكال الحوسبة. قبل وقت طويل من البرمجةتم اختراع أجهزة الكمبيوتر الرقمية ، وآلات 
جدولة البطاقات المثقبة - مثل Hol‐آلات ليريث المستخدمة في تعداد الولايات المتحدة 
لعام 1890 [6 ] - نفذت بشكل شبه ميكانيكيشكل من أشكال المعالجة الدفعية لحساب 
الإحصائيات الإجمالية من المدخلات الكبيرة. وخريطةتقليل يحمل تشابهًا غريبًا مع 
تصنيف بطاقة IBM الكهروميكانيكيالآلات التي كانت تستخدم على نطاق واسع لمعالجة 
بيانات الأعمال في أربعينيات وخمسينيات القرن الماضي[7]. كالعادة ، يميل التاريخ 
إلى تكرار نفسه.في هذا الفصل ، سوف نلقي نظرة على MapReduce والعديد من خوارزمية 
معالجة الدُفعات الأخرىrithms والأطر ، واستكشاف كيفية استخدامها في أنظمة البيانات 
الحديثة. ولكن378 | الفصل 10: معالجة الدُفعات

      صفحة 401
أنا. يحب بعض الأشخاص الإشارة إلى أن القط غير ضروري هنا ، حيث يمكن تقديم ملف 
الإدخال مباشرة كملفحجة ل awk . ومع ذلك ، فإن خط الأنابيب الخطي يكون أكثر وضوحًا 
عند كتابته بهذه الطريقة.أولاً ، للبدء ، سننظر في معالجة البيانات باستخدام أدوات 
Unix القياسية. حتى لوأنت على دراية بها بالفعل ، يجدر تذكير أنفسنا بفلسفة 
Unix‐عفوًا ، لأن الأفكار والأساليب من Unix تنتقل مباشرةً إلى النطاق الواسع 
،أنظمة البيانات الموزعة غير المتجانسة.معالجة الدُفعات باستخدام أدوات Unixلنبدأ 
بمثال بسيط. لنفترض أن لديك خادم ويب يلحق سطرًا بملفملف السجل في كل مرة يخدم فيها 
طلبًا. على سبيل المثال ، استخدام سجل الوصول الافتراضي nginxالتنسيق ، قد يبدو سطر 
واحد من السجل كما يلي:216.58.210.78 - - [27 / فبراير / 2015: 17: 55: 11 +0000] 
"GET /css/typography.css HTTP / 1.1"200 3377 "http://martin.kleppmann.com/" 
"Mozilla / 5.0 (Macintosh ؛ Intel Mac OS X10_9_5) AppleWebKit / 537.36 (KHTML ، 
مثل Gecko) Chrome / 40.0.2214.115 Safari / 537.36 "(هذا في الواقع سطر واحد ، تم 
تقسيمه إلى أسطر متعددة هنا لسهولة القراءة).هناك الكثير من المعلومات في هذا السطر 
الواحد. من أجل تفسيرها ، تحتاج إلى النظرعند تعريف تنسيق السجل ، وهو كالتالي:$ 
remote_addr - $ remote_user [$ time_local] "$ request"$ status $ body_bytes_sent 
"$ http_referer" "$ http_user_agent"يشير هذا السطر من السجل إلى أنه في 27 فبراير 
2015 الساعة 17:55:11 بالتوقيت العالمي المنسق ، الخادمتلقي طلبًا للملف 
/css/typography.css من عنوان IP الخاص بالعميل216.58.210.78. لم تتم مصادقة 
المستخدم ، لذلك تم تعيين $ remote_user على شرطة ( - ).كانت حالة الاستجابة 200 ، 
أي أن الطلب كان ناجحًا ، وكانت الاستجابة3377 بايت في الحجم. تم تضمين الملف في 
الصفحة على URL http: //martin.kleppmann.com/ ومتصفح الويب كان Chrome 40.تحليل 
بسيط للسجليمكن لأدوات مختلفة أخذ ملفات السجل هذه وإنتاج تقارير جميلة عن موقع 
الويب الخاص بكحركة المرور ، ولكن من أجل التمرين ، فلنقم ببناء منطقتنا الخاصة ، 
باستخدام أدوات Unix الأساسية. إلى عن علىعلى سبيل المثال ، لنفترض أنك تريد العثور 
على أكثر 5 صفحات شيوعًا على موقع الويب الخاص بك. يمكنك ان تفعلهذا في غلاف Unix 
على النحو التالي: icat /var/log/nginx/access.log |awk '{print $ 7}' |فرز |uniq 
-c |فرز -r -n |رئيس -n 5معالجة الدُفعات باستخدام أدوات Unix | 379

      صفحة 402
اقرأ ملف السجل.قسّم كل سطر إلى حقول بمسافة بيضاء ، وأخرج الحقل السابع فقطمن كل 
سطر ، والذي يكون هو عنوان URL المطلوب. في المثال أعلاه ،سيكون هذا 
/css/typography.css .فرز قائمة عناوين URL المطلوبة أبجديًا . إذا تم طلب بعض 
URLمرات n ، ثم بعد الفرز ، يحتوي الملف على نفس عنوان URL يتكرر n مرة في 
ملفصف.يقوم الأمر uniq بتصفية الأسطر المكررة في الإدخال عن طريق التحقق مما إذا 
كانخطان متجاوران متماثلان. و -c الخيار يقول أن عداد أيضا إخراج: لكل عنوان URL 
مميز ، فإنه يعرض عدد المرات التي ظهر فيها عنوان URL هذا في الإدخال.يقوم الفرز 
الثاني بالفرز حسب الرقم ( -n ) في بداية كل سطر ، وهو ملفعدد المرات التي تم فيها 
طلب عنوان URL. ثم تقوم بإرجاع النتائج في الاتجاه المعاكس ( -r ) الترتيب ، أي 
بأكبر رقم أولاً.أخيرًا ، يخرج الرأس فقط أول 5 أسطر ( -n 5 ) من الإدخال ، ويتجاهل 
الباقي.يبدو إخراج هذه السلسلة من الأوامر كما يلي:4189 / favicon.ico3631 
/2013/05/24/improving-security-of-ssh-private-keys.html2124 
/2012/12/05/schema-evolution-in-avro-protocol-buffers-thrift.html1369 /915 
/css/typography.cssعلى الرغم من أن سطر الأوامر أعلاه يبدو غامضًا بعض الشيء إذا 
لم تكن معتادًا على Unixأدوات قوية بشكل لا يصدق. سيعالج غيغابايت من ملفات السجل 
في غضون ثوانٍ‐onds ، ويمكنك بسهولة تعديل التحليل ليناسب احتياجاتك. على سبيل 
المثال ، إذا كنتتريد حذف ملفات CSS من التقرير ، قم بتغيير الوسيطة awk إلى '$ 7! 
~ /\.css$/{print $ 7} ' . إذا كنت ترغب في حساب أهم عناوين IP للعميل بدلاً من 
الصفحات العلوية ،قم بتغيير وسيطة awk إلى "{print $ 1}" . وهكذا.ليس لدينا مساحة 
في هذا الكتاب لشرح أدوات Unix بالتفصيل ، لكنها كثيرة جدًاتستحق التعلم عنها. من 
المدهش أنه يمكن إجراء العديد من تحليلات البيانات في عدد قليلدقائق باستخدام مزيج 
من awk و sed و grep و sort و uniq و xargs وهمأداء جيد بشكل مدهش [8].سلسلة 
الأوامر مقابل البرنامج المخصصبدلاً من هذه السلسلة من أوامر Unix ، يمكنك تخيل 
كتابة pro بسيط.غرام لفعل نفس الشيء. على سبيل المثال ، في Ruby ، ​​قد يبدو الأمر 
كالتالي:التهم = تجزئة . جديد ( 0 )380 | الفصل 10: معالجة الدُفعات

      صفحة 403
ملف . فتح ( '/var/log/nginx/access.log' ) هل | ملف |ملف . كل فعل | خط |url = سطر 
. انقسام [ 6 ]التهم [ url ] + = 1نهايةنهايةtop5 = التهم . خريطة { | عنوان url ، 
عدد | [ عدد ، url ] } . فرز . عكس [ 0 . . . 5 ]أعلى 5 . كل { | العد ، url | يضع 
" # { count } # { url } " }التهم هو جدول تجزئة يحتفظ بعداد لعدد المرات التي 
رأيناهاكل عنوان URL. العداد هو صفر افتراضيًا.من كل سطر في السجل ، نأخذ عنوان URL 
ليكون المسافة البيضاء السابعة-منفصل (فهرس المصفوفة هنا هو 6 لأن مصفوفات روبي 
مفهرسة بصفر).قم بزيادة العداد الخاص بعنوان URL في السطر الحالي من السجل.قم بفرز 
محتويات جدول التجزئة حسب قيمة العداد تنازليًا ، واتخاذ أعلى 5إدخالات.اطبع أعلى 5 
إدخالات.هذا ليس موجزًا ​​مثل سلسلة أنابيب Unix ، ولكنه قابل للقراءة إلى حد ما 
وأي منهاالاثنان اللذان تفضلهما يتعلقان جزئيًا بالذوق. ومع ذلك ، إلى جانب التركيب 
السطحيالتشنجات اللاإرادية بين الاثنين ، هناك فرق كبير في تدفق التنفيذ ، 
والذييصبح واضحًا إذا قمت بإجراء هذا التحليل على ملف كبير.الفرز مقابل التجميع في 
الذاكرةيحتفظ برنامج Ruby النصي بجدول تجزئة في الذاكرة لعناوين URL ، حيث يتم 
تعيين كل عنوان URLإلى عدد المرات التي شوهدت فيها. لا يحتوي مثال خط أنابيب 
يونكسجدول التجزئة هذا ، ولكنه يعتمد بدلاً من ذلك على فرز قائمة عناوين URL التي 
يحدث فيها تعدديتم تكرار rences من نفس عنوان URL ببساطة.أي نهج أفضل؟ يعتمد ذلك 
على عدد عناوين URL المختلفة التي لديك. بالنسبة لمعظممواقع الويب الصغيرة إلى 
متوسطة الحجم ، فربما يمكنك احتواء جميع عناوين URL المميزة وعدادكل عنوان URL ، في 
(على سبيل المثال) 1 غيغابايت من الذاكرة. في هذا المثال ، فإن مجموعة العمل 
للوظيفة (ملفمقدار الذاكرة التي تحتاج إليها المهمة للوصول العشوائي) يعتمد فقط 
علىعدد عناوين URL المميزة: إذا كان هناك مليون إدخال سجل لعنوان URL واحد ، فإن 
المسافةمطلوب في جدول التجزئة لا يزال عنوان URL واحدًا فقط بالإضافة إلى حجم 
العداد. اذا هذامجموعة العمل صغيرة بما يكفي ، يعمل جدول التجزئة في الذاكرة بشكل 
جيد - حتى على الكمبيوتر المحمول.من ناحية أخرى ، إذا كانت مجموعة عمل الوظيفة أكبر 
من الذاكرة ، فسيتم الفرزالنهج لديه ميزة أنه يمكن أن تستخدم الأقراص بكفاءة. انها 
نفس principle كما ناقشنا في "SSTables و LSM-tree" في الصفحة 74 : يمكن أن تكون 
أجزاء من البياناتمرتبة في الذاكرة ، مكتوبة على القرص كملفات مقطعية ، ثم عدة 
مقاطع مرتبةمعالجة الدُفعات باستخدام أدوات Unix | 381

      صفحة 404
يمكن دمج الإشارات في ملف مصنف أكبر. يحتوي Mergesort على ترخيص وصول تسلسليالخرشنة 
التي تعمل بشكل جيد على الأقراص. (تذكر أن التحسين من أجل الإدخال / الإخراج 
التسلسلي كان عبارة عن ملفموضوع متكرر في الفصل 3 . يظهر نفس النمط هنا مرة أخرى.)و 
نوع الأداة في GNU Coreutils (لينكس) تلقائيا يعالج أكبر-التقرير بقراءةمجموعات 
بيانات الذاكرة عن طريق الانسكاب على القرص ، ويقوم تلقائيًا بموازنة الفرز عبرنوى 
متعددة لوحدة المعالجة المركزية [9]. هذا يعني أن السلسلة البسيطة لأوامر يونكس 
أعلاهيتطور بسهولة إلى مجموعات بيانات كبيرة ، دون نفاد الذاكرة. عنق الزجاجة هومن 
المحتمل أن يكون المعدل الذي يمكن به قراءة ملف الإدخال من القرص.فلسفة يونكسليس من 
قبيل المصادفة أننا تمكنا من تحليل ملف السجل بسهولة تامة باستخدام سلسلة منأوامر 
كما في المثال أعلاه: كان هذا في الواقع أحد أفكار التصميم الرئيسية لـيونكس ، ولا 
يزال مناسبًا بشكل مذهل اليوم. دعونا نلقي نظرة عليها بمزيد من العمقحتى نتمكن من 
استعارة الأفكار من Unix [10 ].دوج ماكلروي ، مخترع أنابيب يونكس ، وصفها لأول مرة 
على هذا النحو في عام 1964 [ 11]:"يجب أن يكون لدينا بعض الطرق لربط البرامج مثل 
[أ] خرطوم الحديقة - المسمار فيهمقطع آخر عندما يصبح من الضروري تدليك البيانات 
بطريقة أخرى. هذا الطريقة I / O أيضًا. " توقف تشبيه السباكة وفكرة توصيل البرامجمع 
الأنابيب أصبحت جزءًا مما يُعرف الآن بفلسفة Unix - مجموعة منأصبحت مبادئ التصميم 
شائعة بين مطوري ومستخدمي Unix. الوصفت الفلسفة عام 1978 على النحو التالي [12 
،13]:1. اجعل كل برنامج يفعل شيئًا واحدًا جيدًا. للقيام بعمل جديد ، قم بالبناء من 
جديد بدلاً منتعقد البرامج القديمة بإضافة "ميزات" جديدة.2. توقع أن تصبح مخرجات كل 
برنامج مدخلاً لبرنامج آخر ، حتى الآنبرنامج غير معروف. لا تفسد الإخراج بمعلومات 
دخيلة. يتجنبتنسيقات الإدخال العمودية أو الثنائية الصارمة. لا تصر على المدخلات 
التفاعلية.3. تصميم وبناء البرامج ، حتى أنظمة التشغيل ، ليتم تجربتها مبكرًا ، ومن 
الناحية المثالية داخلهاأسابيع. لا تتردد في التخلص من الأجزاء الخرقاء وإعادة 
بنائها.4. يفضل استخدام الأدوات للمساعدة غير الماهرة لتخفيف مهمة البرمجة ، حتى 
لوعليك الالتفاف لبناء الأدوات وتوقع التخلص من بعضها بعد ذلكلقد انتهيت من 
استخدامها.هذا النهج - الأتمتة ، النماذج الأولية السريعة ، التكرار المتزايد ، 
الوجودسهل التجريب ، ويقسم المشاريع الكبيرة إلى قابلة للإدارةقطع - تبدو بشكل 
ملحوظ مثل حركات Agile و DevOps اليوم. سور‐من المستغرب أن القليل قد تغير في أربعة 
عقود.و نوع الأداة هي مثال عظيم على البرنامج الذي يفعل شيئا واحدا جيدا. يمكن 
القولتطبيق فرز أفضل من معظم لغات البرمجة الموجودة في ملفاتالمكتبة القياسية (التي 
لا تتسرب إلى القرص ولا تستخدم خيوط متعددة ، حتى382 | الفصل 10: معالجة الدُفعات

      صفحة 405
ثانيا. مثال آخر على الواجهة الموحدة هو عناوين URL و HTTP ، أسس الويب. يحدد عنوان 
URLشيء معين (مورد) على موقع ويب ، ويمكنك الارتباط بأي عنوان URL من أي موقع ويب 
آخر. مستخدم لديه ملفوبالتالي يمكن لمتصفح الويب التنقل بسلاسة بين المواقع عن طريق 
اتباع الروابط ، على الرغم من أن الخوادم قد تكون كذلكتديرها منظمات غير مرتبطة 
تمامًا. يبدو هذا واضحًا اليوم ، لكنه كان فكرة رئيسية تجاه ماكوفي الويب هو النجاح 
الذي هو عليه اليوم.عندما يكون ذلك مفيدًا). ومع ذلك ، فإن الفرز بالكاد مفيد في 
العزلة. انه فقطتصبح قوية بالاشتراك مع أدوات Unix الأخرى ، مثل uniq . من شأنهكان 
من السهل على المنفذ من نوع ما أن يضيف uniq كميزة ، لكنهم قاومواالاغراء.تسمح لنا 
قشرة يونكس مثل bash بتكوين هذه البرامج الصغيرة بسهولة بشكل مفاجئوظائف معالجة 
البيانات القوية. على الرغم من أن العديد من هذه البرامج كتبهامجموعات مختلفة من 
الأشخاص ، يمكن ضمهم معًا بطرق مرنة. ماذا فعلتهل يونكس لتمكين هذا التركيب؟واجهة 
موحدةإذا كنت تتوقع أن يصبح إخراج أحد البرامج مدخلاً لبرنامج آخر ،هذا يعني أن تلك 
البرامج يجب أن تستخدم نفس تنسيق البيانات - بمعنى آخر ،واجهة بصرية. إذا كنت تريد 
أن تكون قادرًا على توصيل إخراج أي برنامج بأي محترفغرام ، وهذا يعني أن جميع 
البرامج يجب أن تستخدم نفس واجهة الإدخال / الإخراج.في Unix ، هذه الواجهة عبارة عن 
ملف (أو بشكل أكثر دقة ، واصف ملف). الملف هو مجرد ملفالتسلسل المطلوب للبايت. لأن 
هذه واجهة بسيطة ، والعديد منها مختلفيمكن تمثيل الأشياء باستخدام نفس الواجهة: ملف 
فعلي على نظام الملفات ، أقناة اتصال لعملية أخرى (مقبس يونكس ، stdin ، stdout ) ، 
جهازسائق (قل / dev / audio أو / dev / lp0 ) ، مقبس يمثل اتصال TCP ، وهكذاعلى. من 
السهل اعتبار هذا أمرًا مفروغًا منه ، لكن من اللافت للنظر حقًا أن هذه هي 
ذاتهايمكن لأشياء مختلفة أن تشترك في واجهة موحدة ، بحيث يمكن توصيلها ببعضها 
بسهولة. ثانياحسب الاصطلاح ، تعامل العديد من برامج Unix (وليس كلها) تسلسل البايت 
هذا على أنهنص ASCII. استخدم مثال تحليل السجل أعلاه هذه الحقيقة: awk و sort و 
uniq و headتعامل الجميع مع ملف الإدخال الخاص بهم كقائمة من السجلات مفصولة بـ \ n 
(سطر جديد ، ASCII 0x0A )حرف. اختيار \ n عشوائي - يمكن القول ، فاصل سجل ASCII 
0x1Eكان من الممكن أن يكون خيارًا أفضل ، لأنه مخصص لهذا الغرض [ 14] - ولكن في 
أيالحالة ، حقيقة أن جميع هذه البرامج قد تم توحيدها باستخدام نفس السجل sep‐arator 
يسمح لهم بالتشغيل البيني.يعتبر تحليل كل سجل (أي سطر إدخال) أكثر غموضًا. أدوات 
يونكس شائعةقسّم السطر إلى حقول بمسافات بيضاء أو أحرف جدولة ، لكن CSV (مفصولة 
بفواصل) ،يتم أيضًا استخدام ترميزات مفصولة عن طريق الأنابيب وغيرها. حتى أداة 
بسيطة إلى حد ما مثل xargsيحتوي على نصف دزينة من خيارات سطر الأوامر لتحديد كيفية 
تحليل مدخلاته.معالجة الدُفعات باستخدام أدوات Unix | 383

      صفحة 406
تعمل الواجهة الموحدة لنص ASCII في الغالب ، لكنها ليست جميلة تمامًا: لدينااستخدم 
مثال تحليل السجل {print $ 7} لاستخراج عنوان URL ، والذي لا يمكن قراءته كثيرًا.في 
عالم مثالي قد يكون هذا هو {print $ request_url} أو شيء من هذا القبيلمن هذا 
النوع. سنعود إلى هذه الفكرة لاحقًا.على الرغم من أنها ليست مثالية ، حتى بعد عقود 
من الزمان ، لا تزال الواجهة الموحدة ليونيكسشيء رائع. لا توجد أجزاء كثيرة من 
البرامج تتفاعل وتتألف من ملفاتكما تفعل أدوات Unix: لا يمكنك تمرير محتويات حساب 
بريدك الإلكتروني بسهولة وسجل التسوق عبر الإنترنت من خلال أداة تحليل مخصصة ، في 
جدول بيانات ، ونشر النتائج على شبكة اجتماعية أو موقع wiki. اليوم هو استثناء وليس 
القاعدة ،للحصول على برامج تعمل معًا بسلاسة كما تفعل أدوات Unix.حتى قواعد 
البيانات التي لها نفس نموذج البيانات غالبًا لا تجعل من السهل إخراج البيانات 
منهاواحد والآخر. هذا يؤدي إلى بلقنة البيانات.فصل المنطق والأسلاكميزة أخرى مميزة 
لأدوات Unix هي استخدامها للإدخال القياسي ( stdin ) والإخراج القياسي ( stdout ). 
إذا قمت بتشغيل برنامج ولم تحدد أي شيء آخر ،يأتي stdin من لوحة المفاتيح ويذهب 
stdout إلى الشاشة. ومع ذلك ، يمكنك ذلكخذ أيضًا مدخلات من ملف و / أو أعد توجيه 
الإخراج إلى ملف. تتيح لك الأنابيب إرفاق ملفstdout من عملية واحدة إلى stdin 
لعملية أخرى (مع ذاكرة صغيرةالمخزن المؤقت ، ودون كتابة دفق البيانات الوسيطة 
بالكامل على القرص).بالطبع لا يزال بإمكان البرنامج قراءة الملفات وكتابتها مباشرةً 
إذا احتاج إلى ذلك ، غير نظام Unixيعمل النهج بشكل أفضل إذا لم يقلق البرنامج بشأن 
مسارات ملفات معينة ،يستخدم ply stdin و stdout . يسمح هذا لمستخدم shell بتوصيل 
المدخلات والمخرجات بتنسيقمهما كانت الطريقة التي يريدون ؛ البرنامج لا يعرف أو 
يهتم بمكان الإدخالجي من وأين سيذهب الإخراج. (يمكن للمرء أن يقول أن هذا شكل من 
أشكال الكوpling ، الربط المتأخر [ 15] أو عكس التحكم [ 16 ].) فصل المدخلات / 
المخرجاتتسهل الأسلاك من منطق البرنامج تكوين الأدوات الصغيرة في أنظمة 
أكبر.تيمس.يمكنك حتى كتابة برامجك الخاصة ودمجها مع الأدوات المتوفرةبواسطة نظام 
التشغيل. يحتاج برنامجك فقط إلى قراءة المدخلات من stdin وكتابة الإخراج إلى stdout 
، ويمكن أن تشارك في خطوط أنابيب معالجة البيانات. في السجلمثال على التحليل ، 
يمكنك كتابة أداة تترجم سلاسل وكيل المستخدم إلى المزيدمعرّفات المتصفح المعقولة ، 
أو أداة تترجم عناوين IP إلى رموز البلدان ،وببساطة قم بتوصيله بخط الأنابيب. و نوع 
البرنامج لا يهمني سواء كان ذلك COM-التواصل مع جزء آخر من نظام التشغيل أو ببرنامج 
مكتوب بواسطةأنت.ومع ذلك ، هناك حدود لما يمكنك القيام به مع stdin و stdout . 
البرامج التيتحتاج إلى مدخلات أو مخرجات متعددة ممكنة ولكنها صعبة. لا يمكنك توجيه 
برنامج384 | الفصل 10: معالجة الدُفعات

      صفحة 407
ثالثا. إلا باستخدام أداة منفصلة ، مثل netcat أو curl . بدأ يونكس بمحاولة تمثيل 
كل شيء على أنهمن الملفات ، لكن واجهة برمجة تطبيقات مآخذ BSD انحرفت عن هذا 
الاصطلاح [17]. أنظمة تشغيل البحث خطة 9 ويعتبر Inferno أكثر اتساقًا في استخدامهم 
للملفات: فهم يمثلون اتصال TCP كملف في / net / tcp [ 18 ].الإخراج في اتصال الشبكة 
[17، 18]. iii إذا فتح أحد البرامج الملفات مباشرة للقراءة‐الكتابة والكتابة ، أو 
بدء برنامج آخر كعملية فرعية ، أو فتح شبكة اتصالnection ، ثم يتم توصيل I / O 
بواسطة البرنامج نفسه. لا يزال من الممكن تكوينه(من خلال خيارات سطر الأوامر ، على 
سبيل المثال) ولكن مرونة توصيل المدخلاتويتم تقليل النواتج في الغلاف.الشفافية 
والتجريبجزء مما يجعل أدوات Unix ناجحة جدًا هو أنها تجعل من السهل جدًا رؤية 
ماذايجري:• عادةً ما يتم التعامل مع ملفات الإدخال إلى أوامر Unix على أنها غير 
قابلة للتغيير. هذهيعني أنه يمكنك تشغيل الأوامر بقدر ما تريد ، ومحاولة 
مختلفةخيارات سطر الأوامر ، دون إتلاف ملفات الإدخال.• يمكنك إنهاء خط الأنابيب في 
أي نقطة ، وتوجيه الإخراج إلى حجم أقل ، والنظر إليهمعرفة ما إذا كان لديه الشكل 
المتوقع. هذا شيء عظيم لتصحيح الأخطاء.• يمكنك كتابة إخراج مرحلة واحدة من خطوط 
الأنابيب إلى ملف ، واستخدام هذا الملف كمدخلإلى المرحلة التالية. يتيح لك ذلك 
إعادة تشغيل المرحلة اللاحقة دون إعادة تشغيل ملفخط الأنابيب بأكمله.وبالتالي ، على 
الرغم من أن أدوات Unix غير واضحة تمامًا ، إلا أن الأدوات البسيطة مقارنةً 
بالاستعلام الأمثلmizer من قاعدة البيانات العلائقية ، فإنها تظل مفيدة بشكل مثير 
للدهشة ، خاصة بالنسبة للتجربة‐الإرشاد.ومع ذلك ، فإن أكبر قيود على أدوات Unix هو 
أنها تعمل فقط على واحدآلة - وهنا يأتي دور أدوات مثل Hadoop.MapReduce وأنظمة 
الملفات الموزعةMapReduce يشبه إلى حد ما أدوات Unix ، ولكنه موزع عبر الآلاف من 
ملفاتالآلات. مثل أدوات Unix ، إنها قوة غاشمة إلى حد ما ، لكنها فعالة بشكل 
مدهشأداة. وظيفة MapReduce واحدة يمكن مقارنتها بعملية Unix واحدة: فهي تستغرق 
واحدًا أوالمزيد من المدخلات وينتج واحدًا أو أكثر من المخرجات.كما هو الحال مع 
معظم أدوات Unix ، لا يؤدي تشغيل وظيفة MapReduce عادةً إلى تعديل ملفالمدخلات ، 
وليس لها أي آثار جانبية بخلاف إنتاج المخرجات. الخروج-تتم كتابة ملفات put مرة 
واحدة بطريقة تسلسلية (وليس تعديل أي جزء موجود من ملفملف بمجرد كتابته).MapReduce 
وأنظمة الملفات الموزعة | 385

      صفحة 408
رابعا. أحد الاختلافات هو أنه مع HDFS ، يمكن جدولة مهام الحوسبة للتشغيل على 
الجهاز الذي يخزن ملفنسخة من ملف معين ، بينما عادةً ما تحتفظ مخازن الكائنات 
بالتخزين والحساب منفصلين. القراءة منيتمتع القرص المحلي بميزة أداء إذا كان عرض 
النطاق الترددي للشبكة يمثل عنق الزجاجة. لاحظ أنه إذا تم مسح الترميزالمستخدمة ، 
يتم فقد ميزة الموقع ، لأنه يجب دمج البيانات من العديد من الأجهزة من أجلإعادة 
تكوين الملف الأصلي [ 23].بينما تستخدم أدوات Unix stdin و stdout كمدخلات وإخراج ، 
تتم قراءة مهام MapReduceوكتابة الملفات على نظام ملفات موزع. في تنفيذ Hadoop ل 
Map‐تقليل ، يسمى نظام الملفات هذا HDFS (نظام الملفات الموزعة Hadoop) ، وهو 
مفتوحمصدر إعادة تنفيذ Google's GFS [ 19 ].يعتمد HDFS على مبدأ عدم المشاركة : كل 
​​آلة للأغراض العامة في ملفيحتوي مركز البيانات على بعض الأقراص المرفقة به ، 
ويقوم HDFS (من الناحية النظرية) بإنشاء قرص كبيرنظام ملفات يمكنه استخدام المساحة 
الموجودة على كل هذه الأقراص. يقوم HDFS بتشغيل العملية الخفية علىكل جهاز ، مما 
يعرض خدمة الشبكة التي تسمح للعقد الأخرى بالوصول إلى الملفاتالمخزنة على هذا 
الجهاز. يقوم خادم مركزي يسمى NameNode بتتبع أي ملفيتم تخزين الكتل على أي جهاز.من 
أجل تحمل فشل الجهاز والقرص ، يتم نسخ كتل الملفات على عدة ملفاتالآلات. قد يعني 
النسخ المتماثل ببساطة عدة نسخ من نفس البيانات على عدة نسخالآلات ، كما في الفصل 
5، أو مخطط ترميز محو مثل أكواد Reed-Solomon ،الذي يسمح باستعادة البيانات 
المفقودة مع تخزين أقل من النسخة المتماثلة الكاملةنشوئها [20 ]. تشبه التقنيات 
RAID ، والتي توفر التكرار عبرعدة أقراص متصلة بنفس الجهاز ؛ الفرق هو أنه في ملف 
موزعيمر النظام والوصول إلى الملفات والنسخ المتماثل عبر شبكة مركز بيانات 
تقليديةبدون أجهزة خاصة.يتناقض نهج لا شيء مشترك مع التخزين المتصل بالشبكة (NAS) 
وبنيات شبكة منطقة التخزين (SAN) ، حيث يتم توفير التخزين المشترك بواسطة ملفجهاز 
تخزين مركزي. غالبًا ما تستخدم هذه الأجهزة أجهزة مخصصة وخاصةالبنية التحتية للشبكة 
مثل القناة الليفية. (في بنية SAN / NAS ، فردي‐قد لا تزال الأجهزة تحتوي على أقراص 
خاصة بها ، ولكن يتم استخدامها فقط من قبل العامل المحلينظام ating وليس كتخزين 
مشترك.)لقد تم توسيع نطاق HDFS جيدًا: في وقت كتابة هذا التقرير ، يتم تشغيل أكبر 
عمليات نشر HDFSعشرات الآلاف من الآلات ، بسعة تخزين مجمعة لمئات بيتابايت [21 ]. 
أصبح هذا النطاق الواسع قابلاً للتطبيق بسبب تكلفة تخزين البيانات والوصول إلى HDFS 
، باستخدام أجهزة سلعة وبرامج مفتوحة المصدر ، كثيرأقل من السعة المكافئة على جهاز 
تخزين مخصص [ 22 ].توجد العديد من أنظمة الملفات الموزعة الأخرى إلى جانب HDFS ، 
مثل GlusterFS أونظام ملفات Quantcast [ 23 ]. خدمات تخزين الكائنات مثل Amazon S3 
و Azure Blobالتخزين و OpenStack Swift [ 24] متشابهة من نواح كثيرة. رابعا في هذا 
الفصل سنقومغالبًا ما تستخدم HDFS كمثال قيد التشغيل ، لكن المبادئ تنطبق على أي 
ملف موزع‐النظام.386 | الفصل 10: معالجة الدُفعات

      صفحة 409
MapReduce تنفيذ المهمةMapReduce هو إطار عمل برمجة يمكنك من خلاله كتابة التعليمات 
البرمجية للمعالجةمجموعات البيانات الكبيرة في نظام ملفات موزع مثل HDFS. أسهل 
طريقة للفهممن خلال الرجوع مرة أخرى إلى مثال تحليل سجل خادم الويب في "تحليل السجل 
البسيط"في الصفحة 379. نمط معالجة البيانات في MapReduce مشابه جدًا لذلكمثال:1. 
اقرأ مجموعة من ملفات الإدخال ، وقسمها إلى سجلات . في اختبار سجل خادم الويب‐ple ، 
كل سجل عبارة عن سطر واحد في السجل (أي ، \ n هو فاصل السجل).2. استخراج مفتاح و 
قيمة من كل سجل الإدخال. في المثال أعلاه ، هذا هوتم بواسطة الأمر awk '{print $ 
7}' : يستخرج عنوان URL ( $ 7 ) كمفتاح ، ويترك القيمة فارغة.3. فرز جميع أزواج 
المفتاح والقيمة حسب المفتاح. في المثال أعلاه ، يتم ذلك بواسطةأمر الفرز الأول .4. 
كرر القائمة المصنفة لأزواج القيمة والمفتاح. إذا كان هناك تكرارات متعددة لالمفتاح 
نفسه ، جعلهما الفرز متجاورتين في القائمة ، لذلك من السهل الوصول إليهتقويض هذه 
القيم دون الحاجة إلى الاحتفاظ بالكثير من الحالة في الذاكرة. في المثالأعلاه ، يتم 
ذلك عن طريق الأمر uniq -c ، الذي يحسب عدد adja‐المائة مع نفس المفتاح.يمكن تنفيذ 
هذه الخطوات الأربع بواسطة وظيفة MapReduce واحدة. عندما تكتب خريطةتقليل فرص 
العمل، تكتب وظيفتين رد، خريطة و خفض (انظر أيضا "مابريديوسالاستعلام "في الصفحة 45 
):خريطةيتم استدعاء وظيفة الخريطة مرة واحدة لكل سجل إدخال ، وتتمثل مهمتها في 
الاستخراجالمفتاح والقيمة من سجل الإدخال. في مثال سجل خادم الويب ، awk"{print $ 
7}" هو مصمم الخرائط بشكل فعال. في هذه الحالة ، ينتج عن سجل إدخال واحدزوج واحد ذو 
قيمة رئيسية ، ولكن لا بأس أيضًا أن ينتج مصمم الخرائط صفرًا أو أكثر من 
المفاتيح-أزواج قيمة لسجل إدخال واحد.خفضيجمع إطار عمل MapReduce جميع أزواج القيمة 
الرئيسية بنفس المفتاح ،ويستدعي دالة الاختزال باستخدام مكرر فوق تلك المجموعة من 
القيم بـنفس المفتاح. في مثال سجل خادم الويب ، يعد uniq -c المخفض بشكل فعال.يمكن 
للمخفض إنتاج سجلات الإخراج (مثل عدد تكراراتنفس عنوان URL).لاحظ أن الخطوة 3 ، 
خطوة الفرز ، ضمنية في MapReduce - ليس عليك كتابتها ،لأنه يتم دائمًا فرز الإخراج 
من مخطط الخرائط قبل إعطائه للمخفض.يمكن القول أن خطوة الفرز هذه هي أهم جانب في 
MapReduce.MapReduce وأنظمة الملفات الموزعة | 387

      صفحة 410
في مثال سجل خادم الويب ، كان لدينا أمر فرز ثانٍ في الخطوة 5 ، والذيعناوين URL 
مرتبة حسب عدد الطلبات. في MapReduce ، إذا كنت بحاجة إلى فرز ثانٍالمرحلة ، يمكنك 
تنفيذها عن طريق كتابة مهمة MapReduce ثانية ، واستخدام outضع الوظيفة الأولى كمدخل 
للوظيفة الثانية. ينظر إليه على هذا النحو ، دور مصمم الخرائطهو تجهيز البيانات في 
شكل مناسب للفرز ، ودورالمخفض هو معالجة البيانات التي تم فرزها.توزيع تنفيذ 
MapReduceالاختلاف الرئيسي في خطوط أنابيب أوامر يونكس هو أن MapReduce يمكن أن 
يوازيize عملية حسابية عبر العديد من الأجهزة ، دون الحاجة إلى كتابة التعليمات 
البرمجية بشكل صريحالتعامل مع التوازي. على خريطة و خفض وظائف تعمل فقط على سجل 
واحد فيالوقت؛ لا يحتاجون إلى معرفة مصدر مدخلاتهم أو من أين تأتي مخرجاتهمحتى 
يتمكن إطار العمل من التعامل مع تعقيدات نقل البيانات بينالآلات.من الممكن استخدام 
أدوات Unix القياسية كرسامين ومخفضات في ملف موزعالحساب [ 25] ، ولكن بشكل أكثر 
شيوعًا يتم تنفيذها كوظائف فيلغة البرمجة التقليدية. في Hadoop MapReduce ، مصمم 
الخرائط والمخفضهي كل فئة Java تنفذ واجهة معينة. في MongoDB وCouchDB وعينات 
الخرائط والمخفضات هي وظائف JavaScript (راجع "استعلام MapReduce‐جي "في الصفحة 45 
).يوضح الشكل 10-1 تدفق البيانات في مهمة Hadoop MapReduce. التوازي لها هوعلى أساس 
التقسيم (انظر الفصل 6): عادةً ما يكون الإدخال إلى الوظيفة عبارة عن دليل 
بتنسيقHDFS ، وتعتبر كل كتلة ملف أو ملف داخل دليل الإدخال sepa‐معدل التقسيم الذي 
يمكن معالجته بواسطة مهمة مخطط منفصلة (مميزة بـ m 1 ، m 2 ،و م 3 بوصة الشكل 10-1 
).388 | الفصل 10: معالجة الدُفعات

      الصفحة 411
م 1م 1 ، ص 1م 1 ، ص 2م 1 ، ص 3مخططم 2م 2 ، ص 1م 2 ، ص 2م 2 ، ص 3مخططم 3م 3 ، ص 
1م 3 ، ص 2م 3 ، ص 3مخططمهمة الخريطة 1م 2 ، ص 1م 3 ، ص 1دمجم 1 ، ص 1المخفضص 
1تقليل المهمة 1م 2 ، ص 2م 3 ، ص 2دمجم 1 ، ص 2المخفضص 2تقليل المهمة 2م 2 ، ص 3م 3 
، ص 3دمجم 1 ، ص 3المخفضص 3تقليل المهمة 3مهمة الخريطة 2مهمة الخريطة 
3أحضرحدFسفيصشردالأشعة تحت الحمراءهجراصذحدFساشرصشردالأشعة تحت الحمراءهجراصذالشكل 
10-1. مهمة MapReduce مع ثلاثة رسامين وثلاثة مخفضات.يبلغ حجم كل ملف إدخال عادةً 
مئات الميجابايت. جدولة MapReduce(غير موضح في الرسم التخطيطي) يحاول تشغيل كل مصمم 
خرائط على إحدى الأجهزة التييخزن نسخة طبق الأصل من ملف الإدخال ، بشرط أن يحتوي 
الجهاز على ذاكرة RAM احتياطية كافية ووحدة المعالجة المركزية لتشغيل مهمة مخطط [ 
26]. يُعرف هذا المبدأ باسم وضع الحساببالقرب من البيانات [27 ]: يقوم بحفظ نسخ ملف 
الإدخال عبر الشبكة ، مما يقلل الشبكةتحميل وزيادة الموقع.في معظم الحالات ، لم يتم 
بعد رمز التطبيق الذي يجب تشغيله في مهمة معين الخرائطموجود على الجهاز الذي تم 
تعيين مهمة تشغيله ، لذا فإن MapReduceيقوم framework أولاً بنسخ الكود (مثل ملفات 
jar) إلى الأجهزة المناسبة. بعد ذلكيبدأ مهمة الخريطة ويبدأ في قراءة ملف الإدخال ، 
ويمرر سجلًا واحدًا في كل مرة إلىرد اتصال مخطط الخرائط. يتكون إخراج المخطط من 
أزواج مفتاح - قيمة.يتم أيضًا تقسيم الجانب المصغر من الحساب. بينما كان عدد 
الخريطةيتم تحديد المهام من خلال عدد كتل ملف الإدخال ، وعدد تقليل المهام هوتم 
تكوينه بواسطة مؤلف الوظيفة (يمكن أن يكون مختلفًا عن عدد مهام الخريطة). لتأكد من 
أن جميع أزواج القيمة الرئيسية التي لها نفس المفتاح تنتهي في نفس المخفض ، ويستخدم 
Framework تجزئة المفتاح لتحديد أي مهمة تقليل يجب أن تتلقى ملفزوج محدد وقيمة 
مفتاح (راجع "التقسيم عن طريق تجزئة المفتاح" في الصفحة 195 ).يجب فرز أزواج 
المفتاح والقيمة ، ولكن من المحتمل أن تكون مجموعة البيانات كبيرة جدًا بحيث لا 
يمكن الفرز بهاخوارزمية فرز تقليدية على جهاز واحد. بدلاً من ذلك ، يكون الفرز 
حسبMapReduce وأنظمة الملفات الموزعة | 389

      الصفحة 412
تشكلت على مراحل. أولاً ، تقوم كل مهمة مصمم خرائط بتقسيم ناتجها بواسطة مخفض ، 
بناءً علىتجزئة المفتاح. تتم كتابة كل قسم من هذه الأقسام في ملف تم فرزه على مخطط 
الخرائطالقرص المحلي ، باستخدام تقنية مشابهة لما ناقشناه في "SSTables و 
LSM-الأشجار "في الصفحة 74.عندما ينتهي مخطط الخرائط من قراءة ملف الإدخال الخاص به 
وكتابة ملفات الإخراج التي تم فرزها ،يقوم برنامج جدولة MapReduce بإعلام المخفضات 
بأنه يمكنهم البدء في جلب المخرجاتملفات من مصممي الخرائط. تتصل المخفضات بكل من 
مصممي الخرائط وتنزيلهاملف أزواج المفتاح والقيمة التي تم فرزها لقسمها. عملية 
التقسيم بواسطةيُعرف المخفض والفرز ونسخ أقسام البيانات من رسامي الخرائط إلى 
المخفضات باسمالمراوغة [ 26] (مصطلح محير - بخلاف خلط مجموعة أوراق اللعب ، لا يوجد 
رانdomness في MapReduce).تأخذ مهمة تقليل الملفات من مصممي الخرائط وتدمجها معًا ، 
وتحافظ علىجي ترتيب الفرز. وبالتالي ، إذا أنتج رسامو الخرائط المختلفون سجلات بنفس 
المفتاح ،سيكونون متجاورين في مدخل المخفض المدمج.يتم استدعاء وظيفة المخفض بمفتاح 
ومكرر يقوم بالمسح بشكل تدريجيعلى كافة السجلات التي لها نفس المفتاح (والذي قد 
يكون في بعض الحالات أكبر مما يمكن أن يكونتناسب الذاكرة). يمكن للمخفض استخدام 
المنطق التعسفي لمعالجة هذه السجلات ،إنشاء أي عدد من سجلات الإخراج في العملية. 
يتم كتابة سجلات الإخراج هذهإلى ملف على HDFS (عادةً ، نسخة واحدة على القرص المحلي 
للجهاز الذي يقوم بتشغيل ملفالمخفض ، مع النسخ المتماثلة على الأجهزة الأخرى).مهام 
سير العمل MapReduceنطاق المشكلات التي يمكنك حلها بوظيفة واحدة من MapReduce 
محدود. أشير-الاتصال بمثال تحليل السجل ، يمكن لوظيفة واحدة MapReduce تحديدعدد 
مرات مشاهدة الصفحة لكل عنوان URL ، ولكن ليس أكثر عناوين URL شيوعًا ، لأن ذلك 
يتطلب ملفالجولة الثانية من الفرز.وبالتالي ، من الشائع جدًا ربط وظائف MapReduce 
معًا في مهام سير العمل ،بحيث يصبح ناتج وظيفة واحدة هو المدخل إلى الوظيفة 
التالية. خريطة Hadoop‐لا يحتوي إطار العمل المصغر على أي دعم خاص لعمليات سير 
العمل ، لذا فإن هذه السلسلة‐جي يتم إجراؤه ضمنيًا عن طريق اسم الدليل: يجب تهيئة 
الوظيفة الأولى لكتابة ملفاتالإخراج إلى دليل معين في HDFS ، ويجب تكوين المهمة 
الثانية إلىقراءة نفس اسم الدليل كمدخلاته. من نقطة إطار عمل MapReduceمن وجهة نظر 
، هما وظيفتان مستقلتان.وبالتالي فإن وظائف MapReduce المتسلسلة هي أقل شبهاً بخطوط 
أنابيب أوامر Unix (التيتمرير ناتج إحدى العمليات كمدخل إلى عملية أخرى مباشرةً ، 
باستخدام حجم صغير فقطالمخزن المؤقت في الذاكرة) ، وتشبه إلى حد كبير سلسلة من 
الأوامر حيث يكون كل أمرتتم كتابة الإخراج في ملف مؤقت ، ويقرأ الأمر التالي من 
الإيقاعملف rary. هذا التصميم له مزايا وعيوب ، والتي سنناقشها في"تجسيد الحالة 
الوسيطة" في الصفحة 407.390 | الفصل 10: معالجة الدُفعات

      صفحة 413
v. الصلات التي نتحدث عنها في هذا الكتاب هي بشكل عام صلات متساوية ، وهي أكثر 
أنواع الصلات شيوعًا ، حيثيقترن السجل بسجلات أخرى لها قيمة مماثلة في حقل معين 
(مثل المعرف). بعضتدعم قواعد البيانات أنواعًا أكثر عمومية من الانضمام ، على سبيل 
المثال استخدام عامل أقل من بدلاً من المساواةالمشغل ، لكننا لن نتطرق إليها 
هنا.يعتبر مخرجات الوظيفة الدفعية صالحًا فقط عند اكتمال المهمة بنجاح(يتجاهل 
MapReduce الإخراج الجزئي لمهمة فاشلة). لذلك ، وظيفة واحدة في العمل؟لا يمكن أن 
يبدأ التدفق إلا عندما تكون الوظائف السابقة - أي الوظائف التي تنتج 
مدخلاتهاالدلائل - اكتملت بنجاح. للتعامل مع هذه التبعيات بينتنفيذ الوظائف ، تم 
تطوير العديد من برامج جدولة سير العمل لـ Hadoop ،بما في ذلك Oozie و Azkaban و 
Luigi و Airflow و Pinball [ 28].يحتوي هؤلاء المجدولون أيضًا على ميزات إدارة 
مفيدة عند صيانة ملفمجموعة كبيرة من الوظائف دفعة واحدة. تتكون مهام سير العمل من 
50 إلى 100 مهمة MapReduceشائع عند بناء أنظمة التوصية [29 ] ، وفي منظمة كبيرة ،قد 
تقوم العديد من الفرق المختلفة بتشغيل وظائف مختلفة تقرأ نتائج بعضها البعض.دعم 
الأداة مهم لإدارة تدفقات البيانات المعقدة هذه.أدوات متنوعة ذات مستوى أعلى لـ 
Hadoop ، مثل Pig [ 30 ] و Hive [31] ، المتتالية [ 32] ،أزمة [ 33] ، و FlumeJava 
[ 34] ، قم أيضًا بإعداد مهام سير عمل متعددة لـ MapReduceالمراحل التي يتم توصيلها 
تلقائيًا معًا بشكل مناسب.تقليل الصلات الجانبية والتجميعناقشنا الصلات في الفصل 2 
في سياق نماذج البيانات ولغات الاستعلام ،لكننا لم نقل الكثير عن كيفية تنفيذ 
الصلات فعليًا. حان الوقت لأنناالتقط هذا الخيط مرة أخرى.من الشائع في العديد من 
مجموعات البيانات أن يكون لسجل واحد اقتران بسجل آخر:و المفتاح الخارجي في النموذج 
العلائقي، وهو وثيقة مرجعية في نموذج وثيقة، أوحافة في نموذج الرسم البياني. تعتبر 
الصلة ضرورية عندما يكون لديك بعض التعليمات البرمجية التي تحتاج إليهاللوصول إلى 
السجلات على جانبي هذا الاقتران (كلا من السجل الذي يحمل المرجع‐erence والسجل الذي 
يتم الرجوع إليه). كما تمت مناقشته في الفصل 2 ، إلغاء التطبيعيمكن أن تقلل من 
الحاجة إلى الصلات ، ولكن بشكل عام لا تزيل الصلات بالكامل. الخامسفي قاعدة بيانات 
، إذا قمت بتنفيذ استعلام يتضمن فقط عددًا صغيرًا من السجلات ، فإن ملفعادةً ما 
تستخدم قاعدة البيانات فهرسًا لتحديد موقع سجلات الاهتمام بسرعة (انظرالفصل 3 ). 
إذا كان الاستعلام يتضمن صلات ، فقد يتطلب عمليات بحث متعددة في الفهرس. كيف-على 
الإطلاق ، ليس لدى MapReduce مفهوم الفهارس - على الأقل ليس بالمعنى المعتاد.عندما 
يتم إعطاء مهمة MapReduce مجموعة من الملفات كمدخلات ، فإنها تقرأ المحتوى بالكامل 
للجميعمن تلك الملفات ستطلق قاعدة البيانات على هذه العملية فحص جدول كامل . إذا 
كنت تريد فقطقراءة عدد قليل من السجلات ، ومسح كامل للجدول باهظ التكلفة 
مقارنةللبحث في الفهرس. ومع ذلك ، في الاستعلامات التحليلية (راجع "معالجة 
المعاملات أوتحليلات؟ " في الصفحة 87 ) من الشائع حساب المجاميع على مساحة 
كبيرةMapReduce وأنظمة الملفات الموزعة | 391

      صفحة 414
عدد السجلات. في هذه الحالة ، قد يكون فحص الإدخال بالكامل أمرًا معقولاً 
تمامًاالشيء الذي يتعين عليك القيام به ، خاصة إذا كان بإمكانك موازنة المعالجة عبر 
أجهزة متعددة.عندما نتحدث عن الصلات في سياق المعالجة المجمعة ، فإننا نعني حل 
الكلحدوث بعض الارتباطات داخل مجموعة البيانات. على سبيل المثال ، نفترض أن 
وظيفةمعالجة البيانات لجميع المستخدمين في وقت واحد ، وليس مجرد البحث عن البيانات 
الخاصة بهممستخدم معين واحد (وهو ما يمكن القيام به بكفاءة أكبر باستخدام 
الفهرس).مثال: تحليل أحداث نشاط المستخدميوضح الشكل 10-2 مثال نموذجي للرابط في 
وظيفة دُفعية . على اليسار يوجد ملفسجل الأحداث الذي يصف الأشياء التي قام 
المستخدمون بتسجيل الدخول بها على أحد مواقع الويب (المعروفة باسمأحداث النشاط أو 
بيانات تدفق النقر ) ، وعلى اليمين توجد قاعدة بيانات للمستخدمين. تستطيعفكر في هذا 
المثال باعتباره جزءًا من مخطط النجوم (راجع "النجوم والثلج: sche‐mas for 
analytics "في الصفحة 90 ): سجل الأحداث هو جدول الحقائق وقاعدة بيانات المستخدمهو 
أحد الأبعاد.قد تحتاج مهمة التحليلات إلى ربط نشاط المستخدم بمعلومات ملف تعريف 
المستخدم:على سبيل المثال ، إذا كان الملف الشخصي يحتوي على عمر المستخدم أو تاريخ 
ميلاده ، فيمكن للنظامتحديد الصفحات الأكثر شيوعًا والفئات العمرية. ومع ذلك ، فإن 
النشطتحتوي أحداث ity على معرف المستخدم فقط ، وليس المعلومات الكاملة لملف تعريف 
المستخدم. التضمينمن المرجح أن تكون معلومات الملف الشخصي في كل حدث نشاط فردي 
مضيعة جدًافول. لذلك ، يجب ربط أحداث النشاط بقاعدة بيانات ملف تعريف المستخدم.نقر 
المستخدم 105 على زر ... لتحميل URL ...أحداث نشاط المستخدمقاعدة بيانات 
المستخدمينuser_id البريد الإلكترونيتاريخ 
الولادة100atilla@example.com1991-02-15101beth@foo.com1952-06-29102chunzhi@test.net1967-09-08103devaraj@example.net1947-12-18104evelyn@example.com1989-01-30105flavio@foo.com1971-05-05.........مستخدم 
296 اطلع على الملف الشخصي للمستخدم 134تم تسجيل خروج المستخدم 251 من جلسة المتصفح 
...المستخدم 184 تحميل الصفحة بعنوان URL ...نشر المستخدم 101 ردًا على الرسالة 
...المستخدم 156 نقر على زر المساعدة في الصفحة ...قام المستخدم 301 بالنقر فوق 
ارتباط في البريد الإلكتروني ...بحث المستخدم 123 عن الكلمة الأساسية ...الشكل 
10-2. صلة بين سجل أحداث نشاط المستخدم وقاعدة بيانات ملفات تعريف المستخدمين.أبسط 
تنفيذ لهذه الصلة سوف يمر عبر أحداث النشاط واحدًا تلو الآخرواحد ، والاستعلام عن 
قاعدة بيانات المستخدم (على خادم بعيد) لكل معرف مستخدم يواجهه.هذا ممكن ، لكنه على 
الأرجح سيعاني من أداء ضعيف للغاية:سيقتصر صبيب التوقف على وقت الرحلة ذهابًا 
وإيابًا إلى خادم قاعدة البيانات ،تعتمد فعالية ذاكرة التخزين المؤقت المحلية إلى 
حد كبير على توزيع البيانات ،392 | الفصل 10: معالجة الدُفعات

      صفحة 415
ويمكن أن يؤدي تشغيل عدد كبير من الاستعلامات بالتوازي إلى إرباك البيانات 
بسهولة‐قاعدة [35].من أجل تحقيق إنتاجية جيدة في عملية دفعية ، يجب أن يكون 
الحسابمحلي لجهاز واحد قدر الإمكان. إجراء طلبات وصول عشوائي عبرالشبكة لكل سجل 
تريد معالجته بطيئة جدًا. علاوة على ذلك ، فإن الاستعلام عن أقاعدة البيانات 
البعيدة تعني أن الوظيفة الدفعية تصبح غير حتمية ، لأنقد تتغير البيانات الموجودة 
في قاعدة البيانات البعيدة.وبالتالي ، فإن النهج الأفضل هو أخذ نسخة من قاعدة 
بيانات المستخدمين (على سبيل المثال ،المستخرجة من نسخة احتياطية لقاعدة البيانات 
باستخدام عملية ETL ، راجع "تخزين البيانات" علىصفحة 88) ووضعه في نفس نظام الملفات 
الموزع مثل سجل نشاط المستخدمالأحداث. لديك بعد ذلك قاعدة بيانات المستخدم في 
مجموعة واحدة من الملفات في HDFS ، والمستخدمسجلات النشاط في مجموعة أخرى من 
الملفات. يمكن استخدام MapReduce لتجميع كل ملفاتالسجلات ذات الصلة في نفس المكان 
ومعالجتها بكفاءة.فرز ودمج الصلاتتذكر أن الغرض من وظيفة الخريطة هو استخراج مفتاح 
وقيمة من كل منهماسجل الإدخال. في حالة الشكل 10-2 ، سيكون هذا المفتاح هو معرف 
المستخدم: مجموعة واحدة منسيستعرض مصممو الخرائط أحداث النشاط (استخراج معرف 
المستخدم كمفتاح ، وحدث النشاط كقيمة) ، في حين أن مجموعة أخرى من مصممي الخرائط 
ستنتقل إلى قاعدة بيانات المستخدم(استخراج معرف المستخدم كمفتاح ، وتاريخ ميلاد 
المستخدم كقيمة). هذه العمليةهو موضح في الشكل 10-3 .قسم المخفض 1قسم المخفض 
2(معرفات المستخدم ذات الأرقام الزوجية)(معرفات المستخدم الفردية)مخطط نشاط 
المستخدممخطط قاعدة بيانات المستخدمالمستخدم 104 تحميل URL / xالمستخدم 173 تحميل 
URL / yالمستخدم 104 تحميل URL / z104 → url: / x104 → url: / z173 → url: / y104 → 
dob: 1989103 → dob: 1947{user_id: 104 ،البريد الإلكتروني: evelyn@example.com 
،date_of_birth: 1989-01-30}{user_id: 103 ،البريد الإلكتروني: devaraj@example.net 
،تاريخ الميلاد: 1947-12-18}مصمم الخرائطمصمم الخرائط{url: / x ،dob: 1989}{url: / 
z ،dob: 1989}104 →دوب: 1989url: / xurl: / zمخفض......الشكل 10-3. انضمام دمج 
الفرز المصغر في معرف المستخدم. إذا كانت مجموعات بيانات الإدخال جزئيةفي ملفات 
متعددة ، يمكن معالجة كل منها باستخدام مصممي خرائط متعددين على التوازي.عندما يقسم 
إطار عمل MapReduce إخراج معين حسب المفتاح ، ثميفرز أزواج المفتاح والقيمة ، ويكون 
التأثير هو أن جميع أحداث النشاط وسجل المستخدممع نفس معرف المستخدم تصبح متجاورة 
مع بعضها البعض في إدخال المخفض. الخريطة-MapReduce وأنظمة الملفات الموزعة | 393

      صفحة 416
يمكن تقليل المهمة حتى ترتيب السجلات ليتم فرزها بحيث يكون المخفض دائمًايرى السجل 
من قاعدة بيانات المستخدم أولاً ، متبوعًا بأحداث النشاط في الوقت المناسب‐ترتيب 
الطوابع - يُعرف هذا بالنوع الثانوي [26 ].يمكن للمخفض بعد ذلك تنفيذ منطق الصلة 
الفعلي بسهولة: وظيفة التصغير هييتم استدعاؤها مرة واحدة لكل معرف مستخدم ، وبفضل 
النوع الثانوي ، القيمة الأولى هيمن المتوقع أن يكون سجل تاريخ الميلاد من قاعدة 
بيانات المستخدم. المخفض remem‐يورد تاريخ الميلاد في متغير محلي ، ثم يتكرر على 
أحداث النشاط معنفس هوية المستخدم، إخراج أزواج من ينظر-رابط و المشاهد في سن في 
سنة . لاحقيمكن لوظائف MapReduce بعد ذلك حساب توزيع أعمار المشاهد لكل عنوان URL 
،والتجميع حسب الفئة العمرية.نظرًا لأن المخفض يعالج جميع السجلات لمعرف مستخدم 
معين دفعة واحدة ، فهو فقطيحتاج إلى الاحتفاظ بسجل مستخدم واحد في الذاكرة في أي 
وقت ، ولا يحتاج أبدًا إلى ذلكأي طلبات عبر الشبكة. تُعرف هذه الخوارزمية باسم ضم 
دمج الفرز ، منذ ذلك الحينيتم فرز إخراج معين حسب المفتاح ، ثم تدمج المخفضات 
القوائم المصنفة معًامن السجلات من كلا جانبي الصلة.جمع البيانات ذات الصلة معًا في 
نفس المكانلقد تأكد مصممو الخرائط وعملية الفرز من أن جميع البيانات الضروريةتنفيذ 
عملية الانضمام لمعرف مستخدم معين تم تجميعه معًا فينفس المكان: مكالمة واحدة 
لوظيفة التصغير . بعد اصطفاف جميع البيانات المطلوبةمقدمًا ، يمكن أن يكون المخفض 
بسيطًا إلى حد ما ، قطعة واحدة من التعليمات البرمجية التي يمكنتمخض السجلات ذات 
الإنتاجية العالية والذاكرة المنخفضة.تتمثل إحدى طرق النظر إلى هذه البنية في أن 
مصممي الخرائط "يرسلون رسائل" إلىers. عندما يرسل معين الخرائط زوجًا من المفاتيح 
والقيمة ، يكون المفتاح مثل عنوان الوجهةالتي يجب تسليم القيمة. على الرغم من أن 
المفتاح هو مجرد سلسلة عشوائية(ليس عنوان شبكة فعليًا مثل عنوان IP ورقم المنفذ) ، 
فهو يعمل كملفالعنوان: سيتم تسليم جميع أزواج القيمة الرئيسية التي لها نفس المفتاح 
إلى نفس المصير‐نشوئها (استدعاء لوظيفة الاختزال).أدى استخدام نموذج البرمجة 
MapReduce إلى فصل شبكة الاتصال الفعليةجوانب الاتصال من الحساب (الحصول على 
البيانات إلى الجهاز الصحيح) منمنطق التطبيق (معالجة البيانات بمجرد الحصول عليها). 
هذا على عكسالاستخدام النموذجي لقواعد البيانات ، حيث غالبًا ما يحدث طلب لجلب 
البيانات من قاعدة البياناتفي مكان ما بعمق داخل جزء من كود التطبيق [36]. منذ 
مقابض MapReduceجميع اتصالات الشبكة ، كما أنها تحمي رمز التطبيق من القلقحول حالات 
الفشل الجزئية ، مثل تعطل عقدة أخرى: MapReduce بشفافيةيعيد محاولة المهام الفاشلة 
دون التأثير على منطق التطبيق.مجموعة منإلى جانب الصلات ، استخدام شائع آخر لـ "جلب 
البيانات ذات الصلة إلى نفس المكان"النمط هو تجميع السجلات حسب بعض المفاتيح (كما 
هو الحال في جملة GROUP BY في SQL). الجميع394 | الفصل 10: معالجة الدُفعات

      صفحة 417
تشكل السجلات التي لها نفس المفتاح مجموعة ، وغالبًا ما تكون الخطوة التالية هي 
إجراء بعض منهانوع التجميع داخل كل مجموعة: على سبيل المثال ، لحساب عدد السجلاتفي 
كل مجموعة ( COUNT (*) في SQL) ، لإضافة القيم في حقل معين واحد منسجلات مجمعة ( 
SUM (اسم الحقل) ) ، لاختيار أفضل تسجيلات k وفقًا للبعضوظيفة الترتيب ، إلخ.إن 
أبسط طريقة لتنفيذ عملية التجميع هذه باستخدام MapReduce هيقم بإعداد رسامي الخرائط 
بحيث تستخدم أزواج القيمة الرئيسية التي ينتجونها التجميع المطلوبمفتاح. تقوم عملية 
التقسيم والفرز بعد ذلك بجمع كل السجلات بامتدادنفس المفتاح في نفس المخفض. 
وبالتالي ، يبدو التجميع والانضمام متشابهين تمامًا عندماتم تنفيذه على رأس 
MapReduce.الاستخدام الشائع الآخر للتجميع هو تجميع جميع أحداث النشاط لنوع 
معينجلسة المستخدم ، من أجل معرفة تسلسل الإجراءات التي اتخذها المستخدم - pro‐cess 
يسمى sessionization [ 37]. على سبيل المثال ، يمكن استخدام هذا التحليل للعملما 
إذا كان المستخدمون الذين ظهر لهم إصدار جديد من موقع الويب الخاص بك من المرجح أن 
يفعلوا ذلكشراء من أولئك الذين تم عرض النسخة القديمة (اختبار أ / ب) ، أو لحسابما 
إذا كان بعض النشاط التسويقي مفيدًا.إذا كان لديك عدة خوادم ويب تتعامل مع طلبات 
المستخدم ، فإن أحداث النشاط للمكافأةغالبًا ما يكون المستخدم المحدد مبعثرًا عبر 
ملفات سجل الخوادم المختلفة. تستطيعتنفيذ الجلسة باستخدام ملف تعريف ارتباط الجلسة 
أو معرف المستخدم أو معرف مشابه مثلمفتاح التجميع ، وجمع جميع أحداث النشاط لمستخدم 
معين معًا في واحدمكان ، أثناء توزيع أحداث المستخدمين المختلفة عبر أقسام 
مختلفة.التعامل مع الانحرافنمط "إحضار جميع السجلات التي لها نفس المفتاح إلى نفس 
المكان" ينكسرلأسفل إذا كان هناك قدر كبير جدًا من البيانات المتعلقة بمفتاح واحد. 
على سبيل المثال ، في ملفشبكة اجتماعية ، قد يكون معظم المستخدمين متصلين ببضع مئات 
من الأشخاص على الأكثر ، ولكنقد يكون لعدد قليل من المشاهير ملايين المتابعين. هذا 
غير لائق‐تُعرف سجلات قاعدة البيانات النشطة باسم كائنات linchpin [ 38].جمع كل 
الأنشطة المتعلقة بأحد المشاهير (مثل الردود على شيء قاموا بنشره) في أيمكن أن يؤدي 
المخفض الفردي إلى انحراف كبير ، أي مخفض واحد يجب أن يعالج sig‐عدد السجلات بشكل 
رائع أكثر من السجلات الأخرى (راجع "أعباء العمل المنحرفة وتخفيف التوترالمواقع "في 
الصفحة 196 ). نظرًا لأن مهمة MapReduce تكتمل فقط عند كل مصممي الخرائطومخفضات 
السرعة قد اكتملت ، أي وظائف لاحقة يجب أن تنتظر أبطأ مخفضلإكماله قبل أن يتمكنوا 
من البدء.للتعويض عن إدخال منحرف في صلة ، يمكنك تغيير تقسيم المخططالمخرجات: عند 
معالجة ملفات الإدخال المنحرفة ، أرسل السجلات المتعلقة بدبوس ربطكائن إلى مخفض 
عشوائي (على عكس MapReduce التقليدية ، التي تختارالمخفض بشكل حتمي على أساس تجزئة 
المفتاح). بالنسبة للإدخال الآخر في الصلة ،يجب إرسال السجلات المتعلقة بجسم الدبوس 
إلى جميع مخفضات السرعة [ 39].MapReduce وأنظمة الملفات الموزعة | 395

      صفحة 418
تُعرف هذه التقنية باسم الانضمام للانحراف في Pig and Hive ، والانضمام المكسور في 
Crunch. هو - هييضمن أن كل مخفض يتلقى بعض السجلات من الإدخال المنحرف ، وأيضًا 
السجل من الإدخال الذي يتم ضمه. وبالتالي ، فإن عبء المؤيديتم تقاسم كائنات دبوسية 
التوقف بالتساوي بين المخفضات ، على حساب الاضطرار إلى ذلكتكرار مدخلات الانضمام 
الأخرى إلى مخفضات متعددة.عند تجميع السجلات بواسطة مفتاح منحرف ، يمكنك التعامل مع 
الإدخال المنحرف عن طريق تنفيذفي التجميع على مرحلتين. ترسل المرحلة الأولى 
MapReduce السجلات إلى عشوائيالمخفض ، بحيث يقوم كل مخفض بالتجميع على مجموعة فرعية 
من السجلات لـمفتاح منحرف ، ويخرج قيمة مجمعة أكثر إحكاما لكل مفتاح. الخريطة 
الثانية‐تقوم وظيفة Reduce بعد ذلك بدمج القيم من جميع مخفضات المرحلة الأولى في 
واحدةالقيمة لكل مفتاح.ينضم جانب الخريطةتؤدي خوارزميات الانضمام الموضحة في القسم 
الأخير منطق الصلة الفعلي في ملفالمخفضات ، ومن ثم تُعرف باسم الصلات ذات الجانب 
المختزل . يأخذ مصممو الخرائط دور ما قبلتقشير بيانات الإدخال: استخراج المفتاح 
والقيمة من كل سجل إدخال ، وتعيينأزواج المفتاح والقيمة إلى قسم المخفض ، والفرز 
حسب المفتاح.نهج الجانب المصغر له ميزة لا تحتاج إلى القيام بهاافتراضات حول بيانات 
الإدخال: مهما كانت خصائصها وهيكلها ، فإن مصممي الخرائطيمكن تحضير البيانات لتكون 
جاهزة للانضمام. ومع ذلك ، فإن الجانب السلبي هو أن كل ذلكيمكن أن يكون الفرز 
والنسخ إلى المخفضات ودمج مدخلات المخفض مكلفًا للغاية.اعتمادًا على مخازن الذاكرة 
المتاحة ، قد تتم كتابة البيانات على عدة أقراصمرات كما يمر عبر مراحل MapReduce [ 
37].من ناحية أخرى ، إذا كان بإمكانك وضع افتراضات معينة حول بيانات الإدخال الخاصة 
بك ، فهي كذلكمن الممكن جعل الصلات أسرع باستخدام ما يسمى بربط جانب الخريطة . 
يستخدم قطع لأسفلوظيفة MapReduce التي لا يوجد فيها مخفضات ولا فرز. بدلاً من ذلك ، 
كل مصمم خرائطيقرأ ببساطة كتلة ملف إدخال واحدة من HDFS ويكتب ملف إخراج واحدًا إلى 
HDFS -هذا كل شيء.ينضم تجزئة البثيتم تطبيق أبسط طريقة لإجراء صلة جانب الخريطة في 
الحالة التي يكون فيها ملفيتم ربط مجموعة البيانات بمجموعة بيانات صغيرة. على وجه 
الخصوص ، يجب أن تكون مجموعة البيانات الصغيرة صغيرةيكفي أنه يمكن تحميله بالكامل 
في الذاكرة في كل من مصممي الخرائط.على سبيل المثال ، تخيل في حالة الشكل 10-2 أن 
قاعدة بيانات المستخدم صغيرةبما يكفي لتناسب الذاكرة. في هذه الحالة ، عندما يبدأ 
مصمم الخرائط ، فإنه يقرأ أولاً ملفقاعدة بيانات المستخدم من HDFS إلى جدول تجزئة 
في الذاكرة. بمجرد الانتهاء من ذلك ، الخريطة‐396 | الفصل 10: معالجة الدُفعات

      صفحة 419
السادس. يفترض هذا المثال وجود إدخال واحد بالضبط لكل مفتاح في جدول التجزئة ، 
وربما يكون هذا صحيحًامع قاعدة بيانات المستخدم (معرف المستخدم يعرّف المستخدم بشكل 
فريد). بشكل عام ، قد يحتاج جدول التجزئة إلى احتواءعدة إدخالات بنفس المفتاح ، 
وسيخرج عامل الانضمام جميع التطابقات لمفتاح.per يمكن مسح أحداث نشاط المستخدم ، 
والبحث ببساطة عن معرف المستخدم لكل منهاحدث في جدول التجزئة. السادسلا يزال من 
الممكن أن يكون هناك العديد من مهام مصمم الخرائط ، واحدة لكل كتلة ملف من المدخلات 
الكبيرة لملفانضم (في مثال الشكل 10-2 ، أحداث النشاط هي المدخلات الكبيرة). كل 
منيقوم رسامو الخرائط هؤلاء بتحميل المدخلات الصغيرة بالكامل في الذاكرة.تسمى هذه 
الخوارزمية البسيطة والفعالة بضم تجزئة البث : كلمة البثيعكس حقيقة أن كل مصمم 
خرائط لقسم من المدخلات الكبيرة يقرأ بالكاملمن المدخلات الصغيرة (لذلك يتم "بث" 
المدخلات الصغيرة بشكل فعال لجميع أقسام ملفإدخال كبير) ، وتعكس كلمة التجزئة 
استخدامها لجدول التجزئة. طريقة الانضمام هذهبدعم من Pig (تحت الاسم "ربط متكرر") ، 
و Hive ("MapJoin") ، و Cascading ،و كرانش. يتم استخدامه أيضًا في محركات استعلام 
مستودع البيانات مثل Impala [40 ].بدلاً من تحميل إدخال الصلة الصغيرة في جدول 
تجزئة في الذاكرة ، يكون البديللتخزين مدخلات الصلة الصغيرة في فهرس للقراءة فقط 
على القرص المحلي [ 41 ]. الستبقى الأجزاء المستخدمة بشكل متكرر من هذا الفهرس في 
ذاكرة التخزين المؤقت لصفحة نظام التشغيل ،لذلك يمكن أن يوفر هذا الأسلوب عمليات 
بحث للوصول العشوائي بسرعة تقارب سرعة البحث في الذاكرةجدول التجزئة ، ولكن دون 
الحاجة فعليًا إلى احتواء مجموعة البيانات في الذاكرة.تنضم التجزئة المقسمةإذا كانت 
مدخلات صلة جانب الخريطة مقسمة بنفس الطريقة ، فإن صلة التجزئةيمكن تطبيق النهج على 
كل قسم بشكل مستقل. في حالة الشكل 10-2 ،يمكنك الترتيب لكل من أحداث النشاط وقاعدة 
بيانات المستخدم ليكون كل طرف طرفًا فيه.يتم الإشارة إليها استنادًا إلى آخر رقم 
عشري من معرف المستخدم (لذلك هناك عشرة أقسام علىكلا الجانبين). على سبيل المثال ، 
يقوم مصمم الخرائط 3 أولاً بتحميل جميع المستخدمين بمعرف ينتهي بالرقم 3 في ملفجدول 
التجزئة ، ثم يمسح جميع أحداث النشاط للمستخدمين الذين تنتهي معرفتهم بـ 3.إذا تم 
التقسيم بشكل صحيح ، يمكنك التأكد من أن جميع السجلات قد ترغب في ذلكالتي تريد 
الانضمام إليها موجودة في القسم ذي الرقم نفسه ، وبالتالي فهي كافية لـكل مخطط 
لقراءة قسم واحد فقط من كل مجموعة من مجموعات بيانات الإدخال. هذا لديهميزة أن كل 
مصمم خرائط يحتاج فقط إلى تحميل كمية أقل من البيانات في التجزئة الخاصة 
بهالطاولة.يعمل هذا النهج فقط إذا كان لكل من مدخلات الصلة نفس عدد الأجزاء، مع 
السجلات المخصصة للأقسام بناءً على نفس المفتاح ونفس التجزئةوظيفة. إذا تم إنشاء 
المدخلات بواسطة وظائف MapReduce السابقة التي تعمل بالفعلهذه المجموعة ، إذن يمكن 
أن يكون هذا افتراضًا معقولًا.تُعرف صلات التجزئة المقسمة باسم صلات الخريطة 
المجمعة في الخلية [ 37].MapReduce وأنظمة الملفات الموزعة | 397

      صفحة 420
صلات دمج جانب الخريطةينطبق متغير آخر لرابط جانب الخريطة إذا لم تكن مجموعات 
البيانات المدخلة جزئية فقطبنفس الطريقة ، ولكن تم الفرز أيضًا بناءً على نفس 
المفتاح. في هذه الحالة ، لا يحدث ذلكبغض النظر عما إذا كانت المدخلات صغيرة بما 
يكفي لتناسب الذاكرة ، لأن مصمم الخرائط يمكنه ذلكإجراء نفس عملية الدمج التي يتم 
إجراؤها عادةً بواسطة مخفض السرعة:قراءة كل من ملفات الإدخال بشكل متزايد ، بترتيب 
المفتاح التصاعدي ، والمطابقةيسجل بنفس المفتاح.إذا كان من الممكن ربط دمج جانب 
الخريطة ، فهذا يعني على الأرجح أن وظائف MapReduce السابقةجلب مجموعات البيانات 
المدخلة إلى هذا النموذج المقسم والمصنف في المقام الأول. فيمن حيث المبدأ ، كان من 
الممكن وضع هذا الارتباط في مرحلة التخفيض من الوظيفة السابقة. كيف-على الإطلاق ، 
قد يكون من المناسب إجراء عملية دمج في وظيفة خريطة فقط منفصلة ،على سبيل المثال ، 
إذا كانت هناك حاجة أيضًا إلى مجموعات البيانات المقسمة والمصنفة لأغراض أخرىإلى 
جانب هذه الصلة الخاصة.MapReduce سير العمل مع صلات جانب الخريطةعندما يتم استهلاك 
إخراج صلة MapReduce بواسطة مهام المصب ، يكون الاختيارمن جانب الخريطة أو الصلة 
المصغرة تؤثر على بنية الإخراج. ناتجيتم تقسيم الصلة ذات الجانب المختزل وفرزها 
بواسطة مفتاح الانضمام ، بينما يتم تقسيم ناتجيتم تقسيم صلة جانب الخريطة وفرزها 
بنفس طريقة الإدخال الكبير (منذ واحدتبدأ مهمة map لكل كتلة ملف من المدخلات 
الكبيرة للصلة ، بغض النظر عما إذا كان ملفيتم استخدام الانضمام المقسم أو 
البث).كما تمت مناقشته ، فإن صلات جانب الخريطة تضع أيضًا المزيد من الافتراضات حول 
الحجم والفرز وتقسيم مجموعات البيانات المدخلة. معرفة تخطيط البيانات المادية 
للبيانات‐تصبح المجموعات في HDFS مهمة عند تحسين استراتيجيات الانضمام: فهي ليست 
كافيةلمجرد معرفة تنسيق الترميز واسم الدليل الذي توجد فيه البياناتالمخزنة ، ولكن 
أيضًا عدد الأقسام والمفاتيح التي يتم تقسيمها ومرتبة.في نظام Hadoop البيئي ، هذا 
النوع من البيانات الوصفية حول تقسيم مجموعات البيانات هوغالبًا ما يتم الاحتفاظ 
بها في كتالوج HC و Hive metastore [ 37 ].مخرجات سير عمل الدُفعاتلقد تحدثنا 
كثيرًا عن الخوارزميات المختلفة لتنفيذ مهام سير العملMapReduce الوظائف ، لكننا 
أهملنا سؤالًا مهمًا: ما هي نتيجة كلهذه المعالجة ، بمجرد أن يتم ذلك؟ لماذا نقوم 
بتشغيل كل هذه الوظائف في المقام الأول؟في حالة استعلامات قاعدة البيانات ، قمنا 
بتمييز معالجة المعاملات (OLTP) Pur‐يطرح من أغراض تحليلية (انظر "معالجة المعاملات 
أو التحليلات؟" على الصفحة87 ). لقد رأينا أن استعلامات OLTP تبحث بشكل عام عن عدد 
صغير من السجلات حسب المفتاح ،باستخدام الفهارس ، من أجل تقديمها للمستخدم ، على 
سبيل المثال على صفحة الويب. على المن ناحية أخرى ، غالبًا ما تفحص الاستعلامات 
التحليلية عددًا كبيرًا من السجلات ، بأداء398 | الفصل 10: معالجة الدُفعات

      الصفحة 421
التجميعات والتجميعات ، وغالبًا ما يكون للمخرجات شكل تقرير: رسم بيانيإظهار تغيير 
المقياس بمرور الوقت ، أو أهم 10 عناصر وفقًا للبعضالترتيب ، أو تقسيم بعض الكمية 
إلى فئات فرعية. المستهلك من مثلغالبًا ما يكون التقرير محللًا أو مديرًا يحتاج إلى 
اتخاذ قرارات العمل.أين تناسب معالجة الدُفعات؟ إنها ليست معالجة المعاملات ، ولا 
هي كذلكlytics. إنه أقرب إلى التحليلات ، حيث تقوم عملية الدُفعات عادةً بالمسح عبر 
بور كبيرةمن مجموعة بيانات الإدخال. ومع ذلك ، فإن سير عمل وظائف MapReduce ليس هو 
نفسهاستعلام SQL يستخدم لأغراض تحليلية (راجع "مقارنة MapReduce مع الموزعقواعد 
البيانات "في الصفحة 402). غالبًا ما لا يكون ناتج العملية المجمعة تقريرًا ، ولكن 
البعضنوع آخر من الهياكل.فهارس بحث البناءكان استخدام Google الأصلي لـ MapReduce 
هو إنشاء فهارس لمحرك البحث الخاص بهم ،التي تم تنفيذها كسير عمل من خمسة إلى عشرة 
وظائف MapReduce [1]. برغم منلقد ابتعدوا لاحقًا عن استخدام MapReduce لهذا الغرض [ 
42 ] ، فهذا يساعدفهم MapReduce إذا نظرت إليه من خلال عدسة بناء فهرس بحث.(حتى 
اليوم ، يظل Hadoop MapReduce طريقة جيدة لبناء فهارس لـلوسين / سولر [43 ].)لقد 
رأينا بإيجاز في "أشجار SSTables و LSM" في الصفحة 74 كيفية فهرس بحث النص 
الكاملمثل أعمال Lucene: إنه ملف يمكنك من خلاله البحث عن مفتاح معين بكفاءة‐word 
(مصطلح القاموس) ، وابحث عن قائمة بجميع معرفات المستندات التي تحتوي على ذلكالكلمة 
الرئيسية (قائمة المنشورات). هذه طريقة عرض مبسطة للغاية لمؤشر البحث - في 
الواقعإنها تتطلب بيانات إضافية مختلفة ، من أجل ترتيب نتائج البحث حسب الصلة 
،تصحيح الأخطاء الإملائية وحل المرادفات وما إلى ذلك - لكن المبدأ صحيح.إذا كنت 
بحاجة إلى إجراء بحث نص كامل عبر مجموعة ثابتة من المستندات ، فحينئذٍ دفعةعملية 
طريقة فعالة جدًا لبناء الفهارس: يقسم رسامو الخرائط مجموعةالمستندات حسب الحاجة ، 
يبني كل مخفض الفهرس لقسمه والفهرستتم كتابة الملفات إلى HDFS. بناء مثل هذه 
الفهارس المقسمة بالوثائق (انظر "Parti‐"الفهارس المؤيدة والثانوية "في الصفحة 197 
) تتوازى بشكل جيد للغاية. منذ الاستعلام عن أفهرس البحث عن طريق الكلمات الرئيسية 
هو عملية للقراءة فقط ، ملفات الفهرس هذه غير قابلة للتغييربمجرد إنشائها.إذا تغيرت 
مجموعة المستندات المفهرسة ، فإن أحد الخيارات هو إعادة تشغيل ملفسير عمل الفهرسة 
بالكامل لمجموعة المستندات بأكملها ، واستبدل السابقملفات الفهرس بالجملة بملفات 
الفهرس الجديدة عند الانتهاء. يمكن أن يكون computaمكلفًا مؤقتًا إذا تم تغيير عدد 
قليل فقط من المستندات ، ولكن يحتوي على ملحقميزة أن عملية الفهرسة سهلة الفهم حول: 
المستندات في ،الفهارس بها.بدلاً من ذلك ، من الممكن بناء الفهارس بشكل تدريجي. كما 
تمت مناقشته في الفصل 3 ،إذا كنت ترغب في إضافة أو إزالة أو تحديث المستندات في 
فهرس ، فإن Lucene يقوم بذلك عن طريقكتابة ملفات مقطع جديدة ، ودمج وضغط المقطع 
بشكل غير متزامنMapReduce وأنظمة الملفات الموزعة | 399

      صفحة 422
ملفات في الخلفية. سنرى المزيد عن هذه المعالجة الإضافية في تشابوثالثًا 11 .مخازن 
القيمة الرئيسية كمخرجات عملية الدُفعاتفهارس البحث هي مجرد مثال واحد على المخرجات 
المحتملة لمعالجة الدُفعاتسير العمل. الاستخدام الشائع الآخر لمعالجة الدُفعات هو 
بناء التعلم الآليأنظمة مثل المصنفات (مثل مرشحات البريد العشوائي واكتشاف العيوب 
والتعرف على الصور)وأنظمة التوصيات (على سبيل المثال ، الأشخاص الذين قد تعرفهم ، 
والمنتجات التي قد تكون كذلكمهتم أو عمليات بحث ذات صلة [29 ]).غالبًا ما يكون ناتج 
هذه الوظائف الدفعية نوعًا من قواعد البيانات: على سبيل المثال ، بيانات‐قاعدة يمكن 
الاستعلام عنها بواسطة معرف المستخدم للحصول على أصدقاء مقترحين لهذا المستخدم ، أو 
أقاعدة البيانات التي يمكن الاستعلام عنها بواسطة معرّف المنتج للحصول على قائمة 
بالمنتجات ذات الصلة [44 ].يجب الاستعلام عن قواعد البيانات هذه من تطبيق الويب 
الذي يتعامل مع المستخدمالطلبات ، والتي تكون عادةً منفصلة عن البنية التحتية 
لبرنامج Hadoop. فكيف يفعل ملفيعود الناتج من العملية المجمعة إلى قاعدة البيانات 
حيث يمكن لتطبيق الويب ذلكالاستعلام عنها؟قد يكون الخيار الأكثر وضوحًا هو استخدام 
مكتبة العميل لقاعدة البيانات المفضلة لديكمباشرة داخل مخطط أو مخفض ، والكتابة من 
المهمة الدفعية مباشرة إلىخادم قاعدة البيانات ، سجل واحد في كل مرة. سيعمل هذا 
(بافتراض قواعد جدار الحماية الخاص بكالسماح بالوصول المباشر من بيئة Hadoop إلى 
قواعد بيانات الإنتاج الخاصة بك) ،لكنها فكرة سيئة لعدة أسباب:• كما تمت مناقشته 
سابقًا في سياق الصلات ، تقديم طلب شبكة لـكل سجل على حدة هو مراتب حجم أبطأ من 
الإنتاجية العاديةمهمة دفعية. حتى إذا كانت مكتبة العميل تدعم التجميع ، فمن 
المحتمل أن يدعم الأداءكن فقيرا.• غالبًا ما تقوم وظائف MapReduce بتشغيل العديد من 
المهام بالتوازي. إذا كان كل مخططي أو مخفضاتالكتابة في نفس الوقت إلى نفس قاعدة 
بيانات الإخراج ، مع المعدل المتوقع للدُفعةالعملية ، يمكن بسهولة أن تكون قاعدة 
البيانات هذه مرهقة ، كما أن أدائها بالنسبة لـ quer‐من المحتمل أن يعاني الذباب. 
وهذا بدوره يمكن أن يسبب مشاكل تشغيلية في أجزاء أخرىمن النظام [ 35 ].• عادة ، 
يوفر MapReduce ضمانًا نظيفًا لكل شيء أو لا شيء لإخراج المهمة:إذا نجحت الوظيفة ، 
فإن النتيجة هي ناتج تشغيل كل مهمة مرة واحدة بالضبط ، حتىإذا فشلت بعض المهام وكان 
لا بد من إعادة المحاولة على طول الطريق ؛ إذا فشلت الوظيفة بأكملها ، لايتم إنتاج 
الإخراج. ومع ذلك ، الكتابة إلى نظام خارجي من داخل الوظيفةينتج عنه آثار جانبية 
مرئية من الخارج لا يمكن إخفاؤها بهذه الطريقة. هكذا،يجب أن تقلق بشأن ظهور نتائج 
الوظائف المكتملة جزئيًا لـالأنظمة الأخرى ، وتعقيدات مهمة Hadoop ومحاولاتها 
التخمينيةإعدام.400 | الفصل 10: معالجة الدُفعات

      صفحة 423
الحل الأفضل هو إنشاء قاعدة بيانات جديدة تمامًا داخل الوظيفة الدفعية ، واكتبها 
كملفات إلى دليل إخراج الوظيفة في HDFS ، تمامًا مثل فهارس البحث فيالمقطع الأخير. 
بعد ذلك ، تصبح ملفات البيانات هذه ثابتة بمجرد كتابتها ، ويمكن تحميلهابكميات 
كبيرة في الخوادم التي تتعامل مع استعلامات القراءة فقط. دعم مخازن القيمة الرئيسية 
المختلفةإنشاء ملفات قاعدة البيانات في وظائف MapReduce ، بما في ذلك Voldemort 
[45] ، تيرابين [ 46] ،الفيل ديسيبل [47] ، وتحميل HBase بالجملة [ 48 ].يعد إنشاء 
ملفات قاعدة البيانات هذه استخدامًا جيدًا لـ MapReduce: استخدام مخطط لاستخراج 
ملفkey ، ثم الفرز حسب هذا المفتاح ، هو بالفعل الكثير من العمل المطلوب لإنشاء 
ملففهرس. نظرًا لأن معظم مخازن قيمة المفاتيح هذه للقراءة فقط (لا يمكن كتابة 
الملفات إلامرة واحدة بوظيفة دفعية ثم تصبح غير قابلة للتغيير) ، تكون هياكل 
البيانات بسيطة للغاية. إلى عن علىعلى سبيل المثال ، لا تتطلب WAL (راجع "التحديث 
في المكان مقابل التسجيل بالإلحاق فقط"في الصفحة 80 ).عند تحميل البيانات إلى 
فولدمورت ، يستمر الخادم في تقديم الطلبات إلى القديمملفات البيانات أثناء نسخ 
ملفات البيانات الجديدة من HDFS إلى القرص المحلي للخادم.بمجرد اكتمال النسخ ، 
ينتقل الخادم تلقائيًا إلى الاستعلام عن ملفملفات جديدة. إذا حدث خطأ ما في هذه 
العملية ، فيمكنه بسهولة الرجوع إلى القديممرة أخرى ، لأنها لا تزال هناك وثابتة [ 
45 ].فلسفة مخرجات العملية الدفعيةفلسفة Unix التي ناقشناها سابقًا في هذا الفصل ( 
"The Unix philoso‐phy "في الصفحة 382 ) يشجع التجريب من خلال كونه شديد الوضوح 
بشأن تدفق البيانات:يقرأ البرنامج مدخلاته ويكتب مخرجاته. في هذه العملية ، يتم ترك 
الإدخالبدون تغيير ، يتم استبدال أي إخراج سابق بالكامل بالمخرج الجديد ، ولا توجد 
آثار جانبية أخرى. هذا يعني أنه يمكنك إعادة تشغيل الأمر كثيرًاكما تريد ، التغيير 
والتبديل أو التصحيح ، دون العبث بحالة نظامك.تتبع معالجة الإخراج من وظائف 
MapReduce نفس الفلسفة. عن طريق العلاج‐المدخلات غير قابلة للتغيير وتجنب الآثار 
الجانبية (مثل الكتابة إلى البيانات الخارجية‐قواعد) ، لا تحقق الوظائف المجمعة 
أداءً جيدًا فحسب ، بل تصبح أيضًا أسهل بكثيرللحفاظ على:• إذا أدخلت خطأ في الكود 
وكان الإخراج خاطئًا أو تالفًا ، فأنتيمكن ببساطة التراجع إلى إصدار سابق من 
التعليمات البرمجية ، وإعادة تشغيل الوظيفة ، وسيكون الإخراج صحيحًا مرة أخرى. أو 
حتى أبسط من ذلك ، يمكنك الاحتفاظ بالإخراج القديم بتنسيقدليل مختلف ، وببساطة قم 
بالرجوع إليه. قواعد البيانات مع ترجمة القراءة / الكتابة‐الإجراءات ليس لها هذه 
الخاصية: إذا قمت بنشر رمز عربات التي تجرها الدواب الذي يكتب بيانات سيئةإلى قاعدة 
البيانات ، فلن يؤدي التراجع عن الرمز إلى إجراء أي شيء لإصلاح البيانات الموجودة 
في ملفقاعدة البيانات. (تم استدعاء فكرة القدرة على التعافي من رمز عربات التي 
تجرها الدوابالتسامح مع الخطأ البشري [ 49 ].)• نتيجة لسهولة التراجع ، يمكن المضي 
قدمًا في تطوير الميزاتأسرع من بيئة حيث يمكن أن تعني الأخطاء أنه لا رجعة 
فيهMapReduce وأنظمة الملفات الموزعة | 401

      صفحة 424
ضرر. مبدأ تقليل اللارجعة هذا مفيد للبرامج الرشيقةتطوير [50 ].• في حالة فشل 
الخريطة أو تقليل المهمة ، يقوم إطار عمل MapReduce تلقائيًا بإعادةبجدولته وتشغيله 
مرة أخرى على نفس المدخلات. إذا كان الفشل بسبب خطأ فيالشفرة ، ستستمر في الانهيار 
وتتسبب في النهاية في فشل الوظيفة بعد قليلمحاولات ، ولكن إذا كان الفشل بسبب مشكلة 
عابرة ، يتم التسامح مع الخطأ. هذهإعادة المحاولة التلقائية آمنة فقط لأن المدخلات 
غير قابلة للتغيير والمخرجات منيتم تجاهل المهام الفاشلة بواسطة إطار عمل 
MapReduce.• يمكن استخدام نفس مجموعة الملفات كمدخلات لمختلف المهام ، بما في 
ذلكمراقبة الوظائف التي تحسب المقاييس وتقييم ما إذا كانت مخرجات الوظيفة 
لهاالخصائص المتوقعة (على سبيل المثال ، من خلال مقارنتها بالإخراج منالتشغيل 
السابق وقياس التناقضات).• مثل أدوات Unix ، تفصل مهام MapReduce المنطق عن الأسلاك 
(تكوين ملفأدلة المدخلات والمخرجات) ، والتي توفر فصل الاهتمامات وإعادة استخدام 
محتملة للكود: يمكن لفريق واحد التركيز على تنفيذ وظيفة تؤديهاحسنًا ، بينما يمكن 
للفرق الأخرى تحديد مكان وزمان تشغيل هذه الوظيفة.في هذه المجالات ، يبدو أن مبادئ 
التصميم التي نجحت بشكل جيد مع Unix تعمل أيضًا.جي جيدا ل Hadoop. لكن يختلف Unix و 
Hadoop أيضًا في بعض النواحي: على سبيل المثال ،نظرًا لأن معظم أدوات Unix تفترض 
وجود ملفات نصية غير نمطية ، فإن كل شيء يجب أن يقوم بالكثير من المدخلاتالتحليل 
(استخدم مثال تحليل السجل الخاص بنا في بداية الفصل {print $ 7} إلىاستخراج 
URL).على Hadoop ، يتم التخلص من بعض تلك التحويلات النحوية منخفضة القيمة 
باستخدامالمزيد من تنسيقات الملفات المهيكلة: Avro (راجع "Avro" في الصفحة 118) 
والباركيه (انظرغالبًا ما يتم استخدام "التخزين الموجه إلى العمود" في الصفحة 93 ) 
، حيث إنها توفر كفاءةالترميز القائم على المخطط ، والسماح بتطور مخططاتهم بمرور 
الوقت (انظر Chap‐ثالثًا 4 ).مقارنة MapReduce بقواعد البيانات الموزعةعلى مستوى 
أكثر تجريدًا ، تؤدي قواعد البيانات و Hadoop وأنظمة التشغيل جميعهانفس الوظائف: 
فهي تخزن بعض البيانات ، وتسمح لك بمعالجة ذلك والاستعلام عنهالبيانات [ 51 ]. تخزن 
قاعدة البيانات البيانات في سجلات بعض نماذج البيانات (صفوف في الجداول ، 
docu‐الإشارات والرؤوس في الرسم البياني وما إلى ذلك) بينما يقوم نظام ملفات نظام 
التشغيل بتخزين البيانات بتنسيقالملفات - ولكن في جوهرها ، كلاهما عبارة عن أنظمة 
"إدارة معلومات" [ 52 ].كما رأينا ، فإن Hadoop يشبه إلى حد ما نسخة موزعة من Unix 
، حيثHDFS هو نظام الملفات ، و MapReduce هو تطبيق ملتوي لـ Unix pro‐cess (والذي 
يحدث دائمًا لتشغيل أداة الفرز بين مرحلة الخريطة وتقليل المرحلة). رأينا كيف يمكنك 
تنفيذ عمليات الانضمام والتجميع المختلفةعلى رأس هذه الأوليات.402 | الفصل 10: 
معالجة الدُفعات

      صفحة 425
عندما ورقة MapReduce [ 1] ، كان - بمعنى ما - لا على الإطلاقالجديد. كل خوارزميات 
المعالجة والربط المتوازية التي ناقشناها في الماضيتم بالفعل تنفيذ عدد قليل من 
الأقسام فيما يسمى بالمعالجة المتوازية على نطاق واسع(MPP) منذ أكثر من عقد من 
الزمن [ 3 ، 39]. على سبيل المثال ، جاماكانت آلة قاعدة البيانات ، Teradata ، و 
Tandem NonStop SQL من الرواد في هذا المجال[53].يتمثل الاختلاف الأكبر في أن قواعد 
بيانات MPP تركز على التنفيذ المتوازي للتحليلاستعلامات SQL على مجموعة من الأجهزة 
، في حين أن الجمع بين MapReduce ونظام الملفات الموزعة [19] يقدم شيئًا يشبه إلى 
حد كبير الأغراض العامةنظام تشغيل يمكنه تشغيل برامج عشوائية.تنوع التخزينتتطلب 
قواعد البيانات هيكلة البيانات وفقًا لنموذج معين (على سبيل المثال ، rela‐tional 
أو documents) ، في حين أن الملفات الموجودة في نظام الملفات الموزع هي مجرد 
تسلسلات بايت ،والتي يمكن كتابتها باستخدام أي نموذج بيانات وترميز. قد تكون 
مجموعاتمن سجلات قاعدة البيانات ، ولكن يمكن أن تكون صورًا ومقاطع فيديو وقراءات 
أجهزة استشعار ،المصفوفات المتفرقة أو ناقلات السمات أو تسلسل الجينوم أو أي نوع 
آخر من البيانات.بصراحة ، فتح Hadoop إمكانية الإغراق العشوائي للبياناتإلى HDFS ، 
ثم اكتشف لاحقًا كيفية معالجتها بشكل أكبر [54 ]. على نقيض ذلك،تتطلب قواعد بيانات 
MPP عادةً نمذجة مسبقة دقيقة للبيانات واستعلام باتterns قبل استيراد البيانات إلى 
تنسيق التخزين الخاص بقاعدة البيانات.من وجهة نظر خالصة ، قد يبدو أن هذه النمذجة 
الدقيقة والاستيراد كذلكمرغوب فيه ، لأنه يعني أن مستخدمي قاعدة البيانات لديهم 
بيانات ذات جودة أفضل للعملمع. ومع ذلك ، من الناحية العملية ، يبدو أن مجرد إتاحة 
البيانات بسرعة -حتى لو كان بتنسيق خام ملتوي وصعب الاستخدام - فغالبًا ما يكون 
أكثر قيمة من المحاولة‐جي لاتخاذ قرار بشأن نموذج البيانات المثالي مقدمًا [55 
].الفكرة مشابهة لمخزن البيانات (انظر "تخزين البيانات" في الصفحة 88 ): ببساطةيعد 
جمع البيانات من أجزاء مختلفة من مؤسسة كبيرة معًا في مكان واحد أمرًا مفيدًاuable 
، لأنه يمكّن عمليات الانضمام عبر مجموعات البيانات التي كانت متباينة في السابق. 
التصميم مخطط دقيق تتطلبه قاعدة بيانات MPP يبطئ تلك البيانات المركزيةمجموعة؛ جمع 
البيانات في شكلها الأولي ، والقلق بشأن تصميم المخطط لاحقًا ،يسمح بتسريع عملية 
جمع البيانات (مفهوم يُعرف أحيانًا باسم "البياناتبحيرة "أو" مركز بيانات المؤسسة 
"[ 56]).ينقل الإغراق العشوائي للبيانات عبء تفسير البيانات: بدلاً منإجبار منتج 
مجموعة البيانات على إدخالها في تنسيق موحد ، interpre‐تصبح البيانات مشكلة 
المستهلك (نهج المخطط عند القراءة ،راجع "مرونة المخطط في نموذج المستند" في الصفحة 
39 ). هذا يمكن أن يكون Advan‐إذا كان المنتج والمستهلكون فريقين مختلفين لهما 
أولويات مختلفة.قد لا يكون هناك نموذج بيانات واحد مثالي ، ولكن هناك آراء مختلفة 
حول البياناتالتي تناسب أغراض مختلفة. ببساطة إغراق البيانات في شكلها الخام 
يسمحMapReduce وأنظمة الملفات الموزعة | 403

      صفحة 426
للعديد من هذه التحولات. أُطلق على هذا النهج اسم مبدأ السوشي :"البيانات الخام 
أفضل" [ 57].وبالتالي ، غالبًا ما يتم استخدام Hadoop لتنفيذ عمليات ETL (راجع 
"مستودع البيانات"السكن "في الصفحة 88): يتم إغراق البيانات من أنظمة معالجة 
المعاملات فيHDFS في بعض الأشكال الأولية ، ثم تتم كتابة مهام MapReduce لتنظيف تلك 
البيانات ،تحويله إلى نموذج علائقي ، واستيراده إلى مستودع بيانات MPP لـ ana‐أغراض 
lytic. لا تزال نمذجة البيانات تحدث ، لكنها في خطوة منفصلة ، منفصلةمن جمع 
البيانات. هذا ممكن لأن HDFS يدعم البيانات المشفرة في أي ملفصيغة.تنوع نماذج 
المعالجةقواعد بيانات MPP هي أجزاء متجانسة ومتكاملة بإحكام من البرامج تعتني 
بهاتخطيط التخزين على القرص وتخطيط الاستعلام والجدولة والتنفيذ. منذ هذه 
التركيباتيمكن ضبط جميع النينت وتحسينها لتلبية الاحتياجات المحددة لقاعدة البيانات 
والنظامككل يمكن أن يحقق أداءً جيدًا جدًا في أنواع الاستعلامات التي تتعلق 
بهامصمم. علاوة على ذلك ، تسمح لغة استعلام SQL بالاستعلامات التعبيرية 
والأنيقةدلالات الكلمات دون الحاجة إلى كتابة التعليمات البرمجية ، مما يجعلها في 
متناول الأدوات الرسومية المستخدمةمن قبل محللي الأعمال ، مثل Tableau.من ناحية 
أخرى ، لا يمكن التعبير عن جميع أنواع المعالجة بشكل منطقي على أنها SQL 
quer‐الذباب. على سبيل المثال ، إذا كنت تبني التعلم الآلي وأنظمة التوصية ،أو 
فهارس البحث عن النص الكامل مع نماذج الترتيب ذات الصلة ، أو إجراء تحليل 
للصور‐ysis ، فأنت على الأرجح بحاجة إلى نموذج أكثر عمومية لمعالجة البيانات. هذه 
الأنواع منغالبًا ما تكون المعالجة خاصة جدًا بتطبيق معين (مثل هندسة الميزاتللتعلم 
الآلي ، نماذج اللغة الطبيعية للترجمة الآلية ، تقدير المخاطر‐وظائف نشوئها للتنبؤ 
بالاحتيال) ، لذا فهي تتطلب حتمًا كتابة التعليمات البرمجية ، وليس 
فقطاستفسارات.أعطى MapReduce المهندسين القدرة على تشغيل التعليمات البرمجية الخاصة 
بهم بسهولة عبر البيانات الكبيرة‐مجموعات. إذا كان لديك HDFS ومابريديوس، أنت يمكن 
بناء محرك تنفيذ الاستعلام SQLعلاوة على ذلك ، وهذا ما فعله مشروع Hive [ 31 ]. ومع 
ذلك ، يمكنك أيضًاكتابة العديد من الأشكال الأخرى للعملية الدفعية التي لا تصلح 
لوجودهامعبرا عنه كاستعلام SQL.بعد ذلك ، وجد الناس أن MapReduce كان مقيدًا للغاية 
وأداؤه أيضًاسيئًا لبعض أنواع المعالجة ، لذلك تم تطوير نماذج معالجة أخرى مختلفةتم 
تشغيله أعلى Hadoop (سنرى بعضًا منهم في "Beyond MapReduce" على الصفحة406). لم يكن 
وجود نموذجين للمعالجة ، SQL و MapReduce ، كافيًا: أكثر من ذلككانت هناك حاجة إلى 
نماذج مختلفة! وبسبب انفتاح منصة Hadoop ، فإنهاكان من الممكن تنفيذ مجموعة كاملة 
من الأساليب المختلفة ، والتي لن تكون كذلككانت ممكنة ضمن حدود قاعدة بيانات MPP 
متجانسة [ 58].بشكل حاسم ، يمكن تشغيل نماذج المعالجة المختلفة هذه على جهاز واحد 
مشترك-استخدام مجموعة من الآلات ، وكلها تصل إلى نفس الملفات على HDFS. في 
Hadoop404 | الفصل 10: معالجة الدُفعات

      صفحة 427
النهج ، ليست هناك حاجة لاستيراد البيانات إلى عدة أنظمة متخصصة مختلفة‐tems لأنواع 
مختلفة من المعالجة: النظام مرن بما يكفي لدعم أمجموعة متنوعة من أحمال العمل داخل 
نفس المجموعة. عدم الاضطرار إلى نقل البياناتيجعل استخلاص قيمة من البيانات أسهل 
كثيرًا ، وتجربتها أسهل كثيرًانماذج معالجة جديدة.يشتمل نظام Hadoop البيئي على 
قواعد بيانات OLTP ذات الوصول العشوائي مثل HBase(انظر "SSTables و LSM-tree" في 
الصفحة 74 ) ، وكذلك قواعد البيانات التحليلية بأسلوب MPPمثل إمبالا [ 40]. لا 
يستخدم HBase ولا Impala MapReduce ، لكن كلاهما يستخدم HDFSللتخزين. إنها طرق 
مختلفة جدًا للوصول إلى البيانات ومعالجتها ، ولكنومع ذلك يمكنهم التعايش والاندماج 
في نفس النظام.تصميم للأعطال المتكررةعند مقارنة MapReduce بقواعد بيانات MPP ، 
هناك اختلافان آخران في التصميمتبرز المقاربة: معالجة الأخطاء واستخدام الذاكرة 
والقرص. حزمةالعمليات أقل حساسية للأعطال من الأنظمة عبر الإنترنت ، لأنها غير 
فوريةتؤثر فقط على المستخدمين في حالة فشلهم ، ويمكن دائمًا تشغيلهم مرة أخرى.إذا 
تعطلت عقدة أثناء تنفيذ استعلام ، فإن معظم قواعد بيانات MPP تحبط الكلالاستعلام ، 
وإما السماح للمستخدم بإعادة إرسال الاستعلام أو تشغيله تلقائيًا مرة أخرى [ 3 ]. 
كمايتم تشغيل طلبات البحث عادةً لبضع ثوانٍ أو بضع دقائق على الأكثر ، وهذا مقبول 
،نظرًا لأن تكلفة إعادة المحاولة ليست كبيرة جدًا. تفضل قواعد بيانات MPP أيضًا 
الاحتفاظ بهاالبيانات قدر الإمكان في الذاكرة (مثل استخدام وصلات التجزئة) ، لتجنب 
تكلفة القراءة منهاالقرص.من ناحية أخرى ، يمكن لـ MapReduce تحمل فشل الخريطة أو 
تقليل المهمةدون التأثير على الوظيفة ككل ، عن طريق إعادة محاولة العمل على مستوى 
تقسيم الفرد‐المهمة. كما أنها حريصة جدًا على كتابة البيانات على القرص ، جزئيًا 
للتسامح مع الخطأ ، وجزئيًاعلى افتراض أن مجموعة البيانات ستكون أكبر من أن تتسع 
للذاكرة على أي حال.يعتبر نهج MapReduce أكثر ملاءمة للوظائف الأكبر: الوظائف التي 
تعالج ذلكالكثير من البيانات وتشغيلها لفترة طويلة بحيث من المحتمل أن يواجهوا 
واحدة على الأقلفشل المهمة على طول الطريق. في هذه الحالة ، أعد تشغيل الوظيفة 
بأكملها بسبب مهمة واحدةسيكون الفشل إهدارًا. حتى لو كان الاسترداد على مستوى 
التفصيل لمهمة فرديةيقدم نفقات عامة تجعل المعالجة الخالية من الأخطاء أبطأ ، ولا 
يزال من الممكن أن يكون سببًا‐قادر على المقايضة إذا كان معدل فشل المهمة مرتفعًا 
بدرجة كافية.لكن ما مدى واقعية هذه الافتراضات؟ في معظم المجموعات ، تحدث أعطال 
الآلة ،لكنها ليست متكررة جدًا - ربما تكون نادرة بدرجة كافية لدرجة أن معظم 
الوظائف لا تفعل ذلكتجربة عطل في الآلة. هل يستحق حقًا تكبد نفقات عامة كبيرة لـمن 
أجل التسامح مع الخطأ؟لفهم أسباب تجنيب MapReduce للذاكرة ومستوى المهامالاسترداد ، 
من المفيد إلقاء نظرة على البيئة التي تم إنشاء MapReduce لها في الأصلمصمم. تمتلك 
Google مراكز بيانات متعددة الاستخدامات ، وفيها خدمات إنتاج عبر الإنترنت 
وMapReduce وأنظمة الملفات الموزعة | 405

      صفحة 428
تعمل وظائف الدُفعات غير المتصلة بالإنترنت على نفس الأجهزة. كل مهمة لها تخصيص 
الموارد(مراكز وحدة المعالجة المركزية ، وذاكرة الوصول العشوائي ، ومساحة القرص ، 
وما إلى ذلك) التي يتم فرضها باستخدام الحاويات. كل مهمة أيضالها أولوية ، وإذا 
كانت مهمة ذات أولوية أعلى تحتاج إلى موارد أكثر ، مهام ذات أولوية أقلعلى نفس 
الجهاز يمكن إنهاء (استباق) لتحرير الموارد.تحدد الأولوية أيضًا تسعير موارد 
الحوسبة: يجب أن تدفع الفرق مقابلالموارد التي يستخدمونها ، والعمليات ذات الأولوية 
الأعلى تكلف أكثر [59].تسمح هذه البنية لموارد الحوسبة غير الإنتاجية (ذات الأولوية 
المنخفضة) بأن تكون كذلكشديد الالتزام ، لأن النظام يعرف أنه يمكنه استعادة الموارد 
إذا لزم الأمرساري. وهذا بدوره يتيح الاستفادة بشكل أفضل من الآلات وزيادة 
الكفاءة.اختصرت للأنظمة التي تفصل بين مهام الإنتاج والمهام غير الإنتاجية. ولكن 
كماتعمل وظائف MapReduce بأولوية منخفضة ، فهي تتعرض لخطر الاستباق في أي وقتلأن 
العملية ذات الأولوية الأعلى تتطلب مواردها. وظائف الدُفعات بشكل فعال "اخترup the 
scraps under the table "، باستخدام أي موارد حوسبة متبقية بعدلقد أخذت العمليات 
ذات الأولوية العالية ما تحتاج إليه.في Google ، تنطوي مهمة MapReduce التي يتم 
تشغيلها لمدة ساعة على مخاطر بنسبة 5٪ تقريبًايتم إنهاؤها لإفساح المجال لعملية ذات 
أولوية أعلى. هذا المعدل أكثر منترتيب من حيث الحجم أعلى من معدل الفشل بسبب مشاكل 
الأجهزة ،إعادة تشغيل الجهاز أو أسباب أخرى [59 ]. بهذا المعدل من الإجراءات 
الاستباقية ، إذا كان للوظيفة 100المهام التي تعمل لمدة 10 دقائق ، هناك خطر أكبر 
من 50٪ من مهمة واحدة على الأقلسيتم إنهاؤها قبل انتهائها.وهذا هو السبب في أن 
MapReduce مصمم للتسامح مع نهاية المهام غير المتوقعة المتكررة.نشوئها: ليس لأن 
الأجهزة غير موثوقة بشكل خاص ، بل بسبب الحريةيتيح الإنهاء التعسفي للعمليات 
استخدامًا أفضل للموارد في الحوسبةالعنقودية.من بين برامج الجدولة العنقودية مفتوحة 
المصدر ، فإن الوقائية أقل استخدامًا على نطاق واسع. غزليدعم CapacityScheduler 
الإجراءات الاستباقية لتحقيق التوازن بين تخصيص موارد التوزيعات.طوابير طويلة [ 58 
] ، لكن الأولوية العامة الاستباقية غير مدعومة في YARN ، Mesosأو Kubernetes في 
وقت كتابة هذا التقرير [ 60]. في بيئة حيث المهام ليست كذلكغالبًا ما يتم إنهاء 
قرارات التصميم الخاصة بـ MapReduce أقل منطقية. في اليوم التاليفي القسم ، سنلقي 
نظرة على بعض بدائل MapReduce التي تصنع تصميمًا مختلفًاقرارات.ما وراء 
MapReduceعلى الرغم من أن MapReduce أصبح شائعًا جدًا وتلقى الكثير من الضجيج في 
وقت متأخرفي العقد الأول من القرن الحادي والعشرين ، هو مجرد نموذج واحد من بين 
العديد من نماذج البرمجة الممكنة للنظام الموزع‐تيمس. اعتمادًا على حجم البيانات 
وهيكل البيانات ونوع المحترفالتوقف عن القيام بذلك ، قد تكون الأدوات الأخرى أكثر 
ملاءمة للتعبير عن أحساب.406 | الفصل 10: معالجة الدُفعات

      صفحة 429
ومع ذلك ، فقد أمضينا الكثير من الوقت في هذا الفصل في مناقشة MapReduce لأنههي 
أداة تعليمية مفيدة ، حيث إنها عبارة عن تجريد بسيط وواضح إلى حد ما فوق عرضنظام 
ملفات تحية. هذا هو ، بسيط من حيث القدرة على فهم ما هو عليهالقيام به ، ليس بمعنى 
أنه سهل الاستخدام. العكس تمامًا: تنفيذ com‐مهمة معالجة الصفيف من نوع plex 
باستخدام واجهات برمجة تطبيقات MapReduce الخام هي في الواقع صعبة للغاية وشاقةous 
- على سبيل المثال ، ستحتاج إلى تنفيذ خوارزميات الصلة أعلاه منخدش [37 ].استجابةً 
لصعوبة استخدام MapReduce مباشرةً ، فإن العديد من المحترفين ذوي المستوى الأعلىتم 
إنشاء نماذج القواعد (Pig ، Hive ، Cascading ، Crunch) كتجريدات في الأعلىمن 
MapReduce. إذا فهمت كيفية عمل MapReduce ، فمن السهل جدًا القيام بذلكالتعلم ، 
والبنى عالية المستوى الخاصة بهم تجعل العديد من مهام معالجة الدُفعات الشائعةأسهل 
بكثير في التنفيذ.ومع ذلك ، هناك أيضًا مشكلات في نموذج تنفيذ MapReduce نفسه ، 
والذيلا يتم إصلاحها بإضافة مستوى آخر من التجريد ، والتي تظهر نفسهاكأداء ضعيف 
لبعض أنواع المعالجة. من ناحية ، MapReduce هوقوي جدًا: يمكنك استخدامه لمعالجة 
كميات كبيرة تقريبًا من البيانات على ملفنظام متعدد المستأجرين غير موثوق به مع 
إنهاء المهام بشكل متكرر ، وسيظل يحصل علىتم إنجاز المهمة ، وإن كان ذلك ببطء. من 
ناحية أخرى ، تكون الأدوات الأخرى أحيانًا أوامر منnitude لبعض أنواع المعالجة.في 
بقية هذا الفصل ، سوف نلقي نظرة على بعض تلك البدائل لعملية الدُفعات‐عمل. في الفصل 
11 سننتقل إلى معالجة الدفق ، والتي يمكن اعتبارهاطريقة أخرى لتسريع معالجة 
الدُفعات.تجسيد الحالة الوسيطةكما تمت مناقشته سابقًا ، فإن كل وظيفة MapReduce 
مستقلة عن أي وظيفة أخرى.نقاط الاتصال الرئيسية للوظيفة مع بقية العالم هي المدخلات 
والمخرجاتالدلائل على HDFS. إذا كنت تريد أن يصبح إخراج وظيفة واحدة مدخلاً 
لثانيةond job ، فأنت بحاجة إلى تكوين دليل إدخال المهمة الثانية ليكون هو نفسهيجب 
أن يبدأ دليل إخراج الوظيفة الأولى وجدولة سير العمل الخارجية الثانيةالوظيفة فقط 
بمجرد اكتمال الوظيفة الأولى.هذا الإعداد معقول إذا كان الإخراج من الوظيفة الأولى 
عبارة عن مجموعة بيانات تريدهاتنشر على نطاق واسع داخل مؤسستك. في هذه الحالة ، يجب 
أن تكون قادرًا على الرجوع إليهابالاسم ، وأعد استخدامه كمدخلات في العديد من 
الوظائف المختلفة (بما في ذلك الوظائف التي طورهافرق أخرى). يتيح نشر البيانات إلى 
موقع معروف في HDFS إمكانية التوصيل غير المحكمpling ، بحيث لا تحتاج الوظائف إلى 
معرفة من ينتج مدخلاتها أو يستهلكهامخرجاتهم (انظر "الفصل بين المنطق والأسلاك" في 
الصفحة 384).ومع ذلك ، في كثير من الحالات ، أنت تعلم أن ناتج وظيفة واحدة لا يتم 
استخدامه إلا كملفالمدخلات إلى وظيفة أخرى ، والتي يحتفظ بها نفس الفريق. في هذه 
الحالة ، الملفاتعلى HDFS هي ببساطة حالة وسيطة : وسيلة لتمرير البيانات من وظيفة 
واحدة إلىما وراء MapReduce | 407

      الصفحة 430
التالي. في تدفقات العمل المعقدة المستخدمة لبناء أنظمة التوصية ، وتتألف من50 أو 
100 وظيفة MapReduce [ 29] ، هناك الكثير من هذه الحالة الوسيطة.وتسمى هذه العملية 
للكتابة خارج هذه الدولة وسيطة لHDFS تجسيد .(لقد صادفنا المصطلح سابقًا في سياق 
الآراء المجسدة ، في "أجري"gation: مكعبات البيانات ووجهات النظر المحققة "في 
الصفحة 98 . هذا يعني أن تحسب بشغفنتيجة عملية ما وكتابتها ، بدلاً من حسابها عند 
الطلبعند الطلب.)على النقيض من ذلك ، استخدم مثال تحليل السجل في بداية الفصل 
أنابيب Unixلتوصيل إخراج أحد الأوامر بإدخال آخر. أنابيب لا بشكل كاملتجسيد الحالة 
الوسيطة ، ولكن بدلاً من ذلك دفق الإخراج إلى زيادة الإدخالعقليًا ، باستخدام مخزن 
مؤقت صغير في الذاكرة.نهج MapReduce لتجسيد الحالة الوسيطة بالكامل له سلبياتتقليص 
لأنابيب يونكس:• يمكن أن تبدأ مهمة MapReduce فقط عندما تبدأ جميع المهام في 
الوظائف السابقة (التي تولدأكلت مدخلاته) ، في حين أن العمليات المتصلة بواسطة 
أنبوب Unix هيبدأت في نفس الوقت ، مع استهلاك الناتج بمجرد إنتاجه.الانحراف أو 
الحمل المتغير على أجهزة مختلفة يعني أن الوظيفة غالبًا ما يكون لها القليل من 
الشقالمهام اللامعة التي تستغرق وقتًا أطول بكثير لإكمالها من المهام الأخرى. 
الحاجة إلى الانتظار حتىكل مهام الوظيفة السابقة التي تم إكمالها يؤدي إلى إبطاء 
تنفيذسير العمل ككل.• غالبًا ما يكون مصممو الخرائط زائدين عن الحاجة: فهم يقرؤون 
مرة أخرى نفس الملف الذي تم كتابته للتو‐عشرة بواسطة مخفض ، وإعداده للمرحلة 
التالية من التقسيم والفرز. فيفي كثير من الحالات ، يمكن أن يكون رمز المخطط جزءًا 
من المخفض السابق: إذا كان المخفضتم تقسيم الإخراج وفرزه بنفس طريقة إخراج معين ، 
ثميمكن ربط مخفضات السرعة ببعضها البعض مباشرة ، دون التشذير باستخدام جهاز 
التخطيطمراحل.محركات تدفق البياناتلإصلاح هذه المشكلات باستخدام MapReduce ، هناك 
العديد من محركات التنفيذ الجديدة لـتم تطوير حسابات الدُفعات الموزعة ، 
وأشهرهاسبارك [ 61 ، 62]، تيز [ 63، 64] و Flink [ 65 ، 66 ]. هناك اختلافات مختلفة 
فيالطريقة التي تم تصميمها بها ، ولكن هناك شيء واحد مشترك: يتعاملون مع كاملسير 
العمل كوظيفة واحدة ، بدلاً من تقسيمها إلى وظائف فرعية مستقلة.نظرًا لأنهم يقومون 
بنمذجة تدفق البيانات بشكل صريح عبر عدة مراحل معالجة ، فهذهتُعرف الأنظمة بمحركات 
تدفق البيانات . مثل MapReduce ، يعملون بشكل متكرراستدعاء دالة معرّفة من قبل 
المستخدم لمعالجة سجل واحد في كل مرة على مؤشر ترابط واحد.يقومون بموازاة العمل عن 
طريق تقسيم المدخلات ، ويقومون بنسخ إخراج وظيفة واحدة.عبر الشبكة ليصبح المدخل إلى 
وظيفة أخرى.408 | الفصل 10: معالجة الدُفعات

      صفحة 431
الفرق هو أن هذه الوظائف لا تحتاج إلى أخذ الأدوار الصارمة للخريطة 
المتناوبةوتقليلها ، ولكن بدلاً من ذلك يمكن تجميعها بطرق أكثر مرونة. نسمي هذه 
func‐ستعقد المشغلين ، ويوفر محرك تدفق البيانات عدة خيارات مختلفة ليخدعربط إخراج 
أحد المشغلين بإدخال آخر:• أحد الخيارات هو إعادة تقسيم السجلات وفرزها حسب المفتاح 
، كما هو الحال في مرحلة التبديلMapReduce (راجع "التنفيذ الموزع لـ MapReduce" في 
الصفحة 388 ). هذا ena‐bles ودمج الصلات وتجميعها بنفس طريقة MapReduce.• الاحتمال 
الآخر هو أخذ عدة مدخلات وتقسيمها في نفس الوقتالطريق ، ولكن لتخطي الفرز. هذا يوفر 
الجهد على صلات التجزئة المقسمة ، حيث يكون ملفتقسيم السجلات مهم ولكن الترتيب غير 
ذي صلة ، لأن البناءيقوم جدول التجزئة بترتيب الترتيب عشوائيًا على أي حال.• 
بالنسبة لوصلات تجزئة البث ، يمكن إرسال نفس الإخراج من عامل واحد للجميعأقسام عامل 
الانضمام.يعتمد هذا النمط من محرك المعالجة على أنظمة بحث مثل Dryad [67 ] ونيفيل 
[68] ، ويقدم العديد من المزايا مقارنة بنموذج MapReduce:• العمل الباهظ الثمن مثل 
الفرز يحتاج فقط إلى إدخاله في الأماكن التي يكون فيهامطلوب فعلاً ، بدلاً من أن 
يحدث دائمًا بشكل افتراضي بين كل خريطةوتقليل المرحلة.• يتجنب هذا النهج مهام 
الخريطة غير الضرورية ، منذ العمل الذي قام به مصمم الخرائطغالبًا ما يتم دمجها في 
عامل الاختزال السابق (لأن مخططلا يغير تقسيم مجموعة البيانات).• نظرًا لأن جميع 
الصلات وتبعيات البيانات في سير العمل معلنة بشكل صريح ، فإن ملفيحتوي المجدول على 
نظرة عامة حول البيانات المطلوبة في المكان ، حتى يتمكن من إنشاء المنطقة 
المحليةتحسينات. على سبيل المثال ، يمكنه محاولة وضع المهمة التي تستهلك بعض 
البياناتعلى نفس الجهاز مثل المهمة التي تنتجها ، بحيث يمكن أن تكون البياناتيتم 
تبادلها من خلال مخزن مؤقت للذاكرة المشتركة ، بدلاً من الاضطرار إلى نسخهاالشبكة.• 
عادة ما يكون كافياً للبقاء في الحالة الوسيطة بين المشغلينالذاكرة أو الكتابة على 
القرص المحلي ، الأمر الذي يتطلب إدخال / إخراج أقل من كتابته إلى HDFS(حيث يجب 
نسخها إلى عدة أجهزة وكتابتها على قرص في كل تكرار‐ليكا). يقوم MapReduce بالفعل 
بهذا لإخراج معين ، لكن محركات تدفق البيانات تعملنشر الفكرة لجميع الحالات 
الوسيطة.• يمكن للمشغلين البدء في التنفيذ بمجرد أن تصبح مدخلاتهم جاهزة ؛ ليست 
هناك حاجة لانتظر حتى تنتهي المرحلة السابقة بالكامل قبل أن تبدأ المرحلة التالية.• 
يمكن إعادة استخدام عمليات JVM الحالية لتشغيل مشغلين جدد ، مما يقللبدء التشغيل.ما 
وراء MapReduce | 409

      صفحة 432
يمكن استخدام محركات تدفق البيانات لتنفيذ نفس العمليات الحسابية مثل MapReduceسير 
العمل ، وعادة ما يتم تنفيذها بشكل أسرع بسبب التحسيناتفي الاعلى. نظرًا لأن 
المشغلين عبارة عن تعميم للخريطة وتقليل ، فإن نفس المعالجةيمكن تشغيل الكود على أي 
محرك تنفيذ: مهام سير العمل المنفذة في Pig أو Hive أويمكن تبديل التتالي من 
MapReduce إلى Tez بتكوين بسيطتغيير بدون تعديل كود [ 64].Tez هي مكتبة رفيعة إلى 
حد ما تعتمد على خدمة خلط ورق YARN للنسخ الفعلي‐جي البيانات بين العقد [ 58] ، في 
حين أن Spark و Flink هما إطاران كبيرانتتضمن اتصالات الشبكة الخاصة بهم ، والجدولة 
، وواجهات برمجة التطبيقات التي تواجه المستخدم. نحنستناقش واجهات برمجة التطبيقات 
عالية المستوى قريبًا.التسامح مع الخطأميزة تجسيد الحالة الوسيطة بالكامل لـ HDFS 
هي أنها متينة ،مما يجعل التسامح مع الخطأ أمرًا سهلاً إلى حد ما في MapReduce: إذا 
فشلت المهمة ، فيمكن أن تكون كذلكإعادة التشغيل على جهاز آخر ، وقراءة نفس الإدخال 
مرة أخرى من HDFS.يتجنب Spark و Flink و Tez كتابة الحالة الوسيطة إلى HDFS ، لذلك 
يختلفوننهج التسامح في تحمل العيوب: إذا تعطلت الآلة والحالة الوسيطة على ذلكالجهاز 
مفقود ، تتم إعادة حسابه من البيانات الأخرى التي لا تزال متوفرة (interالمرحلة 
المتوسطة إن أمكن ، أو بيانات الإدخال الأصلية ، والتي عادة ما تكون قيد 
التشغيلHDFS).لتمكين إعادة الحساب هذه ، يجب أن يتتبع الإطار كيفية عمل جزء معين 
منتم حساب البيانات - ما هي أقسام الإدخال التي استخدمتها ، والعوامل التي تم 
استخدامهاتنطبق عليه. يستخدم Spark استخراج RDD ("مجموعة البيانات الموزعة المرنة") 
لـتتبع أصل البيانات [ 61 ] ، بينما يشير مشغل نقاط التفتيش Flink ، إلى السماح 
بذلكلاستئناف تشغيل مشغل واجه خطأ أثناء تنفيذه [66 ].عند إعادة حساب البيانات ، من 
المهم معرفة ما إذا كان الحساب محددًا أم لا.ministic : أي ، بالنظر إلى نفس بيانات 
الإدخال ، هل ينتج المشغلون نفس الشيء دائمًاانتاج؟ هذا مهم إذا تم بالفعل إرسال 
بعض البيانات المفقودة إلى المصبالعاملين. إذا تمت إعادة تشغيل المشغل وكانت 
البيانات المعاد حسابها ليست هي نفسهاالبيانات الأصلية المفقودة ، يصبح من الصعب 
جدًا على مشغلي المصب حل المشكلةالتقاليد بين البيانات القديمة والجديدة. الحل في 
حالة عدمالمشغلين الحتميين عادة ما يقتلون مشغلي المصب أيضًا ، ويعملونلهم مرة أخرى 
على البيانات الجديدة.من أجل تجنب مثل هذه الأخطاء المتتالية ، من الأفضل جعل 
المشغلين حتميين.لاحظ مع ذلك أنه من السهل على السلوك غير الحتمي التسلل عن طريق 
الخطأ إلى:على سبيل المثال ، لا تضمن العديد من لغات البرمجة أي ترتيب معينعند 
التكرار فوق عناصر جدول التجزئة ، فإن العديد من الخوارزميات الاحتمالية 
والإحصائيةتعتمد rithms صراحةً على استخدام الأرقام العشوائية وأي استخدام لساعة 
النظام أومصادر البيانات الخارجية غير حتمية. مثل هذه الأسباب لعدم الحتمية تحتاج 
إلى410 | الفصل 10: معالجة الدُفعات

      صفحة 433
يمكن إزالتها من أجل التعافي بشكل موثوق من الأعطال ، على سبيل المثال عن طريق 
التوليدأرقام شبه عشوائية باستخدام بذرة ثابتة.التعافي من الأخطاء عن طريق إعادة 
حساب البيانات ليس دائمًا الإجابة الصحيحة: إذا كان ملفالبيانات الوسيطة أصغر بكثير 
من البيانات المصدر ، أو إذا كان الحساب للغايةكثيفة استخدام وحدة المعالجة 
المركزية ، ربما يكون من الأرخص تجسيد البيانات الوسيطة إلى HDFSمن إعادة 
حسابها.مناقشة التجسيدبالعودة إلى تشبيه يونكس ، رأينا أن MapReduce يشبه كتابة 
مخرجاتكل أمر إلى ملف مؤقت ، بينما تبدو محركات تدفق البيانات أكثر تشابهًاأنابيب 
يونكس. تم تصميم Flink بشكل خاص حول فكرة التنفيذ عبر خطوط الأنابيب ، أيتمرير 
إخراج المشغل بشكل تدريجي إلى مشغلين آخرين ، وعدم الانتظارحتى يكتمل الإدخال قبل 
البدء في معالجته.تحتاج عملية الفرز حتمًا إلى استهلاك مدخلاتها بالكامل قبل أن 
تتمكن من الإنتاج.duce أي إخراج - لأنه من الممكن أن يكون آخر سجل إدخال هو الذي 
يحتوي علىأدنى مفتاح ، وبالتالي يجب أن يكون أول سجل إخراج. أي عامليتطلب الفرز 
وبالتالي سوف تحتاج إلى تراكم الحالة ، على الأقل مؤقتًا. لكن كثيرايمكن تنفيذ 
أجزاء أخرى من سير العمل بطريقة متسلسلة.عند اكتمال المهمة ، يجب أن ينتقل ناتجها 
إلى مكان دائم حتى يتمكن المستخدمون من ذلكابحث عنها واستخدمها - على الأرجح ، تمت 
كتابتها إلى HDFS مرة أخرى. وبالتالي ، عند استخدام البيانات‐محرك التدفق ، لا تزال 
مجموعات البيانات المحسوسة على HDFS هي المدخلات والنهائيةمخرجات الوظيفة. كما هو 
الحال مع MapReduce ، فإن المدخلات غير قابلة للتغيير والإخراجتم استبداله بالكامل. 
التحسن على MapReduce هو أنك تنقذ نفسككتابة كل الحالة الوسيطة إلى HDFS 
أيضًا.الرسوم البيانية والمعالجة التكراريةفي "الرسم البياني مثل بيانات نماذج" في 
الصفحة 48 ناقشنا استخدام الرسوم البيانية لنمذجةالبيانات ، واستخدام لغات 
الاستعلام عن الرسم البياني لاجتياز الحواف والرؤوس في الرسم البياني.ركزت المناقشة 
في الفصل 2 على استخدام نمط OLTP: التنفيذ السريعاستعلامات للعثور على عدد صغير من 
الرؤوس المطابقة لمعايير معينة.من المثير للاهتمام أيضًا إلقاء نظرة على الرسوم 
البيانية في سياق معالجة الدُفعات ، حيث يكون الهدفلإجراء نوع من المعالجة أو 
التحليل دون اتصال بالإنترنت على رسم بياني كامل. هذه الحاجةغالبًا ما ينشأ في 
تطبيقات التعلم الآلي مثل محركات التوصية ، أو فيأنظمة الترتيب. على سبيل المثال ، 
واحدة من أشهر خوارزميات تحليل الرسم البياني هينظام ترتيب الصفحات [ 69] ، والذي 
يحاول تقدير شعبية صفحة ويب بناءً على ماذاصفحات الويب الأخرى تصل إليه. يتم 
استخدامه كجزء من الصيغة التي تحدد الترتيبحيث يعرض محرك بحث الويب نتائجه.ما وراء 
MapReduce | 411

      صفحة 434
محركات تدفق البيانات مثل Spark و Flink و Tez (راجع " تجسيدوسيطة "في الصفحة 407) 
عادةً ما يرتب المشغلون فيوظيفة كرسم بياني دائري موجه (DAG). هذا ليس هو 
نفسهمعالجة الرسم البياني: في محركات تدفق البيانات ، تدفق البيانات من واحدعامل 
إلى آخر منظم كرسم بياني ، بينما البيانات نفسهايتكون عادةً من مجموعات نمط 
العلائقية. في معالجة الرسم البياني ، فإن ملفالبيانات نفسها لها شكل رسم بياني. 
تسمية مؤسفة أخرىارتباك!يتم التعبير عن العديد من خوارزميات الرسم البياني عن طريق 
اجتياز حافة واحدة في كل مرة ، والانضمام إلى واحدةرأس مع رأس مجاور من أجل نشر بعض 
المعلومات وتكرارهاحتى يتم استيفاء بعض الشروط - على سبيل المثال ، حتى لا توجد 
حواف أخرى يجب اتباعها ،أو حتى يتقارب بعض المقاييس. لقد رأينا سابقًا مثالًا في 
الشكل 2-6 ، والذيقدم قائمة بجميع المواقع في أمريكا الشمالية من خلال اتباع الحواف 
بشكل متكررتحديد الموقع الذي يقع ضمنه أي موقع آخر (يسمى هذا النوع من الخوارزمية 
أإغلاق متعد ).من الممكن تخزين رسم بياني في HDFS (في ملفات تحتوي على قوائم من 
الرؤوس والحواف) ،لكن فكرة "التكرار حتى يتم" لا يمكن التعبير عنها في MapReduce 
عادي ، منذ ذلك الحينينفذ فقط تمريرة واحدة فوق البيانات. هذا النوع من الخوارزمية 
في كثير من الأحيانتم تنفيذه بأسلوب تكراري :1. يدير المجدول الخارجي عملية دفعية 
لحساب خطوة واحدة من الخوارزمية ؛2. عند اكتمال عملية الدُفعات ، يتحقق المجدول مما 
إذا كانت قد انتهت أم لا(بناءً على حالة الإكمال ، على سبيل المثال ، لا توجد حواف 
أخرى يجب اتباعها ، أوالتغيير مقارنة بالتكرار الأخير أقل من بعض العتبة) ؛3. إذا 
لم يكن قد انتهى بعد ، فسيعود المجدول إلى الخطوة 1 ويقوم بتشغيل أخرىجولة من عملية 
الدُفعات.يعمل هذا النهج ، ولكن تنفيذه باستخدام MapReduce غالبًا ما يكون غير فعال 
للغاية ،لأن MapReduce لا يأخذ في الحسبان الطبيعة التكرارية للخوارزمية: سوف يفعل 
ذلكاقرأ دائمًا مجموعة بيانات الإدخال بالكامل وأنتج مجموعة بيانات إخراج جديدة 
تمامًا ،حتى لو تم تغيير جزء صغير فقط من الرسم البياني مقارنةً بالتكرار 
الأخير.نموذج معالجة Pregelكتحسين للرسوم البيانية لمعالجة الدُفعات ، فإن التوازي 
المتزامن بالجملة (BSP)نموذج الحساب [70] أصبح شائعًا. من بين أمور أخرى ، يتم 
تنفيذه بواسطةأباتشي جيراف [ 37] و Spark's GraphX ​​API و Flink's Gelly API [ 71 
]. بل هو أيضاالمعروف باسم نموذج Pregel ، حيث روجت ورقة Pregel من Google هذا 
النهج لـمعالجة الرسوم البيانية [72].تذكر أنه في MapReduce ، يقوم مصممو الخرائط 
من الناحية المفاهيمية "بإرسال رسالة" إلى مكالمة معينةمن وظيفة الاختزال ، لأن 
إطار العمل يجمع كل مصمم الخرائط معًا412 | الفصل 10: معالجة الدُفعات

      صفحة 435
يضع مع نفس المفتاح. توجد فكرة مماثلة وراء Pregel: يمكن لرأس واحد أن "يرسل 
mes‐sage "إلى قمة أخرى ، وعادة ما يتم إرسال هذه الرسائل على طول الحواف في ملفرسم 
بياني.في كل تكرار ، يتم استدعاء وظيفة لكل رأس ، وتمرير كل الرسائل التيتم إرسالها 
إليه - يشبه إلى حد كبير استدعاء وظيفة التصغير. الفرق إلى Map‐الاختزال هو أنه في 
نموذج Pregel ، يتذكر الرأس حالته في الذاكرة من حالة واحدةالتكرار إلى التالي ، 
لذلك تحتاج الوظيفة فقط إلى معالجة الرسائل الواردة الجديدة. لولا يتم إرسال أي 
رسائل في جزء ما من الرسم البياني ، ولا يلزم القيام بأي عمل.إنه مشابه إلى حد ما 
لنموذج الممثل (انظر "أطر عمل الممثل الموزع" في الصفحة 134) ،إذا كنت تفكر في كل 
رأس كممثل ، باستثناء حالة الرأس والرسائل الموجودة بينهماالقمم متسامحة مع الأخطاء 
ودائمة ، وهذا الاتصال يستمر بشكل ثابتجولات: في كل تكرار ، يسلم إطار العمل جميع 
الرسائل المرسلة في السابقتكرار. عادة لا يكون لدى الممثلين ضمان مثل هذا 
التوقيت.التسامح مع الخطأحقيقة أن الرؤوس لا يمكنها التواصل إلا عن طريق تمرير 
الرسالة (وليس عن طريق الاستعلامبعضها البعض بشكل مباشر) يساعد على تحسين أداء 
وظائف Pregel ، حيث يمكن للرسائل ذلكيتم تجميعها ويكون هناك انتظار أقل للاتصال. 
الانتظار الوحيد بينالتكرارات: نظرًا لأن نموذج Pregel يضمن إرسال جميع الرسائل في 
تكرار واحديتم تسليمها في التكرار التالي ، يجب أن ينتهي التكرار السابق تمامًا ، 
وكل شيءيجب نسخ رسائلها عبر الشبكة ، قبل أن تبدأ الرسالة التالية.على الرغم من 
احتمال إسقاط الشبكة الأساسية أو تكرارها أو تأخيرها بشكل تعسفي.sages (انظر 
"الشبكات غير الموثوقة" في الصفحة 269 ) ، ضمان تطبيقات Pregelأن الرسائل تتم 
معالجتها مرة واحدة بالضبط عند قمة الوجهة في ما يليتكرار. كما هو الحال في 
MapReduce ، يتعافى إطار العمل بشفافية من الأخطاء ، بتنسيقلتبسيط نموذج البرمجة 
للخوارزميات أعلى Pregel.يتم تحقيق هذا التسامح مع الخطأ من خلال تحديد حالة جميع 
الرؤوس بشكل دوريفي نهاية التكرار ، أي كتابة حالتها الكاملة للتخزين الدائم. إذا 
فشلت العقدةوفقد حالته في الذاكرة ، فإن أبسط حل هو استرجاع الرسم البياني 
بأكملهالحساب لآخر نقطة تفتيش وإعادة الحساب. إذا كانت الخوارزميةالحتمية ويتم 
تسجيل الرسائل ، من الممكن أيضًا استردادها بشكل انتقائي فقطالقسم الذي فقد (كما 
ناقشنا سابقًا لمحركات تدفق البيانات) [ 72].التنفيذ الموازيلا يحتاج الرأس إلى 
معرفة الآلة المادية التي يتم تنفيذها ؛ عندما تكونيرسل الرسائل إلى الرؤوس الأخرى 
، فهو يرسلها ببساطة إلى معرف الرأس. الأمر متروك لـإطار لتقسيم الرسم البياني - أي 
لتحديد الرأس الذي يعمل على أي، وكيفية توجيه الرسائل عبر الشبكة بحيث ينتهي بهم 
الأمر في ملفالمكان الصحيح.ما وراء MapReduce | 413

      صفحة 436
لأن نموذج البرمجة يتعامل مع رأس واحد فقط في كل مرة (أحيانًايسمى التفكير مثل قمة 
الرأس ) قد يقسم الإطار الرسم البياني بطرق عشوائية.من الناحية المثالية ، سيتم 
تقسيمها بحيث تتواجد القمم معًا على نفس الجهازإذا كانوا بحاجة إلى التواصل كثيرًا. 
ومع ذلك ، العثور على مثل هذا التقسيم الأمثلصعب - من الناحية العملية ، غالبًا ما 
يتم تقسيم الرسم البياني ببساطة عن طريق تجزئة معرف الرأس ، mak‐لا توجد محاولة 
لتجميع الرؤوس ذات الصلة معًا.نتيجة لذلك ، غالبًا ما تحتوي خوارزميات الرسم 
البياني على الكثير من الاتصالات عبر الأجهزةالرأس ، والحالة الوسيطة (الرسائل 
المرسلة بين العقد) غالبًا ما تكون أكبر منالرسم البياني الأصلي. يمكن أن تشير 
النفقات العامة لإرسال الرسائل عبر الشبكة إلىيعمل باستمرار على إبطاء خوارزميات 
الرسم البياني الموزعة.لهذا السبب ، إذا كان الرسم البياني الخاص بك يمكن أن يتناسب 
مع ذاكرة جهاز كمبيوتر واحد ، فمن المحتمل جدًاأن خوارزمية ذات آلة واحدة (ربما حتى 
أحادية الخيط) سوف تتفوق على عرضعملية دفعية تحية [73 ، 74]. حتى لو كان الرسم 
البياني أكبر من الذاكرة ، لكن يمكن أن يصلحعلى أقراص جهاز كمبيوتر واحد ، معالجة 
آلة واحدة باستخدام إطار مثللأن GraphChi خيار قابل للتطبيق [ 75]. إذا كان الرسم 
البياني أكبر من أن يتناسب مع جهاز واحد ، أالنهج الموزع مثل Pregel أمر لا مفر منه 
؛ رسم بياني موازٍ بكفاءةالخوارزميات هي مجال البحث المستمر [76].واجهات برمجة 
التطبيقات واللغات عالية المستوىعلى مر السنين منذ أن أصبحت MapReduce شائعة لأول 
مرة ، كانت محركات التنفيذ الخاصة بـ dis‐نضجت معالجة الدُفعات المسددة. الآن ، 
أصبحت البنية التحتيةقوية بما يكفي لتخزين ومعالجة العديد من وحدات بيتابايت من 
البيانات على مجموعات تزيد عن 10000الآلات. نظرًا لأن مشكلة عمليات الدُفعات التي 
تعمل فعليًا على هذا النطاقتم اعتبارها محلولة إلى حد ما ، وتحول الاهتمام إلى 
مجالات أخرى: التحسيننموذج البرمجة ، وتحسين كفاءة المعالجة ، وتوسيع نطاقمجموعة من 
المشاكل التي يمكن لهذه التقنيات حلها.كما تمت مناقشته سابقًا ، فإن اللغات عالية 
المستوى وواجهات برمجة التطبيقات مثل Hive و Pig و Cascad‐أصبحت ing و Crunch شائعة 
لأن برمجة وظائف MapReduce يدويًا أصبحتشاق جدا. مع ظهور Tez ، كان لهذه اللغات 
عالية المستوى فائدة إضافيةملائم للقدرة على الانتقال إلى محرك تنفيذ تدفق البيانات 
الجديد دون الحاجة إلى ذلكأعد كتابة رمز الوظيفة. يتضمن Spark و Flink أيضًا واجهات 
برمجة تطبيقات تدفق البيانات عالية المستوى الخاصة بهما ،غالبًا ما يستلهمون من 
FlumeJava [34].تستخدم واجهات برمجة التطبيقات لتدفق البيانات بشكل عام كتل بناء 
ذات نمط علاقي للتعبير عن comوضع: ضم مجموعات البيانات على قيمة حقل ما ، وتجميع 
المجموعات حسب المفتاح ، والتصفيةحسب بعض الشروط ، وتجميع المجموعات عن طريق العد 
أو الجمع أو وظائف أخرى.داخليًا ، يتم تنفيذ هذه العمليات باستخدام مختلف عمليات 
الانضمام والتجميعالخوارزميات التي ناقشناها سابقًا في هذا الفصل.إلى جانب الميزة 
الواضحة المتمثلة في طلب رمز أقل ، فإن هذه الواجهات عالية المستوى أيضًاتسمح 
بالاستخدام التفاعلي ، حيث تكتب رمز التحليل بشكل تدريجي في قذيفة ، و414 | الفصل 
10: معالجة الدُفعات

      صفحة 437
قم بتشغيله بشكل متكرر لمراقبة ما يفعله. هذا النمط من التطوير مفيد للغايةعند 
استكشاف مجموعة بيانات وتجربة أساليب معالجتها. أنهتذكرنا أيضًا بفلسفة Unix ، التي 
ناقشناها في "The Unix philoso‐phy "في الصفحة 382 .علاوة على ذلك ، فإن هذه 
الواجهات عالية المستوى لا تجعل البشر يستخدمون النظام فقطأكثر إنتاجية ، لكنها 
تعمل أيضًا على تحسين كفاءة تنفيذ الوظائف في الماكينةمستوى.التحرك نحو لغات 
الاستعلام التقريريةميزة تحديد الصلات باعتبارها عوامل علائقية ، بدلاً من 
كتابتهايدويًا ، هو أن الإطار يمكنه تحليل خصائص مدخلات الانضمام ، وتقرر تلقائيًا 
أي خوارزميات الانضمام المذكورة أعلاه ستكون أكثرمتكافئ. تحتوي Hive و Spark و 
Flink على مُحسِنات استعلام تعتمد على التكلفة يمكنها القيام بذلك ، وحتى تغيير 
ترتيب الصلات بحيث يتم تقليل مقدار الحالة الوسيطة[66، 77، 78 ،79 ].يمكن أن يُحدث 
اختيار خوارزمية الانضمام فرقًا كبيرًا في أداء الدُفعةالعمل ، ومن الجيد ألا تضطر 
إلى فهم وتذكر كل ما هو مختلف.الإيقاعات التي ناقشناها في هذا الفصل. وهذا ممكن إذا 
ينضم المحددة في declara-طريقة tive : يوضح التطبيق ببساطة الوصلات المطلوبة 
والاستعلامالمُحسِّن يقرر أفضل طريقة لتنفيذها. لقد صادفنا هذا سابقًافكرة في "لغات 
الاستعلام عن البيانات" في الصفحة 42 .ومع ذلك ، من نواحٍ أخرى ، فإن MapReduce 
وخلفائه في تدفق البيانات مختلفون تمامًامن نموذج الاستعلام التعريفي بالكامل لـ 
SQL. تم إنشاء MapReduce حول الفكرةمن عمليات الاسترجاع للوظيفة: لكل سجل أو مجموعة 
من السجلات ، وظيفة محددة من قبل المستخدم(المخطط أو المخفض) يسمى ، وهذه الوظيفة 
مجانية لاستدعاء كود تعسفي فيمن أجل أن تقرر ما الذي ستخرجه. هذا النهج له ميزة 
يمكنك رسمهاعلى نظام بيئي كبير من المكتبات الحالية للقيام بأشياء مثل التحليل ، 
اللغة الطبيعيةالتحليل وتحليل الصور والخوارزميات العددية أو الإحصائية.إن حرية 
تشغيل التعليمات البرمجية التعسفية بسهولة هي ما تمتاز به معالجة الدُفعات منذ فترة 
طويلةأنظمة MapReduce التراث من قواعد بيانات MPP (راجع "مقارنة MapReduce إلىقواعد 
البيانات الموزعة "في الصفحة 402 ) ؛ على الرغم من أن قواعد البيانات لديها تسهيلات 
للكتابةالوظائف التي يحددها المستخدم ، غالبًا ما تكون مرهقة للاستخدام وليست 
متكاملة بشكل جيدمع مديري الحزم وأنظمة إدارة التبعية المستخدمة على نطاق واسع 
فيمعظم لغات البرمجة (مثل Maven for Java و npm لـ JavaScript و Ruby‐الأحجار 
الكريمة لروبي ، إلخ).ومع ذلك ، وجدت محركات تدفق البيانات أن هناك أيضًا مزايا 
للدمجالمزيد من الميزات التعريفية في مناطق أخرى إلى جانب الصلات: على سبيل المثال 
، إذا كانت وظيفة رد الاتصاليحتوي على شرط ترشيح بسيط فقط ، أو يختار فقط بعض 
الحقول من ملفسجل ، ثم هناك حمل كبير لوحدة المعالجة المركزية في استدعاء الوظيفة 
على كلسجل.ما وراء MapReduce | 415

      صفحة 438
إذا تم التعبير عن عمليات التصفية ورسم الخرائط البسيطة هذه بطريقة تعريفية ،يمكن 
لمحسِّن الاستعلام الاستفادة من تخطيطات التخزين الموجهة نحو العمود (انظر"التخزين 
القائم على العمود" في الصفحة 93) واقرأ فقط الأعمدة المطلوبة منالقرص. تستخدم Hive 
و Spark DataFrames و Impala أيضًا التنفيذ المتجه (راجع Memعرض النطاق الترددي 
والتنفيذ عبر خطوط الأنابيب "في الصفحة 96 ): التكرار على البيانات بشكل ضيقالحلقة 
الداخلية الملائمة لذاكرة التخزين المؤقت لوحدة المعالجة المركزية ، وتجنب 
استدعاءات الوظائف. شرارة مولدةates JVM bytecode [ 79 ] وتستخدم إمبالا LLVM 
لإنشاء كود أصلي لهؤلاءالحلقات الداخلية [ 40].من خلال دمج الجوانب التصريحية في 
واجهات برمجة التطبيقات عالية المستوى ، والحصول على خيار الاستعلامmizers التي 
يمكن أن تستفيد منها أثناء التنفيذ ، إطار معالجة الدُفعات‐تبدأ الأعمال في أن تبدو 
أشبه بقواعد بيانات MPP (ويمكن أن تحقق ملفاتأداء). في الوقت نفسه ، من خلال امتلاك 
القدرة على التوسعة لتكون قادرًا على تشغيل arbiرمز trary وقراءة البيانات بتنسيقات 
عشوائية ، فإنها تحتفظ بميزة المرونة الخاصة بها.تخصص لمجالات مختلفةفي حين أن 
قابلية التوسعة للقدرة على تشغيل تعليمات برمجية عشوائية مفيدة ، فهناك أيضًاالعديد 
من الحالات الشائعة حيث تستمر أنماط المعالجة القياسية في التكرار ، وهكذايستحق 
وجود تطبيقات قابلة لإعادة الاستخدام لبنات البناء المشتركة. التقليد-حليفًا ، لقد 
خدمت قواعد بيانات MPP احتياجات محللي ذكاء الأعمال والشركاتness التقارير ، ولكن 
هذا مجرد واحد من بين العديد من المجالات التي يتم فيها معالجة الدُفعاتيستخدم.مجال 
آخر ذو أهمية متزايدة هو الخوارزميات الإحصائية والرقمية ،اللازمة لتطبيقات التعلم 
الآلي. التطبيقات التي يعاد استخدامهاناشئ: على سبيل المثال ، تنفذ Mahout 
خوارزميات مختلفة للتعلم الآليفوق MapReduce و Spark و Flink ، بينما يطبق MADlib 
وظيفة مماثلة‐ality داخل قاعدة بيانات MPP العلائقية (Greenplum / HAWK) [55 ].من 
المفيد أيضًا استخدام الخوارزميات المكانية ، على سبيل المثال k أقرب جيران [80 ] 
أييبحث عن العناصر القريبة من عنصر معين في مساحة متعددة الأبعاد - أنوع من البحث 
عن التشابه. البحث التقريبي مهم أيضًا لتحليل الجينومالخوارزميات التي تحتاج إلى 
العثور على سلاسل متشابهة ولكنها غير متطابقة [81 ].يتم استخدام محركات المعالجة 
الدفعية للتنفيذ الموزع للخوارزميات منمجموعة واسعة بشكل متزايد من المجالات. نظرًا 
لأن أنظمة معالجة الدُفعات تكتسب مدمجةوظائف وعوامل تعريفية عالية المستوى ، وكما 
تصبح قواعد بيانات MPPأكثر قابلية للبرمجة والمرونة ، بدأ الاثنان في الظهور بشكل 
أكثر تشابهًا: فيالنهاية ، فهي جميعًا مجرد أنظمة لتخزين البيانات ومعالجتها.ملخصفي 
هذا الفصل اكتشفنا موضوع معالجة الدُفعات. بدأنا بالنظر إلىأدوات يونكس مثل AWK ، 
البقرى و الفرز ، ورأينا كيف أن فلسفة تصميم416 | الفصل 10: معالجة الدُفعات

      صفحة 439
يتم نقل هذه الأدوات إلى MapReduce ومحركات تدفق البيانات الأحدث.تتضمن بعض مبادئ 
التصميم هذه: المدخلات غير قابلة للتغيير ، والمخرجات مقصودةلتصبح المدخل إلى 
برنامج آخر (غير معروف حتى الآن) ، ومشاكل معقدةيتم حلها عن طريق تأليف أدوات صغيرة 
"تؤدي شيئًا واحدًا جيدًا".في عالم Unix ، الواجهة الموحدة التي تسمح بتكوين برنامج 
واحدمع آخر الملفات والأنابيب. في MapReduce ، هذه الواجهة عبارة عن ملفات 
موزعة‐تيم. رأينا أن محركات تدفق البيانات تضيف آلية نقل البيانات الشبيهة 
بالأنابيبnisms لتجنب تجسيد الحالة الوسيطة لنظام الملفات الموزع ، ولكنالإدخال 
الأولي والمخرج النهائي للوظيفة لا يزال عادة HDFS.المشكلتان الرئيسيتان اللتان 
تحتاجهما أطر معالجة الدُفعات الموزعةحل التقسيم والتسامح مع الخطأ:التقسيمفي 
MapReduce ، يتم تقسيم رسامي الخرائط وفقًا لمجموعات ملفات الإدخال. الخروج-يتم 
إعادة تقسيم وضع مصممي الخرائط وفرزها ودمجها في رقم قابل للتكوينمن أقسام المخفض. 
الغرض من هذه العملية هو إحضار جميع البيانات ذات الصلة ،على سبيل المثال ، جميع 
السجلات التي لها نفس المفتاح ، معًا في نفس المكان.تحاول محركات تدفق البيانات 
Post-MapReduce تجنب الفرز ما لم يكن ذلك مطلوبًا ، ولكنوبخلاف ذلك يتخذون نهجًا 
مشابهًا إلى حد كبير للتقسيم.التسامح مع الخطأكثيرًا ما يكتب MapReduce على القرص ، 
مما يسهل استرداد مهمة مامن مهمة فردية فاشلة دون إعادة تشغيل الوظيفة بأكملها ، 
ولكنها تبطئتنفيذ لأسفل في حالة خالية من الفشل. تؤدي محركات تدفق البيانات مواد 
أقلzation من الحالة المتوسطة والاحتفاظ بالمزيد في الذاكرة ، مما يعني أنهابحاجة 
إلى إعادة حساب المزيد من البيانات في حالة فشل العقدة. العوامل الحتمية تقلل 
منكمية البيانات التي يجب إعادة حسابها.ناقشنا العديد من خوارزميات الانضمام لـ 
MapReduce ، ومعظمها أيضًا بينتستخدم في قواعد بيانات MPP ومحركات تدفق البيانات. 
كما أنها توفر صورة جيدةحول كيفية عمل الخوارزميات المقسمة:فرز ودمج الصلاتيمر كل 
من المدخلات التي يتم ضمها عبر معين يقوم باستخراج مفتاح الربط.من خلال التقسيم 
والفرز والدمج ، تنتهي جميع السجلات التي لها نفس المفتاحالذهاب إلى نفس استدعاء 
دالة الاختزال. يمكن لهذه الوظيفة بعد ذلك إخراج ملفالسجلات المنضمة.ينضم تجزئة 
البثأحد مدخلي الوصل صغير ، لذا فهو غير مقسم ويمكن أن يكون بالكاملتحميلها في جدول 
التجزئة. وبالتالي ، يمكنك بدء مخطط لكل قسم من أقسامإدخال ارتباط كبير ، قم بتحميل 
جدول التجزئة للإدخال الصغير في كل مخطط ، وملخص | 417

      صفحة 440
ثم افحص الإدخال الكبير سجلًا واحدًا في كل مرة ، والاستعلام عن جدول التجزئة الخاص 
بهكل سجل.تنضم التجزئة المقسمةإذا تم تقسيم مدخلي الانضمام بنفس الطريقة (باستخدام 
نفس المفتاح ، نفسدالة التجزئة ، ونفس عدد الأقسام) ، فيمكن لنهج جدول التجزئةيمكن 
استخدامها بشكل مستقل لكل قسم.تحتوي محركات معالجة الدُفعات الموزعة على برمجة 
مقيدة بشكل متعمدالنموذج: من المفترض أن تكون وظائف رد الاتصال (مثل أجهزة التخطيط 
والمخفضات) عديمة الحالة ،وليس لها آثار جانبية مرئية خارجيًا إلى جانب نتائجها 
المحددة. هذهيسمح لإطار العمل بإخفاء بعض مشاكل الأنظمة الموزعة الصلبة: فيمواجهة 
الأعطال ومشكلات الشبكة ، يمكن إعادة محاولة المهام بأمان ، والإخراج منيتم تجاهل 
أي مهام فاشلة. إذا نجحت عدة مهام للقسم ، فسيكون أحدها فقطفي الواقع يجعل ناتجه 
مرئيًا.لذلك ، لا داعي للقلق بشأن الكود الخاص بك في وظيفة المعالجة المجمعةتوجيه 
آليات تحمل الخطأ: يمكن أن يضمن الإطار أن النتيجة النهائيةوضع العمل هو نفسه كما 
لو لم تحدث أخطاء ، على الرغم من اختلافها في الواقعربما كان لا بد من إعادة محاولة 
المهام. هذه الدلالات الموثوقة أقوى بكثير مما هيلديك عادةً في الخدمات عبر 
الإنترنت التي تتعامل مع طلبات المستخدمين ، والتي تكتب إلى البيانات‐القواعد كأثر 
جانبي لمعالجة الطلب.السمة المميزة لوظائف المعالجة الدفعية هي أنها تقرأ بعض 
بيانات الإدخالوينتج بعض بيانات الإخراج ، دون تعديل المدخلات - وبعبارة أخرى ، 
فإنالإخراج مشتق من المدخلات. الاهم من ذلك هو إدخال البيانات يحدها : فقد 
معروفة،حجم ثابت - على سبيل المثال ، يتكون من مجموعة من ملفات السجل في وقت ما ، 
أو ملفلقطة من محتويات قاعدة البيانات. لأنها مقيدة ، فإن الوظيفة تعرف متى 
تنتهي؟ished قراءة المدخلات بالكامل ، وهكذا تكتمل المهمة في النهاية عند 
الانتهاء.في الفصل التالي ، سوف ننتقل إلى معالجة الدفق ، حيث يكون الإدخال غير 
صحيح.ded - أي أنه لا يزال لديك وظيفة ، لكن مدخلاتها هي تدفقات لا تنتهي أبدًا من 
البيانات. فيفي هذه الحالة ، لا تكتمل الوظيفة أبدًا ، لأنه قد يكون هناك المزيد من 
العمل في أي وقتالقادمة. سنرى أن معالجة الدفق والدُفعات متشابهة على مستوى ما ،لكن 
افتراض وجود تدفقات غير محدودة يغير كثيرًا أيضًا حول كيفية إنشاء نظامتيمس.مراجع[1 
] جيفري دين وسانجاي غيماوات: "MapReduce: معالجة البيانات المبسطة علىمجموعات 
كبيرة "، في ندوة USENIX السادسة حول تصميم نظام التشغيل وفرضه‐التوجيه (OSDI) ، 
ديسمبر 2004.[2 ] جويل سبولسكي: "مخاطر JavaSchools، "joelonsoftware.com ، 25 
كانون الأول (ديسمبر) 2005.418 | الفصل 10: معالجة الدُفعات

      صفحة 441
[3] شيفناث بابو وهيرودوتوس هيرودوتو: " قواعد البيانات الموازية بشكل كبير 
وMapReduce Systems ، " أسس واتجاهات قواعد البيانات ، المجلد 5 ، العدد 1 ،الصفحات 
من 1 إلى 104 ، تشرين الثاني (نوفمبر) 2013. دوى: 10.1561 / 1900000036[4 ] ديفيد 
جي ديويت ومايكل ستونبراكر: "MapReduce: خطوة كبيرة إلى الوراء‐عنابر، "المنشور في 
الأصل على databasecolumn.vertica.com ، 17 كانون الثاني (يناير) 2008.[5] هنري 
روبنسون: " الفيل كان حصان طروادة: عند موت الخريطة-تقليل في جوجل، 
"the-paper-trail.org ، 25 يونيو 2014.[6 ] "آلة هوليريث، "مكتب تعداد الولايات 
المتحدة ، census.gov.[7] “ دليل مرجعي لفرز IBM 82 و 83 و 84، "إصدار A24-1034-1 ، 
Interna‐شركة tional Business Machines ، يوليو 1962.[8 ] آدم دريك: "يمكن أن تكون 
أدوات سطر الأوامر 235x أسرع من Hadoop clus‐ter ، ”aadrake.com ، 25 كانون الثاني 
(يناير) 2014.[9 ] "وثائق GNU Coreutils 8.23 "، مؤسسة البرمجيات الحرة ، 2014.[10] 
مارتن كليبمان: " كافكا ، سامزا ، وفلسفة يونكس في التوزيعبيانات، 
"martin.kleppmann.com ، 5 آب (أغسطس) 2015.[11] دوغ ماكلروي: مذكرة مختبرات بيل 
الداخلية ، أكتوبر 1964. مقتبس في: دينيس مريتشي: "نصيحة من دوج ماكلروي ، 
"cm.bell-labs.com.[12] MD McIlroy و EN Pinson و BA Tague: “ UNIX Time-Sharing 
System: Fore‐كلمة، " المجلة التقنية لنظام بيل ، المجلد 57 ، العدد 6 ، الصفحات 
1899–1904 ،يوليو 1978.[13] إريك س رايموند: فن برمجة UNIX . أديسون ويسلي ، 
سبتمبر2003. ISBN: 0-13-142901-9[14 ] رونالد دنكان: "تنسيقات ملفات نصية - نص محدد 
ASCII - ليس CSV أو TABنص محدد ، "ronaldduncan.wordpress.com ، 31 أكتوبر 
2009.[15] آلان كاي: " هل" هندسة البرمجيات "تناقض متناقض؟، "tinlizzie.org.[16] 
مارتن فاولر: " InversionOfControl " martinfowler.com ، 26 يونيو 2005.[17] دانيال 
جيه بيرنشتاين: " اثنان من واصفات الملفات للمآخذ، "cr.yp.to.[18 ] روب بايك ودينيس 
إم ريتشي: "هندسة Styx للنظم الموزعة‐tems ، " Bell Labs Technical Journal ، 
المجلد 4 ، العدد 2 ، الصفحات 146-152 ، أبريل 1999.[19 ] سانجاي غيماوات ، هوارد 
جوبيوف ، وشون تاك ليونج: "نظام ملفات Google‐tem ، "في ندوة ACM 19 حول مبادئ 
أنظمة التشغيل (SOSP) ، أكتوبر2003. دوى: 10.1145 / 945445.945450ملخص | 419

      صفحة 442
[20] زهي زانغ ، وأندرو وانغ ، وكاي تشنغ ، وأوما ماهيسوارا جي ، وفيناياكومار 
ب:"مقدمة إلى HDFS Erasure Coding في Apache Hadoop "blog.cloudera.com ، 23سبتمبر 
2015.[21 ] بيتر كنوده:Hadoop تبلغ العاشرة من العمر "yahoohadoop.tumblr.com ، 5 
فبراير 2016.[22] إريك بالديشويلر: " التفكير في HDFS مقابل تقنيات التخزين 
الأخرى‐gies "، hortonworks.com ، 25 تموز (يوليو) 2012.[23مايكل أوفسيانيكوف ، 
سيلفيوس روس ، داميان ريفز وآخرون: " ملف Quantcastنظام، " وقائع وقف VLDB ، المجلد 
6 ، العدد 11 ، الصفحات 1092–1101 ، أغسطس 2013. دوى: 10.14778/2536222.2536234[24 
] "وثائق مطور OpenStack Swift 2.6.1، "مؤسسة OpenStack ،docs.openstack.org ، مارس 
2016.[25 ] بريندان جريج:مانتا: Unix Meets Map Reduce "، dtrace.org ، 25 يونيو 
2013.[26] توم وايت: Hadoop: الدليل النهائي ، الطبعة الرابعة. أورايلي ميديا ​​، 
مارس2015. ISBN: 978-1-4919-0163-2[27 ] جيم إن جراي: "اقتصاديات الحوسبة الموزعة، 
Microsoft Research Techتقرير MSR-TR-2003-24 ، مارس 2003.[28 ] مارتون 
ترينكسيني:Luigi vs Airflow vs Pinball ، "bytepawn.com ، 6 فبراير2016.[29 ] روشان 
سومبالي وجاي كريبس وسام شاه: "النظام البيئي "البيانات الضخمة" فيLinkedIn ، "في 
مؤتمر ACM الدولي حول إدارة البيانات (SIGMOD) ،يوليو 2013. doi: 10.1145 / 
2463676.2463707[30 ] آلان إف غيتس ، أولغا ناتكوفيتش ، شوبهام شوبرا وآخرون: "بناء 
رفيع المستوىنظام تدفق البيانات أعلى Map-Reduce: The Pig Experience "، في المركز 
الخامس والثلاثين الدوليمؤتمر قواعد البيانات الكبيرة جدًا (VLDB) ، أغسطس 2009.[31 
] أشيش ثيسو ، جويديب سين سارما ، ناميت جين وآخرون: "خلية - مقياس بيتابايتمستودع 
البيانات باستخدام Hadoop، في المؤتمر الدولي السادس والعشرون IEEE حول 
البياناتالهندسة (ICDE) ، مارس 2010. doi: 10.1109 / ICDE.2010.5447738[32] " 
Cascading 3.0 User Guide ،" Concurrent، Inc.، docs.cascading.org ، يناير 
2016.[33] “ دليل مستخدم Apache Crunch، "Apache Software Foundation ، 
crunch.apache.org.[34] كريغ تشامبرز ، أشيش رانيوالا ، فرانسيس بيري وآخرون: " 
FlumeJava: Easy، Effi‐Cient Data-Parallel Pipelines ، "في المؤتمر الحادي 
والثلاثين لـ ACM SIGPLAN حول البرمجةتصميم اللغة وتنفيذها (PLDI) ، الصفحات 
363-375 ، يونيو 2010. doi:10.1145 / 1806596.1806638[35] جاي كريبس: " لماذا تعتبر 
الدولة المحلية أمرًا بدائيًا أساسيًا في معالجة البث " ،oreilly.com ، 31 يوليو 
2014.420 | الفصل 10: معالجة الدُفعات

      صفحة 443
[36] مارتن كليبمان: " إعادة التفكير في التخزين المؤقت في تطبيقات الويب " ، 
martin.kleppmann.com ،1 أكتوبر 2012.[37] مارك جروفر ، وتيد مالاسكا ، وجوناثان 
سيدمان ، وجوين شابيرا: هادوبمعماريات التطبيق. أورايلي ميديا ​​، يونيو 2015. 
ISBN: 978-1-4919-0004-8[38] فيليب أجوكس ، وناثان برونسون ، وسانجيف كومار ، ويات 
لويد ، وكوشيكVeeraraghavan: " التحديات التي تواجه اعتماد تناسق أقوى على نطاق 
واسع " ، في المركز الخامس عشرورشة عمل USENIX حول الموضوعات الساخنة في أنظمة 
التشغيل (HotOS) ، مايو 2015.[39] ديفيد جي ديويت ، وجيفري إف نوتن ، ودونوفان إيه 
شنايدر ، وسيشادري:"التعامل مع الانحراف العملي في عمليات الانضمام المتوازية "، في 
المؤتمر الدولي الثامن عشر حول جدًاقواعد البيانات الكبيرة (VLDB) ، الصفحات 27-40 
، أغسطس 1992.[40] مارسيل كورناكر وألكسندر بيم وفيكتور بيتورف وآخرون: " إمبالا: 
حديث ،محرك SQL مفتوح المصدر لبرنامج Hadoop "، في المؤتمر السابع الذي يعقد كل 
سنتين حول الابتكاربحوث نظم البيانات (CIDR) ، يناير 2015.[41 ] ماتيو مونش:PalDB 
مفتوح المصدر ، رفيق خفيف الوزن للتخزينالبيانات الجانبية، 
"engineering.linkedin.com ، 26 أكتوبر 2015.[42 ] دانيال بينج وفرانك دابك: 
"المعالجة الإضافية على نطاق واسع باستخدام Dis‐المعاملات والإشعارات "، في مؤتمر 
USENIX التاسع حول نظام التشغيل‐تصميم وتنفيذ (OSDI) ، أكتوبر 2010.[43] “ Cloudera 
Search دليل المستخدم، Cloudera ، Inc. ، سبتمبر 2015.[44 ] ليلي وو ، وسام شاه ، 
وشون تشوي ، وميتول تيواري ، وكريستيان بوسي: "التصفح‐الخرائط: التصفية التعاونية 
في LinkedIn، "في ورشة العمل السادسة حول التوصية Sys‐tems and the Social Web 
(RSWeb) ، أكتوبر 2014.[45 ] روشان سومبالي ، جاي كريبس ، لي جاو وآخرون: "خدمة 
كمبيو على نطاق واسعبيانات ted مع مشروع فولدمورت، "في المؤتمر العاشر USENIX حول 
الملفات والتخزينTechnologies (FAST) ، فبراير 2012.[46 ] فارون شارما:Terrapin 
مفتوح المصدر: نظام تقديم للدفعة المُنشأةبيانات، “engineering.pinterest.com ، 14 
سبتمبر 2015.[47 ] ناثان مارز: "الفيل DB، "slideshare.net ، 30 أيار (مايو) 
2011.[48 ] جان دانيال (دينار) كريانز: "الكيفية: استخدام التحميل المجمع HBase 
ولماذا ، "blog.cloudera.com ، 27 سبتمبر 2013.[49 ] ناثان مارز: "كيف تتغلب على 
نظرية CAP ”، nathanmarz.com ، 13 أكتوبر2011.[50 ] مولي بارتليت ديشمان ومارتن 
فاولر: "هندسة معمارية رشيقة، "في O'Reillyمؤتمر هندسة البرمجيات ، مارس 2015.ملخص 
| 421

      صفحة 444
[51 ] دينيس إم ريتشي وكين طومسون: "نظام مشاركة الوقت UNIX ، "اتصالات من ACM ، 
المجلد 17 ، العدد 7 ، يوليو 1974. دوى:10.1145 / 361011.361061[52] Eric A Brewer 
و Joseph M Hellerstein: “ CS262a: Advanced Topics in Com‐أنظمة الكمبيوتر، 
"ملاحظات المحاضرة ، جامعة كاليفورنيا ، بيركلي ، cs.berkeley.edu ،أغسطس 2011.[53 
] ديفيد جي ديويت وجيم إن جراي: "أنظمة قواعد البيانات الموازية: مستقبل 
المرتفعأنظمة قواعد بيانات الأداء، اتصالات من ACM ، المجلد 35 ، العدد 6 ،الصفحات 
85-98 ، يونيو 1992. دوى: 10.1145 / 129888.129894[54 ] جاي كريبس: "لكن الأمر 
متعدد الإيجارات هو في الواقع صعب حقًا "، سقسقةالعاصفة ، twitter.com ، 31 أكتوبر 
2014.[55] جيفري كوهين ، وبريان دولان ، ومارك دنلاب ، وجوزيف إم هيلرستين ، وكاليب 
ويلوطن: "مهارات MAD: ممارسات التحليل الجديدة للبيانات الضخمة ، وقائع VLDBالوقف ، 
المجلد 2 ، العدد 2 ، الصفحات 1481-1492 ، أغسطس 2009. دوى:10.14778 / 
1687553.1687576[56] بيج روبرتس: " إلى المخطط عند القراءة أو المخطط عند الكتابة ، 
هذا هو Hadoopسؤال بحيرة البيانات ، "adaptivesystemsinc.com ، 2 تموز (يوليو) 
2015.[57] بوبي جونسون وجوزيف أدلر: " مبدأ السوشي: البيانات الأولية أفضل،" 
فيStrata + Hadoop World ، سان خوسيه ، كاليفورنيا ، فبراير 2015.[58 ] فينود كومار 
فافيلابالي ، آرون سي مورثي ، كريس دوغلاس وآخرون: "اباتشيHadoop YARN: مفاوض موارد 
آخر "، في ندوة ACM الرابعة بتاريخالحوسبة السحابية (SoCC) ، أكتوبر 2013.دوى: 
10.1145 / 2523616.2523633[59 ] أبهيشيك فيرما ، لويس بيدروسا ، مادوكار كوروبولو 
وآخرون: "كتلة كبيرة الحجمإدارة في Google مع Borg، "في المؤتمر الأوروبي العاشر 
لنظام الكمبيوترtems (EuroSys) ، أبريل 2015.دوى: 10.1145 / 2741948.2741964[60] 
Malte Schwarzkopf: " تطور معماريات جدولة العنقود، "firmaمنة.io ، 9 مارس 2016.[61 
] ماتي زهاريا ، مشرف شودري ، تاثاغاتا داس وآخرون: "ديس مرن‐مجموعات البيانات التي 
تم تكريمها: تجريد متسامح مع الخطأ للحوسبة العنقودية داخل الذاكرة ، "في ندوة 
USENIX التاسعة حول تصميم وتنفيذ الأنظمة الشبكية(NSDI) ، أبريل 2012.[62] هولدن 
كاراو وآندي كونوينسكي وباتريك ويندل وماتي زاهريا: التعلمشرارة . O'Reilly Media ، 
يناير 2015. ISBN: 978-1-4493-5904-1[63 ] بيكاس ساها وحيث شاه: "Apache Tez: تسريع 
عملية استعلام Hadoop‐ing ، "في Hadoop Summit ، سان خوسيه ، كاليفورنيا ، حزيران 
(يونيو) 2014.422 | الفصل 10: معالجة الدُفعات

      صفحة 445
[64] بيكاس ساها ، هيتيش شاه ، سيدهارث سيث ، وآخرون: " أباتشي تيز: إطار 
موحد‐العمل في تطبيقات النمذجة وبناء معالجة البيانات ، "في ACM Interna‐المؤتمر 
الإقليمي لإدارة البيانات (SIGMOD) ، الصفحات 1357-1369 ، يونيو 2015.دوى: 10.1145 
/ 2723372.2742790[65] Kostas Tzoumas: " Apache Flink: واجهة برمجة التطبيقات ووقت 
التشغيل وخريطة طريق المشروع،" الانزلاق-share.net ، 14 يناير 2015.[66 ] الكسندر 
الكسندروف ، ريكو بيرجمان ، ستيفان إوين وآخرون: "الستراتوسفيرمنصة لتحليلات 
البيانات الضخمة ، " مجلة VLDB ، المجلد 23 ، العدد 6 ، الصفحات 939–964 ، مايو 
2014. دوى: 10.1007 / s00778-014-0357-y[67] مايكل إيسارد ، ميهاي بوديو ، يوان يو 
، أندرو بيرل ، ودينيس فيترلي:"درياد: البرامج المتوازية الموزعة للبيانات من كتل 
البناء المتسلسلة ، "فيالمؤتمر الأوروبي لأنظمة الكمبيوتر (EuroSys) ، الصفحات 
59-72 ، مارس 2007. doi:10.1145 / 1272996.1273005[68] دانيال وارنك وأوديج كاو: " 
Nephele: كفاءة معالجة البيانات المتوازية فيالغيمة، "في ورشة العمل الثانية حول 
الحوسبة متعددة المهام على الشبكات وأجهزة الكمبيوتر العملاقة(MTAGS) ، نوفمبر 
2009. doi: 10.1145 / 1646468.1646476[69 ] لورانس بيج ، سيرجي برين ، راجيف 
موتواني ، وتيري فينوغراد: "باجوترتيب الاقتباس الإلكتروني: إحضار الطلب إلى الويب 
، "ستانفورد إنفولاب التقنيةتقرير 422 ، 1999.[70 ] ليزلي جي فاليانت: "نموذج تجسير 
للحساب المتوازي، " الاتصالاتمن ACM ، المجلد 33 ، العدد 8 ، الصفحات 103-111 ، 
أغسطس 1990. دوى:10.1145 / 79173.79181[71] ستيفان إوين وكوستاس تزوما وموريتز 
كوفمان وفولكر ماركل: " Spin‐نينغ تدفقات البيانات التكرارية السريعة، " وقائع VLDB 
Endowment ، المجلد 5 ،رقم 11 ، يوليو 2012. دوى: 10.14778 / 2350229.2350245[72] 
Grzegorz Malewicz ، Matthew H Austern ، Aart JC Bik ، وآخرون: " Pregel: A 
Systemلمعالجة الرسم البياني على نطاق واسع، "في مؤتمر ACM الدولي للإدارةالبيانات 
(SIGMOD) ، الصفحات 135–146 ، يونيو 2010. doi: 10.1145 / 1807167.1807184[73] 
فرانك ماكشيري ومايكل إيسارد وديريك جي موراي: " قابلية التوسع! لكن في ماذاكلفة؟ ، 
في ورشة عمل USENIX الخامسة عشرة حول الموضوعات الساخنة في أنظمة التشغيل (HotOS) 
،مايو 2015.[74 ] إيونيل جوج ، مالتي شوارزكوف ، ناتاشا كروكس ، وآخرون: "الفارس: 
الكل لواحد ،واحد للجميع في أنظمة معالجة البيانات، "في المؤتمر الأوروبي العاشر 
للكمبيوترSystems (EuroSys) ، أبريل 2015. doi: 10.1145 / 2741948.2741968[75 ] آبو 
كيرولا ، وجاي بلوش ، وكارلوس جيسترين: "GraphChi: رسم بياني واسع النطاقالحساب على 
جهاز كمبيوتر فقط "، في ندوة USENIX العاشرة حول أنظمة التشغيلالتصميم والتنفيذ 
(OSDI) ، أكتوبر 2012.ملخص | 423

      صفحة 446
[76 ] أندرو لينهارث ودونالد نجوين وكيشاف بينجالي:تحليل الرسم البياني الموازيics، 
اتصالات من ACM ، المجلد 59 ، العدد 5 ، الصفحات 78-87 ، مايو 2016. doi:10.1145 / 
2901919[77] فابيان هوسكي: "نظرة خاطفة إلى غرفة محرك أباتشي فلينك، 
"flink.apache.org ، 13مارس 2015.[78 ] مصطفى مختار:Hive 0.14 محسن قائم على 
التكلفة (CBO) أكثر من الناحية الفنيةعرض، "hortonworks.com ، 2 آذار (مارس) 
2015.[79] مايكل أرمبروست ، رينولد إس شين ، تشينج ليان ، وآخرون: “ Spark SQL: 
Relationalمعالجة البيانات في Spark، "في مؤتمر ACM الدولي حول إدارة 
البيانات(SIGMOD) ، يونيو 2015. دوى: 10.1145 / 2723372.2742797[80 ] دانيال 
بلازيفسكي: "زرع كوادريس لأباتشي فلينك، "insightdataengineer‐ing.com ، 25 مارس 
2016.[81] توم وايت: " مجموعة أدوات تحليل الجينوم: يتم الآن استخدام Apache Spark 
لبرنامج Data Pro‐cessing "blog.cloudera.com، 6 أبريل 2016.424 | الفصل 10: معالجة 
الدُفعات

      صفحة 447
الفصل 11تيار المعالجةلقد وجد دائمًا أن النظام المعقد الذي يعمل قد تطور من نظام 
بسيطانه يعمل انها تعمل. يبدو أيضًا أن الاقتراح العكسي صحيح: نظام معقدالمصممة من 
الصفر لا تعمل أبدًا ولا يمكن تشغيلها.—جون غال ، النظاميات (1975)ناقشنا في الفصل 
العاشر معالجة الدُفعات - وهي التقنيات التي تقرأ مجموعة من الملفات كـالإدخال ، 
وإنتاج مجموعة جديدة من ملفات الإخراج. الإخراج هو شكل من أشكال البيانات المشتقة 
،أي ، مجموعة بيانات يمكن إعادة إنشائها عن طريق تشغيل العملية المجمعة مرة أخرى 
إذا لزم الأمرساري. رأينا كيف يمكن استخدام هذه الفكرة البسيطة والفعالة لإنشاء 
فهارس بحث ،أنظمة التوصيات والتحليلات والمزيد.ومع ذلك ، بقي افتراض كبير واحد طوال 
الفصل 10: أن المدخلاتمحدد ، أي حجم معروف ومحدود ، لذلك تعرف عملية الدُفعات متى 
تنتهيished قراءة المدخلات الخاصة به. على سبيل المثال ، عملية الفرز المركزية لـ 
Map‐يجب أن يقرأ Reduce مدخلاته بالكامل قبل أن يبدأ في إنتاج المخرجات: يمكنه 
ذلكيحدث أن آخر سجل إدخال هو الذي يحتوي على أقل مفتاح ، وبالتالي يحتاجليكون أول 
سجل إخراج ، لذا فإن بدء الإخراج مبكرًا ليس خيارًا.في الواقع ، الكثير من البيانات 
غير محدودة لأنها تصل تدريجيًا بمرور الوقت: المستخدمون لديكأنتجوا بيانات أمس 
واليوم ، وسيستمرون في إنتاج المزيد من البياناتالغد. ما لم تخرج من العمل ، فإن 
هذه العملية لا تنتهي أبدًا ، وهكذا تنتهي البياناتلا تكتمل أبدًا بأي طريقة ذات 
معنى [1]. وبالتالي ، يجب أن تكون معالجات الدُفعات بشكل مصطنعقسّم البيانات إلى 
أجزاء ذات مدة ثابتة: على سبيل المثال ، معالجة قيمة يوم واحدمن البيانات في نهاية 
كل يوم ، أو معالجة بيانات لمدة ساعة في نهايةكل ساعة.تكمن مشكلة عمليات الدُفعات 
اليومية في أن التغييرات في الإدخال تنعكس فقطفي الإخراج بعد يوم واحد ، وهو بطيء 
جدًا بالنسبة للعديد من المستخدمين غير الصبورين. للتخفيف من425

      صفحة 448
تأخير ، يمكننا تشغيل المعالجة بشكل متكرر - لنقل ، معالجة قيمة ثانيةمن البيانات 
في نهاية كل ثانية - أو حتى بشكل مستمر ، التخلي عن الثابتشرائح زمنية بالكامل ، 
وببساطة معالجة كل حدث فور حدوثه. هذه هي الفكرةوراء معالجة التيار .بشكل عام ، 
يشير الدفق إلى البيانات التي يتم توفيرها بشكل متزايد بمرور الوقت. اليظهر المفهوم 
في العديد من الأماكن: في stdin و stdout من Unix ، برمجة lan‐guages ​​(القوائم 
البطيئة) [ 2 ] ، واجهات برمجة تطبيقات نظام الملفات (مثل FileInputStream لجافا) ، 
ووصلة TCPوتوصيل الصوت والفيديو عبر الإنترنت وما إلى ذلك.في هذا الفصل سننظر في 
تدفقات الأحداث كآلية لإدارة البيانات:نظير غير مقيد ومعالج بشكل تدريجي لبيانات 
الدُفعة التي رأيناها في الماضيالفصل. سنناقش أولاً كيفية تمثيل التدفقات وتخزينها 
ونقلهاعبر الشبكة. في"قواعد البيانات والجداول" في الصفحة 436 سوف نتحرى 
العلاقة‐الشحن بين التدفقات وقواعد البيانات. وأخيرًا ، في "معالجة التدفقات" في 
الصفحة 448سوف نستكشف الأساليب والأدوات لمعالجة تلك التدفقات باستمرار ، وطرق كيف 
يمكن استخدامها لبناء التطبيقات.بث الحدث تياراتفي عالم معالجة الدُفعات ، تكون 
مدخلات ومخرجات الوظيفة عبارة عن ملفات (ربما في ملفنظام الملفات الموزعة). كيف 
يبدو مكافئ البث؟عندما يكون الإدخال عبارة عن ملف (تسلسل من البايتات) ، فعادة ما 
تكون خطوة المعالجة الأولى هيتحليلها في سلسلة من السجلات. في سياق معالجة الدفق ، 
يكون السجل أكثر من ذلكيُعرف عمومًا بالحدث ، ولكنه في الأساس نفس الشيء: الذات 
الصغيرةيحتوي على كائن غير قابل للتغيير يحتوي على تفاصيل شيء حدث فيفي وقت ما. 
عادة ما يحتوي الحدث على طابع زمني يشير إلى وقت حدوثهبينيد.على سبيل المثال ، قد 
يكون الشيء الذي حدث إجراءً اتخذه المستخدم ، مثلعرض صفحة أو إجراء عملية شراء. قد 
ينشأ أيضًا من آلة ، مثلقياس دوري من مستشعر درجة الحرارة أو مقياس استخدام وحدة 
المعالجة المركزية. فيعلى سبيل المثال "معالجة مجمعة باستخدام أدوات Unix" في 
الصفحة 379 ، كل سطر من الويبسجل الخادم هو حدث.قد يتم ترميز الحدث كسلسلة نصية ، 
أو JSON ، أو ربما شكل ثنائي ، مثلتمت مناقشته في الفصل 4 . يسمح لك هذا بتخزين حدث 
، على سبيل المثال من خلال إلحاقهإلى ملف أو إدراجه في جدول علائقي أو كتابته في 
قاعدة بيانات مستند. هو - هييتيح لك أيضًا إرسال الحدث عبر الشبكة إلى عقدة أخرى من 
أجل تقديمتوقف.في المعالجة المجمعة ، تتم كتابة الملف مرة واحدة ومن المحتمل أن 
تقرأه وظائف متعددة.بشكل مشابه ، في المصطلحات المتدفقة ، يتم إنشاء حدث مرة واحدة 
بواسطة المنتج(يُعرف أيضًا باسم الناشر أو المرسل ) ، ومن المحتمل أن تتم معالجته 
بواسطة محتالون متعددون426 | الفصل 11: معالجة الدفق

      صفحة 449
سومرز ( المشتركون أو المتلقون ). في نظام الملفات ، يحدد اسم الملف مجموعة من 
ملفاتالسجلات. في نظام البث ، عادةً ما يتم تجميع الأحداث ذات الصلة معًا في 
ملفموضوع أو تيار .من حيث المبدأ ، يكفي الملف أو قاعدة البيانات لربط المنتجين 
والمستهلكين: أيكتب المُنتِج كل حدث يُنشئه إلى مخزن البيانات وكل مستهلكيستقصي 
مخزن البيانات بشكل دوري للتحقق من الأحداث التي ظهرت منذ آخر مرة تم تشغيلها. 
هذههو في الأساس ما تفعله عملية الدُفعات عندما تعالج بيانات يومية بقيمةنهاية كل 
يوم.ومع ذلك ، عند الانتقال نحو المعالجة المستمرة مع تأخيرات منخفضة ، 
الاقتراعيصبح مكلفًا إذا لم يكن مخزن البيانات مصممًا لهذا النوع من الاستخدام. 
الاكثرغالبًا ما تقوم بالاستقصاء ، تنخفض النسبة المئوية للطلبات التي ترجع أحداثًا 
جديدة ، وبالتاليكلما ارتفعت النفقات العامة. بدلاً من ذلك ، من الأفضل إخطار 
المستهلكينعندما تظهر أحداث جديدة.لم تدعم قواعد البيانات تقليديًا هذا النوع من 
آلية الإخطار جدًاحسنًا: قواعد البيانات العلائقية عادة ما تحتوي على مشغلات ، 
والتي يمكن أن تتفاعل مع التغيير (على سبيل المثاليتم إدراج صف في جدول) ، لكنها 
محدودة للغاية فيما يمكن القيام به ، وإلى حد ما من التفكير المتأخر في تصميم قاعدة 
البيانات [ 3 ، 4 ]. بدلا من ذلك ، متخصصتم تطوير الأدوات لغرض تسليم إخطارات 
الحدث.أنظمة المراسلةمن الأساليب الشائعة لإخطار المستهلكين بالأحداث الجديدة 
استخدام الرسائلالنظام : يرسل المنتج رسالة تحتوي على الحدث ، ثم يتم دفعه 
إلىالمستهلكين. لقد تطرقنا إلى هذه الأنظمة سابقًا في "تدفق بيانات تمرير 
الرسائل"في الصفحة 132، لكننا سنخوض الآن في مزيد من التفاصيل.قناة اتصال مباشر مثل 
أنبوب Unix أو اتصال TCP بين pro‐سيكون ducer والمستهلك طريقة بسيطة لتنفيذ نظام 
المراسلة.ومع ذلك ، فإن معظم أنظمة المراسلة تتوسع في هذا النموذج الأساسي. على وجه 
الخصوص ، يونكستقوم الأنابيب و TCP بتوصيل مرسل واحد بالضبط بمستقبل واحد ، في حين 
أن المراسلةيسمح النظام لعقد المنتج المتعددة بإرسال رسائل إلى نفس الموضوع ، ويسمح 
لعدة عقد للمستهلكين بتلقي رسائل في موضوع ما.ضمن نموذج الاشتراك - النشر هذا ، 
تأخذ الأنظمة المختلفة نطاقًا واسعًا منلا توجد إجابة واحدة صحيحة لجميع الأغراض. 
للتمييز بينالأنظمة ، من المفيد بشكل خاص طرح السؤالين التاليين:1. ماذا يحدث إذا 
أرسل المنتجون رسائل أسرع مما يستطيع المستهلكون تقديمها؟وقف لهم؟ بشكل عام ، هناك 
ثلاثة خيارات: يمكن للنظام إسقاط الرسائلحكماء ، أو تخزين الرسائل مؤقتًا في قائمة 
انتظار ، أو تطبيق ضغط عكسي (حظر المنتجمن إرسال المزيد من الرسائل). على سبيل 
المثال ، تستخدم أنابيب Unix و TCP backpres‐بث الأحداث | 427

      صفحة 450
بالتأكيد: لديهم مخزن مؤقت صغير ثابت الحجم ، وإذا امتلأ ، فسيتم حظر المرسلحتى 
يأخذ المستلم البيانات من المخزن المؤقت.إذا تم تخزين الرسائل مؤقتًا في قائمة 
انتظار ، فمن المهم فهم ما يحدثمع نمو هذا الطابور. هل يتعطل النظام إذا لم تعد 
قائمة الانتظار مناسبة للذاكرة؟ory؟ أم أنه يكتب الرسائل على القرص ، ولكن كيف يؤثر 
ذلك على الأداء؟2. ماذا يحدث إذا تعطلت العقد أو انقطع الاتصال مؤقتًا بها؟ هل فقدت 
أية رسائل؟ كمامع قواعد البيانات ، قد تتطلب المتانة مزيجًا من الكتابة على القرصو 
/ أو النسخ المتماثل (راجع "النسخ المتماثل والاستمرارية" في الصفحة 218 ) ، والذي 
يحتوي على ملفكلفة. إذا كنت تستطيع تحمل فقدان الرسائل في بعض الأحيان ، فمن 
المحتمل أن تحصل على مستوى أعلىالإنتاجية ووقت استجابة أقل على نفس الجهاز.يعتمد ما 
إذا كان فقدان الرسالة مقبولاً إلى حد كبير على التطبيق. من أجل الإختبار-ple ، مع 
قراءات أجهزة الاستشعار والمقاييس التي يتم إرسالها بشكل دوري ، من حين لآخرقد لا 
تكون نقطة البيانات المفقودة مهمة ، حيث سيتم إرسال قيمة محدثةبعد وقت قصير على أي 
حال. ومع ذلك ، احذر من أنه إذا تم إسقاط عدد كبير من الرسائل‐بيد أنه قد لا يتضح 
على الفور أن المقاييس غير صحيحة [ 5 ]. إذا كنت كذلكعد الأحداث ، من المهم أكثر أن 
يتم تسليمها بشكل موثوق ، منذ كل خسارةالرسالة تعني عدادات غير صحيحة.من الخصائص 
الرائعة لأنظمة معالجة الدُفعات في الفصل 10 أنها توفر ملفضمان موثوقية قوي: تتم 
إعادة محاولة المهام الفاشلة تلقائيًا ، والإخراج الجزئيمن المهام الفاشلة يتم 
تجاهلها تلقائيًا. هذا يعني أن الإخراج هو نفسه كما لولم تحدث أي إخفاقات ، مما 
يساعد على تبسيط نموذج البرمجة. في وقت لاحق في هذاالفصل سوف ندرس كيف يمكننا تقديم 
ضمانات مماثلة في البث المباشرنص.الرسائل المباشرة من المنتجين إلى 
المستهلكينيستخدم عدد من أنظمة المراسلة اتصال الشبكة المباشر بين 
المنتجينالمستهلكين والمستهلكين ، دون المرور عبر العقد الوسيطة:• يستخدم البث 
المتعدد UDP على نطاق واسع في الصناعة المالية للتدفقات مثل الأسهمخلاصات السوق ، 
حيث يكون وقت الاستجابة المنخفض مهمًا [6]. على الرغم من أن UDP نفسه هو 
unrelia‐بلي ، يمكن لبروتوكولات مستوى التطبيق استرداد الحزم المفقودة (يجب على 
المنتجتذكر الحزم التي أرسلتها ، حتى تتمكن من إعادة إرسالها عند الطلب).• مكتبات 
الرسائل غير الوسيطة مثل ZeroMQ [ 7] و nanomsg تأخذ نفس الشيءالنهج ، تنفيذ رسائل 
النشر والاشتراك عبر الإرسال المتعدد TCP أو IP.• StatsD [8] و Brubeck [ 5 ] 
يستخدمان رسائل UDP غير موثوقة لجمع المقاييسمن جميع الأجهزة الموجودة على الشبكة 
ومراقبتها. (في بروتوكول StatsD ،تكون مقاييس العداد صحيحة فقط إذا تم استلام جميع 
الرسائل ؛ باستخدام UDP يجعلالمقاييس في أحسن الأحوال تقريبية [9]. راجع أيضًا "TCP 
مقابل UDP" في الصفحة 275. )428 | الفصل 11: معالجة الدفق

      الصفحة 451
• إذا كشف المستهلك عن خدمة على الشبكة ، يمكن للمنتجين أن يقوموا بعمل مباشرطلب 
HTTP أو RPC (انظر "تدفق البيانات عبر الخدمات: REST و RPC" على الصفحة127) لإرسال 
الرسائل إلى المستهلك. هذه هي الفكرة وراء خطافات الويب [ 10 ] ، أالنمط الذي يتم 
فيه تسجيل عنوان URL لمعاودة الاتصال لخدمة ما في خدمة أخرى ،ويقوم بتقديم طلب إلى 
عنوان URL هذا كلما وقع حدث ما.على الرغم من أن أنظمة المراسلة المباشرة هذه تعمل 
بشكل جيد في المواقف التي تعمل فيهامصممة ، فهي تتطلب عمومًا رمز التطبيق ليكون على 
دراية بالإمكانيةمن فقدان الرسالة. العيوب التي يمكنهم تحملها محدودة للغاية: حتى 
لو كانت البروتوكولاتاكتشاف وإعادة إرسال الحزم المفقودة في الشبكة ، فهم يفترضون 
ذلك بشكل عامالمنتجون والمستهلكون متصلون بالإنترنت باستمرار.إذا كان المستهلك غير 
متصل بالإنترنت ، فقد يفوتك الرسائل التي تم إرسالها بينما يتعذر الوصول إليها.تسمح 
بعض البروتوكولات للمنتج بإعادة محاولة تسليم الرسائل الفاشلة ، ولكن هذاالنهج في 
حالة تعطل المنتج ، مما يؤدي إلى فقدان المخزن المؤقت للرسائل التيكان من المفترض 
إعادة المحاولة.وسطاء الرسائلالبديل الأكثر استخدامًا هو إرسال الرسائل عبر وسيط 
الرسائل (المعروف أيضًا باسمقائمة انتظار الرسائل ) ، والتي تعد في الأساس نوعًا من 
قواعد البيانات التي تم تحسينها للتعامل معهاتدفقات الرسائل [11]. يعمل كخادم ، مع 
اتصال المنتجين والمستهلكينلها كعملاء. يكتب المنتجون رسائل إلى الوسيط ، ويستقبلها 
المستهلكونبقراءتها من الوسيط.من خلال مركزية البيانات في الوسيط ، يمكن لهذه 
الأنظمة أن تتسامح مع العملاء بسهولة أكبرالتي تأتي وتذهب (الاتصال ، قطع الاتصال 
وتعطل) ، ومسألة المتانةانتقل إلى الوسيط بدلاً من ذلك. يحتفظ بعض وسطاء الرسائل 
بالرسائل في الذاكرة فقط ،بينما يقوم الآخرون (حسب التكوين) بكتابتها على القرص حتى 
لا تضيعفي حالة تعطل الوسيط. في مواجهة المستهلكين البطيئين ، فإنهم يسمحون عمومًا 
بإلغاء الاشتراكDed queuing (على عكس إسقاط الرسائل أو الضغط العكسي) ، على الرغم 
من أن هذا قد يكونتعتمد أيضًا على التكوين.من نتائج قائمة الانتظار أيضًا أن 
المستهلكين غير متزامنين بشكل عام : متىيرسل المنتج رسالة ، وعادة ما ينتظر الوسيط 
فقط لتأكيد ذلكقام بتخزين الرسالة مؤقتًا ، لكنه لا ينتظر معالجة الرسالة بواسطة 
con‐سومرز. سيحدث التسليم للمستهلكين في نقطة مستقبلية غير محددة فيالوقت - غالبًا 
خلال جزء من الثانية ، ولكن في بعض الأحيان متأخر بشكل ملحوظ إذا كان هناكتراكم 
قائمة الانتظار.وسطاء الرسائل مقارنة بقواعد البياناتيمكن لبعض وسطاء الرسائل 
المشاركة في بروتوكولات الالتزام على مرحلتين باستخدام XA أوJTA (راجع "المعاملات 
الموزعة عمليًا" في الصفحة 350). هذا يجعلهم هادئينبث الأحداث | 429

      صفحة 452
مماثلة في طبيعتها لقواعد البيانات ، على الرغم من أنه لا تزال هناك اختلافات عملية 
مهمةبين وسطاء الرسائل وقواعد البيانات:• عادةً ما تحتفظ قواعد البيانات بالبيانات 
إلى الأبد حتى يتم حذفها صراحةً ، في حين أن معظمهايقوم وسطاء الرسائل تلقائيًا 
بحذف رسالة عندما يتم ذلك بنجاحتسليمها للمستهلكين. وسطاء الرسائل هؤلاء ليسوا 
مناسبين للمدى الطويلمخزن البيانات.• نظرًا لأنهم يحذفون الرسائل بسرعة ، فإن معظم 
وسطاء الرسائل يفترضون أن ملفاتهممجموعة العمل صغيرة إلى حد ما ، أي قوائم الانتظار 
قصيرة. إذا احتاج الوسيط إلى تخزين ملفالكثير من الرسائل لأن المستهلكين بطيئون 
(ربما تسرب الرسائل إلىالقرص إذا لم تعد مناسبة للذاكرة) ، فإن كل رسالة فردية 
تستغرق وقتًا أطولعملية ، وقد تتدهور الإنتاجية الإجمالية [12].• غالبًا ما تدعم 
قواعد البيانات الفهارس الثانوية وطرق مختلفة للبحث عنهاالبيانات ، بينما يدعم 
وسطاء الرسائل غالبًا طريقة ما للاشتراك في مجموعة فرعية منالموضوعات التي تتطابق 
مع بعض الأنماط. الآليات مختلفة ولكن كلاهما أساسي‐طرق أساسية للعميل لتحديد جزء 
البيانات الذي يريد معرفتهحول.• عند الاستعلام عن قاعدة بيانات ، عادة ما تستند 
النتيجة على نقطة في الوقت المناسب‐لقطة من البيانات إذا كتب عميل آخر شيئًا ما في 
وقت لاحق إلى قاعدة البياناتالذي يغير نتيجة الاستعلام ، لا يكتشف العميل الأول أن 
نتيجته السابقةأصبح الآن قديمًا (ما لم يكرر الاستعلام ، أي استطلاعات الرأي 
للتغييرات). على نقيض ذلك،لا يدعم وسطاء الرسائل الاستفسارات التعسفية ، لكنهم لا 
يخطرون العملاء متىتتغير البيانات (أي عند توفر رسائل جديدة).هذه هي النظرة 
التقليدية لوسطاء الرسائل ، وهي مغلفة في المعاييرمثل JMS [ 13] و AMQP [ 14] ، وتم 
تنفيذه في برنامج مثل RabbitMQ ،ActiveMQ و HornetQ و Qpid و TIBCO Enterprise 
Message Service و IBM MQ و Azureحافلة الخدمة.تعدد المستهلكينعندما يقرأ العديد من 
المستهلكين رسائل في نفس الموضوع ، فإن هناك نمطين رئيسيينالرسائل المستخدمة ، كما 
هو موضح في الشكل 11-1 :توزيع الحمليتم تسليم كل رسالة إلى أحد المستهلكين ، حتى 
يتمكن المستهلكون من المشاركةعمل معالجة الرسائل في الموضوع. يجوز للوسيط تعيين 
mes‐حكماء للمستهلكين بشكل تعسفي. هذا مفيد عندما تكون الرسائل باهظة الثمنالعملية 
، ولذا تريد أن تكون قادرًا على إضافة مستهلكين لموازاة العملية‐عمل. (في AMQP ، 
يتم ذلك من خلال وجود عملاء متعددين يستهلكون من نفس الشيءqueue ، وفي JMS يطلق 
عليه اشتراك مشترك .)430 | الفصل 11: معالجة الدفق

      صفحة 453
معجب فييتم تسليم كل رسالة لجميع المستهلكين. هذا يسمح للعديد من الأشخاص بشكل 
مستقلent للمستهلكين لكل "ضبط" في نفس بث الرسائل ، بدونتؤثر على بعضها البعض - 
المكافئ المتدفق لوجود عدة دفعات مختلفةالوظائف التي تقرأ نفس ملف الإدخال. (يتم 
ذلك مع اشتراكات الموضوعات في JMS ،وارتباطات الصرف في AMQP.)يمكن الجمع بين 
النموذجين: على سبيل المثال ، مجموعتان منفصلتان من المستهلكينيجوز لكل فرد أن 
يشترك في موضوع ما ، بحيث تتلقى كل مجموعة بشكل جماعي جميع الرسائل ،ولكن داخل كل 
مجموعة ، تتلقى واحدة فقط من العقد كل رسالة.منتج 1منتج 2وسيطالوقتالوقت(أ) موازنة 
الحمل(ب) الانقسامالمستهلك 1المستهلك 2م 1م 2م 3م 4م 5م 1م 2م 3م 4م 5م 1م 2م 3م 4م 
1م 2م 3م 4م 2م 4م 1م 3الشكل 11-1. (أ) موازنة الأحمال: تقاسم العمل من استهلاك 
موضوع بين con‐سومرز. (ب) الانتشار: توصيل كل رسالة إلى مستهلكين متعددين.شكر 
وتقدير وإعادة التسليمقد ينهار المستهلكون في أي وقت ، لذلك قد يحدث أن يقوم الوسيط 
بتسليم رسالةحكيم للمستهلك ، لكن المستهلك لا يعالجها أبدًا ، أو يعالجها جزئيًا 
فقطقبل الانهيار. من أجل ضمان عدم فقدان الرسالة ، يستخدم وسطاء الرسائلإقرارات : 
يجب على العميل إخبار الوسيط صراحة عند الانتهاء من Pro‐إيقاف رسالة ، حتى يتمكن 
الوسيط من إزالتها من قائمة الانتظار.إذا تم إغلاق الاتصال بعميل أو انقضاء المهلة 
دون أن يتلقى الوسيطإقرار ، يفترض أن الرسالة لم تتم معالجتها ، وبالتالي فهييسلم 
الرسالة مرة أخرى إلى مستهلك آخر. (لاحظ أنه يمكن أن يحدث أن ملفتمت معالجة الرسالة 
بالكامل بالفعل ، ولكن تم فقد الإقرار في الشبكة‐الشغل. للتعامل مع هذه القضية 
يتطلب بروتوكول الالتزام الذري ، كما تمت مناقشته في "Dis‐المعاملات الجزية في 
الممارسة "في الصفحة 350. )عند دمجها مع موازنة الحمل ، يكون سلوك إعادة التسليم 
هذا مثيرًا للاهتمامتأثير على ترتيب الرسائل. في الشكل 11-2 ، يعالج المستهلكون 
بشكل عامبث الأحداث | 431

      صفحة 454
الرسائل بالترتيب الذي أرسله المنتجون. ومع ذلك ، يتعطل المستهلك 2أثناء معالجة 
الرسالة m3 ، في نفس الوقت الذي يعالج فيه المستهلك 1 الرسالةم 4. يتم بعد ذلك 
إعادة إرسال الرسالة غير المعترف بها m3 إلى المستهلك 1 ،ونتيجة لذلك يقوم المستهلك 
1 بمعالجة الرسائل بالترتيب m4 و m3 و m5. هكذا،لا يتم تسليم m3 و m4 بنفس الترتيب 
الذي تم إرساله بواسطة المنتج 1.حتى إذا حاول وسيط الرسائل خلاف ذلك الحفاظ على 
ترتيب الرسائل (مثلمطلوب بموجب معايير JMS و AMQP) ، وهو مزيج من موازنة الحملمع 
إعادة التسليم يؤدي حتمًا إلى إعادة ترتيب الرسائل. هذه ليست مشكلة إذاالرسائل 
مستقلة تمامًا عن بعضها البعض ، ولكنها قد تكون مهمة إذا كانت هناكهي تبعيات سببية 
بين الرسائل ، كما سنرى لاحقًا في الفصل.منتج 1منتج 2وسيطالوقتالمستهلك 1المستهلك 
2م 1م 2م 3م 4م 5م 2م 4م 1ackackم 3م 3م 5تحطمالشكل 11-2. يتعطل المستهلك 2 أثناء 
معالجة m3 ، لذلك يتم إعادة تسليمه إلى المستهلك 1في وقت لاحق.سجلات مقسمةلا يعد 
إرسال حزمة عبر شبكة ، أو تقديم طلب إلى خدمة شبكة.mally عملية عابرة لا تترك أي 
أثر دائم. على الرغم من أنه من الممكنقم بتسجيله بشكل دائم (باستخدام التقاط الحزم 
والتسجيل) ، ونحن عادة لا نفكر في ذلكعلى هذا النحو. حتى وسطاء الرسائل الذين 
يكتبون الرسائل بشكل دائم إلى القرص يحذفون بسرعةمرة أخرى بعد تسليمها للمستهلكين ، 
لأنها بنيتحول عقلية الرسائل العابرة.قواعد البيانات وأنظمة الملفات تتخذ نهجًا 
معاكسًا: كل ما يتم كتابته إلى ملفمن المتوقع عادةً تسجيل قاعدة البيانات أو الملف 
بشكل دائم ، على الأقل حتىيختار المرء صراحة حذفه مرة أخرى.هذا الاختلاف في العقلية 
له تأثير كبير على كيفية إنشاء البيانات المشتقة. مفتاحميزة العمليات الدفعية ، كما 
تمت مناقشته في الفصل 10، هو أنه يمكنك تشغيلها432 | الفصل 11: معالجة الدفق

      صفحة 455
مرارًا وتكرارًا ، مع تجربة خطوات المعالجة ، دون المخاطرة بإتلافالإدخال (لأن 
الإدخال للقراءة فقط). هذا ليس هو الحال مع mes على غرار AMQP / JMS‐saging: 
استقبال رسالة أمر مدمر إذا أدت معالجتها إلى حذفها منالوسيط ، لذلك لا يمكنك تشغيل 
نفس المستهلك مرة أخرى وتتوقع الحصول على نفس الشيءنتيجة.إذا أضفت مستهلكًا جديدًا 
إلى نظام مراسلة ، فعادةً ما يبدأ في الاستلام فقطالرسائل من وقت تسجيلها ، ولكن لا 
توجد رسائل سابقة (نظرًا لأنها مسجلةذهبت بالفعل). قارن ذلك بالملفات وقواعد 
البيانات ، حيث يمكنك إضافة عميل جديدفي أي وقت ، ويمكنه قراءة البيانات المكتوبة 
بشكل تعسفي في الماضي (طالما كانلم يتم الكتابة فوقها أو حذفها).لماذا لا يكون 
لدينا نظام هجين يجمع بين نهج التخزين الدائم لقواعد البياناتمع وسائل الإعلام 
منخفضة التأخير للرسائل؟ هذه هي الفكرة من وراء السجل-وسطاء الرسائل القائمة 
.استخدام السجلات لتخزين الرسائلالسجل هو ببساطة تسلسل إلحاق فقط من السجلات على 
القرص. ناقشنا سابقاالسجلات في سياق محركات التخزين المهيكلة بالسجلات وسجلات 
الكتابة المسبقة في Chap‐ثالثًا 3، وفي سياق النسخ المتماثل في "تنفيذ سجلات النسخ 
المتماثل"صفحة 152 .يمكن استخدام نفس البنية لتنفيذ وسيط الرسائل: يرسل المنتج 
ملفبإلحاقها بنهاية السجل ، ويتلقى المستهلك رسائل بواسطةقراءة السجل بالتتابع. إذا 
وصل المستهلك إلى نهاية السجل ، فإنه ينتظر ملفإشعار بإلحاق رسالة جديدة. أداة Unix 
tail -f ، والتييراقب ملفًا للبيانات التي يتم إلحاقها ، ويعمل بشكل أساسي مثل 
هذا.من أجل التوسع إلى إنتاجية أعلى مما يمكن أن يقدمه قرص واحد ، يمكن أن يكون 
السجلمقسمة (بمعنىالفصل 6 ). يمكن بعد ذلك استضافة أقسام مختلفة على دييمكن تجميع 
أجهزة ferent والعديد من الأقسام معًا في موضوع ما. هذهالنهج موضح في الشكل 
11-3.داخل كل قسم ، يقوم الوسيط بتعيين عدد تسلسل متزايد بشكل رتيبber ، أو offset 
، لكل رسالة (في الشكل 11-3 ، الأرقام الموجودة في المربعات هي رسالة offمجموعات). 
يعتبر هذا الرقم التسلسلي منطقيًا لأن القسم ملحق فقط ، لذا فإن ملفيتم ترتيب 
الرسائل داخل القسم بالكامل. لا يوجد ضمان للطلب عبرأقسام مختلفة.أباتشي كافكا [ 15 
، 16 ] ، Amazon Kinesis Streams [ 17] و DistributedLog على Twitter[18، 19 ] 
وسطاء الرسائل المستندة إلى السجل ويعملون بهذه الطريقة. على الرغم من أنهم يكتبون 
كل شيءرسائل إلى القرص ، فهي قادرة على تحقيق سرعة نقل تصل إلى ملايين الرسائل في 
الثانيةمن خلال التقسيم عبر أجهزة متعددة ، والتسامح مع الخطأ عن طريق نسخ 
الرسائل[20، 21].بث الأحداث | 433

      صفحة 456
أنا. من الممكن إنشاء مخطط موازنة أحمال يشترك فيه مستهلكان في عمل معالجة 
partition عن طريق قراءة المجموعة الكاملة للرسائل ، لكن أحدهما يعالج الرسائل ذات 
الأرقام الزوجية فقط.يحدد بينما العمليات الأخرى تعوضات ذات أرقام فردية. أو يمكنك 
نشر معالجة الرسائل عبر سلسلة رسائلولكن هذا النهج يعقد إدارة تعويض المستهلك. بشكل 
عام ، تتم معالجة الخيوط المفردة لـالتقسيم الأفضل.الموضوع أ1القسم 02 3 4 5 6 7 8 
9 101القسم 12 3 4 5 6 7 81القسم 02 3 41القسم 22 3 4 5 6 7 8 9 10 11 12الموضوع 
ب1القسم 12 3 4 5 6 7العميل المنتجالعميل المنتجعميل المستهلكعميل المستهلكالإزاحة 
لـ B.0 = 4الإزاحة لـ B.1 = 5الإزاحة لـ B.2 = 9اقرأ بالتتابعألحقمجموعة 
المستهلكينالشكل 11-3. يرسل المنتجون الرسائل من خلال إلحاقها بملف قسم الموضوع ، 
ويقرأ المستهلكون هذه الملفات بالتسلسل.سجلات مقارنة بالرسائل التقليديةيدعم النهج 
المستند إلى السجل بشكل تافه مراسلة التوزيع ، نظرًا لأن العديد منيمكن للمجمّعين 
قراءة السجل بشكل مستقل دون التأثير على بعضهم البعض. لتحقيق الحملالموازنة عبر 
مجموعة من المستهلكين ، بدلاً من تخصيص رسائل فردية لهمعملاء المستهلكين ، يمكن 
للوسيط تعيين أقسام كاملة للعقد في المستهلكمجموعة.ثم يستهلك كل عميل جميع الرسائل 
الموجودة في الأقسام التي تم تعيينها له.عادةً ، عندما يتم تعيين قسم سجل للمستهلك 
، فإنه يقرأ الرسائل بتنسيقالقسم بالتسلسل ، بطريقة بسيطة ومباشرة. هذا خشن-نهج 
موازنة الحمل الحبيبي له بعض الجوانب السلبية:• يمكن أن يكون عدد العقد التي تشترك 
في عمل استهلاك موضوع ما هو الأكثرعدد أقسام السجل في هذا الموضوع ، لأن الرسائل 
داخل نفس الجزءيتم تسليمها إلى نفس العقدة. أنا434 | الفصل 11: معالجة الدفق

      صفحة 457
• إذا كانت رسالة واحدة بطيئة في المعالجة ، فإنها تعيق معالجة الرسالة 
اللاحقةالرسائل الموجودة في هذا القسم (شكل من أشكال حظر رأس الخط ، راجع "الوصف 
لكلفورمانس "في الصفحة 11 ).وبالتالي ، في المواقف التي قد تكون فيها معالجة 
الرسائل باهظة الثمن وتريد تعديلها‐allelize المعالجة على أساس كل رسالة على حدة ، 
وحيث لا يتم ترتيب الرسائلمهم جدًا ، يفضل أسلوب JMS / AMQP لوسيط الرسائل. من جهة 
أخرىاليد ، في المواقف التي يكون فيها معدل نقل الرسائل مرتفعًا ، حيث يتم تقديم كل 
رسالة بسرعةcess وحيث يكون ترتيب الرسائل مهمًا ، يعمل النهج المستند إلى السجل 
بشكل كبيرنحن سوف.تعويضات المستهلكيؤدي استهلاك القسم بالتسلسل إلى تسهيل معرفة 
الرسائل التي تم إرسالهاتمت معالجتها: جميع الرسائل ذات الإزاحة أقل من الإزاحة 
الحالية للمستهلكتمت معالجتها بالفعل ، ولم يتم بعد رؤية جميع الرسائل ذات الإزاحة 
الأكبر.وبالتالي ، لا يحتاج الوسيط إلى تتبع إقرارات كل رسالة على حدة- يحتاج فقط 
إلى تسجيل تعويضات المستهلك بشكل دوري. دفتر الحسابات المخفّض‐النفقات العامة ، 
وفرص التجميع والأنابيب في هذا النهج ،تساعد في زيادة إنتاجية النظام.هذا الإزاحة 
في الواقع مشابه جدًا لرقم تسلسل السجل الذي يتم العثور عليه بشكل شائعفي نسخ قاعدة 
بيانات ذات قائد واحد ، والتي ناقشناها في "إعداد مجلد جديد"يخفض "في الصفحة 149. 
في نسخ قاعدة البيانات ، يسمح رقم تسلسل السجل بملفأقل لإعادة الاتصال بقائد بعد 
فصله واستئنافهالنسخ المتماثل دون تخطي أي عمليات كتابة. يتم استخدام نفس المبدأ 
بالضبط هنا:وسيط الرسائل يتصرف مثل قاعدة بيانات القائد ، والمستهلك مثل 
المتابع.إذا فشلت عقدة المستهلك ، يتم تعيين عقدة أخرى في مجموعة المستهلكين 
بالفشلأقسام المستهلك ، ويبدأ في استهلاك الرسائل في آخر إزاحة مسجلة. لوكان 
المستهلك قد عالج الرسائل اللاحقة ، لكنه لم يسجل إزاحتها بعد ،ستتم معالجة هذه 
الرسائل مرة ثانية عند إعادة التشغيل. سنناقش طرقالتعامل مع هذه المسألة لاحقًا في 
الفصل.استخدام مساحة القرصإذا قمت بالإلحاق بالسجل فقط ، فستنفد مساحة القرص في 
النهاية. لاستعادة مساحة القرص ، يتم تقسيم السجل فعليًا إلى أجزاء ، ومن وقت 
لآخريتم حذف الأجزاء القديمة أو نقلها إلى تخزين الأرشيف. (نحن نناقش المزيد من 
السفسستيكا‐طريقة ted لتحرير مساحة القرص لاحقًا.)هذا يعني أنه إذا كان المستهلك 
البطيء لا يستطيع مواكبة معدل الرسائل ، و ذلكيتخلف كثيرًا عن نقاط تعويض المستهلك 
الخاصة به إلى شريحة محذوفة ، فسوف يفوتهابعض الرسائل. بشكل فعال ، ينفذ السجل 
مخزنًا مؤقتًا بحجم محدودبث الأحداث | 435

      صفحة 458
بطاقات الرسائل القديمة عندما تمتلئ ، والمعروفة أيضًا باسم المخزن المؤقت الدائري 
أو المخزن المؤقت الدائري .ومع ذلك ، نظرًا لأن هذا المخزن المؤقت موجود على القرص 
، فقد يكون كبيرًا جدًا.لنقم بحساب ظهر المغلف. في وقت كتابة هذا التقرير ، نموذجي 
كبيرتبلغ سعة القرص الصلب 6 تيرابايت وسعة كتابة متتابعة تبلغ 150 ميجابايت / 
ثانية. لوأنت تكتب الرسائل بأسرع معدل ممكن ، يستغرق الأمر حوالي 11 ساعة 
لملءقيادة. وبالتالي ، يمكن للقرص تخزين 11 ساعة من الرسائل مؤقتًا ، وبعد ذلك 
سيبدأالكتابة فوق الرسائل القديمة. تظل هذه النسبة كما هي ، حتى لو كنت تستخدم 
الكثير من الجهدمحركات وآلات. من الناحية العملية ، نادرًا ما تستخدم عمليات النشر 
النطاق الترددي الكامل للكتابةعلى القرص ، لذلك يمكن للسجل عادةً الاحتفاظ بمخزن 
مؤقت لعدة أيام أو حتى أسابيعرسائل.يمكنك مراقبة مدى تواجد المستهلك خلف رأس السجل 
ورفع تنبيهإذا تأخر. نظرًا لأن المخزن المؤقت كبير ، فهناك وقت كافٍ للإنسان لإصلاح 
ملفالمستهلك البطيء والسماح له باللحاق بالركب قبل أن تبدأ في فقد الرسائل. وحتى 
لوالمستهلك يتخلف كثيرًا عن الركب ، فهو يؤثر فقط على نفسه ، لكنه لا يعطلخدمة 
للمستهلكين الآخرين ، وهي ميزة تشغيلية كبيرة.إعادة قراءة الرسائل القديمةلاحظنا 
سابقًا أنه مع وسطاء الرسائل على غرار AMQP و JMS ، تتم المعالجةوالتعرف على 
الرسائل هي عملية مدمرة ، لأنها تسبب الرسائلليتم حذفها على الوسيط. من ناحية أخرى 
، في وسيط الرسائل المستند إلى السجل ،يشبه جمع الرسائل القراءة من ملف: فهي عملية 
للقراءة فقطلا تغير السجل.التأثير الجانبي الوحيد للمعالجة ، إلى جانب أي ناتج 
للمستهلك ، هو أنتعويض المستهلك يتحرك إلى الأمام. لكن الإزاحة تحت سيطرة المستهلك 
، لذا فهييمكن التلاعب بها بسهولة إذا لزم الأمر: على سبيل المثال ، يمكنك بدء نسخة 
من المخالفةsumer مع تعويضات الأمس ، واكتب الإخراج إلى موقع مختلف ، من أجلإعادة 
معالجة قيمة رسائل اليوم الأخير. يمكنك تكرار هذا أي عدد من المرات ،تغيير كود 
المعالجة.هذا الجانب يجعل الرسائل المستندة إلى السجل أشبه بالعمليات الدفعية 
الأخيرةالفصل ، حيث يتم فصل البيانات المشتقة بوضوح عن بيانات الإدخال من خلال ملف 
قابل للتكرارعملية التحول. يسمح بمزيد من التجريب والتعافي الأسهل منهالأخطاء 
والأخطاء ، مما يجعلها أداة جيدة لدمج تدفقات البيانات داخل المنظمة‐نشوئها [ 
22].قواعد البيانات والجداوللقد رسمنا بعض المقارنات بين وسطاء الرسائل وقواعد 
البيانات. حتى فيعلى الرغم من اعتبارهم تقليديًا فئات منفصلة من الأدوات ، فإننارأى 
أن وسطاء الرسائل المستندة إلى السجل نجحوا في أخذ الأفكار من البيانات‐436 | الفصل 
11: معالجة الدفق

      صفحة 459
القواعد وتطبيقها على المراسلة. يمكننا أيضًا أن نسير في الاتجاه المعاكس: خذ 
الأفكار منالمراسلة والجداول وتطبيقها على قواعد البيانات.قلنا سابقًا أن الحدث هو 
سجل لشيء حدث في البعضبالتوقيت. قد يكون الشيء الذي حدث هو أحد إجراءات المستخدم 
(مثل كتابة بحثالاستعلام) ، أو قراءة المستشعر ، ولكنها قد تكون أيضًا كتابة إلى 
قاعدة بيانات . حقيقة انشيء ما تمت كتابته إلى قاعدة بيانات هو حدث يمكن التقاطه 
وتخزينه وإصدارهخسر. يشير هذا إلى أن الاتصال بين قواعد البيانات والتدفقات أعمقمن 
مجرد التخزين الفعلي للسجلات على القرص - إنه أمر أساسي تمامًا.في الواقع ، سجل 
النسخ (راجع "تنفيذ سجلات النسخ" في الصفحة 152) هودفق أحداث كتابة قاعدة البيانات 
، التي ينتجها القائد أثناء معالجة المعاملات.يقوم المتابعون بتطبيق هذا التدفق من 
الكتابات على نسختهم الخاصة من قاعدة البيانات ، وبالتاليفي نهاية المطاف بنسخة 
محدثة من نفس البيانات. الأحداث في سجل النسخ المتماثلوصف التغييرات التي حدثت في 
البيانات.لقد صادفنا أيضًا مبدأ النسخ المتماثل لآلة الحالة في "إجمالي النظام 
الواسع"cast ”في الصفحة 338 ، والتي تنص على: إذا كان كل حدث يمثل كتابة إلى قاعدة 
البيانات ، وتعالج كل نسخة متماثلة الأحداث نفسها بنفس الترتيب ، ثم ستعمل النسخ 
المتماثلة كلهاينتهي بهم الأمر في نفس الحالة النهائية. (يُفترض أن تكون معالجة 
الحدث أمرًا حتميًاالعملية.) إنها مجرد حالة أخرى لتدفقات الأحداث!في هذا القسم ، 
سننظر أولاً في المشكلة التي تنشأ في نظام البيانات غير المتجانسة.tems ، ثم اكتشف 
كيف يمكننا حلها من خلال جلب الأفكار من تيارات الأحداث إلىقواعد بيانات.مزامنة 
الأنظمةكما رأينا خلال هذا الكتاب ، لا يوجد نظام واحد يمكن أن يرضي الجميعاحتياجات 
تخزين البيانات والاستعلام والمعالجة. من الناحية العملية ، فإن معظم تطبيقات الويب 
غير التافهةتحتاج الكاتيونات إلى الجمع بين العديد من التقنيات المختلفة من أجل 
إرضاءالمتطلبات: على سبيل المثال ، استخدام قاعدة بيانات OLTP لخدمة طلبات المستخدم 
، وذاكرة التخزين المؤقت لـتسريع الطلبات الشائعة ، وفهرس النص الكامل للتعامل مع 
استعلامات البحث والبياناتمستودع للتحليلات. لكل منها نسختها الخاصة من البيانات 
المخزنة في حد ذاتهاالتمثيل الذي تم تحسينه لأغراضه.نظرًا لأن نفس البيانات تظهر في 
كل هذه الأماكن المختلفة ، فيجب أن تظل متزامنةمع بعضها البعض: إذا تم تحديث عنصر 
في قاعدة البيانات ، فيجب أيضًا تحديثه بتنسيقذاكرة التخزين المؤقت وفهارس البحث 
ومستودع البيانات. مع مستودعات البيانات ، هذا معتادتم إجراؤه من خلال عمليات ETL 
(راجع "تخزين البيانات" في الصفحة 88) - غالبًا بواسطةأخذ نسخة كاملة من قاعدة 
البيانات وتحويلها وتحميلها بالجملة في البياناتمستودع. بمعنى آخر ، عملية 
دفعية.إذا كانت عمليات تفريغ قاعدة البيانات الكاملة الدورية بطيئة جدًا ، فإن 
البديل الذي يتم استخدامه أحيانًا هوعمليات الكتابة المزدوجة ، حيث يكتب رمز 
التطبيق صراحةً لكل نظام من الأنظمةقواعد البيانات والجداول | 437

      الصفحة 460
عندما تتغير البيانات: على سبيل المثال ، الكتابة أولاً إلى قاعدة البيانات ، ثم 
تحديث ملففهرس البحث ، ثم إبطال إدخالات ذاكرة التخزين المؤقت.ومع ذلك ، فإن 
الكتابة المزدوجة لديها بعض المشاكل الخطيرة ، أحدها حالة العرقهو موضح في الشكل 
11-4. في هذا المثال ، يريد عميلين في نفس الوقت تحديث ملفالعنصر X: يريد العميل 1 
تعيين القيمة على A ، ويريد العميل 2 تعيينها على B. كلاهمايكتب العملاء أولاً 
القيمة الجديدة إلى قاعدة البيانات ، ثم يكتبونها في فهرس البحث.بسبب التوقيت غير 
المحظوظ ، الطلبات متداخلة: قاعدة البيانات ترى الكتابة أولاًمن العميل 1 يحدد 
القيمة إلى A ، ثم الكتابة من العميل 2 تحدد القيمة على B ،لذا فإن القيمة النهائية 
في قاعدة البيانات هي B. فهرس البحث أولاً يرى الكتابة من العميل2 ، ثم العميل 1 ، 
وبالتالي فإن القيمة النهائية في فهرس البحث هي A. النظامان الآنتتعارض بشكل دائم 
مع بعضها البعض ، على الرغم من عدم حدوث خطأ في exe‐الحذر.العميل 1قاعدة 
البياناتفهرس البحثالوقتالعميل 2مجموعة X = A.مجموعة X = بمجموعة X = بمجموعة X = 
A.حسناحسناحسناحسناالقيمة النهائية: X = Bالقيمة النهائية: X = Aالشكل 11-4. في 
قاعدة البيانات ، يتم تعيين X أولاً على A ثم على B ، أثناء وجوده في فهرس البحثتصل 
الكتابة بالترتيب المعاكس.ما لم يكن لديك بعض آليات تتبع التزامن الإضافية ، مثل 
ver‐المتجهات التي ناقشناها في "الكشف عن عمليات الكتابة المتزامنة" في الصفحة 178، 
ألن تفعلحتى لاحظ أن عمليات الكتابة المتزامنة حدثت - ستنتهي قيمة واحدة بصمتاكتب 
قيمة أخرى.مشكلة أخرى في عمليات الكتابة المزدوجة هي أن أحد الكتابات قد يفشل بينما 
الآخرينجح. هذه مشكلة تسامح مع الخطأ وليست مشكلة التزامن ، لكنها كذلكله أيضًا 
تأثير عدم توافق النظامين مع بعضهما البعض. ضمانإما أن كلاهما ينجح أو يفشل كلاهما 
هو حالة من مشكلة الالتزام الذري ،وهو مكلف لحلها (راجع "الالتزام الذري والالتزام 
على مرحلتين (2PC)" فيالصفحة 344 ).إذا كان لديك قاعدة بيانات واحدة فقط منسوخة مع 
قائد واحد ، فسيحدد ذلك القائدمناجم ترتيب عمليات الكتابة ، لذلك يعمل نهج نسخ آلة 
الدولة فيما بينهاالنسخ المتماثلة لقاعدة البيانات. ومع ذلك ، في الشكل 11-4 لا 
يوجد قائد واحد: البيانات‐438 | الفصل 11: معالجة الدفق

      الصفحة 461
قد يكون للقاعدة قائد وقد يكون لمؤشر البحث قائد ، لكن لا يتبع أي منهماالآخر ، 
وهكذا يمكن أن تحدث الصراعات (انظر "تكرار متعدد القادة" في الصفحة 161 ).سيكون 
الوضع أفضل إذا كان هناك بالفعل قائد واحد فقط ، على سبيل المثالقاعدة البيانات ، 
وإذا تمكنا من جعل فهرس البحث تابعًا لقاعدة البيانات. لكن هذاممكن في 
الممارسة؟تغيير التقاط البياناتتكمن المشكلة في سجلات النسخ المتماثل لمعظم قواعد 
البيانات في أنها قد تم اعتبارها منذ فترة طويلةتعد بمثابة تفاصيل تنفيذ داخلية 
لقاعدة البيانات ، وليست واجهة برمجة تطبيقات عامة. عملاءمن المفترض أن تستعلم عن 
قاعدة البيانات من خلال نموذج البيانات ولغة الاستعلام ، وليستحليل سجلات النسخ 
المتماثل ومحاولة استخراج البيانات منها.لعقود من الزمان ، لم يكن لدى العديد من 
قواعد البيانات طريقة موثقة للحصول علىسجل التغييرات المكتوبة عليه. لهذا السبب كان 
من الصعب إجراء جميع التغييراتتم إنشاؤها في قاعدة بيانات ونسخها إلى تقنية تخزين 
مختلفة مثل aفهرس البحث أو ذاكرة التخزين المؤقت أو مستودع البيانات.في الآونة 
الأخيرة ، كان هناك اهتمام متزايد في التقاط البيانات المتغيرة (CDC) ، والتيهي 
عملية مراقبة جميع تغييرات البيانات المكتوبة في قاعدة البيانات واستخراجهافي شكل 
يمكن فيه نسخها إلى أنظمة أخرى. مركز السيطرة على الأمراض (CDC) مهم بشكل خاص‐جي 
إذا تم توفير التغييرات كتدفق ، فور كتابتها.على سبيل المثال ، يمكنك التقاط 
التغييرات في قاعدة بيانات وتطبيق ملفنفس التغييرات على فهرس البحث. إذا تم تطبيق 
سجل التغييرات بنفس الترتيب ، فأنتيمكن أن تتوقع أن تتطابق البيانات الموجودة في 
فهرس البحث مع البيانات الموجودة في قاعدة البيانات. البحثالفهرس وأي أنظمة بيانات 
مشتقة أخرى هي مجرد مستهلكين لتيار التغيير ، مثلهو موضح في الشكل 11-5 .نظام 
التسجيلقاعدة البياناتالبيانات المشتقةالأنظمةبحثفهرسبياناتمستودعمجموعة X = 
A.مجموعة X = بكلينر 1كلينر 2......X = AX = بتغيير التقاط البياناتسجل تغييرات 
البياناتسجل المستهلك يطبق التغييراتألحقالشكل 11-5. أخذ البيانات بالترتيب الذي تم 
كتابته به في قاعدة بيانات واحدة ، وتطبيقالتغييرات على الأنظمة الأخرى بنفس 
الترتيب.قواعد البيانات والجداول | 439

      الصفحة 462
تنفيذ التقاط بيانات التغييريمكننا استدعاء أنظمة البيانات المشتقة من مستهلكي 
السجل ، كما تمت مناقشته في المقدمةإلى الجزء الثالث: البيانات المخزنة في فهرس 
البحث ومستودع البيانات هي مجرد بيانات أخرىعرض البيانات في نظام التسجيل. تغيير 
التقاط البيانات هي آلية لالتأكد من أن جميع التغييرات التي تم إجراؤها على نظام 
التسجيل تنعكس أيضًا فيأنظمة البيانات المشتقة ، بحيث يكون للأنظمة المشتقة نسخة 
دقيقة من البيانات.بشكل أساسي ، يؤدي تغيير التقاط البيانات إلى جعل قاعدة بيانات 
واحدة هي القائد (الذي من خلالهيتم التقاط التغييرات) ، وتحويل الآخرين إلى 
متابعين. رسالة مستندة إلى السجلالوسيط مناسب تمامًا لنقل أحداث التغيير من قاعدة 
البيانات المصدر ،نظرًا لأنه يحافظ على ترتيب الرسائل (تجنب إعادة ترتيب مشكلةالشكل 
11-2).يمكن استخدام مشغلات قاعدة البيانات لتنفيذ التقاط البيانات المتغيرة (انظر 
"المستندة إلى الزنادالنسخ المتماثل "في الصفحة 154) ، من خلال تسجيل المشغلات التي 
تراقب جميع التغييرات التي تطرأ على البياناتالجداول وإضافة إدخال إلى جدول 
التغيير. ومع ذلك ، فإنها تميل إلى أن تكون هشة ولديها نفقات أداء كبيرة. يمكن أن 
يكون تحليل سجل النسخ المتماثل أكثر من ذلكنهج قوي ، على الرغم من أنه يأتي أيضًا 
مع تحديات ، مثل التعامل مع المخططالتغييرات.قاعدة بيانات LinkedIn [23 ] ، الثقب 
الدودي للفيسبوك [24 ] وياهو شيربا [ 25] استعمالهذه الفكرة على نطاق واسع. تنفذ 
زجاجات المياه المعبأة CDC لـ PostgreSQL باستخدام واجهة برمجة التطبيقاتالذي يفك 
تشفير سجل الكتابة المسبقة [26] ، يقوم ماكسويل وديبيزيوم بشيء مماثللـ MySQL عن 
طريق تحليل binlog [27 ، 28] ، يقرأ Mongoriver oplog MongoDB[29، 30] ، وتوفر 
GoldenGate تسهيلات مماثلة لـ Oracle [ 31 ،32].مثل وسطاء الرسائل ، عادةً ما يكون 
التقاط البيانات المتغيرة غير متزامن: نظاملا تنتظر قاعدة بيانات السجل حتى يتم 
تطبيق التغيير على المستهلكين قبل com‐تلبيسها. هذا له ميزة تشغيلية لا يضيفها 
مستهلك بطيءيبطئ نظام التسجيل ، ولكن له جانب سلبي يتمثل في أن جميع إصدارات النسخ 
المتماثلةتطبيق تأخر نشوئها (انظر "مشاكل مع تأخر النسخ المتماثل" في الصفحة 
155).لقطة أوليةإذا كان لديك سجل لجميع التغييرات التي تم إجراؤها على قاعدة 
البيانات ، فيمكنك إعادةهيكلة الحالة الكاملة لقاعدة البيانات عن طريق إعادة تشغيل 
السجل. ومع ذلك ، في كثير من الحالات ،يتطلب الاحتفاظ بجميع التغييرات إلى الأبد 
مساحة كبيرة على القرص وإعادة تشغيلهاقد يستغرق وقتًا طويلاً ، لذلك يجب قطع 
السجل.يتطلب إنشاء فهرس نص كامل جديد ، على سبيل المثال ، نسخة كاملة من قاعدة 
البيانات بأكملها- لا يكفي تطبيق سجل التغييرات الأخيرة فقط ، لأنه سيكون 
مفقودًاالعناصر التي لم يتم تحديثها مؤخرًا. وبالتالي ، إذا لم يكن لديك سجل السجل 
بالكامل ،تحتاج إلى البدء بلقطة متسقة ، كما تمت مناقشته سابقًا في قسم 
"الإعدادالمتابعون الجدد "في الصفحة 149 .440 | الفصل 11: معالجة الدفق

      صفحة 463
يجب أن تتوافق لقطة قاعدة البيانات مع موضع معروف أو إزاحة في ملفسجل التغيير ، حتى 
تعرف في أي نقطة تبدأ في تطبيق التغييرات بعد الخاطف‐تمت معالجة اللقطة. تدمج بعض 
أدوات CDC مرفق اللقطة هذا ، بينمااتركه كعملية يدوية.ضغط السجلإذا كان بإمكانك 
الاحتفاظ بقدر محدود فقط من محفوظات السجل ، فأنت بحاجة إلى استعراض ملفsnapshot في 
كل مرة تريد فيها إضافة نظام بيانات مشتق جديد. ومع ذلك،يوفر ضغط السجل بديلاً 
جيدًا.ناقشنا ضغط السجل مسبقًا في "فهارس التجزئة" في الصفحة 70، في سياقلمحركات 
التخزين اللوغاريتمية الهيكلية (انظر الشكل 3-2 للحصول على مثال). المبدأبسيط: يبحث 
محرك التخزين بشكل دوري عن سجلات السجل بنفس المفتاح ،يتخلص من أي نسخ مكررة ويحتفظ 
فقط بآخر تحديث لكل مفتاح. هذهتعمل عملية الدمج والضغط في الخلفية.يشير التحديث 
بقيمة فارغة خاصة إلى أنه تم حذف مفتاح. ولكن طالما أن ملفلا يتم الكتابة فوق 
المفتاح أو حذفه ، فهو يظل في السجل إلى الأبد. مساحة القرص المطلوبةلمثل هذا السجل 
المضغوط يعتمد فقط على المحتويات الحالية لقاعدة البيانات ، وليسعدد عمليات الكتابة 
التي حدثت في قاعدة البيانات. إذا كان نفس المفتاح مجانيًاعند الكتابة فوقها بشكل 
سريع ، سيتم تجميع القيم السابقة في النهاية ، وفقطسيتم الاحتفاظ بأحدث قيمة.تعمل 
نفس الفكرة في سياق وسطاء الرسائل المستندة إلى السجل وتغيير البياناتإلتقاط. إذا 
تم إعداد نظام CDC بحيث يكون لكل تغيير مفتاح أساسي ، ويحل كل تحديث لمفتاح محل 
القيمة السابقة لذلك المفتاح ، ثم يكفياحتفظ فقط بآخر كتابة لمفتاح معين.الآن ، 
عندما تريد إعادة بناء نظام بيانات مشتق مثل فهرس البحث ، فأنتيمكن بدء مستهلك جديد 
من الإزاحة 0 للموضوع المضغوط بسجل ، وبالتتابعمسح جميع الرسائل في السجل. السجل 
مضمون لاحتواء أحدثقيمة لكل مفتاح في قاعدة البيانات (وربما بعض القيم القديمة) - 
بعبارة أخرى ،يمكنه الحصول على نسخة كاملة من محتويات قاعدة البيانات دون الحاجة 
إلى أخذ نسخة أخرىلقطة على قاعدة بيانات مصدر CDC.يتم دعم ميزة ضغط السجل هذه 
بواسطة Apache Kafka. كما سنرى لاحقًا فيفي هذا الفصل ، يسمح باستخدام وسيط الرسائل 
للتخزين الدائم ، وليس فقط من أجلرسائل عابرة.دعم API لتدفقات التغييرعلى نحو 
متزايد ، بدأت قواعد البيانات في دعم تدفقات التغيير باعتبارها وسيلة تفاعل من 
الدرجة الأولىالوجه ، بدلاً من الجهود التي تم تعديلها وهندستها العكسية التي تغير 
سقف البيانات‐لطالما كان هذا صحيحًا. على سبيل المثال ، يسمح RethinkDB لطلبات 
البحث بالاشتراك فيهاإخطارات عندما تتغير نتائج الاستعلام [ 33] ، Firebase [ 34] و 
CouchDBقواعد البيانات والجداول | 441

      الصفحة 464
[35] توفير مزامنة البيانات استنادًا إلى موجز التغيير الذي يتم توفيره أيضًافي 
التطبيقات ، ويستخدم Meteor سجل MongoDB للاشتراك في تغييرات البياناتوتحديث واجهة 
المستخدم [36 ].يعتبر كافكا كونيكت [ 37 ] محاولة لدمج أدوات التقاط بيانات التغيير 
على نطاق واسعمجموعة من أنظمة قواعد البيانات مع كافكا. بمجرد أن يصبح تيار أحداث 
التغيير في كافكايمكن استخدامها لتحديث أنظمة البيانات المشتقة مثل فهارس البحث ، 
وكذلك تغذيةأنظمة معالجة الدفق كما تمت مناقشته لاحقًا في هذا الفصل.مصادر 
الحدثهناك بعض أوجه التشابه بين الأفكار التي ناقشناها هنا وتحديد مصادر الأحداث ، 
أالتقنية التي تم تطويرها في مجتمع التصميم المستند إلى المجال (DDD) [38 ،39 ، 40 
]. سنناقش مصادر الحدث باختصار ، لأنه يتضمن بعضًا مفيدًاوالأفكار ذات الصلة لأنظمة 
البث.وبالمثل لتغيير التقاط البيانات ، يتضمن تحديد مصادر الأحداث تخزين جميع 
التغييرات علىحالة التطبيق كسجل لأحداث التغيير. الاختلاف الأكبر هو مصدر الحدثيطبق 
جي الفكرة على مستوى مختلف من التجريد:• في التقاط البيانات المتغيرة ، يستخدم 
التطبيق قاعدة البيانات بطريقة قابلة للتغيير ،تحديث وحذف السجلات في الإرادة. يتم 
استخراج سجل التغييرات من ملفقاعدة البيانات على مستوى منخفض (على سبيل المثال عن 
طريق تحليل سجل النسخ المتماثل) ، مما يضمن أنترتيب عمليات الكتابة المستخرجة من 
قاعدة البيانات يطابق الترتيب الذي كانت فيهمكتوبة بالفعل ، وتجنب حالة السباق في 
الشكل 11-4. تطبيق مكتوبجي إلى قاعدة البيانات لا يحتاج إلى أن تدرك أن CDC يحدث.• 
في حالة البحث عن مصادر ، يتم إنشاء منطق التطبيق بشكل صريح على أساس immuta‐بلي 
الأحداث التي تمت كتابتها في سجل الأحداث. في هذه الحالة ، يتم إلحاق متجر 
الأحداث-فقط ، ويتم تثبيط التحديثات أو الحذف أو منعها. الأحداث بعنايةمصمم ليعكس 
الأشياء التي حدثت على مستوى التطبيق.إن تحديد مصادر الأحداث مشابه لنموذج بيانات 
الأحداث [ 41 ] ، وهناك أيضًا ما شابه ذلك.الروابط بين سجل الأحداث وجدول الحقائق 
الذي تجده في مخطط النجوم (راجع "النجوموالثلج: مخططات التحليلات "في الصفحة 
90).قواعد البيانات المتخصصة مثل Event Store [ 42] تم تطويرها لدعم 
appli‐الكاتيونات التي تستخدم مصادر الأحداث ، ولكن بشكل عام النهج مستقل عن أيأداة 
خاصة. يمكن أيضًا استخدام قاعدة بيانات تقليدية أو وسيط رسائل قائم على السجللبناء 
تطبيقات بهذا النمط.اشتقاق الحالة الحالية من سجل الأحداثلا يعد سجل الأحداث في حد 
ذاته مفيدًا جدًا ، لأن المستخدمين يتوقعون عمومًا رؤيةحالة إيجار النظام ، وليس 
تاريخ التعديلات. على سبيل المثال ، في التسوق442 | الفصل 11: معالجة الدفق

      الصفحة 465
موقع الويب ، يتوقع المستخدمون أن يكونوا قادرين على رؤية المحتويات الحالية لعربة 
التسوق الخاصة بهم ، وليس ملفقائمة إلحاق فقط بجميع التغييرات التي أجروها على عربة 
التسوق الخاصة بهم.وبالتالي ، فإن التطبيقات التي تستخدم تحديد مصادر الأحداث تحتاج 
إلى أخذ سجل الأحداث (يمثلالبيانات المكتوبة على النظام) وتحويلها إلى حالة تطبيق 
مناسبةلتظهر للمستخدم (طريقة قراءة البيانات من النظام [43 ]). هذا العابريمكن 
للتشكيل أن يستخدم المنطق التعسفي ، لكن يجب أن يكون حتميًا ، بحيث يمكنك الجريمرة 
أخرى واشتقاق نفس حالة التطبيق من سجل الأحداث.كما هو الحال مع التقاط البيانات 
المتغيرة ، تتيح لك إعادة تشغيل سجل الأحداث إعادة إنشاء ملفالوضع الحالي للنظام. 
ومع ذلك ، يجب معالجة ضغط السجل بشكل مختلف:• عادة ما يحتوي حدث CDC لتحديث أحد 
السجلات على الإصدار الجديد بالكاملمن السجل ، لذلك يتم تحديد القيمة الحالية 
للمفتاح الأساسي بالكامل بواسطةأحدث حدث لهذا المفتاح الأساسي ، ويمكن أن يتجاهل 
ضغط السجل السابقأحداث لنفس المفتاح.• من ناحية أخرى ، مع تحديد مصادر الأحداث ، 
يتم نمذجة الأحداث على مستوى أعلى: وعادةً ما يعبر الحدث عن نية إجراء المستخدم ، 
وليس آليات الدولةالتحديث الذي حدث نتيجة للإجراء. في هذه الحالة ، الأحداث اللاحقة 
عادةلا تتجاوز الأحداث السابقة ، ولذا فأنت بحاجة إلى التاريخ الكامل للأحداث 
لإعادةهيكلة الدولة النهائية. ضغط السجل غير ممكن بنفس الطريقة.عادةً ما تحتوي 
التطبيقات التي تستخدم تحديد مصادر الأحداث على آلية ما للتخزينلقطات من الحالة 
الحالية مشتقة من سجل الأحداث ، لذا فهي لا تفعل ذلكتحتاج إلى إعادة معالجة السجل 
بالكامل بشكل متكرر. ومع ذلك ، هذا ليس سوى تحسين الأداءالتخصيص لتسريع القراءة 
والتعافي من الأعطال ؛ القصد هو أن النظاميمكن لـ tem تخزين جميع الأحداث الأولية 
إلى الأبد ، وإعادة معالجة سجل الأحداث بالكامل في أي وقتمطلوب. هذا افتراض معقول 
لجميع التطبيقات باستثناء أكبرها.الأوامر والأحداثفلسفة المصادر الحدث حريصة على 
التمييز بين الأحداث و COM-ماندس [44 ]. عندما يصل طلب من مستخدم لأول مرة ، يكون 
في البداية أمرًا: عند هذاتشير إلى أنه قد لا يزال يفشل ، على سبيل المثال بسبب 
انتهاك بعض شروط السلامة. اليجب أن يتحقق التطبيق أولاً من أنه يمكنه تنفيذ الأمر. 
إذا كان التحقق من الصحةبنجاح ويتم قبول الأمر ، يصبح حدثًا دائمًا وثابت.على سبيل 
المثال ، إذا حاول مستخدم تسجيل اسم مستخدم معين ، أو حجز مقعد فيفي الطائرة أو في 
المسرح ، يحتاج التطبيق إلى التحقق من اسم المستخدم أو المقعدلم يتم أخذه بالفعل. 
(لقد ناقشنا هذا المثال سابقًا في مقال "خطأ متسامح"sensus "في الصفحة 355.) عند 
نجاح هذا الفحص ، يمكن للتطبيق إنشاءحدث للإشارة إلى أنه تم تسجيل اسم مستخدم معين 
بواسطة معرف مستخدم معين ،أو أنه تم حجز مقعد معين لعميل معين.قواعد البيانات 
والجداول | 443

      الصفحة 466
عندما يتم إنشاء الحدث ، يصبح حقيقة . حتى لو كان العميل في وقت لاحقيقرر تغيير أو 
إلغاء الحجز ، تظل الحقيقة أنها كانت في السابقحجز مقعد معين ، ويكون التغيير أو 
الإلغاء منفصلًاالحدث الذي تمت إضافته لاحقًا.لا يُسمح لمستهلك تيار الحدث برفض 
حدث: بحلول وقت الاشتراكسومر يرى الحدث ، فهو بالفعل جزء ثابت من السجل ، وقد يكون 
كذلكتمت مشاهدته بالفعل من قبل المستهلكين الآخرين. وبالتالي ، فإن أي التحقق من 
صحة أمر ما يحتاج إلىيحدث بشكل متزامن ، قبل أن يصبح حدثًا.بدلاً من ذلك ، يمكن 
تقسيم طلب المستخدم لحجز مقعد إلى حدثين: أولاً أحجز مؤقت ، ثم حدث تأكيد منفصل 
بمجرد إجراء الحجزتم التحقق من صحتها (كما تمت مناقشته في "تنفيذ التخزين الخطي 
باستخدام الطلب الكليبث "في الصفحة 340 ). يسمح هذا بالتحقق من الصحة في غير 
متزامنمعالجة.الدولة والجداول والثباتلقد رأينا في الفصل 10 أن المعالجة الدفعية 
تستفيد من ثباتهاملفات الإدخال ، حتى تتمكن من تشغيل مهام المعالجة التجريبية على 
ملفات الإدخال الحاليةدون خوف من الإضرار بهم. مبدأ الثبات هذا هو ما يصنع 
أيضًامصادر الحدث وتغيير التقاط البيانات بهذه القوة.عادة ما نفكر في قواعد 
البيانات على أنها تخزين للحالة الحالية للتطبيق - هذاتم تحسين التمثيل للقراءات ، 
وعادة ما يكون هو الأكثر ملاءمة للخدمة‐استفسارات جي. طبيعة الدولة هي أنها تتغير ، 
وهذا هو سبب دعم قواعد البياناتتحديث وحذف البيانات وإدخالها. كيف يتناسب هذا مع 
الثباتالمدينة؟عندما يكون لديك حالة تتغير ، فإن تلك الحالة هي نتيجة الأحداث 
التيتيدها بمرور الوقت. على سبيل المثال ، قائمة المقاعد المتوفرة حاليًا هي 
نتيجةالحجوزات التي قمت بمعالجتها ، رصيد الحساب الجاري هو نتيجة الاعتماد‐وخصمها 
على الحساب ، والرسم البياني لوقت الاستجابة لخادم الويب الخاص بك هوتجميع أوقات 
الاستجابة الفردية لجميع طلبات الويب التي حدثت.بغض النظر عن كيفية تغير الحالة ، 
كان هناك دائمًا سلسلة من الأحداث التي تسببتتلك التغييرات. حتى مع القيام بالأشياء 
والتراجع عنها ، تظل الحقيقة صحيحة أن هؤلاءوقعت الأحداث. الشيء المهم الذي يجب 
إدراكه هو تلك الحالة القابلة للتغيير والملحق-فقط سجل الأحداث الثابتة لا تتعارض 
مع بعضها البعض: فهما جانبان مننفس العملة. يمثل سجل جميع التغييرات ، سجل التغيير 
، تطور الحالةالوقت.إذا كنت ميالًا للرياضيات ، فقد تقول إن حالة التطبيق هي ماتحصل 
عليه عند دمج دفق حدث بمرور الوقت ، ويكون تيار التغيير هو ما يحدثتحصل عليها عندما 
تفرق بين الدولة بمرور الوقت ، كما هو موضح في الشكل 11-6 [ 45، 46].444 | الفصل 
11: معالجة الدفق

      صفحة 467
هذا القياس له حدود (على سبيل المثال ، المشتق الثاني للحالة ليس كذلكتبدو ذات 
مغزى) ، لكنها نقطة انطلاق مفيدة للتفكير في البيانات.الشكل 11-6. العلاقة بين حالة 
التطبيق الحالية والحدثمجرى.إذا قمت بتخزين سجل التغيير بشكل دائم ، فسيكون لذلك 
تأثير في تكوين الحالةقابلة للتكرار. إذا كنت تعتبر أن سجل الأحداث هو نظام السجل 
الخاص بك ، وأي منهالحالة المتغيرة باعتبارها مشتقة منها ، يصبح من السهل التفكير 
في تدفقالبيانات من خلال نظام. كما قال بات هيلاند [ 47]:تسجل سجلات المعاملات جميع 
التغييرات التي تم إجراؤها على قاعدة البيانات. الملاحق عالية السرعةالطريقة 
الوحيدة لتغيير السجل. من هذا المنظور ، محتويات قاعدة البياناتالاحتفاظ بالتخزين 
المؤقت لأحدث قيم السجل في السجلات. الحقيقة هي السجل. قاعدة البياناتهي ذاكرة 
تخزين مؤقت لمجموعة فرعية من السجل. تصادف أن تكون هذه المجموعة الفرعية المخزنة 
مؤقتًا هي أحدث قيمة لـكل قيمة سجل وفهرس من السجل.مزايا الأحداث الثابتةالثبات في 
قواعد البيانات فكرة قديمة. على سبيل المثال ، تم استخدام المحاسبينالثبات لعدة 
قرون في مسك الدفاتر المالية. عندما تحدث صفقة ، فهي كذلكالمُسجَّلة في دفتر 
الأستاذ المُلحق فقط ، وهو في الأساس عبارة عن سجل للأحداث التي تصفالأموال أو 
السلع أو الخدمات التي تم تداولها. الحسابات ، مثل الربح والخسارة أو الميزانية 
العمومية ، من المعاملات في دفتر الأستاذ عن طريق الإضافةعنها [48 ].في حالة حدوث 
خطأ ، لا يقوم المحاسبون بمسح أو تغيير المعاملة غير الصحيحة فيدفتر الأستاذ - 
بدلاً من ذلك ، يضيفون معاملة أخرى تعوض عن الخطأ ،على سبيل المثال رد رسوم غير 
صحيحة. لا تزال المعاملة غير الصحيحة فيدفتر الأستاذ إلى الأبد ، لأنه قد يكون 
مهمًا لأسباب تتعلق بالتدقيق. إذا كان غير صحيحتم بالفعل نشر الأرقام المشتقة من 
دفتر الأستاذ غير الصحيح ، ثم الشكل‐تتضمن فترات الفترة المحاسبية التالية تصحيحًا. 
هذه العملية ليست بالكاملmal في المحاسبة [49 ].على الرغم من أهمية هذه القابلية 
للتدقيق بشكل خاص في الأنظمة المالية ، إلا أنها كذلكمفيد للعديد من الأنظمة الأخرى 
التي لا تخضع لمثل هذا التنظيم الصارم. كماتمت مناقشته في "فلسفة مخرجات العملية 
الدفعية" في الصفحة 401، إذا كنت عن غير قصدنشر رمز عربات التي تجرها الدواب الذي 
يكتب البيانات السيئة إلى قاعدة بيانات ، يكون الاسترداد أصعب بكثير إذا كان 
ملفقواعد البيانات والجداول | 445

      صفحة 468
الكود قادر على الكتابة فوق البيانات بشكل مدمر. مع إلحاق فقط سجل ثابتالأحداث ، 
فمن الأسهل بكثير رؤية ما حدث والتعافي.الأحداث غير القابلة للتغيير تلتقط أيضًا 
معلومات أكثر من الحالة الحالية فقط. إلى عن علىعلى سبيل المثال ، على أحد مواقع 
التسوق ، قد يضيف العميل عنصرًا إلى سلة التسوق الخاصة به ثمقم بإزالته مرة أخرى. 
على الرغم من أن الحدث الثاني يلغي الحدث الأول من النقطةبالنظر إلى تنفيذ الطلب ، 
قد يكون من المفيد معرفة لأغراض التحليل أنكان العميل يفكر في عنصر معين ولكنه قرر 
بعد ذلك رفضه. ربما همسيختارون شرائه في المستقبل ، أو ربما وجدوا بديلاً. هذه 
المعلوماتتم تسجيله في سجل الأحداث ، ولكن سيتم فقده في قاعدة البيانات التي تحذف 
العناصر عند حدوث ذلكتمت إزالتها من عربة التسوق [38 ].اشتقاق عدة طرق عرض من نفس 
سجل الأحداثعلاوة على ذلك ، من خلال فصل الحالة القابلة للتغيير عن سجل الأحداث غير 
القابل للتغيير ، يمكنك الاشتقاقعدة تمثيلات مختلفة موجهة للقراءة من نفس سجل 
الأحداث. هذهيعمل تمامًا مثل وجود مستهلكين متعددين للتيار ( الشكل 11-5).إن وجود 
خطوة ترجمة صريحة من سجل الأحداث إلى قاعدة البيانات يجعل الأمر أسهلتطوير تطبيقك 
بمرور الوقت: إذا كنت ترغب في تقديم ميزة جديدةيقدم بياناتك الحالية بطريقة جديدة ، 
يمكنك استخدام سجل الأحداث لإنشاء ملفعرض منفصل ومُحسَّن للقراءة للميزة الجديدة 
وتشغيلها جنبًا إلى جنب معدون الحاجة إلى تعديلها. تشغيل الأنظمة القديمة والجديدة 
جنبًا إلى جنبغالبًا ما يكون أسهل من إجراء ترحيل مخطط معقد في نظام موجود‐تيم. 
بمجرد عدم الحاجة إلى النظام القديم ، يمكنك ببساطة إيقاف تشغيله [ 43، 50 ].عادةً 
ما يكون تخزين البيانات أمرًا سهلاً للغاية إذا لم يكن لديك ما يدعو للقلق بشأن 
كيفية تخزينهاسيتم الاستعلام عنه والوصول إليه ؛ الكثير من تعقيدات تصميم المخطط ، 
الفهرس‐محركات التخزين والتخزين هي نتيجة الرغبة في دعم بعض الاستعلام 
والوصولالأنماط (انظر الفصل 3). لهذا السبب ، يمكنك الحصول على قدر كبير من المرونة 
من خلال فصل ملفالشكل الذي تتم كتابة البيانات به من النموذج الذي تمت قراءته ، ومن 
خلال السماح بالعديد من الاختلافقراءة المزيد تُعرف هذه الفكرة أحيانًا باسم 
مسؤولية استعلام الأمر segre‐gation أو CQRS [ 38، 51 ،52 ].يعتمد النهج التقليدي 
لتصميم قاعدة البيانات والمخطط على مغالطة ذلكيجب كتابة البيانات بنفس النموذج كما 
سيتم الاستعلام عنها. نقاشات حول التطبيعنشوئها وإلغاء التطابق (راجع "علاقات كثير 
إلى واحد ومتعدد إلى كثير" فيالصفحة 31) تصبح غير ذات صلة إلى حد كبير إذا كان 
بإمكانك ترجمة البيانات من ملف محسن للكتابةسجل الأحداث لحالة التطبيق المحسنة 
للقراءة: من المعقول تمامًا إلغاء التنسيقالبيانات في طرق العرض المحسّنة للقراءة ، 
حيث تمنحك عملية الترجمة آليةلإبقائها محدثة.في "وصف الحمل" في الصفحة 9 ، ناقشنا 
الجداول الزمنية الرئيسية لتويتر ، ذاكرة تخزين مؤقت لـالتغريدات المكتوبة مؤخرًا 
من قبل الأشخاص الذين يتابعهم مستخدم معين (مثل صندوق البريد).هذا مثال آخر على 
حالة القراءة المُحسّنة: الخط الزمني للبيت مكرّر بدرجة كبيرة‐مذنب ، لأن تغريداتك 
مكررة في جميع الجداول الزمنية للمتابعين‐446 | الفصل 11: معالجة الدفق

      الصفحة 469
جي لك. ومع ذلك ، تحافظ خدمة التوزيع الموسع على حالة التكرار هذه متزامنة مع 
الحالة الجديدةالتغريدات والعلاقات التالية الجديدة ، مما يجعل التكرار قابلاً 
للإدارة.التحكم التزامنيأكبر جانب سلبي في تحديد مصادر الأحداث وتغيير التقاط 
البيانات هو أن الاستهلاكعادةً ما تكون خوادم سجل الأحداث غير متزامنة ، لذلك هناك 
احتمال أن المستخدم قد يفعل ذلكاكتب في السجل ، ثم اقرأ من وجهة نظر مشتقة من السجل 
، واكتشف أن كتابتهملم ينعكس بعد في عرض القراءة. ناقشنا هذه المشكلة 
والإمكاناتالحلول الموجودة سابقًا في "قراءة كتاباتك" في الصفحة 156 .يتمثل أحد 
الحلول في إجراء تحديثات طريقة عرض القراءة بشكل متزامن معإلحاق الحدث بالسجل. 
يتطلب هذا معاملة لدمج عمليات الكتابة فيهاوحدة ذرية ، لذلك عليك إما الاحتفاظ بسجل 
الأحداث وطريقة عرض القراءة كما هينظام التخزين ، أو تحتاج إلى معاملة موزعة عبر 
الأنظمة المختلفة.بدلاً من ذلك ، يمكنك استخدام النهج الذي تمت مناقشته في "تنفيذ 
الخطيةالتخزين باستخدام نظام البث الإجمالي "في الصفحة 340 .من ناحية أخرى ، فإن 
اشتقاق الحالة الحالية من سجل الأحداث يبسط البعض أيضًاجوانب التحكم في التزامن. 
الكثير من الحاجة إلى معاملات متعددة الكائنات (انظر"عمليات كائن واحد وكائن متعدد" 
في الصفحة 219) ينبع من مستخدم واحدإجراء يتطلب تغيير البيانات في عدة أماكن 
مختلفة. مع تحديد مصادر الأحداث ،يمكنك تصميم حدث بحيث يكون وصفًا قائمًا بذاته 
لإجراء المستخدم -لذلك يتطلب إجراء المستخدم كتابة واحدة فقط في مكان واحد ، أي 
إلحاقحدث في السجل ، وهو أمر سهل صنعه ذريًا.إذا تم تقسيم سجل الأحداث وحالة 
التطبيق بنفس الطريقة (للاختبار‐ple ، تتطلب معالجة حدث لعميل في القسم 3 فقط تحديث 
القسم3 من حالة التطبيق) ، ثم يحتاج المستهلك سجل مترابط واحد مباشرلا يوجد تحكم في 
التزامن للكتابة - من خلال البناء ، يقوم بمعالجة حدث واحد فقطفي كل مرة (راجع 
أيضًا "التنفيذ التسلسلي الفعلي" في الصفحة 243). يقوم السجل بإزالة غير-حتمية 
التزامن من خلال تحديد تسلسل تسلسلي للأحداث في قسم [ 22]. لوحدث يلامس أقسام 
متعددة للحالة ، مطلوب المزيد من العمل قليلاً ، وهو ما سنقوم بهنناقش لاحقًا في 
هذا الفصل.الثبات والحذفومع ذلك ، فإن العديد من الأنظمة التي لا تستخدم نموذجًا من 
مصادر الأحداث تعتمد على الثبات.ity: على سبيل المثال ، يستخدم Datomic هياكل 
بيانات غير قابلة للتغيير للاستعلام عن لقطات من ملفقاعدة البيانات ، بما في ذلك 
لقطات تاريخية من النقاط الماضية في الوقت المناسب (انظر "الفهارس وعزل اللقطة "في 
الصفحة 232 ). أنظمة التحكم في الإصدارات مثل git و Mercurial وتعتمد Fossil أيضًا 
على البيانات غير القابلة للتغيير للحفاظ على محفوظات إصدارات الملفات.أصبح التخزين 
الآن رخيصًا جدًا لدرجة أن الاحتفاظ بجميع الأحداث إلى الأبد يعد خيارًا قابلاً 
للتطبيق للجميع باستثناءأكبر الأنظمة. ومع ذلك ، قد لا تزال هناك ظروف تحتاج 
فيهايجب حذف البيانات حقًا ، على الرغم من كل الثبات. على سبيل المثال ، لوائح 
الخصوصيةقواعد البيانات والجداول | 447

      الصفحة 470
قد يتطلب حذف المعلومات الشخصية للمستخدم بعد أن يغلق حسابه ، أوقد يلزم احتواء 
التسرب العرضي للمعلومات الحساسة.في هذه الظروف ، لا يكفي مجرد إلحاق حدث آخر 
بالسجل بـتشير إلى أنه يجب اعتبار البيانات السابقة محذوفة - فأنت تريد ذلك 
بالفعلأعد كتابة التاريخ وادعي أن البيانات لم تكتب في المقام الأول. إلى عن 
علىسبيل المثال، Datomic تدعو هذه الميزة الختان [53 ] ، ونظام التحكم في إصدار 
Fossiltem لديه مفهوم مماثل يسمى shunning [ 54].من الصعب حقًا حذف البيانات [ 55 ] 
، نظرًا لأن النسخ يمكن أن تعيش في العديد من الأماكن: لـعلى سبيل المثال ، غالبًا 
ما تكتب محركات التخزين وأنظمة الملفات ومحركات أقراص الحالة الثابتة في موقع جديد 
بدلاً من ذلكمن الكتابة في المكان [ 47] ، والنسخ الاحتياطية غالبًا ما تكون غير 
قابلة للتغيير عمدًا قبلتنفيس الحذف العرضي أو الفساد. الحذف هو أكثر من مجرد مسألة 
"جعله أكثر صعوبةلاسترداد البيانات "من مسألة" جعل من المستحيل استرجاع البيانات ". 
نيفوومع ذلك ، فهو مطلوب في بعض الأحيان.تيارات المعالجةلقد تحدثنا حتى الآن في هذا 
الفصل عن مصدر التدفقات (نشاط المستخدمالأحداث ، وأجهزة الاستشعار ، والكتابة في 
قواعد البيانات) ، وقد تحدثنا عن كيفية حدوث التدفقاتالمنقولة (من خلال الرسائل 
المباشرة ، عبر وسطاء الرسائل ، وسجلات الأحداث).ما تبقى هو مناقشة ما يمكنك فعله 
بالبث بمجرد حصولك عليه -أي يمكنك معالجتها. بشكل عام ، هناك ثلاثة خيارات:1. يمكنك 
أخذ البيانات في الأحداث وكتابتها في قاعدة بيانات ، ذاكرة تخزين مؤقت ، فهرس بحثأو 
نظام تخزين مشابه ، حيث يمكن بعد ذلك الاستعلام من قبل عملاء آخرين. كماهو مبين في 
الشكل 11-5، فهذه طريقة جيدة للحفاظ على مزامنة قاعدة البيانات معهاالتغييرات التي 
تحدث في أجزاء أخرى من النظام - خاصة إذا كان الدفقسومر هو العميل الوحيد الذي يكتب 
إلى قاعدة البيانات. الكتابة إلى نظام التخزين هو ملفتدفق مكافئ لما ناقشناه في 
"إخراج تدفقات العمل المجمعة"في الصفحة 398.2. ترسل الأحداث إلى المستخدمين بطريقة 
ما ، على سبيل المثال عن طريق إرسال تنبيهات بالبريد الإلكتروني أودفع الإخطارات ، 
أو عن طريق دفق الأحداث إلى لوحة معلومات في الوقت الحقيقي حيث هميتم تصورها. في 
هذه الحالة ، الإنسان هو المستهلك النهائي للتيار.3. يمكنك معالجة واحد أو أكثر من 
تدفقات الإدخال لإنتاج واحد أو أكثر من المخرجاتتيارات. قد تمر التدفقات عبر خط 
أنابيب يتكون من العديد من هذه المعالجةالمراحل ، قبل أن تنتهي في النهاية عند مخرج 
(الخيار 1 أو 2).في بقية هذا الفصل ، سنناقش الخيار 3: معالجة التدفقات 
للإنتاجتيارات مشتقة أخرى. يُعرف جزء من الكود الذي يعالج تدفقات مثل هذا باسمعامل 
أو وظيفة . يرتبط ارتباطًا وثيقًا بعمليات Unix ووظائف MapReduceناقشنا في الفصل 
العاشر ، ونمط تدفق البيانات مشابه: معالج التدفق448 | الفصل 11: معالجة الدفق

      الصفحة 471
يستهلك تدفقات الإدخال بطريقة للقراءة فقط ، ويكتب مخرجاته إلى ملفالموقع بطريقة 
إلحاق فقط.أنماط التقسيم والتوازي في معالجات التدفق هي أيضًا شديدةعلى غرار 
MapReduce ومحركات تدفق البيانات التي رأيناها في الفصل 10 ، لذلك لن نفعل ذلككرر 
هذا الموضوع هنا. عمليات رسم الخرائط الأساسية مثل التحويل والتصفيةتعمل السجلات 
أيضًا بنفس الطريقة.يتمثل الاختلاف الأساسي الوحيد بين الوظائف المجمعة في أن الدفق 
لا ينتهي أبدًا. هذا الاختلافله العديد من الآثار: كما تمت مناقشته في بداية هذا 
الفصل ، فإن الفرز لا يحدثالإحساس بمجموعة بيانات غير محدودة ، وبالتالي ينضم دمج 
الفرز (راجع "تقليل الصلات الجانبيةوالتجميع "في الصفحة 391 ). آليات التسامح مع 
الخطأ يجب أيضاالتغيير: مع وظيفة المجموعة التي تم تشغيلها لبضع دقائق ، يمكن 
للمهمة الفاشلة أن تفعل ذلكببساطة يمكن إعادة التشغيل من البداية - ولكن مع وظيفة 
البث التي تم تشغيلها‐نينج لعدة سنوات ، قد لا تكون إعادة التشغيل من البداية 
خيارًا قابلاً للتطبيق.استخدامات معالجة الدفقلطالما استخدمت معالجة التدفق لأغراض 
المراقبة ، حيثيريد أن يتم تنبيهه في حالة حدوث أشياء معينة. فمثلا:• تحتاج أنظمة 
الكشف عن الاحتيال إلى تحديد ما إذا كانت أنماط استخدام بطاقة الائتمانتم تغيير 
البطاقة بشكل غير متوقع ، وحظر البطاقة إذا كان من المحتمل أن تكون مسروقة ؛• تحتاج 
أنظمة التداول إلى فحص تغيرات الأسعار في الأسواق المالية وتنفيذهاالصفقات وفقًا 
لقواعد محددة ؛• تحتاج أنظمة التصنيع إلى مراقبة حالة الآلات في المصنع ، وتحديد 
المشكلة بسرعة إذا كان هناك عطل ؛• تحتاج الأنظمة العسكرية والاستخباراتية إلى تتبع 
أنشطة قائد محتملسور ، وأطلق الإنذار إذا كانت هناك علامات على حدوث هجوم.تتطلب هذه 
الأنواع من التطبيقات مطابقة وأنماط متطورة للغاية.نشوئها. ومع ذلك ، ظهرت 
استخدامات أخرى لمعالجة التدفق أيضًا بمرور الوقت. في هذاقسم سنقارن بإيجاز ونقارن 
بعض هذه التطبيقات.معالجة الأحداث المعقدةمعالجة الأحداث المعقدة (CEP) هو نهج تم 
تطويره في التسعينيات للتحليلالأحداث ، وخاصة الموجهة نحو نوع التطبيق الذي يتطلب 
البحث‐جي لأنماط أحداث معينة [ 56، 57 ]. على غرار طريقة التعبير النمطييسمح لك 
بالبحث عن أنماط معينة من الأحرف في سلسلة ، يتيح لك CEP ذلكتحديد قواعد للبحث عن 
أنماط معينة من الأحداث في التدفق.غالبًا ما تستخدم أنظمة CEP لغة استعلام تعريفية 
عالية المستوى مثل SQL أو رسم بياني‐cal ، لوصف نمط الأحداث التي يجب اكتشافها. 
هؤلاءتيارات المعالجة | 449

      صفحة 472
يتم إرسال الاستعلامات إلى محرك معالجة يستهلك تدفقات الإدخال وداخليًا يحتفظ بجهاز 
حالة يقوم بإجراء المطابقة المطلوبة. عندماتم العثور على تطابق ، يصدر المحرك حدثًا 
معقدًا (ومن هنا جاء الاسم) بتفاصيلنمط الحدث الذي تم اكتشافه.في هذه الأنظمة ، يتم 
عكس العلاقة بين الاستعلامات والبيانات مقارنة بـقواعد البيانات العادية. عادةً ما 
تخزن قاعدة البيانات البيانات باستمرار ، وتعامل الاستعلامات على أنهاعابر: عندما 
يأتي طلب بحث ، تبحث قاعدة البيانات عن البيانات المطابقة للاستعلام ،ثم ينسى طلب 
البحث. محركات CEP في الاتجاه المعاكس: الاستعلاماتالمخزنة على المدى الطويل ، 
وتتدفق الأحداث من تدفقات الإدخال باستمرار إلى ما بعد الاستعلام‐بحثًا عن استعلام 
يطابق الحدث.تشمل تطبيقات CEP Esper [ 58] ، IBM InfoSphere Streams [ 59 ] ، Apama 
،TIBCO StreamBase و SQLstream.تحليلات البثمجال آخر تستخدم فيه معالجة التدفق هو 
التحليلات على التدفقات. الالحدود بين CEP وتحليلات البث ضبابية ، ولكن كقاعدة عامة 
، التحليلاتيميل إلى أن يكون أقل اهتمامًا بالعثور على تسلسلات أحداث معينة ، ويكون 
أكثر توجهاًنحو التجميعات والمقاييس الإحصائية على مدى عدد كبير من الأحداث ، 
للاختبار‐التنوير القائل:• قياس معدل نوع من الأحداث (عدد مرات حدوثه لكل فترة 
زمنية) ،• حساب المتوسط ​​المتداول لقيمة على مدى فترة زمنية معينة ، أو• مقارنة 
الإحصاءات الحالية بفترات زمنية سابقة (على سبيل المثال لاكتشاف الاتجاهات ، أو 
لتنبيه بشأن المقاييس المرتفعة أو المنخفضة بشكل غير عادي مقارنةً بنفس الوقت 
الماضيأسبوع).عادةً ما يتم حساب هذه الإحصائيات على فترات زمنية محددة - على سبيل 
المثال ، أنتقد ترغب في معرفة متوسط ​​عدد الاستعلامات في الثانية لإحدى الخدمات 
عبر نطاقالخمس دقائق الأخيرة ، ووقت الاستجابة المئوي 99 خلال تلك الفترة. 
أفراغيخلال بضع دقائق يخفف من التقلبات غير ذات الصلة من ثانية واحدة إلىبعد ذلك ، 
مع الاستمرار في إعطائك صورة في الوقت المناسب لأي تغييرات في نمط حركة المرور. 
الوقتيُعرف الفاصل الزمني الذي تقوم فيه بالتجميع بالنافذة ، وسننظر في winبمزيد من 
التفصيل في "التفكير في الوقت" في الصفحة 452 .تستخدم أنظمة تحليلات التدفق أحيانًا 
خوارزميات احتمالية ، مثل bloom fil‐ters (التي واجهناها في "SSTables و LSM-tree" 
في الصفحة 74) لمجموعة mem‐البرشيب ، HyperLogLog [ 60] لتقدير العلاقة الأساسية ، 
ونسب مئوية مختلفةخوارزميات التقدير (انظر "النسب المئوية في الممارسة" في الصفحة 
14). الخوارزمية الاحتماليةتعطي الإيقاعات نتائج تقريبية ، ولكن لها ميزة أنها 
تتطلب بشكل كبيرذاكرة أقل في معالج البث من الخوارزميات الدقيقة. هذا الاستخدام 
لتقريبتقود خوارزميات نشوئها الناس أحيانًا إلى الاعتقاد بأن أنظمة معالجة التدفق 
كذلك450 | الفصل 11: معالجة الدفق

      صفحة 473
دائما ضياع وغير دقيق ، ولكن هذا خطأ: لا يوجد شيء تقريبي بطبيعتهحول معالجة الدفق 
[61].تم تصميم العديد من أطر معالجة الدفق الموزع مفتوحة المصدر باستخدامlytics في 
الاعتبار: على سبيل المثال ، Apache Storm ، و Spark Streaming ، و Flink ، و 
Concord ، و Samza ،وكافكا تيارات [62 ]. تشمل الخدمات المستضافة Google Cloud 
Dataflow و Azureدفق التحليلات.الحفاظ على وجهات النظر الماديةلقد رأينا في "قواعد 
البيانات والتدفقات" في الصفحة 436 أن هناك تدفقًا من التغييرات على البيانات‐يمكن 
استخدام base للاحتفاظ بأنظمة البيانات المشتقة ، مثل ذاكرات التخزين المؤقت وفهارس 
البحث ومستودعات البيانات ، محدثة بقاعدة بيانات المصدر. يمكننا اعتبار هذه الأمثلة 
على أنهاحالات محددة للحفاظ على طرق العرض الفعلية (راجع "التجميع: مكعبات البيانات 
وآراء مادية "في الصفحة 98 ): اشتقاق طريقة عرض بديلة لبعض مجموعة البيانات ، 
لذلكيمكنك الاستعلام عنها بكفاءة ، وتحديث هذا العرض كلما كان الأساستغيير البيانات 
[ 46 ].وبالمثل ، في حالة الاستعانة بمصادر خارجية ، يتم الحفاظ على حالة التطبيق 
من خلال تطبيق سجلأحداث؛ هنا حالة التطبيق هي أيضًا نوع من العرض المادي. على عكس 
الدفقسيناريوهات التحليلات ، لا يكفي عادة النظر فقط في الأحداث داخل بعضهانافذة 
زمنية: بناء النظرة المجسدة يتطلب كل الأحداث التي حدثت في أي وقت مضى- ربما بعد أن 
يؤدي ضغط السجل إلى تجاهل الأحداث المتقادمة (انظر "ضغط السجل"في الصفحة 441). في 
الواقع ، أنت بحاجة إلى نافذة تمتد على طول طريق العودة إلىبداية الزمن.من حيث 
المبدأ ، يمكن استخدام أي معالج تيار لصيانة العرض الفعلي ،على الرغم من أن الحاجة 
إلى الحفاظ على الأحداث إلى الأبد تتعارض مع افتراضاتبعض الأطر الموجهة نحو 
التحليلات. يدعم Samza و Kafka Streams هذا النوع من ملفاتالاستخدام ، بناءً على 
دعم كافكا لضغط اللوغاريتمات [ 63].البحث في الجداولإلى جانب CEP ، الذي يسمح 
بالبحث عن أنماط تتكون من أحداث متعددة ، هناكهو أيضًا في بعض الأحيان حاجة للبحث 
عن الأحداث الفردية بناءً على معايير معقدة ،مثل استعلامات البحث عن النص 
الكامل.على سبيل المثال ، تشترك خدمات مراقبة الوسائط في خلاصات المقالات الإخبارية 
والبث من وسائل الإعلام ، والبحث عن أي شركات تذكر الأخبار ،المنتجات أو الموضوعات 
ذات الاهتمام. يتم ذلك عن طريق صياغة استعلام بحث مقدمًا ،ثم يطابق باستمرار تدفق 
العناصر الإخبارية مقابل هذا الاستعلام. مماثلتوجد ميزات في بعض مواقع الويب: على 
سبيل المثال ، يمكن لمستخدمي مواقع الويب العقارية أن يطلبوهايتم إعلامك عند ظهور 
خاصية جديدة تطابق معايير البحث الخاصة بهم على mar‐كيت.تيارات المعالجة | 451

      صفحة 474
تقوم محركات البحث التقليدية أولاً بفهرسة المستندات ثم تشغيل الاستعلامات عبر 
ملففهرس. على النقيض من ذلك ، فإن البحث في التدفق يقلب المعالجة رأساً على عقب: 
الاستعلاماتيتم تخزينها ، وتتجاوز المستندات الاستعلامات. في أبسط الحالات ، يمكنك 
اختباركل مستند مقابل كل استعلام ، على الرغم من أن هذا يمكن أن يصبح بطيئًا إذا 
كان لديك حجم كبيرعدد الاستفسارات. لتحسين العملية ، من الممكن فهرسة الاستعلامات 
أيضًاكمستندات ، وبالتالي تضييق نطاق مجموعة الاستعلامات التي قد تتطابق [64 
].تمرير الرسالة و RPCفي "تدفق البيانات رسالة عابرة" في الصفحة 132 ناقشنا أنظمة 
تمرير الرسالة كمابديلاً لـ RPC ، أي كآلية لتواصل الخدمات ، على النحو المستخدم 
فيالمثال في نموذج الممثل. على الرغم من أن هذه الأنظمة تعتمد أيضًا على الرسائل 
والأحداث ، لا نفكر فيها عادةً على أنها معالجات تدفق:• أطر الفاعل هي في المقام 
الأول آلية لإدارة التزامن والتنفيذ الموزع لوحدات الاتصال ، في حين أن معالجة 
الدفق هيفي المقام الأول آلية إدارة البيانات.• الاتصال بين الجهات الفاعلة غالبا 
ما يكون سريع الزوال وواحد لواحد ، بينماسجلات الأحداث دائمة ومتعددة المشتركين.• 
يمكن للجهات الفاعلة التواصل بطرق عشوائية (بما في ذلك الطلب والاستجابة 
الدوريةأنماط) ، ولكن عادةً ما يتم إعداد معالجات التيار في خطوط الأنابيب غير 
الدورية حيثكل تيار هو ناتج وظيفة معينة ، ومشتق من تعريف جيدمجموعة من تيارات 
الإدخال.ومع ذلك ، هناك بعض المناطق المتقاطعة بين الأنظمة المشابهة لـ RPC و 
Stream pro‐التوقف. على سبيل المثال ، يحتوي Apache Storm على ميزة تسمى RPC 
الموزعة ، والتييسمح باستنباط استفسارات المستخدم إلى مجموعة من العقد التي تعالج 
أيضًا تدفقات الأحداث ؛يتم بعد ذلك تشذير هذه الاستعلامات مع الأحداث من تدفقات 
الإدخال ، ويمكن النتائجيتم تجميعها وإعادتها إلى المستخدم [65]. من الممكن أيضًا 
إنشاء بث مباشرالدوافع فوق أطر الممثلين ، على الرغم من أن الأمر يستحق فحص التسامح 
مع الخطأيضمن أن هذا النهج يمكن أن توفره.التفكير في الوقتغالبًا ما تحتاج معالجات 
الدفق إلى التعامل مع الوقت ، خاصةً عند استخدامها للتحليلاتالأغراض ، التي غالبًا 
ما تستخدم نوافذ زمنية مثل "الدقائق الخمس الأخيرة". قد يبدوأن معنى "الدقائق الخمس 
الأخيرة" يجب أن يكون واضحًا وواضحًا ، ولكنللأسف الفكرة صعبة بشكل مدهش.في عملية 
الدُفعات ، تتغلب مهام المعالجة بسرعة من خلال مجموعة كبيرة من ملفاتالأحداث 
التاريخية. في حالة الحاجة إلى حدوث نوع من التفصيل حسب الوقت ،سيحتاج إلى إلقاء 
نظرة على الطابع الزمني المضمن في كل حدث. ليس هناك نقطة فيبالنظر إلى ساعة النظام 
الخاصة بالآلات التي تقوم بتشغيل عملية الدُفعات ، نظرًا لأن452 | الفصل 11: معالجة 
الدفق

      الصفحة 475
الوقت الذي يتم فيه تشغيل العملية ليس له علاقة بوقت الأحداثحدث بالفعل.قد تقرأ 
عملية الدُفعات أحداثًا تاريخية بقيمة عام في غضون بضع دقائق ؛ فيفي معظم الحالات ، 
يكون الجدول الزمني للاهتمام هو عام التاريخ ، وليس الدقائق القليلة من pro‐التوقف. 
علاوة على ذلك ، فإن استخدام الطابع الزمني في الأحداث يسمح للمعالجةحتمية: تشغيل 
نفس العملية مرة أخرى على نفس المدخلات يؤدي إلى نفس النتيجةنتيجة (انظر "التسامح 
مع الخطأ" في الصفحة 410 ).من ناحية أخرى ، تستخدم العديد من أطر معالجة الدفق ساعة 
النظام المحليةعلى آلة المعالجة ( وقت المعالجة ) لتحديد النوافذ [ 66]. هذهيتميز 
النهج بأنه بسيط ، ومن المعقول إذا كان التأخير بينهماإنشاء الحدث ومعالجة الأحداث 
قصيرة بشكل مهم. ومع ذلك ، فإنه ينهار إذاهناك أي تأخر كبير في المعالجة ، أي إذا 
كانت المعالجة قد تحدث بشكل ملحوظبعد وقت وقوع الحدث بالفعل.وقت الحدث مقابل وقت 
المعالجةهناك العديد من الأسباب التي قد تؤدي إلى تأخير المعالجة: أعطال الشبكة 
(راجع قسم "Unreli‐"شبكات قادرة "في الصفحة 269) ، مشكلة في الأداء تؤدي إلى الخلاف 
في mesوسيط أو معالج حكيم ، أو إعادة تشغيل للمستهلك ، أو إعادة المعالجة 
السابقةالأحداث (راجع "إعادة قراءة الرسائل القديمة" في الصفحة 436 ) أثناء التعافي 
من خطأ ، أوبعد إصلاح الخلل في الكود.علاوة على ذلك ، يؤدي تأخير الرسائل أيضًا إلى 
ترتيب غير متوقع للرسائل. من أجل الإختبار-ple ، على سبيل المثال ، يقوم المستخدم 
أولاً بتقديم طلب ويب واحد (يتم التعامل معه بواسطة خادم الويب A) ، وثم طلبًا 
ثانيًا (يتم التعامل معه بواسطة الخادم B). A و B تنبعث منها أحداث تصفالطلبات التي 
عولجوا عليها ، لكن حدث B يصل إلى وسيط الرسائل قبل حدث Aهل. الآن ستشاهد معالجات 
الدفق الحدث B أولاً ثم الحدث A ، حتىعلى الرغم من أنها حدثت بالفعل بالترتيب 
المعاكس.إذا كان من المفيد إجراء تشبيه ، ففكر في أفلام حرب النجوم: تم إصدار 
الحلقة الرابعةعام 1977 ، الحلقة الخامسة عام 1980 ، والحلقة السادسة عام 1983 ، 
تليها الحلقات الأولى والثانية والثالثةفي الأعوام 1999 و 2002 و 2005 على التوالي 
، والحلقة السابعة في 2015 [ 67]. إذا شاهدت ملفالأفلام بترتيب ظهورها ، الترتيب 
الذي قمت بمعالجة الأفلام به هويتعارض مع ترتيب روايتهم. (رقم الحلقة يشبه 
الحدثtimestamp ، والتاريخ الذي شاهدت فيه الفيلم هو وقت المعالجة.)البشر ، نحن 
قادرون على التعامل مع مثل هذه الانقطاعات ، ولكن معالجة الدفق الخوارزميةيجب كتابة 
الإيقاعات خصيصًا لتلائم مثل هذا التوقيت والترتيبمسائل.يؤدي الخلط بين وقت الحدث 
ووقت المعالجة إلى بيانات سيئة. على سبيل المثال ، قل لكلديك معالج تدفق يقيس معدل 
الطلبات (بحساب عددطلبات في الثانية). إذا قمت بإعادة نشر معالج الدفق ، فقد يتم 
إيقاف تشغيله لملفدقيقة ، ومعالجة تراكم الأحداث عندما يعود. إذا قمت بقياسعلى أساس 
وقت المعالجة ، سيبدو كما لو كان هناك شذوذ مفاجئتيارات المعالجة | 453

      الصفحة 476
زيادة الطلبات أثناء معالجة التراكم ، بينما في الواقع المعدل الحقيقي للطلباتكان 
ثابتًا ( الشكل 11-7).الوقتقاعدة بيانات للانترنتمعالج تيارإعادة التشغيلمعدل كما 
تم قياسهمن خلال وقت المعالجةمعدل الطلب الفعلي100100الشكل 11-7. يقدم التعرق حسب 
وقت المعالجة القطع الأثرية بسبب الاختلافات فيمعدل المعالجة.تعرف عندما تكون 
جاهزًاهناك مشكلة صعبة عند تحديد النوافذ من حيث وقت الحدث وهي أنك لا تستطيع ذلك 
أبدًاتأكد من تلقيك جميع الأحداث الخاصة بنافذة معينة ، أو ما إذا كانلا تزال هناك 
بعض الأحداث القادمة.على سبيل المثال ، لنفترض أنك تقوم بتجميع الأحداث في نوافذ 
مدتها دقيقة واحدة ، حتى تتمكن من ذلكحساب عدد الطلبات في الدقيقة. لقد قمت بحساب 
بعض الأحداثمع الطوابع الزمنية التي تقع في الدقيقة 37 من الساعة ، ثم يتحرك 
الوقتفي ، والآن تقع معظم الأحداث القادمة في غضون الدقيقة 38 و 39 منساعة. متى 
تعلن أنك انتهيت من النافذة في الدقيقة 37 ،وإخراج قيمته العداد؟بشكل عام ، من 
المستحيل أن تتأكد من أنك قد تلقيت جميع الأحداث من أجل الفوز‐داو. يمكنك مهلة 
وإعلان أن النافذة جاهزة بعد عدم رؤية أي نافذة جديدةالأحداث لفترة من الوقت ، ولكن 
لا يزال من الممكن أن يتم تخزين بعض الأحداث مؤقتًا في أخرىالجهاز في مكان ما ، 
والذي لا يمكن إرساله بعد بسبب انقطاع الشبكة ، ولكنوالتي ستظهر لاحقًا.إذا كنت 
تستخدم النوافذ بناءً على الطوابع الزمنية للأحداث ، فيجب أن تكون قادرًا على 
التعامل معهامثل هذه الأحداث المتطرفة التي تصل بعد الإعلان عن اكتمال النافذة 
بالفعل.بشكل عام ، لديك خياران [ 1 ]:454 | الفصل 11: معالجة الدفق

      صفحة 477
1. تجاهل الأحداث المتطرفة ، لأنها على الأرجح نسبة صغيرة من الأحداث فيالظروف 
العادية. يمكنك تتبع عدد الأحداث التي تم إسقاطها كمقياس ،وتنبيه إذا بدأت في إسقاط 
كمية كبيرة من البيانات.2. إعادة حساب قيمة النافذة مع المتطرفين المدرجة ، وإصدار 
aالتصحيح بنشر القيمة المحدثة (ربما سحب القيمة السابقة‐ضع أولاً).في بعض الحالات ، 
من الممكن استخدام علامة مائية منخفضة للإشارة إلى أشياء مثل "من الآنلن يكون هناك 
المزيد من الرسائل ذات الطابع الزمني قبل t "، ويجب أن يكونسومرز ينتظرون العلامة 
المائية كمؤشر على أن النافذة جاهزة [ 68 ]. كيف-على الإطلاق ، إذا تم إنشاء 
الطوابع الزمنية من قبل العملاء ، فلا يمكنك التأكد مما إذا كان لا يزال هناكأي 
أحداث معلقة في مكان ما في النظام ، لذا فإن المتطرفين (مع طابع زمني أقدممن 
العلامة المائية المنخفضة) لا تزال ممكنة.لمن تستخدم الساعة ، على أي حال؟يعد تعيين 
الطوابع الزمنية للأحداث أكثر صعوبة عندما يمكن تخزين الأحداث مؤقتًا فيعدة نقاط في 
النظام. على سبيل المثال ، ضع في اعتبارك تطبيقًا للجوّال يُبلغ عن الأحداثلمقاييس 
الاستخدام إلى الخادم. يمكن استخدام التطبيق أثناء عدم الاتصال بالإنترنت ، وفي هذه 
الحالة سيتم استخدامهتخزين الأحداث مؤقتًا محليًا على الجهاز ، وإرسالها إلى الخادم 
عند اتصال الإنترنتnection هو متاح بعد ذلك (ساعات أو أيام لاحقة). لأي مستهلكين 
لهذا الدفق ، فإنستظهر الأحداث على أنها متطرفة متأخرة للغاية.في هذا السياق ، يجب 
أن يكون الطابع الزمني للأحداث هو الوقت الذي يكون فيه ملفحدث تفاعل المستخدم ، 
وفقًا للساعة المحلية للجهاز المحمول. ومع ذلك ، فإنغالبًا لا يمكن الوثوق بالساعة 
الموجودة على جهاز يتحكم فيه المستخدم ، حيث قد يكون ذلك عرضيًا أواضبط بشكل متعمد 
على الوقت الخطأ (راجع "مزامنة الساعة ودقتها" على الصفحة281). وقت استلام الخادم 
للحدث (وفقًا لـساعة الخادم) من المرجح أن تكون دقيقة ، ولكنها أقل أهمية من حيث 
الوصف‐جي تفاعل المستخدم.لضبط ساعات الجهاز غير الصحيحة ، تتمثل إحدى الطرق في 
تسجيل ثلاثة طوابع زمنية [ 69]:• الوقت الذي وقع فيه الحدث ، وفقًا لساعة الجهاز ؛• 
الوقت الذي تم فيه إرسال الحدث إلى الخادم ، وفقًا لساعة الجهاز ؛• الوقت الذي تم 
فيه استقبال الحدث بواسطة الخادم ، وفقًا للخادمساعة.يتيح لك ذلك تقدير الإزاحة بين 
ساعة الجهاز وساعة الخادم(بافتراض أن تأخير الشبكة ضئيل مقارنة بالطابع الزمني 
المطلوبracy) ، وبالتالي تقدير الوقت الحقيقي الذي حدث فيه الحدث بالفعل (على 
افتراضلا تتغير إزاحة ساعة الجهاز بين وقت وقوع الحدث والوقت الذي تم إرساله إلى 
الخادم).تيارات المعالجة | 455

      صفحة 478
هذه المشكلة ليست فريدة من نوعها لمعالجة الدفق - معالجة الدُفعات تعاني منهابالضبط 
نفس المشكلة. هو فقط أكثر وضوحا في سياق التدفق ، حيث نحنأكثر وعيا بمرور 
الوقت.أنواع النوافذبمجرد أن تعرف كيف يجب تحديد الطابع الزمني لحدث ما ، فإن 
الخطوة التاليةهو تحديد كيفية تحديد النوافذ عبر الفترات الزمنية. يمكن للنافذة بعد 
ذلكتستخدم للتجميعات ، على سبيل المثال لحساب الأحداث ، أو لحساب متوسطالقيم داخل 
النافذة. هناك عدة أنواع من النوافذ شائعة الاستخدام [66 ،70 ]:نافذة هبوطالنافذة 
المتدحرجة لها طول ثابت ، وكل حدث ينتمي إلى حدث واحد بالضبطنافذة او شباك. على 
سبيل المثال ، إذا كان لديك نافذة تقلب مدتها دقيقة واحدة ، فستكون جميع الأحداثمع 
الطوابع الزمنية بين 10:03:00 و 10:03:59 مجمعة في نافذة واحدة ،الأحداث بين الساعة 
10:04:00 و 10:04:59 في النافذة التالية ، وهكذا. أنتيمكن تنفيذ نافذة تراجع مدتها 
دقيقة واحدة عن طريق أخذ طابع زمني لكل حدثوتقريبها لأقرب دقيقة.نافذة القفزنافذة 
التنقل أيضًا لها طول ثابت ، ولكنها تسمح للنوافذ بالتداخلمن أجل توفير بعض 
التنعيم. على سبيل المثال ، نافذة مدتها 5 دقائق مع قفزةحجم دقيقة واحدة سيحتوي على 
الأحداث بين 10:03:00 و 10:07:59 ، إذنستغطي النافذة التالية الأحداث بين 10:04:00 
و 10:08:59 ، وهكذا.يمكنك تنفيذ نافذة التنقل هذه عن طريق حساب هبوط لمدة دقيقة 
واحدة أولاًالنوافذ ، ثم تتجمع على عدة نوافذ متجاورة.نافذة منزلقةتحتوي النافذة 
المنزلقة على جميع الأحداث التي تحدث خلال فترة زمنية معينة لكل منهاآخر. على سبيل 
المثال ، ستغطي نافذة منزلقة مدتها 5 دقائق الأحداث في الساعة 10:03:39و 10:08:12 ، 
لأن المسافة بينهما أقل من 5 دقائق (لاحظ أن التقليب ولم تكن النوافذ التي تبلغ 
مدتها 5 دقائق ستؤدي إلى وضع هذين الحدثين في نفس الوضعنافذة ، لأنها تستخدم حدودًا 
ثابتة). يمكن تنفيذ نافذة منزلقة بواسطةالاحتفاظ بمخزن الأحداث مرتبة حسب الوقت ، 
وإزالة الأحداث القديمة عند حدوثهاتنتهي من النافذة.نافذة الجلسةعلى عكس أنواع 
النوافذ الأخرى ، لا تحتوي نافذة الجلسة على مدة محددة. في حين أن،يتم تعريفه من 
خلال تجميع جميع الأحداث التي تحدث عن كثب لنفس المستخدممعًا في الوقت المناسب ، 
وتنتهي النافذة عندما يكون المستخدم غير نشط للبعضالوقت (على سبيل المثال ، إذا لم 
تكن هناك أحداث لمدة 30 دقيقة). الجلسة هيمطلب مشترك لتحليلات موقع الويب (انظر 
"GROUP BY" في الصفحة 394 ).456 | الفصل 11: معالجة الدفق

      الصفحة 479
دفق ينضمناقشنا في الفصل العاشر كيف يمكن للوظائف المجمعة أن تنضم إلى مجموعات 
البيانات حسب المفتاح ، وكيف يمكن ذلكالصلات جزء مهم من خطوط أنابيب البيانات. منذ 
معالجة الدفق يعمم البياناتخطوط الأنابيب للمعالجة الإضافية لمجموعات البيانات غير 
المحدودة ، هناك نفس الشيء تمامًابحاجة للانضمام في التدفقات.ومع ذلك ، فإن حقيقة 
أن الأحداث الجديدة يمكن أن تظهر في أي وقت في بث يجعل الانضمام مستمرًاتدفقات أكثر 
صعوبة من الوظائف المجمعة. لفهم الوضع بشكل أفضل ، دعناالتمييز بين ثلاثة أنواع 
مختلفة من الانضمام: تيار تيار ينضم، جدول تيار ينضم، وينضم الجدول الجدول [71]. في 
الأقسام التالية سوف نوضح كل منها على سبيل المثال.دفق دفق الانضمام (نافذة 
الانضمام)لنفترض أن لديك ميزة بحث على موقع الويب الخاص بك ، وأنت تعمل على 
تحسينترتيب نتائج البحث. في كل مرة يكتب فيها شخص ما استعلام بحث ، تقوم بتسجيل حدث 
ماتحتوي على الاستعلام وعادت النتائج. في كل مرة ينقر شخص ما على أحد ملفاتنتائج 
البحث ، تقوم بتسجيل حدث آخر يسجل النقرة. من أجل حسابنسبة النقر إلى الظهور لكل 
نتيجة بحث ، فأنت بحاجة إلى جمع الأحداث معًا لـإجراء البحث وإجراء النقر ، 
المرتبطان من خلال نفس الجلسةالهوية [ 72 ].قد لا تأتي النقرة أبدًا إذا تخلى 
المستخدم عن بحثه ، وحتى إذا حدث ، فإن ملفقد يكون الوقت بين البحث والنقرة متغيرًا 
بدرجة كبيرة: في كثير من الحالات قد يحدث ذلكبضع ثوانٍ ، ولكن قد تصل إلى أيام أو 
أسابيع (إذا أجرى المستخدم بحثًا ،ينسى علامة تبويب المتصفح ، ثم يعود إلى علامة 
التبويب وينقر على نتيجة مافي وقت لاحق). نظرًا لتأخيرات الشبكة المتغيرة ، قد يصل 
حدث النقر قبل ملفحدث البحث. يمكنك اختيار نافذة مناسبة للانضمام - على سبيل المثال 
، يمكنك ذلكاختر الانضمام إلى نقرة مع بحث إذا كانت المسافة بينهما ساعة واحدة على 
الأكثر.لاحظ أن تضمين تفاصيل البحث في حدث النقر لا يعادلالانضمام إلى الأحداث: 
سيخبرك ذلك فقط بالحالات التي نقر فيها المستخدم على ملفنتيجة البحث ، ولكن ليس عن 
عمليات البحث التي لم ينقر فيها المستخدم على أيٍّ من ملفاتالنتائج. لقياس جودة 
البحث ، تحتاج إلى معدلات نقر دقيقة ، لـالتي تحتاجها كلاً من أحداث البحث وأحداث 
النقر.لتنفيذ هذا النوع من الانضمام ، يحتاج معالج الدفق إلى الحفاظ على الحالة : 
للاختبار‐ple ، جميع الأحداث التي وقعت في آخر ساعة ، مفهرسة بواسطة معرّف الجلسة. 
كلما أحدث البحث أو حدث النقر ، تتم إضافته إلى الفهرس المناسب ، وكذلكيتحقق الفهرس 
الآخر لمعرفة ما إذا كان حدث آخر لنفس معرف الجلسة قد تم بالفعلوصل.تيار الجدول 
الانضمام (دفق التخصيب)في "مثال: تحليل أحداث نشاط المستخدم" في الصفحة 392 ( الشكل 
10-2 ) رأينامثال على وظيفة مجمعة تضم مجموعتي بيانات: مجموعة من أحداث نشاط 
المستخدم وبيانات‐تيارات المعالجة | 457

      صفحة 480
قاعدة ملفات تعريف المستخدمين. من الطبيعي التفكير في أحداث نشاط المستخدم على أنها 
تيار ، ولأداء نفس الصلة على أساس مستمر في معالج التدفق: الإدخال هو أدفق من أحداث 
النشاط يحتوي على معرف المستخدم ، والمخرجات عبارة عن دفق غنيأحداث النشاط التي تم 
فيها زيادة معرف المستخدم بمعلومات الملف الشخصيعن المستخدم.لإجراء هذه الصلة ، 
تحتاج عملية البث إلى إلقاء نظرة على حدث نشاط واحد في كل مرة ،ابحث عن معرف مستخدم 
الحدث في قاعدة البيانات ، وأضف معلومات الملف الشخصي إلىحدث النشاط. يمكن تنفيذ 
البحث في قاعدة البيانات عن طريق الاستعلام عن جهاز تحكم عن بعدقاعدة البيانات؛ ومع 
ذلك ، كما تمت مناقشته في"مثال: تحليل أحداث نشاط المستخدم" على الصفحة392، من 
المحتمل أن يكون هذا بطيئًا ، وقد يؤدي إلى زيادة التحميل على قاعدة البيانات 
البعيدة [ 63].هناك طريقة أخرى تتمثل في تحميل نسخة من قاعدة البيانات في معالج 
الدفق ، بحيث يكونيمكن الاستعلام عنها محليًا بدون شبكة ذهابًا وإيابًا. هذا مشابه 
جدًا لـتنضم التجزئة التي ناقشناها في "صلات جانب الخريطة" في الصفحة 396: النسخة 
المحلية من البيانات‐قد يكون base جدول تجزئة في الذاكرة إذا كان صغيرًا بدرجة 
كافية ، أو فهرسًا محليًاالقرص.يتمثل الاختلاف في الوظائف المجمعة في أن الوظيفة 
الدفعية تستخدم لقطة في الوقت المناسب لملفقاعدة البيانات كمدخلات ، في حين أن 
معالج الدفق يعمل لفترة طويلة ، ومحتوياتمن المحتمل أن تتغير قاعدة البيانات بمرور 
الوقت ، لذلك يجب تغيير النسخة المحلية من البياناتيتم تحديثها باستمرار. يمكن حل 
هذه المشكلة عن طريق تغيير التقاط البيانات: البث المباشريمكن لـ cessor الاشتراك 
في تغيير قاعدة بيانات ملفات التعريف بالإضافة إلى تدفق ملفاتأحداث النشاط. عند 
إنشاء ملف تعريف أو تعديله ، يتم تحديث معالج الدفقنسختها المحلية.وصلة 
الجدول-الجدول (صيانة العرض المحققة)ضع في اعتبارك مثال الجدول الزمني لتويتر الذي 
ناقشناه في "وصف الحمل"الصفحة 9 . قلنا أنه عندما يريد المستخدم عرض الجدول الزمني 
لبلده ، يكون ذلك مكلفًا جدًا‐sive للتكرار على جميع الأشخاص الذين يتابعهم 
المستخدم ، والعثور على تغريداتهم الأخيرة ، ودمجهم.بدلاً من ذلك ، نريد ذاكرة 
تخزين مؤقت للخط الزمني: نوع من "البريد الوارد" لكل مستخدم يتم إرسال التغريدات 
إليهمكتوبة كما تم إرسالها ، بحيث تكون قراءة المخطط الزمني عملية بحث واحدة. 
يتجسدويتطلب الحفاظ على ذاكرة التخزين المؤقت هذه معالجة الحدث التالية:• عند 
المستخدم ش يرسل تغريدة جديدة، تتم إضافتها إلى الجدول الزمني للكل مستخدم الذي 
هويتبع ش .• عندما يحذف المستخدم تغريدة ، تتم إزالتها من جميع الجداول الزمنية 
للمستخدمين.• عند المستخدم ش 1 يبدأ العضو التالي ش 2 ، تويت الأخيرة ش 2 تضاف إلى 
ش 1 الصورة قت-خط.• عندما يقوم المستخدم u 1 بإلغاء متابعة المستخدم u 2 ، تتم 
إزالة التغريدات التي كتبها u 2 من المخطط الزمني لـ u 1 .458 | الفصل 11: معالجة 
الدفق

      صفحة 481
ثانيا. إذا كنت تعتبر الدفق مشتقًا من جدول ، كما فيالشكل 11-6 ، واعتبر الواصلة 
حاصل ضرب اثنينالجداول u · v ، يحدث شيء مثير للاهتمام: يتبع تدفق التغييرات على 
الصلة المحققة المنتجالقاعدة ( u · v ) ′ = u ′ v + uv ′. بالكلمات: كلما تغيرت 
التغريدات ، يتم ضمها إلى ما يليها الحالي ، ومتىمن أي وقت مضى التغيير التالي ، 
فإنه ينضم إلى التغريدات الحالية [45، 46].لتنفيذ صيانة ذاكرة التخزين المؤقت هذه 
في معالج دفق ، تحتاج إلى تدفقات منأحداث التغريدات (الإرسال والحذف) ولعلاقات 
المتابعة (التالية وغير متابع). تحتاج عملية الدفق إلى الحفاظ على قاعدة بيانات 
تحتوي على مجموعةالمتابعون لكل مستخدم ، حتى يعرف الجداول الزمنية التي يجب تحديثها 
عند أوصول تغريدة جديدة [ 73].هناك طريقة أخرى للنظر إلى عملية التدفق هذه وهي أنها 
تحافظ على رؤية محسوسةلاستعلام يضم جدولين (تغريدات وما يليها) ، شيء من هذا 
القبيل:يتبع SELECT . Follower_id AS timeline_id ،array_agg ( tweets . * ORDER BY 
tweets . timestamp DESC )من التغريداتJOIN يلي ON التالي . Followee_id = تغريدات 
. هوية المرسليتبع GROUP BY . Follower_idتتطابق صلة التدفقات مباشرة مع صلة 
الجداول في هذا الاستعلام.تعد المخططات الزمنية بمثابة ذاكرة تخزين مؤقت لنتيجة هذا 
الاستعلام بشكل فعال ، حيث يتم تحديثها في كل مرة يتم فيها تحديث ملفتغيير الجداول 
الأساسية. ثانياالاعتماد على الوقت من الصلاتالأنواع الثلاثة للانضمام أعلاه (تيار 
، تيار ، جدول وجدول) لديها الكثيرمشترك: كلهم ​​يحتاجون إلى معالج الدفق للحفاظ 
على بعض الحالة (البحث وانقر فوق الأحداث أو ملفات تعريف المستخدمين أو قائمة 
المتابعين) بناءً على إدخال انضمام واحد والاستعلام عن ذلكالحالة على الرسائل من 
إدخال الانضمام الآخر.ترتيب الأحداث التي تحافظ على الدولة مهم (يهم ما إذا كنتاتبع 
أولاً ثم ألغ المتابعة ، أو العكس). في سجل مقسم ، فإن ملفيتم الاحتفاظ بترتيب 
الأحداث داخل قسم واحد ، ولكن عادةً لا يوجدطلب الضمان عبر تيارات أو أقسام 
مختلفة.يثير هذا سؤالاً: إذا حدثت أحداث في مجموعات بث مختلفة في وقت مماثل تقريبًا 
، فيأي طلب يتم معالجتها؟ في مثال الانضمام إلى جدول الدفق ، إذا قام المستخدم 
بالتحديثملفهم الشخصي ، أي أحداث النشاط التي يتم ضمها إلى الملف الشخصي القديم 
(تمت معالجتها من قبلتحديث الملف الشخصي) ، والتي يتم ضمها إلى ملف التعريف الجديد 
(تتم معالجتها بعد ملفتحديث الملف الشخصي)؟ بعبارة أخرى: إذا تغيرت الحالة بمرور 
الوقت ، وانضممت إلى البعضالدولة ، ما هي النقطة الزمنية التي تستخدمها للانضمام [ 
41]؟إذا كان ترتيب الأحداث عبر التدفقات غير محدد ، تصبح الصلة غير-حتمية ، مما 
يعني أنه لا يمكنك إعادة تشغيل نفس الوظيفة على نفس المدخلات والحصول بالضرورة على 
نفس النتيجة: الأحداث على تدفقات الإدخال قد تكون متداخلة فيبطريقة مختلفة عند 
تشغيل الوظيفة مرة أخرى. من الممكن أن يقوم معالج الدفق بالتسجيلتيارات المعالجة | 
459

      صفحة 482
تشذير الرسائل [ 74] ، ولكن هذا وحده لا يكفي عند التعافي منكما سنرى في القسم 
التالي.التسامح مع الخطأفي القسم الأخير من هذا الفصل ، دعنا نفكر في كيفية تحمل 
معالجات الدفقفوالق. لقد رأينا في الفصل 10 أن أطر المعالجة الدفعية يمكن أن تتسامح 
مع الأخطاءبسهولة إلى حد ما: إذا فشلت مهمة في وظيفة MapReduce ، يمكن ببساطة أن 
تبدأ مرة أخرىجهاز آخر ، ويتم تجاهل ناتج المهمة الفاشلة. هذا ممكنلأن ملفات 
الإدخال غير قابلة للتغيير ، تكتب كل مهمة إخراجها إلى ملف منفصل علىHDFS ، ولا 
يصبح الإخراج مرئيًا إلا عند اكتمال المهمة بنجاح.على وجه الخصوص ، يضمن نهج 
الدُفعات للتسامح مع الخطأ أن ناتجالوظيفة المجمعة هي نفسها كما لو لم يحدث خطأ ، 
حتى لو فشلت بعض المهام في الواقع.يبدو كما لو أن كل سجل إدخال تمت معالجته مرة 
واحدة بالضبط - لا توجد سجلاتتم تخطيه ، ولا تتم معالجة أي منها مرتين. على الرغم 
من إعادة تشغيل المهام يعني أن السجلاتقد تتم معالجتها في الواقع عدة مرات ، فإن 
التأثير المرئي في الإخراج يبدو كما لو كانواتمت معالجته مرة واحدة فقط ، وهو مبدأ 
يُعرف باسم الدلالات مرة واحدة تمامًا .تنشأ نفس مشكلة التسامح مع الخطأ في معالجة 
الدفق ، ولكنها أقل وضوحًاوارد للتعامل معه: الانتظار حتى تنتهي المهمة قبل جعل 
ناتجها مرئيًا ليس كذلكخيار ، لأن الدفق لا نهائي وبالتالي لا يمكنك إنهاء معالجته 
أبدًا.Microbatching ونقاط التفتيشيتمثل أحد الحلول في تقسيم الدفق إلى كتل صغيرة ، 
ومعاملة كل كتلة مثل الحد الأدنىعملية دفعة iature. هذا النهج يسمى microbatching ، 
ويستخدم في Sparkالجري [ 75 ]. حجم الدفعة عادة حوالي ثانية واحدة ، وهو أداءحل 
وسط: الدُفعات الأصغر تتطلب جدولة وتنسيقًا أكبر ،بينما تعني الدُفعات الأكبر 
تأخيرًا أطول قبل نتائج معالج الدفقتصبح مرئية.يوفر Microbatching ضمنيًا أيضًا 
نافذة هبوط مساوية لحجم الدُفعة(تم وضع إطارات حسب وقت المعالجة ، وليس الطوابع 
الزمنية للحدث) ؛ أي وظائف تتطلب أكبرتحتاج النوافذ إلى نقل الحالة صراحةً من 
microbatch إلى التي تليها.طريقة متغيرة ، مستخدمة في Apache Flink ، تقوم بشكل 
دوري بإنشاء نقاط تفتيش متدرجةالدولة ويكتبها للتخزين الدائم [ 76، 77]. إذا تعطل 
مشغل الدفق ، فإنهيمكن إعادة التشغيل من أحدث نقطة فحص له ، وتجاهل أي ناتج تم 
إنشاؤهبين آخر نقطة تفتيش والاصطدام. الحواجز تشغلها الحواجزفي تدفق الرسائل ، على 
غرار الحدود بين microbatch ، ولكن بدونفرض حجم نافذة معين.ضمن حدود إطار معالجة 
الدفق ، فإن microbatching وتوفر مناهج نقاط التفتيش نفس الدلالات مرة واحدة تمامًا 
مثل عملية الدُفعات‐عمل. ومع ذلك ، بمجرد خروج الإخراج من معالج الدفق (على سبيل 
المثال ، عن طريق الكتابة460 | الفصل 11: معالجة الدفق

      صفحة 483
إلى قاعدة بيانات أو إرسال رسائل إلى وسيط رسائل خارجي أو إرسال رسائل بريد 
إلكتروني) ،لم يعد إطار العمل قادرًا على تجاهل إخراج دفعة فاشلة.في هذه الحالة ، 
تؤدي إعادة تشغيل مهمة فاشلة إلى حدوث تأثير جانبي خارجي مرتين ،و microbatching أو 
نقاط التفتيش وحدها لا تكفي لمنع هذه المشكلة.إعادة النظر في الالتزام الذريلإعطاء 
مظهر المعالجة مرة واحدة تمامًا في ظل وجود أخطاء ،نحن بحاجة إلى التأكد من أن جميع 
المخرجات والآثار الجانبية لمعالجة الحدث سارية المفعول إذاوفقط إذا نجحت المعالجة. 
تتضمن هذه التأثيرات أي رسائل مرسلة إلىمشغلي المصب أو أنظمة المراسلة الخارجية 
(بما في ذلك البريد الإلكتروني أو إشعار الدفع‐الكاتيونات) ، وتكتب أي قاعدة بيانات 
، وأي تغييرات تطرأ على حالة المشغل ، وأي إقرارمنة رسائل الإدخال (بما في ذلك نقل 
تعويض المستهلك إلى الأمام في السجل-وسيط الرسائل القائم).كل هذه الأشياء إما أن 
تحدث بشكل ذري ، أو لا يجب أن يحدث أي منها ، لكنيجب ألا يخرجوا عن المزامنة مع 
بعضهم البعض. إذا كان هذا النهج يبدو مألوفًا ، فهو كذلكلأننا ناقشناها في "معالجة 
الرسائل لمرة واحدة بالضبط" في الصفحة 351 في الجزء العلوينص المعاملات الموزعة 
والالتزام على مرحلتين.ناقشنا في الفصل 9 المشاكل في التنفيذ التقليدي 
للخلافات.المعاملات الجزئية ، مثل XA. ومع ذلك ، في البيئات الأكثر تقييدًا هو 
كذلكمن الممكن تنفيذ مرفق الالتزام الذري هذا بكفاءة. هذا النهجالمستخدمة في Google 
Cloud Dataflow [68 ، 76] ، وهناك خطط لإضافة ميزات مماثلة إلىأباتشي كافكا [ 78]. 
النهج يعتمد على كتابة المعاملة الالتزام باعتبارها واحدةكائن إلى مخزن بيانات 
متسامح مع الخطأ ، حيث يمكن جعل كتابة كائن واحد ذريةبسهولة إلى حد ما (انظر "يكتب 
كائن واحد" في الصفحة 221).العاطفةهدفنا هو تجاهل المخرجات الجزئية لأي مهام فاشلة 
، بحيث يمكن أن تكون بأمانأعدت المحاولة مرتين دون أن تصبح نافذة المفعول. 
المعاملات الموزعة هي إحدى طرق تحقيقهاهذا الهدف ، ولكن طريقة أخرى هي الاعتماد على 
العاطفة [ 79].العملية الخاملة هي العملية التي يمكنك إجراؤها عدة مرات ، ولها 
الامتدادنفس التأثير كما لو قمت بتنفيذها مرة واحدة فقط. على سبيل المثال ، تعيين 
مفتاح في قيمة مفتاحتخزين بعض القيمة الثابتة يكون خاملًا (كتابة القيمة مرة أخرى 
يؤدي ببساطة إلى الكتابة فوقذات قيمة متطابقة) ، في حين أن زيادة العداد ليست عديمة 
الفعالية(إجراء الزيادة مرة أخرى يعني زيادة القيمة مرتين).حتى لو لم تكن العملية 
خاملة بشكل طبيعي ، فمن الممكن في كثير من الأحيان جعلها غير فعالةمع القليل من 
البيانات الوصفية الإضافية. على سبيل المثال ، عند استهلاك الرسائل من كافكا ،كل 
رسالة لها إزاحة مستمرة ومتزايده بشكل رتيب. عند كتابة قيمةإلى قاعدة بيانات خارجية 
، يمكنك تضمين إزاحة الرسالة التي أدت إلى تشغيل ملفتيارات المعالجة | 461

      صفحة 484
آخر كتابة مع القيمة. وبالتالي ، يمكنك معرفة ما إذا كان التحديث قد تم بالفعلمطبق 
، وتجنب إجراء نفس التحديث مرة أخرى.يعتمد التعامل الحكومي في Storm's Trident على 
فكرة مماثلة [ 65 ]. يعتمد علىيتضمن idempotence عدة افتراضات: إعادة تشغيل مهمة 
فاشلة يجب أن تعيد تشغيلنفس الرسائل بنفس الترتيب (يقوم وسيط الرسائل المستند إلى 
السجل بهذا) ، العملية‐يجب أن تكون حتمية ، ولا يجوز لأي عقدة أخرى تحديثها بشكل 
متزامنالقيمة [80 ].عند الفشل من عقدة معالجة إلى أخرى ، قد يكون من الضروري إقامة 
سياج (انظر"القائد والقفل" في الصفحة 293) لمنع التداخل من عقدةيعتقد أنه ميت ولكنه 
في الواقع على قيد الحياة. على الرغم من كل تلك المحاذير ، فإن الأوبرا عاطلةيمكن 
أن تكون الدلالات طريقة فعالة لتحقيق الدلالات مرة واحدة تمامًا باستخدام قيمة 
صغيرة فقطتكاليف غير مباشرة.إعادة بناء الدولة بعد الفشلأي عملية دفق تتطلب حالة - 
على سبيل المثال ، أي تجميعات ذات إطارات(مثل العدادات والمتوسطات والمدرج 
التكراري) وأي جداول وفهارس مستخدمة للصلات- يجب التأكد من إمكانية استعادة هذه 
الحالة بعد الفشل.أحد الخيارات هو الاحتفاظ بالحالة في مخزن بيانات بعيد وتكرارها ، 
على الرغم من (مثلتمت مناقشته في "رابط جدول الدفق (إثراء الدفق)" في الصفحة 457 ) 
مع ضرورة الاستعلام عن أقاعدة البيانات البعيدة لكل رسالة فردية يمكن أن تكون 
بطيئة. الخيار الأفضل هو الاحتفاظ بهاالحالة المحلية لمعالج الدفق ، وتكرارها بشكل 
دوري. ثم ، عندماتيار المعالج يتعافى من فشل ، يمكن للمهمة الجديدة قراءة 
منسوخةالحالة ، واستئناف المعالجة دون فقدان البيانات.على سبيل المثال ، يلتقط 
Flink بشكل دوري لقطات لحالة المشغل ويكتبهالتخزين دائم مثل HDFS [76 ، 77 ] ؛ 
سامزا وكافكا تيارات يكرران الحالةالتغييرات عن طريق إرسالها إلى موضوع كافكا 
المخصص مع ضغط السجل ، على غرارتغيير التقاط البيانات [71 ، 81].في بعض الحالات ، 
قد لا يكون من الضروري حتى تكرار الحالة ، لأنه يمكن أن يكون كذلكأعيد بناؤها من 
تدفقات الإدخال. على سبيل المثال ، إذا كانت الدولة تتكون من تجميعات أكثرنافذة 
قصيرة إلى حد ما ، قد تكون سريعة بما يكفي لإعادة تشغيل أحداث الإدخال بشكل 
صحيحsponding إلى تلك النافذة. إذا كانت الحالة نسخة متماثلة محلية لقاعدة بيانات ، 
يتم الاحتفاظ بها بواسطةتغيير التقاط البيانات ، يمكن أيضًا إعادة بناء قاعدة 
البيانات من التغيير المضغوط بالسجلتيار (راجع "ضغط السجل" في الصفحة 441 ).ملخصلقد 
ناقشنا في هذا الفصل تدفقات الأحداث ، والأغراض التي تخدمها وكيفية ذلكمعالجتها. في 
بعض النواحي ، تشبه معالجة الدفق إلى حد كبير معالجة الدُفعاتناقشناها في الفصل 10 
، لكننا فعلنا ذلك بشكل مستمر بلا حدود (لا تنتهي أبدًا)462 | الفصل 11: معالجة 
الدفق

      صفحة 485
دفق بدلاً من إدخال بحجم ثابت. من هذا المنظور ، وسطاء الرسائل وتعمل سجلات الأحداث 
كمكافئ متدفق لنظام ملفات.لقد أمضينا بعض الوقت في مقارنة نوعين من وسيط 
الرسائل:وسطاء الرسائل على غرار AMQP / JMSيقوم الوسيط بتعيين رسائل فردية 
للمستهلكين ، ويقر المستهلكونحافة الرسائل الفردية عندما يتم معالجتها بنجاح. 
رسائليتم حذفها من الوسيط بمجرد الاعتراف بها. هذا النهجمناسب كنموذج غير متزامن لـ 
RPC (راجع أيضًا "بيانات تمرير الرسائلتدفق "في الصفحة 132 ) ، على سبيل المثال في 
قائمة انتظار المهام ، حيث الترتيب الدقيق للوظائفالمعالجة الحكيمة ليست مهمة ، 
وحيث لا توجد حاجة للعودة والقراءةالرسائل القديمة مرة أخرى بعد معالجتها.وسطاء 
الرسائل المستندة إلى السجليقوم الوسيط بتعيين كافة الرسائل الموجودة في القسم لنفس 
عقدة المستهلك ، ويسلم الرسائل بنفس الترتيب دائمًا. يتم تحقيق التوازي من خلال 
par‐titioning ، ويقوم المستهلكون بتتبع تقدمهم عن طريق تحديد الإزاحة لـآخر رسالة 
قاموا بمعالجتها. يحتفظ الوسيط بالرسائل على القرص ، لذا فهو كذلكمن الممكن القفز 
للخلف وإعادة قراءة الرسائل القديمة إذا لزم الأمر.النهج القائم على السجل له أوجه 
تشابه مع سجلات النسخ الموجودة في قواعد البيانات (انظرالفصل 5) ومحركات تخزين منظم 
السجل (انظر الفصل 3 ). رأينا أن هذاالنهج مناسب بشكل خاص لأنظمة معالجة التدفق 
التي تستهلك المدخلاتتدفقات وتوليد الحالة المشتقة أو تدفقات الإخراج المشتقة.من 
حيث مصدر التدفقات ، ناقشنا عدة احتمالات: نشاط المستخدمالأحداث وأجهزة الاستشعار 
التي توفر قراءات دورية وموجزات البيانات (مثل بيانات السوق بتنسيقالمالية) يتم 
تمثيلها بشكل طبيعي كتدفقات. رأينا أنه يمكن أن يكون مفيدًا أيضًافكر في عمليات 
الكتابة إلى قاعدة البيانات على أنها تدفق: يمكنها التقاط سجل التغيير ، أيتاريخ 
جميع التغييرات التي تم إجراؤها على قاعدة البيانات ، إما ضمنيًا من خلال التقاط 
بيانات التغييرأو صراحةً من خلال تحديد مصادر الأحداث. يسمح ضغط السجل للتيار 
بالاحتفاظ بملفنسخة كاملة من محتويات قاعدة البيانات.إن تمثيل قواعد البيانات 
كتدفقات يفتح فرصًا قوية للتكاملالأنظمة. يمكنك الاحتفاظ بأنظمة البيانات المشتقة 
مثل فهارس البحث وذاكرة التخزين المؤقت و ana‐يتم تحديث أنظمة lytics باستمرار عن 
طريق استهلاك سجل التغييرات والتطبيقمنهم إلى النظام المشتق. يمكنك حتى بناء طرق 
عرض جديدة على البيانات الموجودة من خلالبدءًا من نقطة الصفر واستهلاك سجل 
التغييرات من البدايةالطريق إلى الحاضر.التسهيلات الخاصة بالحفاظ على الحالة 
كتدفقات وإعادة تشغيل الرسائل هي أيضًاأساسًا للتقنيات التي تمكّن دفق الصلات 
والتسامح مع الخطأ في مختلفأطر معالجة الدفق. ناقشنا عدة أغراض لمعالجة الدفق ،بما 
في ذلك البحث عن أنماط الأحداث (معالجة الأحداث المعقدة) ، وحوسبة winملخص | 463

      صفحة 486
التجميعات المتدفقة (تحليلات التدفق) ، والحفاظ على أنظمة البيانات المشتقة 
محدثة(آراء محققة).ناقشنا بعد ذلك صعوبات التفكير في الوقت في معالج التدفق ،بما في 
ذلك التمييز بين وقت المعالجة والطوابع الزمنية للحدث ، ومشكلة التعامل مع الأحداث 
المتطرفة التي تصل بعد أن فكرت في نافذتككان كاملا.قمنا بتمييز ثلاثة أنواع من الضم 
التي قد تظهر في عمليات الدفق:تيار ينضممطابقة حدثين يقعان خلال فترة زمنية معينة - 
على سبيل المثال ، حدثانالإجراءات التي اتخذها نفس المستخدم في غضون 30 دقيقة من 
بعضها البعض.ينضم تيار الجدوليتكون أحد دفق الإدخال من أحداث النشاط ، بينما يتكون 
الآخر من تغيير قاعدة البيانات‐سجل. يحتفظ سجل التغيير بنسخة محلية من قاعدة 
البيانات محدثة أثناء النشاطتقوم الأحداث بالاستعلام عن قاعدة البيانات وإخراج حدث 
نشاط غني.ينضم الجدول الجدولكلا تدفقات الإدخال هي تغييرات قاعدة البيانات. في هذه 
الحالة ، كل تغيير على واحدالجانب مع أحدث حالة من الجانب الآخر. والنتيجة هي دفق 
منتغييرات في العرض الفعلي للجدولين.أخيرًا ، ناقشنا تقنيات تحقيق التسامح مع الخطأ 
ومرة ​​واحدة بالضبطدلالات في معالج تيار. كما هو الحال مع معالجة الدُفعات ، نحتاج 
إلى تجاهل ملفالإخراج الجزئي لأية مهام فاشلة. ومع ذلك ، نظرًا لأن عملية الدفق 
تستغرق وقتًا طويلاًوتنتج مخرجات بشكل مستمر ، لا يمكننا ببساطة تجاهل كل المخرجات. 
بدلا من ذلك ، أيمكن استخدام آلية الاسترداد الدقيقة ، بناءً على microbatching ، 
ونقطة التفتيش‐جي ، المعاملات ، أو يكتب المثقفين.مراجع[1 ] تايلر أكيداو وروبرت 
برادشو وكريغ تشامبرز وآخرون: "نموذج تدفق البيانات:نهج عملي لتحقيق التوازن بين 
الدقة والكمون والتكلفة على نطاق واسع ،معالجة البيانات غير المحدودة وغير المقيدة 
، " إجراءات وقف VLDB ،المجلد 8 ، العدد 12 ، الصفحات 1792-1803 ، أغسطس 2015. دوى: 
10.14778 / 2824032.2824076[2] هارولد أبيلسون ، وجيرالد جاي سوسمان ، وجولي 
سوسمان: الهيكل و Interpre‐برامج الحاسب الآلي، الطبعة الثانية. مطبعة معهد 
ماساتشوستس للتكنولوجيا ، يوليو 1996. ISBN:9780262510875 ، عبر الإنترنت على 
mitpress.mit.edu.[3] جوزيف إم هيلرشتاين ومايكل ستونبراكر: قراءات في أنظمة قواعد 
البيانات ،الطبعة الرابعة. مطبعة معهد ماساتشوستس للتكنولوجيا ، يناير 2005. ISBN: 
978-0-262-69314-1 ، أحمر‐book.cs.berkeley.edu.464 | الفصل 11: معالجة الدفق

      صفحة 487
[4 ] دون كارني وأوغور تشيتينتميل وميتش تشيرنياك وآخرون: "مراقبة التيارات - أفئة 
جديدة من تطبيقات إدارة البيانات، "في المؤتمر الدولي الثامن والعشرين بتاريخقواعد 
بيانات كبيرة جدًا (VLDB) ، أغسطس 2002.[5 ] فيسينت مارتي: "Brubeck ، مجمع مقاييس 
متوافق مع statsd ، "githubengineer‐ing.com ، 15 يونيو 2015.[6 ] سيث لوينبرغر: 
"مواصفات بروتوكول MoldUDP64 الإصدار 1.00 ، "NASDAQtrader.com ، يوليو 2009.[7] 
بيتر Hintjens: ZeroMQ - الدليل. O'Reilly Media ، مارس 2013. 
ISBN:978-1-4493-3404-8 ، عبر الإنترنت على zguide.zeromq.org.[8 ] إيان مالباس: 
"قياس أي شيء ، قياس كل شيء، "codeascraft.com ، 15 فبراير‐يناير 2011.[9 ] ديتر 
بليتينك: "25 الجرافيت و grafana و statsd مسكوتك ”blog.raintank.io ، 3مارس 
2016.[10 ] جيف ليندسي: "روابط الويب لإحداث ثورة في الويب، "progrium.com ، 3 أيار 
(مايو) 2007.[11 ] جيم إن جراي: "قوائم الانتظار هي قواعد بيانات، "تقرير Microsoft 
Research الفنيMSR-TR-95-56 ، ديسمبر 1995.[12 ] ماثيو ساكمان: "دفع العودة 
"lshift.net، 5 مايو 2016.[13] مارك هابنر ، ريتش بوريدج ، راهول شارما وآخرون: " 
JSR-343 Java Message Ser‐Vice (JMS) 2.0 Specification "، jms-spec.java.net ، 
آذار (مارس) 2013.[14 ] سانجاي أياغاري ، ماثيو آروت ، مارك أتويل وآخرون: "AMQP: 
متقدم Mes‐مواصفات بروتوكول قائمة الانتظار sage، "الإصدار 0-9-1 ، تشرين الثاني 
(نوفمبر) 2008.[15] " وثائق أباتشي كافكا 0.9، "kafka.apache.org ، تشرين الثاني 
(نوفمبر) 2015.[16] جاي كريبس ونيها ناركهيد وجون راو: " كافكا: نظام الرسائل 
الموزعة‐tem لمعالجة السجل "، في ورشة العمل الدولية السادسة حول الشبكات تلتقي 
بالبيانات‐قواعد (NetDB) ، يونيو 2011.[17] " دليل مطور Amazon Kinesis Streams " ، 
docs.aws.amazon.com ، أبريل 2016.[18 ] لي ستيوارت وسيجي جو: "إنشاء 
DistributedLog: Twitter's high-خدمة سجل منسوخة الأداء، blog.twitter.com ، 16 
سبتمبر 2015.[19] “ وثائق DistributedLog، Twitter Inc. ، Distriblog.io ، أيار 
(مايو) 2016.[20] جاي كريبس: " قياس أباتشي كافكا: 2 مليون كتاب في الثانية (Onثلاث 
آلات رخيصة) ، "engineering.linkedin.com ، ٢٧ أبريل ٢٠١٤.[21] Kartik Paramasivam: 
" كيف نقوم بتحسين وتطوير كافكا فيLinkedIn ، "engineering.linkedin.com ، 2 سبتمبر 
2015.ملخص | 465

      صفحة 488
[22] جاي كريبس: " السجل: ما يجب أن يعرفه كل مهندس برمجيات عن الوقت الفعليتجريد 
موحد للبيانات ، "engineering.linkedin.com ، 16 كانون الأول (ديسمبر) 2013.[23 ] 
شيرشانكا داس ، شافدار بوتيف ، كابيل سورليكر وآخرون: "الكل على متن 
البيانات‐أوتوبيس! ، "في ندوة ACM الثالثة حول الحوسبة السحابية (SoCC) ، تشرين 
الأول (أكتوبر) 2012.[24] Yogeshwer Sharma و Philippe Ajoux و Petchean Ang 
وآخرون: " الثقب الدودي : موثوقPub-Sub لدعم خدمات الإنترنت التي يتم نسخها 
جغرافيًا ، "في ندوة USENIX الثانية عشرةبشأن تصميم وتنفيذ الأنظمة الشبكية (NSDI) 
، مايو 2015.[25 ] PPS Narayan: "تحديث شيربا، "developer.yahoo.com ، 8 حزيران 
(يونيو) 2010.[26] مارتن كليبمان: " المياه المعبأة في زجاجات: تكامل في الوقت 
الفعلي لـ PostgreSQL وكافكا، "martin.kleppmann.com ، 23 نيسان (أبريل) 2015.[27] 
بن أوشيروف: " تقديم Maxwell ، معالج mysql-to-kafka binlog ،" 
devel‐oper.zendesk.com ، 20 أغسطس 2015.[28 ] راندال هوش:تم إصدار Debezium 0.2.1 
"، debezium.io ، 10 يونيو 2016.[29] " Mongoriver، "Stripe، Inc. ، github.com ، 
أيلول (سبتمبر) 2014.[30] دان هارفي: " تغيير التقاط البيانات مع مونجو + كافكا، في 
Hadoop Usersمجموعة المملكة المتحدة ، أغسطس 2015.[31 ] "Oracle GoldenGate 12c: 
الوصول في الوقت الفعلي إلى المعلومات في الوقت الفعلي ، "Oracleمستند تقني ، مارس 
2015.[32] “ أساسيات Oracle GoldenGate: كيف يعمل Oracle GoldenGate،" 
وحيCorporation ، youtube.com ، تشرين الثاني (نوفمبر) 2012.[33] سلافا أخميشت: " 
تطوير الويب الحقيقي " ، rethinkdb.com ، 27 يناير2015.[34 ] "توثيق قاعدة بيانات 
Firebase Realtime، "Google Inc. ، firebase.google.com ،مايو 2016.[35] “ Apache 
CouchDB 1.6 Documentation ،” docs.couchdb.org، 2014.[36 ] مات ديبيرغاليس: 
"Meteor 0.7.0: استعلامات قاعدة بيانات قابلة للتطوير باستخدام سجل MongoDBبدلاً من 
الاستطلاع والمقارنة ، "info.meteor.com ، 17 كانون الأول (ديسمبر) 2013.[37] نيها 
ناركيده: الإعلان عن اتصال كافكا: بناء زمن انتقال منخفض على نطاق واسعخطوط أنابيب 
البيانات ، "confluent.io ، 18 شباط (فبراير) 2016.[38 ] جريج يونج:CQRS و Event 
Sourcing "، في Code on the Beach ، أغسطس 2014.[39] مارتن فاولر: " مصادر الأحداث 
" ، martinfowler.com ، 12 ديسمبر 2005.[40] فون فيرنون: تنفيذ تصميم يحركه المجال. 
أديسون ويسلي بروفيسsional ، فبراير 2013. ISBN: 0321834577466 | الفصل 11: معالجة 
الدفق

      صفحة 489
[41] HV Jagadish و Inderpal Singh Mumick و Abraham Silberschatz: “ View 
Main‐مشكلات الصيانة لنموذج بيانات الوقائع "، في المركز الرابع عشر لـ ACM 
SIGACT-SIGMOD-ندوة SIGART حول مبادئ أنظمة قواعد البيانات (PODS) ، الصفحات 
113-124 ، مايو1995. دوى: 10.1145 / 212433.220201[42 ] "وثائق متجر الأحداث 3.5.0، 
"Event Store LLP ، docs.geteventstore.com ،فبراير 2016.[43] مارتن كليبمان: 
التفكير في معالجة الدفق. أورايلي ميديا ​​، مايو2016.[44 ] ساندر ماك:معماريات 
مصدر الحدث مع عكا "، في JavaOne ، سبتمبر2014.[45] جوليان هايد: اتصال شخصي، يونيو 
2016.[46] أشيش غوبتا وإنديربال سينغ موميك: المشاهدات المحققة : الأساليب 
،التطبيقات والتطبيقات . مطبعة معهد ماساتشوستس للتكنولوجيا ، مايو 1999. ISBN: 
9780262571227[47] بات هيلاند: " الثبات يغير كل شيء " في المؤتمر السابع الذي يعقد 
مرة كل سنتين بتاريخأبحاث نظم البيانات المبتكرة (CIDR) ، يناير 2015.[48 ] مارتن 
كليبمان:محاسبة علماء الحاسوب، martin.klepp‐mann.com ، 7 مارس 2011.[49] بات 
هيلاند: " المحاسبون لا يستخدمون المحايات " blogs.msdn.com ، 14 يونيو 2007.[50] 
Kartik Paramasivam: " مشاكل معالجة الدفق الصعبة - الجزء 1: القتللامدا، 
"engineering.linkedin.com ، 27 حزيران (يونيو) 2016.[51] مارتن فاولر: " CQRS " ، 
martinfowler.com ، 14 يوليو 2011.[52 ] جريج يونج:وثائق CQRS، 
"cqrs.files.wordpress.com ، تشرين الثاني (نوفمبر) 2010.[53] " موارد تطوير 
البيانات: الختان " Cognitect، Inc، docs.datomic.com.[54] " التوثيق الأحفوري: حذف 
المحتوى من الأحفوري، "fossil-scm.org ، 2016.[55 ] جاي كريبس:المفارقة في الأنظمة 
الموزعة هي أن فقدان البيانات أمر سهل حقًا ولكنمن الصعب بشكل مدهش حذف 
البيانات.twitter.com ، 30 مارس 2015.[56 ] ديفيد سي لوكهام: "ما هو الفرق بين ESP 
و CEP؟ مجمعvents.com ، 1 أغسطس 2006.[57] سريناث بيريرا: " كيف تتم معالجة الدفق 
ومعالجة الأحداث المعقدة (CEP)مختلف؟ ، "quora.com ، 3 كانون الأول (ديسمبر) 
2015.[58] " Esper Reference، Version 5.4.0 ،" EsperTech Inc.، espertech.com ، 
أبريل 2016.[59] زبير نبي ، وإريك بوييه ، وأندرو بينبريدج ، وكريس توماس: " Of 
Streamsand Storms ، "تقرير IBM الفني ، developer.ibm.com ، أبريل 2014.ملخص | 467

      صفحة 490
[60] فيليب فلاجوليه ، وإريك فوسي ، وأوليفييه غاندوي ، وفريديريك مونييه: " 
HyperLo‐gLog: تحليل خوارزمية تقدير العلاقة الأساسية شبه المثالية ، "في المؤتمرفي 
تحليل الخوارزميات (AofA) ، الصفحات 137-156 ، يونيو 2007.[61 ] جاي كريبس:التشكيك 
في معمارية لامدا، ”oreilly.com ، 2 يوليو 2014.[62] إيان هيلستروم: “ نظرة عامة 
على تقنيات دفق أباتشي،" قاعدة البيانات-line.wordpress.com ، 12 مارس 2016.[63] 
جاي كريبس: " لماذا تعتبر الدولة المحلية أمرًا بدائيًا أساسيًا في معالجة البث " 
،oreilly.com ، 31 يوليو 2014.[64] آلان وودوارد ومارتن كليبمان: " البحث عن نص 
كامل في الوقت الفعلي باستخدام Luwakوسامزا ، "martin.kleppmann.com ، 13 أبريل 
2015.[65] " Apache Storm 1.0.1 الوثائق، "storm.apache.org ، أيار (مايو) 
2016.[66] تايلر أكيداو: " العالم ما بعد الدفعة: Streaming 102 " ، oreilly.com ، 
20 يناير2016.[67] ستيفان أوين: " دفق التحليلات مع Apache Flink " في قمة كافكا ، 
أبريل2016.[68 ] تايلر أكيداو وأليكس باليكوف وكايا بيكير أوغلو وآخرون: 
"MillWheel: خطأ-متسامحدفق المعالجة على نطاق الإنترنت، "في المؤتمر الدولي التاسع 
والثلاثين حول كبير جدًاقواعد البيانات (VLDB) ، الصفحات 734-746 ، أغسطس 2013.[69] 
أليكس دين: " تحسين فهم Snowplow للوقت، snowplowanalyt‐ics.com ، 15 سبتمبر 
2015.[70] " Windowing (Azure Stream Analytics)، "مرجع Microsoft Azure 
،msdn.microsoft.com ، أبريل 2016.[71 ] "إدارة الدولة، "وثائق Apache Samza 0.10 ، 
samza.apache.org ،ديسمبر 2015.[72] راجاجوبال أنانثانارايانان ، فينكاتيش باسكر ، 
سوميت داس وآخرون: " الفوتون:الانضمام المتسامح مع الأخطاء والقابل للتطوير لتدفقات 
البيانات المستمرة، "في ACM Interna‐المؤتمر الإقليمي لإدارة البيانات (SIGMOD) ، 
يونيو 2013. doi:10.1145 / 2463676.2465272[73] مارتن كليبمان: " Samza newsfeed 
demo، "github.com ، أيلول (سبتمبر) 2014.[74 ] بن كيروين:القيام بالمستحيل: أنماط 
الرسائل بالضبط مرة واحدة في كافكا ، "ben.kirw.in ، 28 نوفمبر 2014.[75] ماتي 
زهاريا ، تاتاغاتا داس ، هاويوان لي ، سكوت شينكر ، وإيون ستويكا: " ديسو "تدفقات 
cretized: نموذج فعال ومتحمل للخطأ لمعالجة البث علىمجموعات كبيرة، "في مؤتمر 
USENIX الرابع في موضوعات ساخنة في الحوسبة السحابية (Hot‐Cloud) ، يونيو 2012.468 
| الفصل 11: معالجة الدفق

      صفحة 491
[76 ] كوستاس تزوماس وستيفان إوين وروبرت ميتزجر: "إنتاجية عالية ومنخفضةزمن الوصول 
، ومعالجة البث مرة واحدة تمامًا باستخدام Apache Flink ، "data-artisans.com ، 
5أغسطس 2015.[77] باريس كاربوني ، جيولا فورا ، ستيفان إوين ، سيف الحريدي ، كوستاس 
تزوماس:"لقطات غير متزامنة خفيفة الوزن لتدفقات البيانات الموزعة، arXiv: 
1506.08603[cs.DC] ، 29 يونيو 2015.[78] فلافيو جونكويرا: " فهم الدلالات التي لمرة 
واحدة بالضبط " في ستراتا + هادوبلندن العالمية ، يونيو 2016.[79 ] بات 
هيلاند:العاطفة ليست حالة طبية، " اتصالاتACM ، المجلد 55 ، العدد 5 ، الصفحة 56 ، 
مايو 2012. دوى: 10.1145 / 2160718.2160734[80] جاي كريبس: " إعادة: محاولة تحقيق 
سلوك حتمي عند الاسترداد / الترجيع ،"إرسال بريد إلكتروني إلى القائمة البريدية 
samza-dev ، 9 سبتمبر 2014.[81 ] آدم ورسكي:كافكا تيارات - كيف تتناسب مع أرض 
معالجة التيار‐سكيب؟ ، "softwaremill.com ، 1 حزيران (يونيو) 2016.ملخص | 469النص 
الأصلي
المساهمة بترجمة أفضل




